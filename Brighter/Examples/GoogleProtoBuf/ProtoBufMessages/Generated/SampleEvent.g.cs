// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SampleEvent.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Brighter.Example.Messages {

  /// <summary>Holder for reflection information generated from SampleEvent.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class SampleEventReflection {

    #region Descriptor
    /// <summary>File descriptor for SampleEvent.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SampleEventReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFTYW1wbGVFdmVudC5wcm90bxIPQnJpZ2h0ZXJFeGFtcGxlIpUBCgtTYW1w",
            "bGVFdmVudBIXCg9FdmVudElkZW50aWZpZXIYASABKAUSOwoITWVzc2FnZXMY",
            "AiADKAsyKS5CcmlnaHRlckV4YW1wbGUuU2FtcGxlRXZlbnQuRXZlbnRQYXls",
            "b2FkEg8KB1N1bW1hcnkYAyABKAkaHwoMRXZlbnRQYXlsb2FkEg8KB21lc3Nh",
            "Z2UYASABKAlCHKoCGUJyaWdodGVyLkV4YW1wbGUuTWVzc2FnZXNiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::Brighter.Example.Messages.SampleEvent), global::Brighter.Example.Messages.SampleEvent.Parser, new[]{ "EventIdentifier", "Messages", "Summary" }, null, null, new pbr::GeneratedCodeInfo[] { new pbr::GeneratedCodeInfo(typeof(global::Brighter.Example.Messages.SampleEvent.Types.EventPayload), global::Brighter.Example.Messages.SampleEvent.Types.EventPayload.Parser, new[]{ "Message" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  This message will have Brighter integration code generated for it because it ends in "Event"
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SampleEvent : pb::IMessage<SampleEvent> {
    private static readonly pb::MessageParser<SampleEvent> _parser = new pb::MessageParser<SampleEvent>(() => new SampleEvent());
    public static pb::MessageParser<SampleEvent> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Brighter.Example.Messages.SampleEventReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SampleEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SampleEvent(SampleEvent other) : this() {
      eventIdentifier_ = other.eventIdentifier_;
      messages_ = other.messages_.Clone();
      summary_ = other.summary_;
    }

    public SampleEvent Clone() {
      return new SampleEvent(this);
    }

    /// <summary>Field number for the "EventIdentifier" field.</summary>
    public const int EventIdentifierFieldNumber = 1;
    private int eventIdentifier_;
    public int EventIdentifier {
      get { return eventIdentifier_; }
      set {
        eventIdentifier_ = value;
      }
    }

    /// <summary>Field number for the "Messages" field.</summary>
    public const int MessagesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Brighter.Example.Messages.SampleEvent.Types.EventPayload> _repeated_messages_codec
        = pb::FieldCodec.ForMessage(18, global::Brighter.Example.Messages.SampleEvent.Types.EventPayload.Parser);
    private readonly pbc::RepeatedField<global::Brighter.Example.Messages.SampleEvent.Types.EventPayload> messages_ = new pbc::RepeatedField<global::Brighter.Example.Messages.SampleEvent.Types.EventPayload>();
    public pbc::RepeatedField<global::Brighter.Example.Messages.SampleEvent.Types.EventPayload> Messages {
      get { return messages_; }
    }

    /// <summary>Field number for the "Summary" field.</summary>
    public const int SummaryFieldNumber = 3;
    private string summary_ = "";
    public string Summary {
      get { return summary_; }
      set {
        summary_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SampleEvent);
    }

    public bool Equals(SampleEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventIdentifier != other.EventIdentifier) return false;
      if(!messages_.Equals(other.messages_)) return false;
      if (Summary != other.Summary) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (EventIdentifier != 0) hash ^= EventIdentifier.GetHashCode();
      hash ^= messages_.GetHashCode();
      if (Summary.Length != 0) hash ^= Summary.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (EventIdentifier != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EventIdentifier);
      }
      messages_.WriteTo(output, _repeated_messages_codec);
      if (Summary.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Summary);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (EventIdentifier != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventIdentifier);
      }
      size += messages_.CalculateSize(_repeated_messages_codec);
      if (Summary.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Summary);
      }
      return size;
    }

    public void MergeFrom(SampleEvent other) {
      if (other == null) {
        return;
      }
      if (other.EventIdentifier != 0) {
        EventIdentifier = other.EventIdentifier;
      }
      messages_.Add(other.messages_);
      if (other.Summary.Length != 0) {
        Summary = other.Summary;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EventIdentifier = input.ReadInt32();
            break;
          }
          case 18: {
            messages_.AddEntriesFrom(input, _repeated_messages_codec);
            break;
          }
          case 26: {
            Summary = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SampleEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class EventPayload : pb::IMessage<EventPayload> {
        private static readonly pb::MessageParser<EventPayload> _parser = new pb::MessageParser<EventPayload>(() => new EventPayload());
        public static pb::MessageParser<EventPayload> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::Brighter.Example.Messages.SampleEvent.Descriptor.NestedTypes[0]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public EventPayload() {
          OnConstruction();
        }

        partial void OnConstruction();

        public EventPayload(EventPayload other) : this() {
          message_ = other.message_;
        }

        public EventPayload Clone() {
          return new EventPayload(this);
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 1;
        private string message_ = "";
        public string Message {
          get { return message_; }
          set {
            message_ = pb::Preconditions.CheckNotNull(value, "value");
          }
        }

        public override bool Equals(object other) {
          return Equals(other as EventPayload);
        }

        public bool Equals(EventPayload other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Message != other.Message) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (Message.Length != 0) hash ^= Message.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Message.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Message);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Message.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
          }
          return size;
        }

        public void MergeFrom(EventPayload other) {
          if (other == null) {
            return;
          }
          if (other.Message.Length != 0) {
            Message = other.Message;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Message = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
