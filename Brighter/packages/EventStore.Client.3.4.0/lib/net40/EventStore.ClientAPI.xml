<?xml version="1.0"?>
<doc>
  <assembly>
    <name>EventStore.ClientAPI</name>
  </assembly>
  <members>
    <member name="T:EventStore.ClientAPI.AllCheckpoint">
      <summary>
            This class contains constants to be used when setting up subscriptions
            using the  <see cref="M:EventStore.ClientAPI.IEventStoreConnection.SubscribeToAllFrom(System.Nullable{EventStore.ClientAPI.Position},System.Boolean,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32)" /> method on
            <see cref="T:EventStore.ClientAPI.IEventStoreConnection" />.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.AllCheckpoint.AllStart">
      <summary>
            Indicates that a catch-up subscription should receive all events
            in the database.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.AllEventsSlice">
      <summary>
            The result of a read operation from the $all stream.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.AllEventsSlice.ReadDirection">
      <summary>
            The direction of read request.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.AllEventsSlice.FromPosition">
      <summary>
            A <see cref="T:EventStore.ClientAPI.Position" /> representing the position where this slice was read from.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.AllEventsSlice.NextPosition">
      <summary>
            A <see cref="T:EventStore.ClientAPI.Position" /> representing the position where the next slice should be read from.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.AllEventsSlice.Events">
      <summary>
            The events read.
            </summary>
    </member>
    <member name="P:EventStore.ClientAPI.AllEventsSlice.IsEndOfStream">
      <summary>
            A boolean representing whether or not this is the end of the $all stream.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.ClientOperations.MaximumSubscribersReachedException">
      <summary>
            Thrown when max subscribers is set on subscription and it has been reached
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.ClientOperations.MaximumSubscribersReachedException.#ctor">
      <summary>
            Constructs a <see cref="T:EventStore.ClientAPI.ClientOperations.MaximumSubscribersReachedException"></see></summary>
    </member>
    <member name="T:EventStore.ClientAPI.ClientOperations.PersistentSubscriptionDeletedException">
      <summary>
            Thrown when the persistent subscription has been deleted to subscribers connected to it
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.ClientOperations.PersistentSubscriptionDeletedException.#ctor">
      <summary>
            Constructs a <see cref="T:EventStore.ClientAPI.ClientOperations.PersistentSubscriptionDeletedException"></see></summary>
    </member>
    <member name="T:EventStore.ClientAPI.ILogger">
      <summary>
            Simple abstraction of a logger.
            </summary>
      <remarks>
            You can pass your own logging abstractions into the Event Store Client API. Just pass 
            in your own implementation of <see cref="T:EventStore.ClientAPI.ILogger" /> when constructing your client connection.
            </remarks>
    </member>
    <member name="M:EventStore.ClientAPI.ILogger.Error(System.String,System.Object[])">
      <summary>
            Writes an error to the logger
            </summary>
      <param name="format">Format string for the log message.</param>
      <param name="args">Arguments to be inserted into the format string.</param>
    </member>
    <member name="M:EventStore.ClientAPI.ILogger.Error(System.Exception,System.String,System.Object[])">
      <summary>
            Writes an error to the logger
            </summary>
      <param name="ex">A thrown exception.</param>
      <param name="format">Format string for the log message.</param>
      <param name="args">Arguments to be inserted into the format string.</param>
    </member>
    <member name="M:EventStore.ClientAPI.ILogger.Info(System.String,System.Object[])">
      <summary>
            Writes an information message to the logger
            </summary>
      <param name="format">Format string for the log message.</param>
      <param name="args">Arguments to be inserted into the format string.</param>
    </member>
    <member name="M:EventStore.ClientAPI.ILogger.Info(System.Exception,System.String,System.Object[])">
      <summary>
            Writes an information message to the logger
            </summary>
      <param name="ex">A thrown exception.</param>
      <param name="format">Format string for the log message.</param>
      <param name="args">Arguments to be inserted into the format string.</param>
    </member>
    <member name="M:EventStore.ClientAPI.ILogger.Debug(System.String,System.Object[])">
      <summary>
            Writes a debug message to the logger
            </summary>
      <param name="format">Format string for the log message.</param>
      <param name="args">Arguments to be inserted into the format string.</param>
    </member>
    <member name="M:EventStore.ClientAPI.ILogger.Debug(System.Exception,System.String,System.Object[])">
      <summary>
            Writes a debug message to the logger
            </summary>
      <param name="ex">A thrown exception.</param>
      <param name="format">Format string for the log message.</param>
      <param name="args">Arguments to be inserted into the format string.</param>
    </member>
    <member name="T:EventStore.ClientAPI.Common.Log.FileLogger">
      <summary>
            Logger that writes to a file
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.ConnectionString">
      <summary>
            Methods for dealing with connection strings.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionString.GetConnectionStringInfo(System.String)">
      <summary>
            Parses a connection string into its pieces represented as kv pairs
            </summary>
      <param name="connectionString">the connection string to parse</param>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionString.GetConnectionSettings(System.String)">
      <summary>
            Returns a <see cref="T:EventStore.ClientAPI.ConnectionSettings"></see> for a given connection string.
            </summary>
      <param name="connectionString">
      </param>
      <returns>a <see cref="T:EventStore.ClientAPI.ConnectionSettings" /> from the connection string</returns>
    </member>
    <member name="T:EventStore.ClientAPI.EventStorePersistentSubscriptionBase">
      <summary>
            Represents a persistent subscription connection.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.EventStorePersistentSubscriptionBase.DefaultBufferSize">
      <summary>
            The default buffer size for the persistent subscription
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(EventStore.ClientAPI.ResolvedEvent)">
      <summary>
            Acknowledge that a message have completed processing (this will tell the server it has been processed)
            </summary>
      <remarks>There is no need to ack a message if you have Auto Ack enabled</remarks>
      <param name="event">The <see cref="T:EventStore.ClientAPI.ResolvedEvent"></see> to acknowledge</param>
    </member>
    <member name="M:EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Acknowledge(System.Collections.Generic.IEnumerable{EventStore.ClientAPI.ResolvedEvent})">
      <summary>
            Acknowledge that a message have completed processing (this will tell the server it has been processed)
            </summary>
      <remarks>There is no need to ack a message if you have Auto Ack enabled</remarks>
      <param name="events">The <see cref="T:EventStore.ClientAPI.ResolvedEvent"></see>s to acknowledge there should be less than 2000 to ack at a time.</param>
    </member>
    <member name="M:EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail(EventStore.ClientAPI.ResolvedEvent,EventStore.ClientAPI.PersistentSubscriptionNakEventAction,System.String)">
      <summary>
            Mark a message failed processing. The server will be take action based upon the action paramter
            </summary>
      <param name="event">The event to mark as failed</param>
      <param name="action">The <see cref="T:EventStore.ClientAPI.PersistentSubscriptionNakEventAction"></see> action to take</param>
      <param name="reason">A string with a message as to why the failure is occurring</param>
    </member>
    <member name="M:EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Fail(System.Collections.Generic.IEnumerable{EventStore.ClientAPI.ResolvedEvent},EventStore.ClientAPI.PersistentSubscriptionNakEventAction,System.String)">
      <summary>
            Mark nmessages that have failed processing. The server will take action based upon the action parameter
            </summary>
      <param name="events">The events to mark as failed</param>
      <param name="action">The <see cref="T:EventStore.ClientAPI.PersistentSubscriptionNakEventAction"></see> action to take</param>
      <param name="reason">A string with a message as to why the failure is occurring</param>
    </member>
    <member name="M:EventStore.ClientAPI.EventStorePersistentSubscriptionBase.Stop(System.TimeSpan)">
      <summary>
            Disconnects this client from the persistent subscriptions.
            </summary>
      <param name="timeout">
      </param>
      <exception cref="T:System.TimeoutException">
      </exception>
    </member>
    <member name="T:EventStore.ClientAPI.EventStorePersistentSubscription">
      <summary>
            Represents a persistent subscription connection.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.Exceptions.EventStoreConnectionException">
      <summary>
            Base type for exceptions thrown by an <see cref="T:EventStore.ClientAPI.IEventStoreConnection" />,
            thrown in circumstances which do not have a specific derived exception.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.EventStoreConnectionException.#ctor">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.EventStoreConnectionException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.EventStoreConnectionException.#ctor(System.String)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.EventStoreConnectionException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.EventStoreConnectionException.#ctor(System.String,System.Exception)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.EventStoreConnectionException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.EventStoreConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.EventStoreConnectionException" />.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException">
      <summary>
            Exception thrown if a projection command fails.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException.#ctor">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException.#ctor(System.Int32,System.String)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException.#ctor(System.String,System.Exception)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException" />.
            </summary>
    </member>
    <member name="P:EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException.HttpStatusCode">
      <summary>
            The Http status code returned by the server
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.Exceptions.UserCommandConflictException">
      <summary>
            Exception thrown if a user command fails.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.UserCommandConflictException.#ctor">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.UserCommandFailedException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.UserCommandConflictException.#ctor(System.Int32,System.String)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.UserCommandFailedException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.UserCommandConflictException.#ctor(System.String,System.Exception)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.UserCommandFailedException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.UserCommandConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.UserCommandFailedException" />.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.Exceptions.UserCommandFailedException">
      <summary>
            Exception thrown if a projection command fails.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.UserCommandFailedException.#ctor">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.UserCommandFailedException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.UserCommandFailedException.#ctor(System.Int32,System.String)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.UserCommandFailedException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.UserCommandFailedException.#ctor(System.String,System.Exception)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.UserCommandFailedException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.UserCommandFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.UserCommandFailedException" />.
            </summary>
    </member>
    <member name="P:EventStore.ClientAPI.Exceptions.UserCommandFailedException.HttpStatusCode">
      <summary>
            The Http status code returned for the operation
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.IEventStoreConnection">
      <summary>
            Maintains a full duplex connection to the EventStore
            </summary>
      <remarks>
            An <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> operates quite differently than say a SqlConnection. Normally
            when using an <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> you want to keep the connection open for a much longer of time than 
            when you use a SqlConnection. If you prefer the usage pattern of using(new Connection()) .. then you would likely
            want to create a FlyWeight on top of the <see cref="T:EventStore.ClientAPI.EventStoreConnection" />.
            
            Another difference is that with the <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> all operations are handled in a full async manner
            (even if you call the synchronous behaviors). Many threads can use an <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> at the same
            time or a single thread can make many asynchronous requests. To get the most performance out of the connection
            it is generally recommended to use it in this way.
            </remarks>
    </member>
    <member name="M:EventStore.ClientAPI.IEventStoreConnection.ConnectAsync">
      <summary>
            Connects the <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> asynchronously to a destination
            </summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that can be waited upon.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.IEventStoreConnection.Close">
      <summary>
            Closes this <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /></summary>
    </member>
    <member name="M:EventStore.ClientAPI.IEventStoreConnection.DeleteStreamAsync(System.String,System.Int32,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Deletes a stream from the Event Store asynchronously
            </summary>
      <param name="stream">The name of the stream to delete.</param>
      <param name="expectedVersion">The expected version that the streams should have when being deleted. <see cref="T:EventStore.ClientAPI.ExpectedVersion" /></param>
      <param name="userCredentials">The optional user credentials to perform operation with.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that can be awaited upon by the caller.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.IEventStoreConnection.DeleteStreamAsync(System.String,System.Int32,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Deletes a stream from the Event Store asynchronously
            </summary>
      <param name="stream">The name of the stream to delete.</param>
      <param name="expectedVersion">The expected version that the streams should have when being deleted. <see cref="T:EventStore.ClientAPI.ExpectedVersion" /></param>
      <param name="hardDelete">Indicator for tombstoning vs soft-deleting the stream. Tombstoned streams can never be recreated. Soft-deleted streams
            can be written to again, but the EventNumber sequence will not start from 0.</param>
      <param name="userCredentials">The optional user credentials to perform operation with.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that can be awaited upon by the caller.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.IEventStoreConnection.AppendToStreamAsync(System.String,System.Int32,EventStore.ClientAPI.EventData[])">
      <summary>
            Appends Events asynchronously to a stream.
            </summary>
      <remarks>
            When appending events to a stream the <see cref="T:EventStore.ClientAPI.ExpectedVersion" /> choice can
            make a very large difference in the observed behavior. For example, if no stream exists
            and ExpectedVersion.Any is used, a new stream will be implicitly created when appending.
            
            There are also differences in idempotency between different types of calls.
            If you specify an ExpectedVersion aside from ExpectedVersion.Any the Event Store
            will give you an idempotency guarantee. If using ExpectedVersion.Any the Event Store
            will do its best to provide idempotency but does not guarantee idempotency
            </remarks>
      <param name="stream">The name of the stream to append events to</param>
      <param name="expectedVersion">The <see cref="T:EventStore.ClientAPI.ExpectedVersion" /> of the stream to append to</param>
      <param name="events">The events to append to the stream</param>
    </member>
    <member name="M:EventStore.ClientAPI.IEventStoreConnection.AppendToStreamAsync(System.String,System.Int32,EventStore.ClientAPI.SystemData.UserCredentials,EventStore.ClientAPI.EventData[])">
      <summary>
            Appends Events asynchronously to a stream.
            </summary>
      <remarks>
            When appending events to a stream the <see cref="T:EventStore.ClientAPI.ExpectedVersion" /> choice can
            make a very large difference in the observed behavior. For example, if no stream exists
            and ExpectedVersion.Any is used, a new stream will be implicitly created when appending.
            
            There are also differences in idempotency between different types of calls.
            If you specify an ExpectedVersion aside from ExpectedVersion.Any the Event Store
            will give you an idempotency guarantee. If using ExpectedVersion.Any the Event Store
            will do its best to provide idempotency but does not guarantee idempotency
            </remarks>
      <param name="stream">The name of the stream to append events to</param>
      <param name="expectedVersion">The <see cref="T:EventStore.ClientAPI.ExpectedVersion" /> of the stream to append to</param>
      <param name="userCredentials">The optional user credentials to perform operation with.</param>
      <param name="events">The events to append to the stream</param>
    </member>
    <member name="M:EventStore.ClientAPI.IEventStoreConnection.AppendToStreamAsync(System.String,System.Int32,System.Collections.Generic.IEnumerable{EventStore.ClientAPI.EventData},EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Appends Events asynchronously to a stream.
            </summary>
      <remarks>
            When appending events to a stream the <see cref="T:EventStore.ClientAPI.ExpectedVersion" /> choice can
            make a very large difference in the observed behavior. For example, if no stream exists
            and ExpectedVersion.Any is used, a new stream will be implicitly created when appending.
            
            There are also differences in idempotency between different types of calls.
            If you specify an ExpectedVersion aside from ExpectedVersion.Any the Event Store
            will give you an idempotency guarantee. If using ExpectedVersion.Any the Event Store
            will do its best to provide idempotency but does not guarantee idempotency
            </remarks>
      <param name="stream">The name of the stream to append events to</param>
      <param name="expectedVersion">The <see cref="T:EventStore.ClientAPI.ExpectedVersion" /> of the stream to append to</param>
      <param name="events">The events to append to the stream</param>
      <param name="userCredentials">The optional user credentials to perform operation with.</param>
    </member>
    <member name="M:EventStore.ClientAPI.IEventStoreConnection.StartTransactionAsync(System.String,System.Int32,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Starts a transaction in the event store on a given stream asynchronously
            </summary>
      <remarks>
            A <see cref="T:EventStore.ClientAPI.EventStoreTransaction" /> allows the calling of multiple writes with multiple
            round trips over long periods of time between the caller and the event store. This method
            is only available through the TCP interface and no equivalent exists for the RESTful interface.
            </remarks>
      <param name="stream">The stream to start a transaction on</param>
      <param name="expectedVersion">The expected version of the stream at the time of starting the transaction</param>
      <param name="userCredentials">The optional user credentials to perform operation with.</param>
      <returns>A task the caller can use to control the operation.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.IEventStoreConnection.ContinueTransaction(System.Int64,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Continues transaction by provided transaction ID.
            </summary>
      <remarks>
            A <see cref="T:EventStore.ClientAPI.EventStoreTransaction" /> allows the calling of multiple writes with multiple
            round trips over long periods of time between the caller and the event store. This method
            is only available through the TCP interface and no equivalent exists for the RESTful interface.
            </remarks>
      <param name="transactionId">The transaction ID that needs to be continued.</param>
      <param name="userCredentials">The optional user credentials to perform operation with.</param>
      <returns>
        <see cref="T:EventStore.ClientAPI.EventStoreTransaction" /> object.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.IEventStoreConnection.ReadEventAsync(System.String,System.Int32,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously reads a single event from a stream.
            </summary>
      <param name="stream">The stream to read from</param>
      <param name="eventNumber">The event number to read, <see cref="T:EventStore.ClientAPI.StreamPosition">StreamPosition.End</see> to read the last event in the stream</param>
      <param name="resolveLinkTos">Whether to resolve LinkTo events automatically</param>
      <param name="userCredentials">The optional user credentials to perform operation with.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> containing the results of the read operation</returns>
    </member>
    <member name="M:EventStore.ClientAPI.IEventStoreConnection.ReadStreamEventsForwardAsync(System.String,System.Int32,System.Int32,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Reads count Events from an Event Stream forwards (e.g. oldest to newest) starting from position start 
            </summary>
      <param name="stream">The stream to read from</param>
      <param name="start">The starting point to read from</param>
      <param name="count">The count of items to read</param>
      <param name="resolveLinkTos">Whether to resolve LinkTo events automatically</param>
      <param name="userCredentials">The optional user credentials to perform operation with.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> containing the results of the read operation</returns>
    </member>
    <member name="M:EventStore.ClientAPI.IEventStoreConnection.ReadStreamEventsBackwardAsync(System.String,System.Int32,System.Int32,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Reads count events from an Event Stream backwards (e.g. newest to oldest) from position asynchronously
            </summary>
      <param name="stream">The Event Stream to read from</param>
      <param name="start">The position to start reading from</param>
      <param name="count">The count to read from the position</param>
      <param name="resolveLinkTos">Whether to resolve LinkTo events automatically</param>
      <param name="userCredentials">The optional user credentials to perform operation with.</param>
      <returns>An <see cref="T:System.Threading.Tasks.Task`1" /> containing the results of the read operation</returns>
    </member>
    <member name="M:EventStore.ClientAPI.IEventStoreConnection.ReadAllEventsForwardAsync(EventStore.ClientAPI.Position,System.Int32,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Reads All Events in the node forward asynchronously (e.g. beginning to end)
            </summary>
      <param name="position">The position to start reading from</param>
      <param name="maxCount">The maximum count to read</param>
      <param name="resolveLinkTos">Whether to resolve LinkTo events automatically</param>
      <param name="userCredentials">The optional user credentials to perform operation with.</param>
      <returns>A <see cref="T:EventStore.ClientAPI.AllEventsSlice" /> containing the records read</returns>
    </member>
    <member name="M:EventStore.ClientAPI.IEventStoreConnection.ReadAllEventsBackwardAsync(EventStore.ClientAPI.Position,System.Int32,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Reads All Events in the node backwards (e.g. end to beginning)
            </summary>
      <param name="position">The position to start reading from</param>
      <param name="maxCount">The maximum count to read</param>
      <param name="resolveLinkTos">Whether to resolve Link events automatically</param>
      <param name="userCredentials">The optional user credentials to perform operation with.</param>
      <returns>A <see cref="T:EventStore.ClientAPI.AllEventsSlice" /> containing the records read</returns>
    </member>
    <member name="M:EventStore.ClientAPI.IEventStoreConnection.SubscribeToStreamAsync(System.String,System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously subscribes to a single event stream. New events 
            written to the stream while the subscription is active will be
            pushed to the client.
            </summary>
      <param name="stream">The stream to subscribe to</param>
      <param name="resolveLinkTos">Whether to resolve Link events automatically</param>
      <param name="eventAppeared">An action invoked when a new event is received over the subscription</param>
      <param name="subscriptionDropped">An action invoked if the subscription is dropped</param>
      <param name="userCredentials">User credentials to use for the operation</param>
      <returns>An <see cref="T:EventStore.ClientAPI.EventStoreSubscription" /> representing the subscription</returns>
    </member>
    <member name="M:EventStore.ClientAPI.IEventStoreConnection.SubscribeToStreamFrom(System.String,System.Nullable{System.Int32},System.Boolean,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32)">
      <summary>
            Subscribes to a single event stream. Existing events from
            lastCheckpoint onwards are read from the stream
            and presented to the user of <see cref="T:EventStore.ClientAPI.EventStoreCatchUpSubscription" />
            as if they had been pushed.
            
            Once the end of the stream is read the subscription is
            transparently (to the user) switched to push new events as
            they are written.
            
            The action liveProcessingStarted is called when the
            <see cref="T:EventStore.ClientAPI.EventStoreCatchUpSubscription" /> switches from the reading
            phase to the live subscription phase.
            </summary>
      <param name="stream">The stream to subscribe to</param>
      <param name="lastCheckpoint">The event number from which to start.
            
            To receive all events in the stream, use <see cref="F:EventStore.ClientAPI.StreamCheckpoint.StreamStart" />.
            If events have already been received and resubscription from the same point
            is desired, use the event number of the last event processed which
            appeared on the subscription.
            
            NOTE: Using <see cref="F:EventStore.ClientAPI.StreamPosition.Start" /> here will result in missing
            the first event in the stream.</param>
      <param name="resolveLinkTos">Whether to resolve Link events automatically</param>
      <param name="eventAppeared">An action invoked when an event is received over the subscription</param>
      <param name="liveProcessingStarted">An action invoked when the subscription switches to newly-pushed events</param>
      <param name="subscriptionDropped">An action invoked if the subscription is dropped</param>
      <param name="userCredentials">User credentials to use for the operation</param>
      <param name="readBatchSize">The batch size to use during the read phase</param>
      <returns>An <see cref="T:EventStore.ClientAPI.EventStoreSubscription" /> representing the subscription</returns>
    </member>
    <member name="M:EventStore.ClientAPI.IEventStoreConnection.SubscribeToAllAsync(System.Boolean,System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously subscribes to all events in the Event Store. New
            events written to the stream while the subscription is active
            will be pushed to the client.
            </summary>
      <param name="resolveLinkTos">Whether to resolve Link events automatically</param>
      <param name="eventAppeared">An action invoked when a new event is received over the subscription</param>
      <param name="subscriptionDropped">An action invoked if the subscription is dropped</param>
      <param name="userCredentials">User credentials to use for the operation</param>
      <returns>An <see cref="T:EventStore.ClientAPI.EventStoreSubscription" /> representing the subscription</returns>
    </member>
    <member name="M:EventStore.ClientAPI.IEventStoreConnection.ConnectToPersistentSubscription(System.String,System.String,System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStorePersistentSubscriptionBase,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32,System.Boolean)">
      <summary>
            Subscribes a persistent subscription (competing consumer) to the event store
            </summary>
      <param name="groupName">The subscription group to connect to</param>
      <param name="stream">The stream to subscribe to</param>
      <param name="eventAppeared">An action invoked when an event appears</param>
      <param name="subscriptionDropped">An action invoked if the subscription is dropped</param>
      <param name="userCredentials">User credentials to use for the operation</param>
      <param name="bufferSize">The buffer size to use for the persistent subscription</param>
      <param name="autoAck">Whether the subscription should automatically acknowledge messages processed.
            If not set the receiver is required to explicitly acknowledge messages through the subscription.</param>
      <remarks>This will connect you to a persistent subscription group for a stream. The subscription group
            must first be created with CreatePersistentSubscriptionAsync many connections
            can connect to the same group and they will be treated as competing consumers within the group.
            If one connection dies work will be balanced across the rest of the consumers in the group. If
            you attempt to connect to a group that does not exist you will be given an exception.
            </remarks>
      <returns>An <see cref="T:EventStore.ClientAPI.EventStoreSubscription" /> representing the subscription</returns>
    </member>
    <member name="M:EventStore.ClientAPI.IEventStoreConnection.SubscribeToAllFrom(System.Nullable{EventStore.ClientAPI.Position},System.Boolean,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32)">
      <summary>
            Subscribes to a all events. Existing events from lastCheckpoint
            onwards are read from the Event Store and presented to the user of
            <see cref="T:EventStore.ClientAPI.EventStoreCatchUpSubscription" /> as if they had been pushed.
            
            Once the end of the stream is read the subscription is
            transparently (to the user) switched to push new events as
            they are written.
            
            The action liveProcessingStarted is called when the
            <see cref="T:EventStore.ClientAPI.EventStoreCatchUpSubscription" /> switches from the reading
            phase to the live subscription phase.
            </summary>
      <param name="lastCheckpoint">The position from which to start.
            
            To receive all events in the database, use <see cref="F:EventStore.ClientAPI.AllCheckpoint.AllStart" />.
            If events have already been received and resubscription from the same point
            is desired, use the position representing the last event processed which
            appeared on the subscription.
            
            NOTE: Using <see cref="F:EventStore.ClientAPI.Position.Start" /> here will result in missing
            the first event in the stream.</param>
      <param name="resolveLinkTos">Whether to resolve Link events automatically</param>
      <param name="eventAppeared">An action invoked when an event is received over the subscription</param>
      <param name="liveProcessingStarted">An action invoked when the subscription switches to newly-pushed events</param>
      <param name="subscriptionDropped">An action invoked if the subscription is dropped</param>
      <param name="userCredentials">User credentials to use for the operation</param>
      <param name="readBatchSize">The batch size to use during the read phase</param>
      <returns>An <see cref="T:EventStore.ClientAPI.EventStoreSubscription" /> representing the subscription</returns>
    </member>
    <member name="M:EventStore.ClientAPI.IEventStoreConnection.UpdatePersistentSubscriptionAsync(System.String,System.String,EventStore.ClientAPI.PersistentSubscriptionSettings,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously update a persistent subscription group on a stream
            </summary>
      <param name="stream">The name of the stream to create the persistent subscription on</param>
      <param name="groupName">The name of the group to create</param>
      <param name="settings">The <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettings"></see> for the subscription</param>
      <param name="credentials">The credentials to be used for this operation.</param>
      <returns>A <see cref="T:EventStore.ClientAPI.Internal.PersistentSubscriptionCreateResult" />.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.IEventStoreConnection.CreatePersistentSubscriptionAsync(System.String,System.String,EventStore.ClientAPI.PersistentSubscriptionSettings,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously create a persistent subscription group on a stream
            </summary>
      <param name="stream">The name of the stream to create the persistent subscription on</param>
      <param name="groupName">The name of the group to create</param>
      <param name="settings">The <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettings"></see> for the subscription</param>
      <param name="credentials">The credentials to be used for this operation.</param>
      <returns>A <see cref="T:EventStore.ClientAPI.Internal.PersistentSubscriptionCreateResult" />.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.IEventStoreConnection.DeletePersistentSubscriptionAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously delete a persistent subscription group on a stream
            </summary>
      <param name="stream">The name of the stream to delete the persistent subscription on</param>
      <param name="groupName">The name of the group to delete</param>
      <param name="userCredentials">User credentials to use for the operation</param>
      <returns>A <see cref="T:EventStore.ClientAPI.Internal.PersistentSubscriptionDeleteResult" />.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.IEventStoreConnection.SetStreamMetadataAsync(System.String,System.Int32,EventStore.ClientAPI.StreamMetadata,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously sets the metadata for a stream.
            </summary>
      <param name="stream">The name of the stream for which to set metadata.</param>
      <param name="expectedMetastreamVersion">The expected version for the write to the metadata stream.</param>
      <param name="metadata">A <see cref="T:EventStore.ClientAPI.StreamMetadata" /> representing the new metadata.</param>
      <param name="userCredentials">User credentials to use for the operation</param>
      <returns>A <see cref="T:EventStore.ClientAPI.WriteResult" />.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.IEventStoreConnection.SetStreamMetadataAsync(System.String,System.Int32,System.Byte[],EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously sets the metadata for a stream.
            </summary>
      <param name="stream">The name of the stream for which to set metadata.</param>
      <param name="expectedMetastreamVersion">The expected version for the write to the metadata stream.</param>
      <param name="metadata">A byte array representing the new metadata.</param>
      <param name="userCredentials">User credentials to use for the operation.</param>
      <returns>A <see cref="T:EventStore.ClientAPI.WriteResult" />.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.IEventStoreConnection.GetStreamMetadataAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously reads the metadata for a stream and converts the metadata into a <see cref="T:EventStore.ClientAPI.StreamMetadata" />.
            </summary>
      <param name="stream">The name of the stream for which to read metadata.</param>
      <param name="userCredentials">User credentials to use for the operation.</param>
      <returns>A <see cref="T:EventStore.ClientAPI.StreamMetadataResult" /> representing the result of the operation.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.IEventStoreConnection.GetStreamMetadataAsRawBytesAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously reads the metadata for a stream as a byte array.
            </summary>
      <param name="stream">The name of the stream for which to read metadata.</param>
      <param name="userCredentials">User credentials to use for the operation.</param>
      <returns>A <see cref="T:EventStore.ClientAPI.StreamMetadataResult" /> representing the result of the operation.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.IEventStoreConnection.SetSystemSettingsAsync(EventStore.ClientAPI.SystemSettings,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Sets the global settings for the server or cluster to which the <see cref="T:EventStore.ClientAPI.IEventStoreConnection" />
            is connected.
            </summary>
      <param name="settings">The <see cref="T:EventStore.ClientAPI.SystemSettings" /> to apply.</param>
      <param name="userCredentials">User credentials to use for the operation.</param>
    </member>
    <member name="P:EventStore.ClientAPI.IEventStoreConnection.ConnectionName">
      <summary>
            Gets the name of this connection. A connection name can be used for disambiguation
            in log files.
            </summary>
    </member>
    <member name="E:EventStore.ClientAPI.IEventStoreConnection.Connected">
      <summary>
            Fired when an <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> connects to an Event Store server.
            </summary>
    </member>
    <member name="E:EventStore.ClientAPI.IEventStoreConnection.Disconnected">
      <summary>
            Fired when an <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> is disconnected from an Event Store server
            by some means other than by calling the <see cref="M:EventStore.ClientAPI.IEventStoreConnection.Close" /> method.
            </summary>
    </member>
    <member name="E:EventStore.ClientAPI.IEventStoreConnection.Reconnecting">
      <summary>
            Fired when an <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> is attempting to reconnect to an Event Store
            server following a disconnection.
            </summary>
    </member>
    <member name="E:EventStore.ClientAPI.IEventStoreConnection.Closed">
      <summary>
            Fired when an <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> is closed either using the <see cref="M:EventStore.ClientAPI.IEventStoreConnection.Close" />
            method, or when reconnection limits are reached without a successful connection being established.
            </summary>
    </member>
    <member name="E:EventStore.ClientAPI.IEventStoreConnection.ErrorOccurred">
      <summary>
            Fired when an error is thrown on an <see cref="T:EventStore.ClientAPI.IEventStoreConnection" />.
            </summary>
    </member>
    <member name="E:EventStore.ClientAPI.IEventStoreConnection.AuthenticationFailed">
      <summary>
            Fired when a client fails to authenticate to an Event Store server.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Internal.IEventStoreTransactionConnection.TransactionalWriteAsync(EventStore.ClientAPI.EventStoreTransaction,System.Collections.Generic.IEnumerable{EventStore.ClientAPI.EventData},EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Writes to a transaction in the event store asynchronously
            </summary>
      <remarks>
            A <see cref="T:EventStore.ClientAPI.EventStoreTransaction" /> allows the calling of multiple writes with multiple
            round trips over long periods of time between the caller and the event store. This method
            is only available through the TCP interface and no equivalent exists for the RESTful interface.
            </remarks>
      <param name="transaction">The <see cref="T:EventStore.ClientAPI.EventStoreTransaction" /> to write to.</param>
      <param name="events">The events to write</param>
      <param name="userCredentials">The optional user credentials to perform operation with.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> allowing the caller to control the async operation</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Internal.IEventStoreTransactionConnection.CommitTransactionAsync(EventStore.ClientAPI.EventStoreTransaction,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Commits a multi-write transaction in the Event Store
            </summary>
      <param name="transaction">The <see cref="T:EventStore.ClientAPI.EventStoreTransaction"></see> to commit</param>
      <param name="userCredentials">The optional user credentials to perform operation with.</param>
    </member>
    <member name="T:EventStore.ClientAPI.Internal.EventStoreNodeConnection">
      <summary>
            Maintains a full duplex connection to the EventStore
            </summary>
      <remarks>
            An <see cref="T:EventStore.ClientAPI.EventStoreConnection" /> operates quite differently than say a <see cref="T:System.Data.SqlClient.SqlConnection" />. Normally
            when using an <see cref="T:EventStore.ClientAPI.EventStoreConnection" /> you want to keep the connection open for a much longer of time than 
            when you use a SqlConnection. If you prefer the usage pattern of using(new Connection()) .. then you would likely
            want to create a FlyWeight on top of the <see cref="T:EventStore.ClientAPI.EventStoreConnection" />.
            
            Another difference is that with the <see cref="T:EventStore.ClientAPI.EventStoreConnection" /> all operations are handled in a full async manner
            (even if you call the synchronous behaviors). Many threads can use an <see cref="T:EventStore.ClientAPI.EventStoreConnection" /> at the same
            time or a single thread can make many asynchronous requests. To get the most performance out of the connection
            it is generally recommended to use it in this way.
            </remarks>
    </member>
    <member name="M:EventStore.ClientAPI.Internal.EventStoreNodeConnection.#ctor(EventStore.ClientAPI.ConnectionSettings,EventStore.ClientAPI.ClusterSettings,EventStore.ClientAPI.Internal.IEndPointDiscoverer,System.String)">
      <summary>
            Constructs a new instance of a <see cref="T:EventStore.ClientAPI.EventStoreConnection" /></summary>
      <param name="settings">The <see cref="T:EventStore.ClientAPI.ConnectionSettings" /> containing the settings for this connection.</param>
      <param name="clusterSettings">The <see cref="P:EventStore.ClientAPI.Internal.EventStoreNodeConnection.ClusterSettings" /> containing the settings for this connection.</param>
      <param name="endPointDiscoverer">Discoverer of destination node end point.</param>
      <param name="connectionName">Optional name of connection (will be generated automatically, if not provided)</param>
    </member>
    <member name="P:EventStore.ClientAPI.Internal.EventStoreNodeConnection.Settings">
      <summary>
            Returns the <see cref="T:EventStore.ClientAPI.ConnectionSettings" /> use to create this connection
            </summary>
    </member>
    <member name="P:EventStore.ClientAPI.Internal.EventStoreNodeConnection.ClusterSettings">
      <summary>
            Returns the <see cref="P:EventStore.ClientAPI.Internal.EventStoreNodeConnection.ClusterSettings" /> use to create this connection
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.GossipSeed">
      <summary>
            Represents a source of cluster gossip.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.GossipSeed.EndPoint">
      <summary>
            The <see cref="T:System.Net.IPEndPoint" /> for the External HTTP endpoint of the gossip seed.
            
            The HTTP endpoint is used rather than the TCP endpoint because it is required
            for the client to exchange gossip with the server. The standard port which should be
            used here is 2113.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.GossipSeed.HostHeader">
      <summary>
            The host header to be sent when requesting gossip.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.GossipSeed.#ctor(System.Net.IPEndPoint,System.String)">
      <summary>
            Creates a new <see cref="T:EventStore.ClientAPI.GossipSeed" />.
            </summary>
      <param name="endPoint">The <see cref="T:System.Net.IPEndPoint" /> for the External HTTP endpoint of the gossip seed. The standard port is 2113.</param>
      <param name="hostHeader">The host header to be sent when requesting gossip. Defaults to String.Empty</param>
    </member>
    <member name="T:EventStore.ClientAPI.Internal.PersistentSubscriptionCreateResult">
      <summary>
            A Persistent Subscription Create Result is the result of a single operation creating a
            persistent subscription in the event store
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Internal.PersistentSubscriptionCreateResult.Status">
      <summary>
            The <see cref="T:EventStore.ClientAPI.Internal.PersistentSubscriptionCreateStatus" /> representing the status of this create attempt
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.Internal.PersistentSubscriptionCreateStatus">
      <summary>
            Enumeration representing the status of a single subscription create message.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Internal.PersistentSubscriptionCreateStatus.Success">
      <summary>
            The subscription was created successfully
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Internal.PersistentSubscriptionCreateStatus.NotFound">
      <summary>
            The subscription already exists
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Internal.PersistentSubscriptionCreateStatus.Failure">
      <summary>
            Some failure happened creating the subscription
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.Internal.PersistentSubscriptionDeleteResult">
      <summary>
            A Persistent Subscription Delete Result is the result of a single operation deleting a
            persistent subscription in the event store
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Internal.PersistentSubscriptionDeleteResult.Status">
      <summary>
            The <see cref="T:EventStore.ClientAPI.Internal.PersistentSubscriptionDeleteStatus" /> representing the status of this create attempt
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.Internal.PersistentSubscriptionDeleteStatus">
      <summary>
            Enumeration representing the status of a single subscription delete message.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Internal.PersistentSubscriptionDeleteStatus.Success">
      <summary>
            The subscription was created successfully
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Internal.PersistentSubscriptionDeleteStatus.Failure">
      <summary>
            Some failure happened creating the subscription
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.Internal.PersistentSubscriptionUpdateResult">
      <summary>
            A Persistent Subscription Create Result is the result of a single operation updating a
            persistent subscription in the event store
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Internal.PersistentSubscriptionUpdateResult.Status">
      <summary>
            The <see cref="T:EventStore.ClientAPI.Internal.PersistentSubscriptionUpdateResult" /> representing the status of this create attempt
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.Internal.PersistentSubscriptionUpdateStatus">
      <summary>
            Enumeration representing the status of a single subscription create message.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Internal.PersistentSubscriptionUpdateStatus.Success">
      <summary>
            The subscription was created successfully
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Internal.PersistentSubscriptionUpdateStatus.NotFound">
      <summary>
            The subscription already exists
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Internal.PersistentSubscriptionUpdateStatus.Failure">
      <summary>
            Some failure happened creating the subscription
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Internal.PersistentSubscriptionUpdateStatus.AccessDenied">
      <summary>
            You do not have permissions to update this subscription
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.EventStoreSubscription">
      <summary>
            Represents a subscription to a single stream or to the stream
            of all events in the Event Store.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.EventStoreSubscription.LastCommitPosition">
      <summary>
            The last commit position seen on the subscription (if this is
            a subscription to all events).
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.EventStoreSubscription.LastEventNumber">
      <summary>
            The last event number seen on the subscription (if this is a
            subscription to a single stream).
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.EventStoreSubscription.Dispose">
      <summary>
            Unsubscribes from the stream.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.EventStoreSubscription.Close">
      <summary>
            Unsubscribes from the stream.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.EventStoreSubscription.Unsubscribe">
      <summary>
            Unsubscribes from the stream
            </summary>
    </member>
    <member name="P:EventStore.ClientAPI.EventStoreSubscription.IsSubscribedToAll">
      <summary>
            True if this subscription is to all streams.
            </summary>
    </member>
    <member name="P:EventStore.ClientAPI.EventStoreSubscription.StreamId">
      <summary>
            The name of the stream to which the subscription is subscribed.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.PersistentSubscriptionNakEventAction">
      <summary>
            Actions to be taken by server in the case of a client NAK
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.PersistentSubscriptionNakEventAction.Unknown">
      <summary>
            Client unknown on action. Let server decide
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.PersistentSubscriptionNakEventAction.Park">
      <summary>
            Park message do not resend. Put on poison queue
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.PersistentSubscriptionNakEventAction.Retry">
      <summary>
            Explicitly retry the message.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.PersistentSubscriptionNakEventAction.Skip">
      <summary>
            Skip this message do not resend do not put in poison queue
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.PersistentSubscriptionNakEventAction.Stop">
      <summary>
            Stop the subscription.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.PersistentSubscriptionSettings">
      <summary>
            Represents the settings for a <see cref="T:EventStore.ClientAPI.PersistentEventStoreSubscription"></see>. This should not be used
            directly, but instead created via a <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></summary>
    </member>
    <member name="F:EventStore.ClientAPI.PersistentSubscriptionSettings.ResolveLinkTos">
      <summary>
            Whether or not the <see cref="T:EventStore.ClientAPI.PersistentEventStoreSubscription"></see> should resolve linkTo events to their linked events.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.PersistentSubscriptionSettings.StartFrom">
      <summary>
            Where the subscription should start from (position)
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.PersistentSubscriptionSettings.ExtraStatistics">
      <summary>
            Whether or not in depth latency statistics should be tracked on this subscription.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.PersistentSubscriptionSettings.MessageTimeout">
      <summary>
            The amount of time after which a message should be considered to be timedout and retried.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.PersistentSubscriptionSettings.MaxRetryCount">
      <summary>
            The maximum number of retries (due to timeout) before a message get considered to be parked
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.PersistentSubscriptionSettings.LiveBufferSize">
      <summary>
            The size of the buffer listening to live messages as they happen
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.PersistentSubscriptionSettings.ReadBatchSize">
      <summary>
            The number of events read at a time when paging in history
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.PersistentSubscriptionSettings.HistoryBufferSize">
      <summary>
            The number of events to cache when paging through history
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.PersistentSubscriptionSettings.CheckPointAfter">
      <summary>
            The amount of time to try to checkpoint after 
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.PersistentSubscriptionSettings.MinCheckPointCount">
      <summary>
            The minimum number of messages to checkpoint
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.PersistentSubscriptionSettings.MaxCheckPointCount">
      <summary>
            The maximum number of messages to checkpoint if this number is a reached a checkpoint will be forced.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.PersistentSubscriptionSettings.MaxSubscriberCount">
      <summary>
            The maximum number of subscribers allowed.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.PersistentSubscriptionSettings.NamedConsumerStrategy">
      <summary>
            The strategy to use for distributing events to client consumers. See <see cref="T:EventStore.ClientAPI.Common.SystemConsumerStrategies" /> for system supported strategies.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettings.Create">
      <summary>
            Creates a new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see> object
            </summary>
      <returns>a new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see> object</returns>
    </member>
    <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettings.#ctor(System.Boolean,System.Int32,System.Boolean,System.TimeSpan,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan,System.Int32,System.Int32,System.Int32,System.String)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettings"></see></summary>
    </member>
    <member name="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder">
      <summary>
            Builds a <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettings" /> object.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.WithExtraStatistics">
      <summary>
            Sets the option to include further latency statistics. These statistics have a cost and should not be used
            in high performance situations.
            </summary>
      <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
    </member>
    <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.ResolveLinkTos">
      <summary>
            Sets the option to resolve linktos on events that are found for this subscription.
            </summary>
      <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
    </member>
    <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.DoNotResolveLinkTos">
      <summary>
            Sets the option to not resolve linktos on events that are found for this subscription.
            </summary>
      <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
    </member>
    <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.PreferRoundRobin">
      <summary>
            If set the subscription will prefer if possible to round robin between the clients that
            are connected.
            </summary>
      <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
    </member>
    <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.PreferDispatchToSingle">
      <summary>
            If set the subscription will prefer if possible to dispatch only to a single of the connected
            clients. If however the buffer limits are reached on that client it will begin sending to other 
            clients.
            </summary>
      <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
    </member>
    <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.StartFromBeginning">
      <summary>
            Sets that the subscription should start from the beginning of the stream.
            </summary>
      <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
    </member>
    <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.StartFrom(System.Int32)">
      <summary>
            Sets that the subscription should start from a specified location of the stream.
            </summary>
      <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
    </member>
    <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.WithMessageTimeoutOf(System.TimeSpan)">
      <summary>
            Sets the timeout for a message (will be retried if an ack is not received within this timespan)
            </summary>
      <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
    </member>
    <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.CheckPointAfter(System.TimeSpan)">
      <summary>
            Sets that the backend should try to checkpoint the subscription after some
            period of time. Note that if the increment of the checkpoint would be below
            the minimum the stream will not be checkpointed at this time.
            </summary>
      <remarks>
            It is important to tweak checkpointing for high performance streams as they cause 
            writes to happen back in the system. There is a trade off between the number of
            writes that can happen in varying failure scenarios and the frequency of 
            writing out the checkpoints within the system. Normally settings such
            as once per second with a minimum of 5-10 messages and a high max to checkpoint should
            be a good compromise for most streams though you may want to change this if you
            for instance are doing hundreds of messages/second through the subscription.
            </remarks>
      <param name="time">The amount of time to try checkpointing after</param>
      <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
    </member>
    <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.MinimumCheckPointCountOf(System.Int32)">
      <summary>
            Sets the minimum checkpoint count. The subscription will not increment a checkpoint
            below this value eg if there is one item to checkpoint and it is set to five it
            will not checkpoint
            </summary>
      <remarks>
            It is important to tweak checkpointing for high performance streams as they cause 
            writes to happen back in the system. There is a trade off between the number of
            writes that can happen in varying failure scenarios and the frequency of 
            writing out the checkpoints within the system. Normally settings such
            as once per second with a minimum of 5-10 messages and a high max to checkpoint should
            be a good compromise for most streams though you may want to change this if you
            for instance are doing hundreds of messages/second through the subscription.
            </remarks>
      <param name="count">The minimum count to checkpoint</param>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.MaximumCheckPointCountOf(System.Int32)">
      <summary>
            Sets the largest increment the subscription will checkpoint. If this value is 
            reached the subscription will immediately write a checkpoint. As such this value
            should normally be reasonably large so as not to cause too many writes to occur in 
            the subscription
            </summary>
      <remarks>
            It is important to tweak checkpointing for high performance streams as they cause 
            writes to happen back in the system. There is a trade off between the number of
            writes that can happen in varying failure scenarios and the frequency of 
            writing out the checkpoints within the system. Normally settings such
            as once per second with a minimum of 5-10 messages and a high max to checkpoint should
            be a good compromise for most streams though you may want to change this if you
            for instance are doing hundreds of messages/second through the subscription.
            </remarks>
      <param name="count">The maximum count to checkpoint</param>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.WithMaxRetriesOf(System.Int32)">
      <summary>
            Sets the number of times a message should be retried before being considered a bad message
            </summary>
      <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
    </member>
    <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.WithLiveBufferSizeOf(System.Int32)">
      <summary>
            Sets the size of the live buffer for the subscription. This is the buffer used 
            to cache messages while sending messages as they happen. The count is
            in terms of the number of messages to cache.
            </summary>
      <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
    </member>
    <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.WithReadBatchOf(System.Int32)">
      <summary>
            Sets the size of the read batch used when paging in history for the subscription
            sizes should not be too big ...
            </summary>
      <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
    </member>
    <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.WithBufferSizeOf(System.Int32)">
      <summary>
            Sets the size of the read batch used when paging in history for the subscription
            sizes should not be too big ...
            </summary>
      <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
    </member>
    <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.StartFromCurrent">
      <summary>
            Sets that the subscription should start from where the stream is when the subscription is first connected.
            </summary>
      <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
    </member>
    <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.WithMaxSubscriberCountOf(System.Int32)">
      <summary>
            Sets the maximum number of subscribers allowed to connect.
            </summary>
      <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
    </member>
    <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.WithNamedConsumerStrategy(System.String)">
      <summary>
            Sets the consumer strategy for distributing event to clients. See <see cref="T:EventStore.ClientAPI.Common.SystemConsumerStrategies" /> for system supported strategies.
            </summary>
      <returns>A new <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder"></see></returns>
    </member>
    <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.op_Implicit(EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder)~EventStore.ClientAPI.PersistentSubscriptionSettings">
      <summary>
            Builds a <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettings" /> object from a <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder" />.
            </summary>
      <param name="builder">
        <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder" /> from which to build a <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder" /></param>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder.Build">
      <summary>
            Builds a <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettings" /> object from a <see cref="T:EventStore.ClientAPI.PersistentSubscriptionSettingsBuilder" />.
            </summary>
                    /// <returns></returns></member>
    <member name="T:EventStore.ClientAPI.Projections.ProjectionDetails">
      <summary>
            Provides the details for a projection.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Projections.ProjectionDetails.CoreProcessingTime">
      <summary>
            The CoreProcessingTime
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Projections.ProjectionDetails.Version">
      <summary>
            The projection version
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Projections.ProjectionDetails.Epoch">
      <summary>
            The Epoch
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Projections.ProjectionDetails.EffectiveName">
      <summary>
            The projection EffectiveName
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Projections.ProjectionDetails.WritesInProgress">
      <summary>
            The projection WritesInProgress
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Projections.ProjectionDetails.ReadsInProgress">
      <summary>
            The projection ReadsInProgress
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Projections.ProjectionDetails.PartitionsCached">
      <summary>
            The projection PartitionsCached
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Projections.ProjectionDetails.Status">
      <summary>
            The projection Status
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Projections.ProjectionDetails.StateReason">
      <summary>
            The projection StateReason
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Projections.ProjectionDetails.Name">
      <summary>
            The projection Name
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Projections.ProjectionDetails.Mode">
      <summary>
            The projection Mode
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Projections.ProjectionDetails.Position">
      <summary>
            The projection Position
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Projections.ProjectionDetails.Progress">
      <summary>
            The projection Progress
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Projections.ProjectionDetails.LastCheckpoint">
      <summary>
            LastCheckpoint
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Projections.ProjectionDetails.EventsProcessedAfterRestart">
      <summary>
            The projection EventsProcessedAfterRestart
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Projections.ProjectionDetails.StatusUrl">
      <summary>
            The projection StatusUrl
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Projections.ProjectionDetails.StateUrl">
      <summary>
            The projection StateUrl
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Projections.ProjectionDetails.ResultUrl">
      <summary>
            The projection ResultUrl
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Projections.ProjectionDetails.QueryUrl">
      <summary>
            The projection QueryUrl
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Projections.ProjectionDetails.EnableCommandUrl">
      <summary>
            The projection EnableCommandUrl
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Projections.ProjectionDetails.DisableCommandUrl">
      <summary>
            The projection DisableCommandUrl
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Projections.ProjectionDetails.CheckpointStatus">
      <summary>
            The projection CheckpointStatus
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Projections.ProjectionDetails.BufferedEvents">
      <summary>
            The projection BufferedEvents
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Projections.ProjectionDetails.WritePendingEventsBeforeCheckpoint">
      <summary>
            The projection WritePendingEventsBeforeCheckpoint
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Projections.ProjectionDetails.WritePendingEventsAfterCheckpoint">
      <summary>
            The projection WritePendingEventsAfterCheckpoint
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Projections.ProjectionDetails.#ctor(System.Int64,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Single,System.String,System.Int32,System.Uri,System.Uri,System.Uri,System.Uri,System.Uri,System.Uri,System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
            create a new <see cref="T:EventStore.ClientAPI.Projections.ProjectionDetails" /> class.
            </summary>
      <param name="coreProcessingTime">
      </param>
      <param name="version">
      </param>
      <param name="epoch">
      </param>
      <param name="effectiveName">
      </param>
      <param name="writesInProgress">
      </param>
      <param name="readsInProgress">
      </param>
      <param name="partitionsCached">
      </param>
      <param name="status">
      </param>
      <param name="stateReason">
      </param>
      <param name="name">
      </param>
      <param name="mode">
      </param>
      <param name="position">
      </param>
      <param name="progress">
      </param>
      <param name="lastCheckpoint">
      </param>
      <param name="eventsProcessedAfterRestart">
      </param>
      <param name="statusUrl">
      </param>
      <param name="stateUrl">
      </param>
      <param name="resultUrl">
      </param>
      <param name="queryUrl">
      </param>
      <param name="enableCommandUrl">
      </param>
      <param name="disableCommandUrl">
      </param>
      <param name="checkpointStatus">
      </param>
      <param name="bufferedEvents">
      </param>
      <param name="writePendingEventsBeforeCheckpoint">
      </param>
      <param name="writePendingEventsAfterCheckpoint">
      </param>
    </member>
    <member name="T:EventStore.ClientAPI.StreamCheckpoint">
      <summary>
            This class contains constants to be used when setting up subscriptions
            using the  <see cref="M:EventStore.ClientAPI.IEventStoreConnection.SubscribeToStreamFrom(System.String,System.Nullable{System.Int32},System.Boolean,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},EventStore.ClientAPI.SystemData.UserCredentials,System.Int32)" /> method
            on <see cref="T:EventStore.ClientAPI.IEventStoreConnection" />.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.StreamCheckpoint.StreamStart">
      <summary>
            Indicates that a catch-up subscription should receive all events
            in the stream.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.ClientAuthenticationFailedEventArgs">
      <summary>
            Event Arguments for the event raised when an <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> fails
            to authenticate against an Event Store server.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.ClientAuthenticationFailedEventArgs.#ctor(EventStore.ClientAPI.IEventStoreConnection,System.String)">
      <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.ClientAuthenticationFailedEventArgs" />.
            </summary>
      <param name="connection">The <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> responsible for raising the event.</param>
      <param name="reason">A reason for authentication failure, if known.</param>
    </member>
    <member name="P:EventStore.ClientAPI.ClientAuthenticationFailedEventArgs.Reason">
      <summary>
            A reason for authentication failure, if known.
            </summary>
    </member>
    <member name="P:EventStore.ClientAPI.ClientAuthenticationFailedEventArgs.Connection">
      <summary>
            The <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> responsible for raising the event.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.ClientErrorEventArgs">
      <summary>
            Event Arguments for the event raised when an error occurs on an <see cref="T:EventStore.ClientAPI.IEventStoreConnection" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.ClientErrorEventArgs.#ctor(EventStore.ClientAPI.IEventStoreConnection,System.Exception)">
      <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.ClientErrorEventArgs" />.
            </summary>
      <param name="connection">The <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> responsible for raising the event.</param>
      <param name="exception">The thrown exception, if one was raised.</param>
    </member>
    <member name="P:EventStore.ClientAPI.ClientErrorEventArgs.Exception">
      <summary>
            The thrown exception, if one was raised.
            </summary>
    </member>
    <member name="P:EventStore.ClientAPI.ClientErrorEventArgs.Connection">
      <summary>
            The <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> responsible for raising the event.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.ClientReconnectingEventArgs">
      <summary>
            Event Arguments for the event raised when an <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> is
            about to reconnect to an Event Store server.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.ClientReconnectingEventArgs.#ctor(EventStore.ClientAPI.IEventStoreConnection)">
      <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.ClientReconnectingEventArgs" />.
            </summary>
      <param name="connection">The <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> responsible for raising the event.</param>
    </member>
    <member name="P:EventStore.ClientAPI.ClientReconnectingEventArgs.Connection">
      <summary>
            The <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> responsible for raising the event.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.Common.Log.ConsoleLogger">
      <summary>
            Implementation of <see cref="T:EventStore.ClientAPI.ILogger" /> which outputs to <see cref="T:System.Console" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Common.Log.ConsoleLogger.Error(System.String,System.Object[])">
      <summary>
            Writes an error to the logger
            </summary>
      <param name="format">Format string for the log message.</param>
      <param name="args">Arguments to be inserted into the format string.</param>
    </member>
    <member name="M:EventStore.ClientAPI.Common.Log.ConsoleLogger.Error(System.Exception,System.String,System.Object[])">
      <summary>
            Writes an error to the logger
            </summary>
      <param name="ex">A thrown exception.</param>
      <param name="format">Format string for the log message.</param>
      <param name="args">Arguments to be inserted into the format string.</param>
    </member>
    <member name="M:EventStore.ClientAPI.Common.Log.ConsoleLogger.Debug(System.String,System.Object[])">
      <summary>
            Writes a debug message to the logger
            </summary>
      <param name="format">Format string for the log message.</param>
      <param name="args">Arguments to be inserted into the format string.</param>
    </member>
    <member name="M:EventStore.ClientAPI.Common.Log.ConsoleLogger.Debug(System.Exception,System.String,System.Object[])">
      <summary>
            Writes a debug message to the logger
            </summary>
      <param name="ex">A thrown exception.</param>
      <param name="format">Format string for the log message.</param>
      <param name="args">Arguments to be inserted into the format string.</param>
    </member>
    <member name="M:EventStore.ClientAPI.Common.Log.ConsoleLogger.Info(System.String,System.Object[])">
      <summary>
            Writes an information message to the logger
            </summary>
      <param name="format">Format string for the log message.</param>
      <param name="args">Arguments to be inserted into the format string.</param>
    </member>
    <member name="M:EventStore.ClientAPI.Common.Log.ConsoleLogger.Info(System.Exception,System.String,System.Object[])">
      <summary>
            Writes an information message to the logger
            </summary>
      <param name="ex">A thrown exception.</param>
      <param name="format">Format string for the log message.</param>
      <param name="args">Arguments to be inserted into the format string.</param>
    </member>
    <member name="T:EventStore.ClientAPI.Common.SystemMetadata">
      <summary>
            Constants for information in stream metadata
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Common.SystemMetadata.MaxAge">
      <summary>
            The definition of the MaxAge value assigned to stream metadata
            Setting this allows all events older than the limit to be deleted
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Common.SystemMetadata.MaxCount">
      <summary>
            The definition of the MaxCount value assigned to stream metadata
            setting this allows all events with a sequence less than current -maxcount to be deleted
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Common.SystemMetadata.TruncateBefore">
      <summary>
            The definition of the Truncate Before value assigned to stream metadata
            setting this allows all events prior to the integer value to be deleted
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Common.SystemMetadata.CacheControl">
      <summary>
             Sets the cache control in seconds for the head of the stream.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Common.SystemMetadata.Acl">
      <summary>
             The acl definition in metadata
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Common.SystemMetadata.AclRead">
      <summary>
             to read from a stream
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Common.SystemMetadata.AclWrite">
      <summary>
             to write to a stream
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Common.SystemMetadata.AclDelete">
      <summary>
             to delete a stream
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Common.SystemMetadata.AclMetaRead">
      <summary>
             to read metadata 
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Common.SystemMetadata.AclMetaWrite">
      <summary>
             to write metadata 
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Common.SystemMetadata.UserStreamAcl">
      <summary>
             The user default acl stream 
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Common.SystemMetadata.SystemStreamAcl">
      <summary>
             the system stream defaults acl stream 
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.Common.SystemEventTypes">
      <summary>
            Constants for System event types
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Common.SystemEventTypes.StreamDeleted">
      <summary>
             event type for stream deleted
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Common.SystemEventTypes.StatsCollection">
      <summary>
             event type for statistics
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Common.SystemEventTypes.LinkTo">
      <summary>
             event type for linkTo 
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Common.SystemEventTypes.StreamMetadata">
      <summary>
             event type for stream metadata 
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Common.SystemEventTypes.Settings">
      <summary>
             event type for the system settings 
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.Common.SystemConsumerStrategies">
      <summary>
            System supported consumer strategies for use with persistent subscriptions.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Common.SystemConsumerStrategies.DispatchToSingle">
      <summary>
            Distributes events to a single client until it is full. Then round robin to the next client.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Common.SystemConsumerStrategies.RoundRobin">
      <summary>
            Distribute events to each client in a round robin fashion.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Common.SystemConsumerStrategies.Pinned">
      <summary>
            Distribute events of the same streamId to the same client until it disconnects on a best efforts basis. 
            Designed to be used with indexes such as the category projection.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.ClientClosedEventArgs">
      <summary>
            Event Arguments for the event raised when an <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> is
            disconnected from an Event Store server.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.ClientClosedEventArgs.#ctor(EventStore.ClientAPI.IEventStoreConnection,System.String)">
      <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.ClientClosedEventArgs" />.
            </summary>
      <param name="connection">The <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> responsible for raising the event.</param>
      <param name="reason">A description of the reason the connection was closed.</param>
    </member>
    <member name="P:EventStore.ClientAPI.ClientClosedEventArgs.Reason">
      <summary>
            A description of the reason the connection was closed if closing was initiated by the server or client API directly
            rather than by calling <see cref="M:EventStore.ClientAPI.IEventStoreConnection.Close" />.
            </summary>
    </member>
    <member name="P:EventStore.ClientAPI.ClientClosedEventArgs.Connection">
      <summary>
            The <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> responsible for raising the event.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.ConnectionSettings">
      <summary>
            A <see cref="T:EventStore.ClientAPI.ConnectionSettings" /> object is an immutable representation of the settings for an
            <see cref="T:EventStore.ClientAPI.IEventStoreConnection" />. A <see cref="T:EventStore.ClientAPI.ConnectionSettings" /> object can be built using
            a <see cref="T:EventStore.ClientAPI.ConnectionSettingsBuilder" />, either via the <see cref="M:EventStore.ClientAPI.ConnectionSettings.Create" /> method, or via
            the constructor of <see cref="T:EventStore.ClientAPI.ConnectionSettingsBuilder" />.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ConnectionSettings.Log">
      <summary>
            The <see cref="T:EventStore.ClientAPI.ILogger" /> that this connection will use
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ConnectionSettings.VerboseLogging">
      <summary>
            Whether or not do excessive logging of <see cref="T:EventStore.ClientAPI.EventStoreConnection" /> internal logic.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ConnectionSettings.MaxQueueSize">
      <summary>
            The maximum number of outstanding items allowed in the queue
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ConnectionSettings.MaxConcurrentItems">
      <summary>
            The maximum number of allowed asynchronous operations to be in process
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ConnectionSettings.MaxRetries">
      <summary>
            The maximum number of retry attempts
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ConnectionSettings.MaxReconnections">
      <summary>
            The maximum number of times to allow for reconnection
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ConnectionSettings.RequireMaster">
      <summary>
            Whether or not to require EventStore to refuse serving read or write request if it is not master
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ConnectionSettings.ReconnectionDelay">
      <summary>
            The amount of time to delay before attempting to reconnect
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ConnectionSettings.OperationTimeout">
      <summary>
            The amount of time before an operation is considered to have timed out
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ConnectionSettings.OperationTimeoutCheckPeriod">
      <summary>
            The amount of time that timeouts are checked in the system.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ConnectionSettings.DefaultUserCredentials">
      <summary>
            The <see cref="T:EventStore.ClientAPI.SystemData.UserCredentials" /> to use for operations where other <see cref="T:EventStore.ClientAPI.SystemData.UserCredentials" /> are not explicitly supplied.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ConnectionSettings.UseSslConnection">
      <summary>
            Whether or not the connection is encrypted using SSL.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ConnectionSettings.TargetHost">
      <summary>
            The host name of the server expected on the SSL certificate.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ConnectionSettings.ValidateServer">
      <summary>
            Whether or not to validate the server SSL certificate.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ConnectionSettings.FailOnNoServerResponse">
      <summary>
            Whether or not to raise an error if no response is received from the server for an operation.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ConnectionSettings.HeartbeatInterval">
      <summary>
            The interval at which to send heartbeat messages.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ConnectionSettings.HeartbeatTimeout">
      <summary>
            The interval after which an unacknowledged heartbeat will cause the connection to be considered faulted and disconnect.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ConnectionSettings.ClusterDns">
      <summary>
            The DNS name to use for discovering endpoints.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ConnectionSettings.MaxDiscoverAttempts">
      <summary>
            The maximum number of attempts for discovering endpoints.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ConnectionSettings.ExternalGossipPort">
      <summary>
            The well-known endpoint on which cluster managers are running.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ConnectionSettings.GossipSeeds">
      <summary>
            Endpoints for seeding gossip if not using DNS.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ConnectionSettings.GossipTimeout">
      <summary>
            Timeout for cluster gossip.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ConnectionSettings.ClientConnectionTimeout">
      <summary>
            The interval after which a client will time out during connection.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettings.Create">
      <summary>
            Creates a new set of <see cref="T:EventStore.ClientAPI.ConnectionSettings" /></summary>
      <returns>A <see cref="T:EventStore.ClientAPI.ConnectionSettingsBuilder" /> that can be used to build up a <see cref="T:EventStore.ClientAPI.ConnectionSettings" /></returns>
    </member>
    <member name="P:EventStore.ClientAPI.ConnectionSettings.Default">
      <summary>
            The default <see cref="T:EventStore.ClientAPI.ConnectionSettings"></see></summary>
    </member>
    <member name="T:EventStore.ClientAPI.DnsClusterSettingsBuilder">
      <summary>
            Fluent builder used to configure <see cref="T:EventStore.ClientAPI.ClusterSettings" /> for connecting to a cluster
            using DNS discovery.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.DnsClusterSettingsBuilder.SetClusterDns(System.String)">
      <summary>
            Sets the DNS name under which cluster nodes are listed.
            </summary>
      <param name="clusterDns">The DNS name under which cluster nodes are listed.</param>
      <returns>A <see cref="T:EventStore.ClientAPI.DnsClusterSettingsBuilder" /> for further configuration.</returns>
      <exception cref="T:System.ArgumentNullException">If <paramref name="clusterDns" /> is null or empty.</exception>
    </member>
    <member name="M:EventStore.ClientAPI.DnsClusterSettingsBuilder.SetMaxDiscoverAttempts(System.Int32)">
      <summary>
            Sets the maximum number of attempts for discovery.
            </summary>
      <param name="maxDiscoverAttempts">The maximum number of attempts for DNS discovery.</param>
      <returns>A <see cref="T:EventStore.ClientAPI.DnsClusterSettingsBuilder" /> for further configuration.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="maxDiscoverAttempts" /> is less than or equal to 0.</exception>
    </member>
    <member name="M:EventStore.ClientAPI.DnsClusterSettingsBuilder.SetGossipTimeout(System.TimeSpan)">
      <summary>
            Sets the period after which gossip times out if none is received.
            </summary>
      <param name="timeout">The period after which gossip times out if none is received.</param>
      <returns>A <see cref="T:EventStore.ClientAPI.DnsClusterSettingsBuilder" /> for further configuration.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.DnsClusterSettingsBuilder.SetClusterGossipPort(System.Int32)">
      <summary>
            Sets the well-known port on which the cluster gossip is taking place.
            
            If you are using the commercial edition of Event Store HA, with Manager nodes in
            place, this should be the port number of the External HTTP port on which the
            managers are running.
            
            If you are using the open source edition of Event Store HA, this should be the
            External HTTP port that the nodes are running on. If you cannot use a well-known
            port for this across all nodes, you can instead use gossip seed discovery and set
            the <see cref="T:System.Net.IPEndPoint" /> of some seed nodes instead.
            </summary>
      <param name="clusterGossipPort">The cluster gossip port.</param>
      <returns>A <see cref="T:EventStore.ClientAPI.DnsClusterSettingsBuilder" /> for further configuration.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.DnsClusterSettingsBuilder.op_Implicit(EventStore.ClientAPI.DnsClusterSettingsBuilder)~EventStore.ClientAPI.ClusterSettings">
      <summary>
            Builds a <see cref="T:EventStore.ClientAPI.ClusterSettings" /> object from a <see cref="T:EventStore.ClientAPI.DnsClusterSettingsBuilder" />.
            </summary>
      <param name="builder">
        <see cref="T:EventStore.ClientAPI.DnsClusterSettingsBuilder" /> from which to build a <see cref="T:EventStore.ClientAPI.ClusterSettings" /></param>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.DnsClusterSettingsBuilder.Build">
      <summary>
            Builds a <see cref="T:EventStore.ClientAPI.ClusterSettings" /> object from a <see cref="T:EventStore.ClientAPI.DnsClusterSettingsBuilder" />.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.GossipSeedClusterSettingsBuilder">
      <summary>
            Fluent builder used to configure <see cref="T:EventStore.ClientAPI.ClusterSettings" /> for connecting to a cluster
            using gossip seeds.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.GossipSeedClusterSettingsBuilder.SetGossipSeedEndPoints(System.Net.IPEndPoint[])">
      <summary>
            Sets gossip seed endpoints for the client.
            
            Note that this should be the external HTTP endpoint of the server, as it is required
            for the client to exchange gossip with the server. The standard port which should be
            used here is 2113.
            
            If the server requires a specific Host header to be sent as part of the gossip
            request, use the overload of this method taking <see cref="T:EventStore.ClientAPI.GossipSeed" /> instead.
            </summary>
      <param name="gossipSeeds">
        <see cref="T:System.Net.IPEndPoint" />s representing the endpoints of nodes from which to seed gossip.</param>
      <returns>A <see cref="T:EventStore.ClientAPI.ClusterSettingsBuilder" /> for further configuration.</returns>
      <exception cref="T:System.ArgumentException">If no gossip seeds are specified.</exception>
    </member>
    <member name="M:EventStore.ClientAPI.GossipSeedClusterSettingsBuilder.SetGossipSeedEndPoints(EventStore.ClientAPI.GossipSeed[])">
      <summary>
            Sets gossip seed endpoints for the client.
            </summary>
      <param name="gossipSeeds">
        <see cref="T:EventStore.ClientAPI.GossipSeed" />s representing the endpoints of nodes from which to seed gossip.</param>
      <returns>A <see cref="T:EventStore.ClientAPI.ClusterSettingsBuilder" /> for further configuration.</returns>
      <exception cref="T:System.ArgumentException">If no gossip seeds are specified.</exception>
    </member>
    <member name="M:EventStore.ClientAPI.GossipSeedClusterSettingsBuilder.SetMaxDiscoverAttempts(System.Int32)">
      <summary>
            Sets the maximum number of attempts for discovery.
            </summary>
      <param name="maxDiscoverAttempts">The maximum number of attempts for DNS discovery.</param>
      <returns>A <see cref="T:EventStore.ClientAPI.GossipSeedClusterSettingsBuilder" /> for further configuration.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="maxDiscoverAttempts" /> is less than or equal to 0.</exception>
    </member>
    <member name="M:EventStore.ClientAPI.GossipSeedClusterSettingsBuilder.SetGossipTimeout(System.TimeSpan)">
      <summary>
            Sets the period after which gossip times out if none is received.
            </summary>
      <param name="timeout">The period after which gossip times out if none is received.</param>
      <returns>A <see cref="T:EventStore.ClientAPI.GossipSeedClusterSettingsBuilder" /> for further configuration.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.GossipSeedClusterSettingsBuilder.op_Implicit(EventStore.ClientAPI.GossipSeedClusterSettingsBuilder)~EventStore.ClientAPI.ClusterSettings">
      <summary>
            Builds a <see cref="T:EventStore.ClientAPI.ClusterSettings" /> object from a <see cref="T:EventStore.ClientAPI.GossipSeedClusterSettingsBuilder" />.
            </summary>
      <param name="builder">
        <see cref="T:EventStore.ClientAPI.GossipSeedClusterSettingsBuilder" /> from which to build a <see cref="T:EventStore.ClientAPI.ClusterSettings" /></param>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.GossipSeedClusterSettingsBuilder.Build">
      <summary>
            Builds a <see cref="T:EventStore.ClientAPI.ClusterSettings" /> object from a <see cref="T:EventStore.ClientAPI.GossipSeedClusterSettingsBuilder" />.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.ConnectionSettingsBuilder">
      <summary>
            Used to build a connection settings (fluent API)
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.UseCustomLogger(EventStore.ClientAPI.ILogger)">
      <summary>
            Configures the connection to output log messages to the given <see cref="T:EventStore.ClientAPI.ILogger" />.
            </summary>
      <param name="logger">The <see cref="T:EventStore.ClientAPI.ILogger" /> to use.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.UseConsoleLogger">
      <summary>
            Configures the connection to output log messages to the console.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.UseDebugLogger">
      <summary>
            Configures the connection to output log messages to the listeners
            configured on <see cref="T:System.Diagnostics.Debug" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.UseFileLogger(System.String)">
      <summary>
            Configures the connection to output log messages to a file.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.EnableVerboseLogging">
      <summary>
            Turns on verbose <see cref="T:EventStore.ClientAPI.EventStoreConnection" /> internal logic logging.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitOperationsQueueTo(System.Int32)">
      <summary>
            Sets the limit for number of outstanding operations
            </summary>
      <param name="limit">The new limit of outstanding operations</param>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitConcurrentOperationsTo(System.Int32)">
      <summary>
            Limits the number of concurrent operations that this connection can have
            </summary>
      <param name="limit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitAttemptsForOperationTo(System.Int32)">
      <summary>
            Limits the number of operation attempts
            </summary>
      <param name="limit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitRetriesForOperationTo(System.Int32)">
      <summary>
            Limits the number of operation retries
            </summary>
      <param name="limit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.KeepRetrying">
      <summary>
            Allows infinite operation retry attempts
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitReconnectionsTo(System.Int32)">
      <summary>
            Limits the number of reconnections this connection can try to make
            </summary>
      <param name="limit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.KeepReconnecting">
      <summary>
            Allows infinite reconnection attempts
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnMasterOnly">
      <summary>
            Requires all write and read requests to be served only by master (cluster version only) 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.PerformOnAnyNode">
      <summary>
            Allow for writes to be forwarded and read requests served locally if node is not master (cluster version only) 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetReconnectionDelayTo(System.TimeSpan)">
      <summary>
            Sets the delay between reconnection attempts
            </summary>
      <param name="reconnectionDelay">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetOperationTimeoutTo(System.TimeSpan)">
      <summary>
            Sets the operation timeout duration
            </summary>
      <param name="operationTimeout">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetTimeoutCheckPeriodTo(System.TimeSpan)">
      <summary>
            Sets how often timeouts should be checked for.
            </summary>
      <param name="timeoutCheckPeriod">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetDefaultUserCredentials(EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Sets the default <see cref="T:EventStore.ClientAPI.SystemData.UserCredentials" /> to be used for this connection.
            If user credentials are not given for an operation, these credentials will be used.
            </summary>
      <param name="userCredentials">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.UseSslConnection(System.String,System.Boolean)">
      <summary>
            Uses a SSL connection over TCP. This should generally be used with authentication.
            </summary>
      <param name="targetHost">HostName of server certificate.</param>
      <param name="validateServer">Whether to accept connection from server with not trusted certificate.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.FailOnNoServerResponse">
      <summary>
            Marks that no response from server should cause an error on the request
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatInterval(System.TimeSpan)">
      <summary>
            Sets how often heartbeats should be expected on the connection (lower values detect broken sockets faster)
            </summary>
      <param name="interval">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetHeartbeatTimeout(System.TimeSpan)">
      <summary>
            Sets how long to wait without heartbeats before determining a connection to be dead (must be longer than heartbeat interval)
            </summary>
      <param name="timeout">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.WithConnectionTimeoutOf(System.TimeSpan)">
      <summary>
            Sets the timeout for attempting to connect to a server before aborting and attempting a reconnect.
            </summary>
      <param name="timeout">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterDns(System.String)">
      <summary>
            Sets the DNS name under which cluster nodes are listed.
            </summary>
      <param name="clusterDns">The DNS name under which cluster nodes are listed.</param>
      <returns>A <see cref="T:EventStore.ClientAPI.DnsClusterSettingsBuilder" /> for further configuration.</returns>
      <exception cref="T:System.ArgumentNullException">If <paramref name="clusterDns" /> is null or empty.</exception>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetMaxDiscoverAttempts(System.Int32)">
      <summary>
            Sets the maximum number of attempts for discovery.
            </summary>
      <param name="maxDiscoverAttempts">The maximum number of attempts for DNS discovery.</param>
      <returns>A <see cref="T:EventStore.ClientAPI.DnsClusterSettingsBuilder" /> for further configuration.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="maxDiscoverAttempts" /> is less than or equal to 0.</exception>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipTimeout(System.TimeSpan)">
      <summary>
            Sets the period after which gossip times out if none is received.
            </summary>
      <param name="timeout">The period after which gossip times out if none is received.</param>
      <returns>A <see cref="T:EventStore.ClientAPI.DnsClusterSettingsBuilder" /> for further configuration.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetClusterGossipPort(System.Int32)">
      <summary>
            Sets the well-known port on which the cluster gossip is taking place.
            
            If you are using the commercial edition of Event Store HA, with Manager nodes in
            place, this should be the port number of the External HTTP port on which the
            managers are running.
            
            If you are using the open source edition of Event Store HA, this should be the
            External HTTP port that the nodes are running on. If you cannot use a well-known
            port for this across all nodes, you can instead use gossip seed discovery and set
            the <see cref="T:System.Net.IPEndPoint" /> of some seed nodes instead.
            </summary>
      <param name="clusterGossipPort">The cluster gossip port.</param>
      <returns>A <see cref="T:EventStore.ClientAPI.DnsClusterSettingsBuilder" /> for further configuration.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints(System.Net.IPEndPoint[])">
      <summary>
            Sets gossip seed endpoints for the client.
            
            Note that this should be the external HTTP endpoint of the server, as it is required
            for the client to exchange gossip with the server. The standard port which should be
            used here is 2113.
            
            If the server requires a specific Host header to be sent as part of the gossip
            request, use the overload of this method taking <see cref="T:EventStore.ClientAPI.GossipSeed" /> instead.
            </summary>
      <param name="gossipSeeds">
        <see cref="T:System.Net.IPEndPoint" />s representing the endpoints of nodes from which to seed gossip.</param>
      <returns>A <see cref="T:EventStore.ClientAPI.ClusterSettingsBuilder" /> for further configuration.</returns>
      <exception cref="T:System.ArgumentException">If no gossip seeds are specified.</exception>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.SetGossipSeedEndPoints(EventStore.ClientAPI.GossipSeed[])">
      <summary>
            Sets gossip seed endpoints for the client.
            </summary>
      <param name="gossipSeeds">
        <see cref="T:EventStore.ClientAPI.GossipSeed" />s representing the endpoints of nodes from which to seed gossip.</param>
      <returns>A <see cref="T:EventStore.ClientAPI.ClusterSettingsBuilder" /> for further configuration.</returns>
      <exception cref="T:System.ArgumentException">If no gossip seeds are specified.</exception>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.op_Implicit(EventStore.ClientAPI.ConnectionSettingsBuilder)~EventStore.ClientAPI.ConnectionSettings">
      <summary>
            Convert the mutable <see cref="T:EventStore.ClientAPI.ConnectionSettingsBuilder" /> object to an immutable
            <see cref="T:EventStore.ClientAPI.ConnectionSettings" /> object.
            </summary>
      <param name="builder">The <see cref="T:EventStore.ClientAPI.ConnectionSettingsBuilder" /> to convert.</param>
      <returns>An immutable <see cref="T:EventStore.ClientAPI.ConnectionSettings" /> object with the values specified by the builder.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.ConnectionSettingsBuilder.Build">
      <summary>
            Convert the mutable <see cref="T:EventStore.ClientAPI.ConnectionSettingsBuilder" /> object to an immutable
            <see cref="T:EventStore.ClientAPI.ConnectionSettings" /> object.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.ClusterSettings">
      <summary>
            Contains settings relating to a connection to a cluster. 
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ClusterSettings.ClusterDns">
      <summary>
            The DNS name to use for discovering endpoints.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ClusterSettings.MaxDiscoverAttempts">
      <summary>
            The maximum number of attempts for discovering endpoints.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ClusterSettings.ExternalGossipPort">
      <summary>
            The well-known endpoint on which cluster managers are running.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ClusterSettings.GossipSeeds">
      <summary>
            Endpoints for seeding gossip if not using DNS.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ClusterSettings.GossipTimeout">
      <summary>
            Timeout for cluster gossip.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.ClusterSettings.Create">
      <summary>
            Creates a new set of <see cref="T:EventStore.ClientAPI.ClusterSettings" /></summary>
      <returns>A <see cref="T:EventStore.ClientAPI.ClusterSettingsBuilder" /> that can be used to build up a <see cref="T:EventStore.ClientAPI.ClusterSettings" /></returns>
    </member>
    <member name="M:EventStore.ClientAPI.ClusterSettings.#ctor(EventStore.ClientAPI.GossipSeed[],System.Int32,System.TimeSpan)">
      <summary>
            Used if we're connecting with gossip seeds
            </summary>
      <param name="gossipSeeds">Endpoints for seeding gossip</param>
      <param name="maxDiscoverAttempts">Maximum number of attempts to discover the cluster</param>
      <param name="gossipTimeout">Timeout for cluster gossip</param>
    </member>
    <member name="M:EventStore.ClientAPI.ClusterSettings.#ctor(System.String,System.Int32,System.Int32,System.TimeSpan)">
      <summary>
            Used if we're discovering via DNS
            </summary>
      <param name="clusterDns">The DNS name to use for discovering endpoints</param>
      <param name="maxDiscoverAttempts">The maximum number of attempts for discovering endpoints</param>
      <param name="externalGossipPort">The well-known endpoint on which cluster managers are running</param>
      <param name="gossipTimeout">Timeout for cluster gossip</param>
    </member>
    <member name="T:EventStore.ClientAPI.ClusterSettingsBuilder">
      <summary>
            Builder used for creating instances of ClusterSettings.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.ClusterSettingsBuilder.DiscoverClusterViaDns">
      <summary>
            Sets the client to discover nodes using a DNS name and a well-known port.
            </summary>
      <returns>A <see cref="T:EventStore.ClientAPI.DnsClusterSettingsBuilder" /> for further configuration.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.ClusterSettingsBuilder.DiscoverClusterViaGossipSeeds">
      <summary>
            Sets the client to discover cluster nodes by specifying the IP endpoints of
            one or more of the nodes.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:EventStore.ClientAPI.ClientConnectionEventArgs">
      <summary>
            Event Arguments for the event raised when an <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> is
            connected to or disconnected from an Event Store server.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.ClientConnectionEventArgs.#ctor(EventStore.ClientAPI.IEventStoreConnection,System.Net.IPEndPoint)">
      <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.ClientConnectionEventArgs" />.
            </summary>
      <param name="connection">The <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> responsible for raising the event.</param>
      <param name="remoteEndPoint">The endpoint of the Event Store server to or from which the connection was connected or disconnected.</param>
    </member>
    <member name="P:EventStore.ClientAPI.ClientConnectionEventArgs.RemoteEndPoint">
      <summary>
            The endpoint of the Event Store server to or from which the connection was connected or disconnected.
            </summary>
    </member>
    <member name="P:EventStore.ClientAPI.ClientConnectionEventArgs.Connection">
      <summary>
            The <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> responsible for raising the event.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.EventReadStatus">
      <summary>
            Enumeration representing the status of a single event read operation.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.EventReadStatus.Success">
      <summary>
            The read operation was successful.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.EventReadStatus.NotFound">
      <summary>
            The event was not found.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.EventReadStatus.NoStream">
      <summary>
            The stream was not found.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.EventReadStatus.StreamDeleted">
      <summary>
            The stream previously existed but was deleted.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.Exceptions.ProjectionCommandConflictException">
      <summary>
            Exception thrown if a projection command fails.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.ProjectionCommandConflictException.#ctor">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.ProjectionCommandConflictException.#ctor(System.Int32,System.String)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.ProjectionCommandConflictException.#ctor(System.String,System.Exception)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.ProjectionCommandConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ProjectionCommandFailedException" />.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.RawStreamMetadataResult">
      <summary>
            Represents stream metadata as a series of properties for system
            data and a byte array for user metadata.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.RawStreamMetadataResult.Stream">
      <summary>
            The name of the stream.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.RawStreamMetadataResult.IsStreamDeleted">
      <summary>
            True if the stream is soft-deleted.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.RawStreamMetadataResult.MetastreamVersion">
      <summary>
            The version of the metadata format.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.RawStreamMetadataResult.StreamMetadata">
      <summary>
            A byte array containing user-specified metadata.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.RawStreamMetadataResult.#ctor(System.String,System.Boolean,System.Int32,System.Byte[])">
      <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.RawStreamMetadataResult" />.
            </summary>
      <param name="stream">The name of the stream.</param>
      <param name="isStreamDeleted">True if the stream is soft-deleted.</param>
      <param name="metastreamVersion">The version of the metadata format.</param>
      <param name="streamMetadata">A byte array containing user-specified metadata.</param>
    </member>
    <member name="T:EventStore.ClientAPI.StreamMetadataBuilder">
      <summary>
            Builder for <see cref="T:EventStore.ClientAPI.StreamMetadata" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.op_Implicit(EventStore.ClientAPI.StreamMetadataBuilder)~EventStore.ClientAPI.StreamMetadata">
      <summary>
            Builds a <see cref="T:EventStore.ClientAPI.StreamMetadata" /> from a <see cref="T:EventStore.ClientAPI.StreamMetadataBuilder" />.
            </summary>
      <param name="builder">A <see cref="T:EventStore.ClientAPI.StreamMetadataBuilder" />.</param>
      <returns>A <see cref="T:EventStore.ClientAPI.StreamMetadata" />.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.Build">
      <summary>
            Builds a <see cref="T:EventStore.ClientAPI.StreamMetadata" /> from a <see cref="T:EventStore.ClientAPI.StreamMetadataBuilder" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetMaxCount(System.Int32)">
      <summary>
            Sets the maximum number of events allowed in the stream.
            </summary>
      <param name="maxCount">The maximum number of events allowed in the stream.</param>
      <returns>The builder.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetMaxAge(System.TimeSpan)">
      <summary>
            Sets the maximum age of events allowed in the stream.
            </summary>
      <param name="maxAge">The maximum age of events allowed in the stream.</param>
      <returns>The builder.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetTruncateBefore(System.Int32)">
      <summary>
            Sets the event number from which previous events can be scavenged.
            </summary>
      <param name="truncateBefore">The event number from which previous events can be scavenged.</param>
      <returns>The builder.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCacheControl(System.TimeSpan)">
      <summary>
            Sets the amount of time for which the stream head is cachable.
            </summary>
      <param name="cacheControl">The amount of time for which the stream head is cachable.</param>
      <returns>The builder.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetReadRole(System.String)">
      <summary>
            Sets a single role name with read permission for the stream.
            </summary>
      <param name="role">Role name.</param>
      <returns>The builder.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetReadRoles(System.String[])">
      <summary>
            Sets role names with read permission for the stream.
            </summary>
      <param name="roles">Role names.</param>
      <returns>The builder.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetWriteRole(System.String)">
      <summary>
            Sets a single role name with write permission for the stream.
            </summary>
      <param name="role">Role name.</param>
      <returns>The builder.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetWriteRoles(System.String[])">
      <summary>
            Sets role names with write permission for the stream.
            </summary>
      <param name="roles">Role names.</param>
      <returns>The builder.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetDeleteRole(System.String)">
      <summary>
            Sets a single role name with delete permission for the stream.
            </summary>
      <param name="role">Role name.</param>
      <returns>The builder.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetDeleteRoles(System.String[])">
      <summary>
            Sets role names with delete permission for the stream.
            </summary>
      <param name="roles">Role names.</param>
      <returns>The builder.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetMetadataReadRole(System.String)">
      <summary>
            Sets a single role name with metadata read permission for the stream.
            </summary>
      <param name="role">Role name.</param>
      <returns>The builder.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetMetadataReadRoles(System.String[])">
      <summary>
            Sets role names with metadata read permission for the stream.
            </summary>
      <param name="roles">Role names.</param>
      <returns>The builder.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetMetadataWriteRole(System.String)">
      <summary>
            Sets a single role name with metadata write permission for the stream.
            </summary>
      <param name="role">Role name.</param>
      <returns>The builder.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetMetadataWriteRoles(System.String[])">
      <summary>
            Sets role names with metadata write permission for the stream.
            </summary>
      <param name="roles">Role names.</param>
      <returns>The builder.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCustomProperty(System.String,System.String)">
      <summary>
            Sets a custom metadata property.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <returns>The builder.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCustomProperty(System.String,System.Int32)">
      <summary>
            Sets a custom metadata property.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <returns>The builder.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCustomProperty(System.String,System.Nullable{System.Int32})">
      <summary>
            Sets a custom metadata property.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <returns>The builder.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCustomProperty(System.String,System.Int64)">
      <summary>
            Sets a custom metadata property.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <returns>The builder.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCustomProperty(System.String,System.Nullable{System.Int64})">
      <summary>
            Sets a custom metadata property.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <returns>The builder.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCustomProperty(System.String,System.Single)">
      <summary>
            Sets a custom metadata property.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <returns>The builder.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCustomProperty(System.String,System.Nullable{System.Single})">
      <summary>
            Sets a custom metadata property.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <returns>The builder.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCustomProperty(System.String,System.Double)">
      <summary>
            Sets a custom metadata property.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <returns>The builder.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCustomProperty(System.String,System.Nullable{System.Double})">
      <summary>
            Sets a custom metadata property.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <returns>The builder.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCustomProperty(System.String,System.Decimal)">
      <summary>
            Sets a custom metadata property.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <returns>The builder.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCustomProperty(System.String,System.Nullable{System.Decimal})">
      <summary>
            Sets a custom metadata property.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <returns>The builder.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCustomProperty(System.String,System.Boolean)">
      <summary>
            Sets a custom metadata property.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <returns>The builder.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCustomProperty(System.String,System.Nullable{System.Boolean})">
      <summary>
            Sets a custom metadata property.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <returns>The builder.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataBuilder.SetCustomPropertyWithValueAsRawJsonString(System.String,System.String)">
      <summary>
            Sets a custom metadata property to a string of raw JSON.
            </summary>
      <param name="key">The key.</param>
      <param name="rawJson">The value.</param>
      <returns>The builder.</returns>
    </member>
    <member name="T:EventStore.ClientAPI.StreamMetadataResult">
      <summary>
            Represents stream metadata as a series of properties for system
            data and a <see cref="F:EventStore.ClientAPI.StreamMetadataResult.StreamMetadata" /> object for user metadata.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.StreamMetadataResult.Stream">
      <summary>
            The name of the stream.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.StreamMetadataResult.IsStreamDeleted">
      <summary>
            True if the stream is soft-deleted.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.StreamMetadataResult.MetastreamVersion">
      <summary>
            The version of the metadata format.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.StreamMetadataResult.StreamMetadata">
      <summary>
            A <see cref="F:EventStore.ClientAPI.StreamMetadataResult.StreamMetadata" /> containing user-specified metadata.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadataResult.#ctor(System.String,System.Boolean,System.Int32,EventStore.ClientAPI.StreamMetadata)">
      <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.StreamMetadataResult" />.
            </summary>
      <param name="stream">The name of the stream.</param>
      <param name="isStreamDeleted">True if the stream is soft-deleted.</param>
      <param name="metastreamVersion">The version of the metadata format.</param>
      <param name="streamMetadata">A <see cref="T:EventStore.ClientAPI.StreamMetadataResult" /> containing user-specified metadata.</param>
    </member>
    <member name="T:EventStore.ClientAPI.UserManagement.RelLink">
      <summary>
      </summary>
    </member>
    <member name="F:EventStore.ClientAPI.UserManagement.RelLink.Href">
      <summary>
      </summary>
    </member>
    <member name="F:EventStore.ClientAPI.UserManagement.RelLink.Rel">
      <summary>
      </summary>
    </member>
    <member name="M:EventStore.ClientAPI.UserManagement.RelLink.#ctor(System.String,System.String)">
      <summary>
      </summary>
      <param name="href">
      </param>
      <param name="rel">
      </param>
    </member>
    <member name="T:EventStore.ClientAPI.UserManagement.UserCreationInformation">
      <summary>
            Class holding the information needed to create a user.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.UserManagement.UserCreationInformation.LoginName">
      <summary>
            The new users login name.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.UserManagement.UserCreationInformation.FullName">
      <summary>
            The full name of the new user.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.UserManagement.UserCreationInformation.Groups">
      <summary>
            The groups the new user should become a member of.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.UserManagement.UserCreationInformation.Password">
      <summary>
            The password of the new user.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.UserManagement.UserCreationInformation.#ctor(System.String,System.String,System.String[],System.String)">
      <summary>
            Enstantiates a new <see cref="T:EventStore.ClientAPI.UserManagement.UserCreationInformation" /> class.
            </summary>
      <param name="login">
      </param>
      <param name="fullName">
      </param>
      <param name="groups">
      </param>
      <param name="password">
      </param>
    </member>
    <member name="T:EventStore.ClientAPI.UserManagement.UserDetails">
      <summary>
            Provides the details for a user.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.UserManagement.UserDetails.LoginName">
      <summary>
            The users login name.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.UserManagement.UserDetails.FullName">
      <summary>
            The full name of the user.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.UserManagement.UserDetails.Groups">
      <summary>
            The groups the user is a member of.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.UserManagement.UserDetails.DateLastUpdated">
      <summary>
            The date/time the user was updated in UTC format.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.UserManagement.UserDetails.Disabled">
      <summary>
            Whether the user disable or not.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.UserManagement.UserDetails.Links">
      <summary>
            List of hypermedia links describing actions allowed on user resource.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.UserManagement.UserDetails.#ctor(System.String,System.String,System.String[],System.Boolean,System.Nullable{System.DateTimeOffset},EventStore.ClientAPI.UserManagement.RelLink[])">
      <summary>
            create a new <see cref="T:EventStore.ClientAPI.UserManagement.UserDetails" /> class.
            </summary>
      <param name="loginName">The login name of the user.</param>
      <param name="fullName">The users full name.</param>
      <param name="groups">The groups this user is a member if.</param>
      <param name="disabled">Is this user disabled or not.</param>
      <param name="dateLastUpdated">The datt/time this user was last updated in UTC format.</param>
      <param name="links">List of hypermedia links describing actions allowed on user resource.</param>
    </member>
    <member name="M:EventStore.ClientAPI.UserManagement.UserDetails.GetRelLink(System.String)">
      <summary>
      </summary>
      <param name="rel">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:EventStore.ClientAPI.UserManagement.UsersManager">
      <summary>
            API for managing users in the Event Store through C# code. Communicates
            with the Event Store over the RESTful API.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.UserManagement.UsersManager.#ctor(EventStore.ClientAPI.ILogger,System.Net.IPEndPoint,System.TimeSpan)">
      <summary>
            Creates a new instance of <see cref="T:EventStore.ClientAPI.UserManagement.UsersManager" />.
            </summary>
      <param name="log">An instance of <see cref="T:EventStore.ClientAPI.ILogger" /> to use for logging.</param>
      <param name="httpEndPoint">HTTP endpoint of an Event Store server.</param>
      <param name="operationTimeout">
      </param>
    </member>
    <member name="M:EventStore.ClientAPI.UserManagement.UsersManager.EnableAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously enables a user
            </summary>
      <param name="login">The login of the user to enable</param>
      <param name="userCredentials">Credentials for a user with permission to enable a user</param>
      <returns>A task representing the operation.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.UserManagement.UsersManager.DisableAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously disables a user
            </summary>
      <param name="login">The login of the user to disable</param>
      <param name="userCredentials">Credentials for a user with permission to disable a user</param>
      <returns>A task representing the operation.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.UserManagement.UsersManager.DeleteUserAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously deletes a user
            </summary>
      <param name="login">The login of the user.</param>
      <param name="userCredentials">Credentials for a user with permission to delete a user</param>
      <returns>A task representing the operation.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.UserManagement.UsersManager.ListAllAsync(EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously lists all users.
            </summary>
      <param name="userCredentials">Credentials for the operation.</param>
      <returns>String of JSON containing user full names and logins.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.UserManagement.UsersManager.GetCurrentUserAsync(EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously gets the current users details
            </summary>
      <param name="userCredentials">Credentials for the operation.</param>
      <returns>A <see cref="T:EventStore.ClientAPI.UserManagement.UserDetails" /> object for the currently logged in user</returns>
    </member>
    <member name="M:EventStore.ClientAPI.UserManagement.UsersManager.GetUserAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously gets a users details
            </summary>
      <param name="login">the login for the user who's details should be retrieved.</param>
      <param name="userCredentials">Credentials for the operation.</param>
      <returns>A <see cref="T:EventStore.ClientAPI.UserManagement.UserDetails" /> object for the user</returns>
    </member>
    <member name="M:EventStore.ClientAPI.UserManagement.UsersManager.CreateUserAsync(System.String,System.String,System.String[],System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Create a new user.
            </summary>
      <param name="login">The login name of the new user.</param>
      <param name="fullName">The full name of the new user.</param>
      <param name="groups">The groups the new user should be a member of.</param>
      <param name="password">The new users password.</param>
      <param name="userCredentials">Credentials for the operation.</param>
      <returns>A task representing the operation.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.UserManagement.UsersManager.UpdateUserAsync(System.String,System.String,System.String[],EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Update an existing user.
            </summary>
      <param name="login">The login name of the user to update.</param>
      <param name="fullName">The full name of the user being updated.</param>
      <param name="groups">The groups the updated user should be a member of.</param>
      <param name="userCredentials">Credentials for the operation.</param>
      <returns>A task representing the operation.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.UserManagement.UsersManager.ChangePasswordAsync(System.String,System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Change a users password.
            </summary>
      <param name="login">The login of the user who's password should be changed</param>
      <param name="oldPassword">The users old password.</param>
      <param name="newPassword">The users new password</param>
      <param name="userCredentials">Credentials for the operation.</param>
      <returns>A task representing the operation.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.UserManagement.UsersManager.ResetPasswordAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Reset a users password.
            </summary>
      <param name="login">The login of the user who's password should be reset.</param>
      <param name="newPassword">The users new password</param>
      <param name="userCredentials">Credentials for the operation.</param>
      <returns>A task representing the operation.</returns>
    </member>
    <member name="T:EventStore.ClientAPI.WriteResult">
      <summary>
            Result type returned after writing to a stream.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.WriteResult.NextExpectedVersion">
      <summary>
            The next expected version for the stream.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.WriteResult.LogPosition">
      <summary>
            The <see cref="F:EventStore.ClientAPI.WriteResult.LogPosition" /> of the write.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.WriteResult.#ctor(System.Int32,EventStore.ClientAPI.Position)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.WriteResult" />.
            </summary>
      <param name="nextExpectedVersion">The next expected version for the stream.</param>
      <param name="logPosition">The position of the write in the log</param>
    </member>
    <member name="T:EventStore.ClientAPI.DeleteResult">
      <summary>
            Result type returned after deleting a stream.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.DeleteResult.LogPosition">
      <summary>
            The <see cref="F:EventStore.ClientAPI.DeleteResult.LogPosition" /> of the write.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.DeleteResult.#ctor(EventStore.ClientAPI.Position)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.DeleteResult" />.
            </summary>
      <param name="logPosition">The position of the write in the log</param>
    </member>
    <member name="T:EventStore.ClientAPI.SystemSettings">
      <summary>
            Represents global settings for an Event Store server.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.SystemSettings.UserStreamAcl">
      <summary>
            Default access control list for new user streams.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.SystemSettings.SystemStreamAcl">
      <summary>
            Default access control list for new system streams.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.SystemSettings.#ctor(EventStore.ClientAPI.StreamAcl,EventStore.ClientAPI.StreamAcl)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.SystemSettings" />.
            </summary>
      <param name="userStreamAcl">
      </param>
      <param name="systemStreamAcl">
      </param>
    </member>
    <member name="M:EventStore.ClientAPI.SystemSettings.ToString">
      <summary>
            Returns a string that represents the current object.
            </summary>
      <returns>
            A string that represents the current object.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:EventStore.ClientAPI.SystemSettings.FromJsonBytes(System.Byte[])">
      <summary>
            Creates a <see cref="T:EventStore.ClientAPI.SystemSettings" /> object from a JSON string
            in a byte array.
            </summary>
      <param name="json">Byte array containing a JSON string.</param>
      <returns>A <see cref="T:EventStore.ClientAPI.SystemSettings" /> object.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.SystemSettings.ToJsonBytes">
      <summary>
            Creates a byte array containing a UTF-8 string with no byte order
            mark representing this <see cref="T:EventStore.ClientAPI.SystemSettings" /> object.
            </summary>
      <returns>A byte array containing a UTF-8 string with no byte order mark.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.SystemSettings.ToJsonString">
      <summary>
            Creates a string containing representing this <see cref="T:EventStore.ClientAPI.SystemSettings" />
            object.
            </summary>
      <returns>A string representing this <see cref="T:EventStore.ClientAPI.SystemSettings" />.</returns>
    </member>
    <member name="T:EventStore.ClientAPI.EventReadResult">
      <summary>
            A Event Read Result is the result of a single event read operation to the event store.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.EventReadResult.Status">
      <summary>
            The <see cref="T:EventStore.ClientAPI.EventReadStatus" /> representing the status of this read attempt
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.EventReadResult.Stream">
      <summary>
            The name of the stream read
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.EventReadResult.EventNumber">
      <summary>
            The event number of the requested event.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.EventReadResult.Event">
      <summary>
            The event read represented as <see cref="T:EventStore.ClientAPI.ResolvedEvent" /></summary>
    </member>
    <member name="T:EventStore.ClientAPI.Exceptions.ClusterException">
      <summary>
            Exception thrown if cluster discovery fails.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.ClusterException.#ctor">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ClusterException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.ClusterException.#ctor(System.String)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ClusterException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.ClusterException.#ctor(System.String,System.Exception)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ClusterException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.ClusterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ClusterException" />.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.Exceptions.NotAuthenticatedException">
      <summary>
            Exception thrown if an operation requires authentication but
            the client is not authenticated.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.NotAuthenticatedException.#ctor">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.NotAuthenticatedException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.NotAuthenticatedException.#ctor(System.String)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.NotAuthenticatedException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.NotAuthenticatedException.#ctor(System.String,System.Exception)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.NotAuthenticatedException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.NotAuthenticatedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.NotAuthenticatedException" />.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.StreamAcl">
      <summary>
            Represents an access control list for a stream
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.StreamAcl.ReadRoles">
      <summary>
            Roles and users permitted to read the stream
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.StreamAcl.WriteRoles">
      <summary>
            Roles and users permitted to write to the stream
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.StreamAcl.DeleteRoles">
      <summary>
            Roles and users permitted to delete the stream
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.StreamAcl.MetaReadRoles">
      <summary>
            Roles and users permitted to read stream metadata
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.StreamAcl.MetaWriteRoles">
      <summary>
            Roles and users permitted to write stream metadata
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.StreamAcl.#ctor(System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Creates a new Stream Access Control List
            </summary>
      <param name="readRole">Role and user permitted to read the stream</param>
      <param name="writeRole">Role and user permitted to write to the stream</param>
      <param name="deleteRole">Role and user permitted to delete the stream</param>
      <param name="metaReadRole">Role and user permitted to read stream metadata</param>
      <param name="metaWriteRole">Role and user permitted to write stream metadata</param>
    </member>
    <member name="M:EventStore.ClientAPI.StreamAcl.#ctor(System.String[],System.String[],System.String[],System.String[],System.String[])">
      <summary>
      </summary>
      <param name="readRoles">Roles and users permitted to read the stream</param>
      <param name="writeRoles">Roles and users permitted to write to the stream</param>
      <param name="deleteRoles">Roles and users permitted to delete the stream</param>
      <param name="metaReadRoles">Roles and users permitted to read stream metadata</param>
      <param name="metaWriteRoles">Roles and users permitted to write stream metadata</param>
    </member>
    <member name="M:EventStore.ClientAPI.StreamAcl.ToString">
      <summary>
            Returns a string that represents the current object.
            </summary>
      <returns>
            A string that represents the current object.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:EventStore.ClientAPI.StreamAcl.ReadRole">
      <summary>
            Role or user permitted to read the stream
            </summary>
    </member>
    <member name="P:EventStore.ClientAPI.StreamAcl.WriteRole">
      <summary>
            Role or user permitted to write to the stream
            </summary>
    </member>
    <member name="P:EventStore.ClientAPI.StreamAcl.DeleteRole">
      <summary>
            Role or user permitted to delete from the stream 
            </summary>
    </member>
    <member name="P:EventStore.ClientAPI.StreamAcl.MetaReadRole">
      <summary>
            Role or user permitted to read the stream metadata
            </summary>
    </member>
    <member name="P:EventStore.ClientAPI.StreamAcl.MetaWriteRole">
      <summary>
            Role or user permitted to write to the stream metadata
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.SubscriptionDropReason">
      <summary>
            Represents the reason subscription drop happened
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.SubscriptionDropReason.UserInitiated">
      <summary>
            Subscription dropped because the client called Close.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.SubscriptionDropReason.NotAuthenticated">
      <summary>
            Subscription dropped because the client is not authenticated.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.SubscriptionDropReason.AccessDenied">
      <summary>
            Subscription dropped because access to the stream was denied.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.SubscriptionDropReason.SubscribingError">
      <summary>
            Subscription dropped because of an error in the subscription phase.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.SubscriptionDropReason.ServerError">
      <summary>
            Subscription dropped because of a server error.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.SubscriptionDropReason.ConnectionClosed">
      <summary>
            Subscription dropped because the connection was closed.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.SubscriptionDropReason.CatchUpError">
      <summary>
            Subscription dropped because of an error during the catch-up phase.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.SubscriptionDropReason.ProcessingQueueOverflow">
      <summary>
            Subscription dropped because it's queue overflowed.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.SubscriptionDropReason.EventHandlerException">
      <summary>
            Subscription dropped because an exception was thrown by a handler.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.SubscriptionDropReason.MaxSubscribersReached">
      <summary>
            The maximum number of subscribers for the persistent subscription has been reached
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.SubscriptionDropReason.PersistentSubscriptionDeleted">
      <summary>
            The persistent subscription has been deleted
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.SubscriptionDropReason.Unknown">
      <summary>
            Subscription was dropped for an unknown reason.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.SubscriptionDropReason.NotFound">
      <summary>
            Target of persistent subscription was not found. Needs to be created first
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.Exceptions.AccessDeniedException">
      <summary>
            Exception thrown when a user is not authorised to carry out
            an operation.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.AccessDeniedException.#ctor">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.AccessDeniedException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.AccessDeniedException.#ctor(System.String)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.AccessDeniedException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.AccessDeniedException.#ctor(System.String,System.Exception)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.AccessDeniedException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.AccessDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.AccessDeniedException" />.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.StreamMetadata">
      <summary>
            A class representing stream metadata with strongly typed properties
            for system values and a dictionary-like interface for custom values.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.StreamMetadata.MaxCount">
      <summary>
            The maximum number of events allowed in the stream.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.StreamMetadata.MaxAge">
      <summary>
            The maximum age of events allowed in the stream.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.StreamMetadata.TruncateBefore">
      <summary>
            The event number from which previous events can be scavenged.
            This is used to implement soft-deletion of streams.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.StreamMetadata.CacheControl">
      <summary>
            The amount of time for which the stream head is cachable.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.StreamMetadata.Acl">
      <summary>
            The access control list for the stream.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadata.Create(System.Nullable{System.Int32},System.Nullable{System.TimeSpan},System.Nullable{System.Int32},System.Nullable{System.TimeSpan},EventStore.ClientAPI.StreamAcl)">
      <summary>
            Creates a <see cref="T:EventStore.ClientAPI.StreamMetadata" /> with the specified parameters.
            </summary>
      <param name="maxCount">The maximum number of events allowed in the stream.</param>
      <param name="maxAge">The maximum age of events allowed in the stream.</param>
      <param name="truncateBefore">The event number from which previous events can be scavenged.</param>
      <param name="cacheControl">The amount of time for which the stream head is cachable.</param>
      <param name="acl">The access control list for the stream.</param>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadata.Build">
      <summary>
            Builds a <see cref="T:EventStore.ClientAPI.StreamMetadata" /> from a <see cref="T:EventStore.ClientAPI.StreamMetadataBuilder" />.
            </summary>
      <returns>An instance of <see cref="T:EventStore.ClientAPI.StreamMetadata" />.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadata.GetValue``1(System.String)">
      <summary>
            Get a value of type T for the given key from the custom metadata.
            This method will throw an <see cref="T:System.ArgumentException" /> if the
            key is not found.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="key">A key.</param>
      <returns>Value of type T for the key.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadata.TryGetValue``1(System.String,``0@)">
      <summary>
            Tries to get a value of type T for the given key from the custom
            metadata, and if it exists returns true from the method and gives
            the value as an out parameter.
            </summary>
      <param name="key">A key.</param>
      <param name="value">Output variable for the value of type T for the key.</param>
      <typeparam name="T">The type of the value.</typeparam>
      <returns>True if the key exists, false otherwise.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadata.GetValueAsRawJsonString(System.String)">
      <summary>
            Gets a string containing raw JSON value for the given key.
            </summary>
      <param name="key">A key.</param>
      <returns>String containing raw JSON value for the key.</returns>
      <exception cref="T:System.ArgumentException">If the key does not exist.</exception>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadata.TryGetValueAsRawJsonString(System.String,System.String@)">
      <summary>
            Tries to get a string containing raw JSON value for the given key.
            </summary>
      <param name="key">A key.</param>
      <param name="value">Output variable for the value for the key.</param>
      <returns>True if the key exists, false otherwise.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadata.AsJsonBytes">
      <summary>
            Returns a byte array representing the stream metadata
            as JSON encoded as UTF8 with no byte order mark.
            </summary>
      <returns>Byte array representing the stream metadata.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadata.AsJsonString">
      <summary>
            Returns a JSON string representing the stream metadata.
            </summary>
      <returns>A string representing the stream metadata.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.StreamMetadata.FromJsonBytes(System.Byte[])">
      <summary>
            Builds a <see cref="T:EventStore.ClientAPI.StreamMetadata" /> object from a byte array
            containing stream metadata.
            </summary>
      <param name="json">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:EventStore.ClientAPI.StreamMetadata.CustomKeys">
      <summary>
            An enumerable of the keys in the user-provided metadata.
            </summary>
    </member>
    <member name="P:EventStore.ClientAPI.StreamMetadata.CustomMetadataAsRawJsons">
      <summary>
            An enumerable of key-value pairs of keys to JSON text for user-provider metadata.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.EventStoreConnection">
      <summary>
            Contains factory methods for building connections to an Event Store server.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.EventStoreConnection.Create(System.Uri,System.String)">
      <summary>
            Creates a new <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> to single node using default <see cref="T:EventStore.ClientAPI.ConnectionSettings" /></summary>
      <param name="connectionName">Optional name of connection (will be generated automatically, if not provided)</param>
      <param name="uri">The Uri to connect to. It can be tcp:// to point to a single node or discover:// to discover nodes</param>
      <returns>a new <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /></returns>
    </member>
    <member name="M:EventStore.ClientAPI.EventStoreConnection.Create(System.String,System.String)">
      <summary>
            Creates a new <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> to single node using default <see cref="T:EventStore.ClientAPI.ConnectionSettings" /> provided via a connectionstring
            </summary>
      <param name="connectionName">Optional name of connection (will be generated automatically, if not provided)</param>
      <param name="connectionString">The connection string to for this connection.</param>
      <returns>a new <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /></returns>
    </member>
    <member name="M:EventStore.ClientAPI.EventStoreConnection.Create(EventStore.ClientAPI.ConnectionSettings,System.String)">
      <summary>
            Creates a new <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> to single node using <see cref="T:EventStore.ClientAPI.ConnectionSettings" /> passed
            </summary>
      <param name="connectionName">Optional name of connection (will be generated automatically, if not provided)</param>
      <param name="connectionSettings">The <see cref="T:EventStore.ClientAPI.ConnectionSettings" /> to apply to the new connection</param>
      <returns>a new <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /></returns>
    </member>
    <member name="M:EventStore.ClientAPI.EventStoreConnection.Create(EventStore.ClientAPI.ConnectionSettings,System.Uri,System.String)">
      <summary>
            Creates a new <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> to single node using default <see cref="T:EventStore.ClientAPI.ConnectionSettings" /></summary>
      <param name="connectionName">Optional name of connection (will be generated automatically, if not provided)</param>
      <param name="connectionSettings">The <see cref="T:EventStore.ClientAPI.ConnectionSettings" /> to apply to the new connection</param>
      <param name="uri">The Uri to connect to. It can be tcp:// to point to a single node or discover:// to discover nodes via dns</param>
      <returns>a new <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /></returns>
    </member>
    <member name="M:EventStore.ClientAPI.EventStoreConnection.Create(System.Net.IPEndPoint,System.String)">
      <summary>
            Creates a new <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> to single node using default <see cref="T:EventStore.ClientAPI.ConnectionSettings" /></summary>
      <param name="connectionName">Optional name of connection (will be generated automatically, if not provided)</param>
      <param name="tcpEndPoint">The <see cref="T:System.Net.IPEndPoint" /> to connect to.</param>
      <returns>a new <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /></returns>
    </member>
    <member name="M:EventStore.ClientAPI.EventStoreConnection.Create(EventStore.ClientAPI.ConnectionSettings,System.Net.IPEndPoint,System.String)">
      <summary>
            Creates a new <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> to single node using specific <see cref="T:EventStore.ClientAPI.ConnectionSettings" /></summary>
      <param name="connectionSettings">The <see cref="T:EventStore.ClientAPI.ConnectionSettings" /> to apply to the new connection</param>
      <param name="tcpEndPoint">The <see cref="T:System.Net.IPEndPoint" /> to connect to.</param>
      <param name="connectionName">Optional name of connection (will be generated automatically, if not provided)</param>
      <returns>a new <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /></returns>
    </member>
    <member name="M:EventStore.ClientAPI.EventStoreConnection.Create(EventStore.ClientAPI.ConnectionSettings,EventStore.ClientAPI.ClusterSettings,System.String)">
      <summary>
            Creates a new <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> to EventStore cluster 
            using specific <see cref="T:EventStore.ClientAPI.ConnectionSettings" /> and <see cref="T:EventStore.ClientAPI.ClusterSettings" /></summary>
      <param name="connectionSettings">The <see cref="T:EventStore.ClientAPI.ConnectionSettings" /> to apply to the new connection</param>
      <param name="clusterSettings">The <see cref="T:EventStore.ClientAPI.ClusterSettings" /> that determine cluster behavior.</param>
      <param name="connectionName">Optional name of connection (will be generated automatically, if not provided)</param>
      <returns>a new <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /></returns>
    </member>
    <member name="T:EventStore.ClientAPI.EventStoreCatchUpSubscription">
      <summary>
            Base class representing catch-up subscriptions.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.EventStoreCatchUpSubscription.Log">
      <summary>
            The <see cref="T:EventStore.ClientAPI.ILogger" /> to use for the subscription.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadBatchSize">
      <summary>
            The batch size to use during the read phase of the subscription.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.EventStoreCatchUpSubscription.MaxPushQueueSize">
      <summary>
            The maximum number of events to buffer before the subscription drops.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.EventStoreCatchUpSubscription.EventAppeared">
      <summary>
            Action invoked when a new event appears on the subscription.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.EventStoreCatchUpSubscription.Verbose">
      <summary>
            Whether or not to use verbose logging (useful during debugging).
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.EventStoreCatchUpSubscription.ShouldStop">
      <summary>
             stop has been called.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.EventStoreCatchUpSubscription.ReadEventsTill(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int32})">
      <summary>
            Read events until the given position or event number.
            </summary>
      <param name="connection">The connection.</param>
      <param name="resolveLinkTos">Whether to resolve Link events.</param>
      <param name="userCredentials">User credentials for the operation.</param>
      <param name="lastCommitPosition">The commit position to read until.</param>
      <param name="lastEventNumber">The event number to read until.</param>
    </member>
    <member name="M:EventStore.ClientAPI.EventStoreCatchUpSubscription.TryProcess(EventStore.ClientAPI.ResolvedEvent)">
      <summary>
            Try to process a single <see cref="T:EventStore.ClientAPI.ResolvedEvent" />.
            </summary>
      <param name="e">The <see cref="T:EventStore.ClientAPI.ResolvedEvent" /> to process.</param>
    </member>
    <member name="M:EventStore.ClientAPI.EventStoreCatchUpSubscription.#ctor(EventStore.ClientAPI.IEventStoreConnection,EventStore.ClientAPI.ILogger,System.String,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.ResolvedEvent},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription},System.Action{EventStore.ClientAPI.EventStoreCatchUpSubscription,EventStore.ClientAPI.SubscriptionDropReason,System.Exception},System.Boolean,System.Int32,System.Int32)">
      <summary>
            Constructs state for EventStoreCatchUpSubscription.
            </summary>
      <param name="connection">The connection.</param>
      <param name="log">The <see cref="T:EventStore.ClientAPI.ILogger" /> to use.</param>
      <param name="streamId">The stream name.</param>
      <param name="resolveLinkTos">Whether to resolve Link events.</param>
      <param name="userCredentials">User credentials for the operations.</param>
      <param name="eventAppeared">Action invoked when events are received.</param>
      <param name="liveProcessingStarted">Action invoked when the read phase finishes.</param>
      <param name="subscriptionDropped">Action invoked if the subscription drops.</param>
      <param name="verboseLogging">Whether to use verbose logging.</param>
      <param name="readBatchSize">Batch size for use in the reading phase.</param>
      <param name="maxPushQueueSize">The maximum number of events to buffer before dropping the subscription.</param>
    </member>
    <member name="M:EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop(System.TimeSpan)">
      <summary>
            Attempts to stop the subscription.
            </summary>
      <param name="timeout">The amount of time within which the subscription should stop.</param>
      <exception cref="T:System.TimeoutException">Thrown if the subscription fails to stop within it's timeout period.</exception>
    </member>
    <member name="M:EventStore.ClientAPI.EventStoreCatchUpSubscription.Stop">
      <summary>
            Attempts to stop the subscription without blocking for completion of stop
            </summary>
    </member>
    <member name="P:EventStore.ClientAPI.EventStoreCatchUpSubscription.IsSubscribedToAll">
      <summary>
            Indicates whether the subscription is to all events or to
            a specific stream.
            </summary>
    </member>
    <member name="P:EventStore.ClientAPI.EventStoreCatchUpSubscription.StreamId">
      <summary>
            The name of the stream to which the subscription is subscribed
            (empty if subscribed to all).
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.EventStoreAllCatchUpSubscription">
      <summary>
            A catch-up subscription to all events in the Event Store.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.EventStoreAllCatchUpSubscription.ReadEventsTill(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int32})">
      <summary>
            Read events until the given position.
            </summary>
      <param name="connection">The connection.</param>
      <param name="resolveLinkTos">Whether to resolve Link events.</param>
      <param name="userCredentials">User credentials for the operation.</param>
      <param name="lastCommitPosition">The commit position to read until.</param>
      <param name="lastEventNumber">The event number to read until.</param>
    </member>
    <member name="M:EventStore.ClientAPI.EventStoreAllCatchUpSubscription.TryProcess(EventStore.ClientAPI.ResolvedEvent)">
      <summary>
            Try to process a single <see cref="T:EventStore.ClientAPI.ResolvedEvent" />.
            </summary>
      <param name="e">The <see cref="T:EventStore.ClientAPI.ResolvedEvent" /> to process.</param>
    </member>
    <member name="P:EventStore.ClientAPI.EventStoreAllCatchUpSubscription.LastProcessedPosition">
      <summary>
            The last position processed on the subscription.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.EventStoreStreamCatchUpSubscription">
      <summary>
            A catch-up subscription to a single stream in the Event Store.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.ReadEventsTill(EventStore.ClientAPI.IEventStoreConnection,System.Boolean,EventStore.ClientAPI.SystemData.UserCredentials,System.Nullable{System.Int64},System.Nullable{System.Int32})">
      <summary>
            Read events until the given event number.
            </summary>
      <param name="connection">The connection.</param>
      <param name="resolveLinkTos">Whether to resolve Link events.</param>
      <param name="userCredentials">User credentials for the operation.</param>
      <param name="lastCommitPosition">The commit position to read until.</param>
      <param name="lastEventNumber">The event number to read until.</param>
    </member>
    <member name="M:EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.TryProcess(EventStore.ClientAPI.ResolvedEvent)">
      <summary>
            Try to process a single <see cref="T:EventStore.ClientAPI.ResolvedEvent" />.
            </summary>
      <param name="e">The <see cref="T:EventStore.ClientAPI.ResolvedEvent" /> to process.</param>
    </member>
    <member name="P:EventStore.ClientAPI.EventStoreStreamCatchUpSubscription.LastProcessedEventNumber">
      <summary>
            The last event number processed on the subscription.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.EventData">
      <summary>
            Represents an event to be written.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.EventData.EventId">
      <summary>
            The ID of the event, used as part of the idempotent write check.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.EventData.Type">
      <summary>
            The name of the event type. It is strongly recommended that these
            use lowerCamelCase if projections are to be used.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.EventData.IsJson">
      <summary>
            Flag indicating whether the data and metadata are JSON.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.EventData.Data">
      <summary>
            The raw bytes of the event data.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.EventData.Metadata">
      <summary>
            The raw bytes of the event metadata.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.EventData.#ctor(System.Guid,System.String,System.Boolean,System.Byte[],System.Byte[])">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.EventData" />.
            </summary>
      <param name="eventId">The ID of the event, used as part of the idempotent write check.</param>
      <param name="type">The name of the event type. It is strongly recommended that these
            use lowerCamelCase if projections are to be used.</param>
      <param name="isJson">Flag indicating whether the data and metadata are JSON.</param>
      <param name="data">The raw bytes of the event data.</param>
      <param name="metadata">The raw bytes of the event metadata.</param>
    </member>
    <member name="T:EventStore.ClientAPI.Exceptions.ServerErrorException">
      <summary>
            Exception thrown if a server-side error occurs during an
            operation.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.ServerErrorException.#ctor">
      <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.Exceptions.ServerErrorException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.ServerErrorException.#ctor(System.String)">
      <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.Exceptions.ServerErrorException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.ServerErrorException.#ctor(System.String,System.Exception)">
      <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.Exceptions.ServerErrorException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.ServerErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.Exceptions.ServerErrorException" />.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.ReadDirection">
      <summary>
            Represents the direction of read operation (both from $all and usual streams)
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ReadDirection.Forward">
      <summary>
            From beginning to end.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ReadDirection.Backward">
      <summary>
            From end to beginning.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.ResolvedEvent">
      <summary>
            A structure representing a single event or an resolved link event.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ResolvedEvent.Event">
      <summary>
            The event, or the resolved link event if this <see cref="T:EventStore.ClientAPI.ResolvedEvent" /> is
            a link event.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ResolvedEvent.Link">
      <summary>
            The link event if this <see cref="T:EventStore.ClientAPI.ResolvedEvent" /> is a link event.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ResolvedEvent.OriginalPosition">
      <summary>
            The logical position of the <see cref="P:EventStore.ClientAPI.ResolvedEvent.OriginalEvent" />.
            </summary>
    </member>
    <member name="P:EventStore.ClientAPI.ResolvedEvent.OriginalEvent">
      <summary>
            Returns the event that was read or which triggered the subscription.
            
            If this <see cref="T:EventStore.ClientAPI.ResolvedEvent" /> represents a link event, the Link
            will be the <see cref="P:EventStore.ClientAPI.ResolvedEvent.OriginalEvent" />, otherwise it will be the
            Event.
            </summary>
    </member>
    <member name="P:EventStore.ClientAPI.ResolvedEvent.IsResolved">
      <summary>
            Indicates whether this <see cref="T:EventStore.ClientAPI.ResolvedEvent" /> is a resolved link
            event.
            </summary>
    </member>
    <member name="P:EventStore.ClientAPI.ResolvedEvent.OriginalStreamId">
      <summary>
            The stream name of the <see cref="P:EventStore.ClientAPI.ResolvedEvent.OriginalEvent" />.
            </summary>
    </member>
    <member name="P:EventStore.ClientAPI.ResolvedEvent.OriginalEventNumber">
      <summary>
            The event number in the stream of the <see cref="P:EventStore.ClientAPI.ResolvedEvent.OriginalEvent" />.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.Exceptions.CannotEstablishConnectionException">
      <summary>
            Exception thrown if an <see cref="T:EventStore.ClientAPI.EventStoreConnection" /> is
            unable to establish a connection to an Event Store server.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.CannotEstablishConnectionException.#ctor">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.CannotEstablishConnectionException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.CannotEstablishConnectionException.#ctor(System.String)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.CannotEstablishConnectionException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.CannotEstablishConnectionException.#ctor(System.String,System.Exception)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.CannotEstablishConnectionException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.CannotEstablishConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.CannotEstablishConnectionException" />.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.Exceptions.InvalidTransactionException">
      <summary>
            Exception thrown if there is an attempt to operate inside a
            transaction which does not exist.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.InvalidTransactionException.#ctor">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.InvalidTransactionException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.InvalidTransactionException.#ctor(System.String)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.InvalidTransactionException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.InvalidTransactionException.#ctor(System.String,System.Exception)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.InvalidTransactionException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.InvalidTransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.InvalidTransactionException" />.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.Exceptions.StreamDeletedException">
      <summary>
            Exception thrown if an operation is attempted on a stream which
            has been deleted.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Exceptions.StreamDeletedException.Stream">
      <summary>
            The name of the deleted stream.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.StreamDeletedException.#ctor(System.String)">
      <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.Exceptions.StreamDeletedException" />.
            </summary>
      <param name="stream">The name of the deleted stream.</param>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.StreamDeletedException.#ctor">
      <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.Exceptions.StreamDeletedException" />.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.Exceptions.WrongExpectedVersionException">
      <summary>
            Exception thrown if the expected version specified on an operation
            does not match the version of the stream when the operation was attempted. 
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.WrongExpectedVersionException.#ctor(System.String)">
      <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.Exceptions.WrongExpectedVersionException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.WrongExpectedVersionException.#ctor(System.String,System.Exception)">
      <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.Exceptions.WrongExpectedVersionException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.WrongExpectedVersionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.Exceptions.WrongExpectedVersionException" />.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.EventStoreTransaction">
      <summary>
            Represents a multi-request transaction with the Event Store
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.EventStoreTransaction.TransactionId">
      <summary>
            The ID of the transaction. This can be used to recover
            a transaction later.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.EventStoreTransaction.#ctor(System.Int64,EventStore.ClientAPI.SystemData.UserCredentials,EventStore.ClientAPI.Internal.IEventStoreTransactionConnection)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.EventStoreTransaction" /></summary>
      <param name="transactionId">The transaction id of the transaction</param>
      <param name="userCredentials">User credentials under which transaction is committed.</param>
      <param name="connection">The connection the transaction is hooked to</param>
    </member>
    <member name="M:EventStore.ClientAPI.EventStoreTransaction.CommitAsync">
      <summary>
            Asynchronously commits this transaction
            </summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that returns expected version for following write requests</returns>
    </member>
    <member name="M:EventStore.ClientAPI.EventStoreTransaction.WriteAsync(EventStore.ClientAPI.EventData[])">
      <summary>
            Writes to a transaction in the event store asynchronously
            </summary>
      <param name="events">The events to write</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> allowing the caller to control the async operation</returns>
    </member>
    <member name="M:EventStore.ClientAPI.EventStoreTransaction.WriteAsync(System.Collections.Generic.IEnumerable{EventStore.ClientAPI.EventData})">
      <summary>
            Writes to a transaction in the event store asynchronously
            </summary>
      <param name="events">The events to write</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> allowing the caller to control the async operation</returns>
    </member>
    <member name="M:EventStore.ClientAPI.EventStoreTransaction.Rollback">
      <summary>
            Rollsback this transaction.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.EventStoreTransaction.Dispose">
      <summary>
            Disposes this transaction rolling it back if not already committed
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.StreamEventsSlice">
      <summary>
            An Stream Events Slice represents the result of a single read operation to the event store.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.StreamEventsSlice.Status">
      <summary>
            The <see cref="T:EventStore.ClientAPI.SliceReadStatus" /> representing the status of this read attempt
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.StreamEventsSlice.Stream">
      <summary>
            The name of the stream read
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.StreamEventsSlice.FromEventNumber">
      <summary>
            The starting point (represented as a sequence number) of the read operation.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.StreamEventsSlice.ReadDirection">
      <summary>
            The direction of read request.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.StreamEventsSlice.Events">
      <summary>
            The events read represented as <see cref="T:EventStore.ClientAPI.ResolvedEvent" /></summary>
    </member>
    <member name="F:EventStore.ClientAPI.StreamEventsSlice.NextEventNumber">
      <summary>
            The next event number that can be read.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.StreamEventsSlice.LastEventNumber">
      <summary>
            The last event number in the stream.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.StreamEventsSlice.IsEndOfStream">
      <summary>
            A boolean representing whether or not this is the end of the stream.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.Exceptions.CommandNotExpectedException">
      <summary>
            Exception thrown if an unexpected command is received.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.CommandNotExpectedException.#ctor(System.String,System.String)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.CommandNotExpectedException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.CommandNotExpectedException.#ctor(System.String)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.CommandNotExpectedException" />.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.Exceptions.ConnectionClosedException">
      <summary>
            Exception thrown by ongoing operations which are terminated
            by an <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> closing.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.ConnectionClosedException.#ctor">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ConnectionClosedException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.ConnectionClosedException.#ctor(System.String)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ConnectionClosedException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.ConnectionClosedException.#ctor(System.String,System.Exception)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ConnectionClosedException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.ConnectionClosedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.ConnectionClosedException" />.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.Exceptions.NoResultException">
      <summary>
            Exception thrown if there is no result for an operation for
            which one is expected.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.NoResultException.#ctor">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.NoResultException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.NoResultException.#ctor(System.String)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.NoResultException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.NoResultException.#ctor(System.String,System.Exception)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.NoResultException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.NoResultException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.NoResultException" />.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.Exceptions.OperationTimedOutException">
      <summary>
            Exception thrown if an operation times out.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.OperationTimedOutException.#ctor">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.OperationTimedOutException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.OperationTimedOutException.#ctor(System.String)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.OperationTimedOutException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.OperationTimedOutException.#ctor(System.String,System.Exception)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.OperationTimedOutException" />.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.OperationTimedOutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.Exceptions.OperationTimedOutException" />.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.Exceptions.RetriesLimitReachedException">
      <summary>
            Exception thrown if the number of retries for an operation is reached.
            To change the number of retries attempted for an operation, use the methods
            <see cref="M:EventStore.ClientAPI.ConnectionSettingsBuilder.LimitRetriesForOperationTo(System.Int32)" /> or 
            <see cref="M:EventStore.ClientAPI.ConnectionSettingsBuilder.KeepRetrying" /> and pass the resulting
            <see cref="T:EventStore.ClientAPI.ConnectionSettings" /> into the constructor of the connection.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.RetriesLimitReachedException.#ctor(System.Int32)">
      <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.Exceptions.RetriesLimitReachedException" />.
            </summary>
      <param name="retries">The number of retries attempted.</param>
    </member>
    <member name="M:EventStore.ClientAPI.Exceptions.RetriesLimitReachedException.#ctor(System.String,System.Int32)">
      <summary>
            Constructs a new instance of <see cref="T:EventStore.ClientAPI.Exceptions.RetriesLimitReachedException" />.
            </summary>
      <param name="item">The name of the item for which retries were attempted.</param>
      <param name="retries">The number of retries attempted.</param>
    </member>
    <member name="T:EventStore.ClientAPI.Position">
      <summary>
            A structure referring to a potential logical record position
            in the Event Store transaction file.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Position.Start">
      <summary>
            Position representing the start of the transaction file
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Position.End">
      <summary>
            Position representing the end of the transaction file
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Position.CommitPosition">
      <summary>
            The commit position of the record
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Position.PreparePosition">
      <summary>
            The prepare position of the record.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Position.#ctor(System.Int64,System.Int64)">
      <summary>
            Constructs a position with the given commit and prepare positions.
            It is not guaranteed that the position is actually the start of a
            record in the transaction file.
            
            The commit position cannot be less than the prepare position.
            </summary>
      <param name="commitPosition">The commit position of the record.</param>
      <param name="preparePosition">The prepare position of the record.</param>
    </member>
    <member name="M:EventStore.ClientAPI.Position.op_LessThan(EventStore.ClientAPI.Position,EventStore.ClientAPI.Position)">
      <summary>
            Compares whether p1 &lt; p2.
            </summary>
      <param name="p1">A <see cref="T:EventStore.ClientAPI.Position" />.</param>
      <param name="p2">A <see cref="T:EventStore.ClientAPI.Position" />.</param>
      <returns>True if p1 &lt; p2.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Position.op_GreaterThan(EventStore.ClientAPI.Position,EventStore.ClientAPI.Position)">
      <summary>
            Compares whether p1 &gt; p2.
            </summary>
      <param name="p1">A <see cref="T:EventStore.ClientAPI.Position" />.</param>
      <param name="p2">A <see cref="T:EventStore.ClientAPI.Position" />.</param>
      <returns>True if p1 &gt; p2.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Position.op_GreaterThanOrEqual(EventStore.ClientAPI.Position,EventStore.ClientAPI.Position)">
      <summary>
            Compares whether p1 &gt;= p2.
            </summary>
      <param name="p1">A <see cref="T:EventStore.ClientAPI.Position" />.</param>
      <param name="p2">A <see cref="T:EventStore.ClientAPI.Position" />.</param>
      <returns>True if p1 &gt;= p2.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Position.op_LessThanOrEqual(EventStore.ClientAPI.Position,EventStore.ClientAPI.Position)">
      <summary>
            Compares whether p1 &lt;= p2.
            </summary>
      <param name="p1">A <see cref="T:EventStore.ClientAPI.Position" />.</param>
      <param name="p2">A <see cref="T:EventStore.ClientAPI.Position" />.</param>
      <returns>True if p1 &lt;= p2.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Position.op_Equality(EventStore.ClientAPI.Position,EventStore.ClientAPI.Position)">
      <summary>
            Compares p1 and p2 for equality.
            </summary>
      <param name="p1">A <see cref="T:EventStore.ClientAPI.Position" />.</param>
      <param name="p2">A <see cref="T:EventStore.ClientAPI.Position" />.</param>
      <returns>True if p1 is equal to p2.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Position.op_Inequality(EventStore.ClientAPI.Position,EventStore.ClientAPI.Position)">
      <summary>
            Compares p1 and p2 for equality.
            </summary>
      <param name="p1">A <see cref="T:EventStore.ClientAPI.Position" />.</param>
      <param name="p2">A <see cref="T:EventStore.ClientAPI.Position" />.</param>
      <returns>True if p1 is not equal to p2.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Position.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
      <param name="obj">Another object to compare to. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:EventStore.ClientAPI.Position.Equals(EventStore.ClientAPI.Position)">
      <summary>
            Compares this instance of <see cref="T:EventStore.ClientAPI.Position" /> for equality
            with another instance.
            </summary>
      <param name="other">A <see cref="T:EventStore.ClientAPI.Position" /></param>
      <returns>True if this instance is equal to the other instance.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Position.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:EventStore.ClientAPI.Position.ToString">
      <summary>
            Returns the fully qualified type name of this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> containing a fully qualified type name.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:EventStore.ClientAPI.Projections.ProjectionsManager">
      <summary>
            API for managing projections in the Event Store through C# code. Communicates
            with the Event Store over the RESTful API.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Projections.ProjectionsManager.#ctor(EventStore.ClientAPI.ILogger,System.Net.IPEndPoint,System.TimeSpan)">
      <summary>
            Creates a new instance of <see cref="T:EventStore.ClientAPI.Projections.ProjectionsManager" />.
            </summary>
      <param name="log">An instance of <see cref="T:EventStore.ClientAPI.ILogger" /> to use for logging.</param>
      <param name="httpEndPoint">HTTP endpoint of an Event Store server.</param>
      <param name="operationTimeout">
      </param>
    </member>
    <member name="M:EventStore.ClientAPI.Projections.ProjectionsManager.EnableAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously enables a projection 
            </summary>
      <param name="name">The name of the projection.</param>
      <param name="userCredentials">Credentials for a user with permission to enable a projection</param>
      <returns>A task representing the operation.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Projections.ProjectionsManager.DisableAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously aborts and disables a projection without writing a checkpoint.
            </summary>
      <param name="name">The name of the projection.</param>
      <param name="userCredentials">Credentials for a user with permission to disable a projection.</param>
      <returns>A task representing the operation.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Projections.ProjectionsManager.AbortAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously disables a projection.
            </summary>
      <param name="name">The name of the projection.</param>
      <param name="userCredentials">Credentials for a user with permission to disable a projection.</param>
      <returns>A task representing the operation.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Projections.ProjectionsManager.CreateOneTimeAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously creates a one-time query.
            </summary>
      <param name="query">The JavaScript source code for the query.</param>
      <param name="userCredentials">Credentials for a user with permission to create a query.</param>
    </member>
    <member name="M:EventStore.ClientAPI.Projections.ProjectionsManager.CreateTransientAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously creates a one-time query.
            </summary>
      <param name="name">A name for the query.</param>
      <param name="query">The JavaScript source code for the query.</param>
      <param name="userCredentials">Credentials for a user with permission to create a query.</param>
    </member>
    <member name="M:EventStore.ClientAPI.Projections.ProjectionsManager.CreateContinuousAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously creates a continuous projection.
            </summary>
      <param name="name">The name of the projection.</param>
      <param name="query">The JavaScript source code for the query.</param>
      <param name="userCredentials">Credentials for a user with permission to create a query.</param>
    </member>
    <member name="M:EventStore.ClientAPI.Projections.ProjectionsManager.ListAllAsStringAsync(EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously lists this status of all projections.
            </summary>
      <param name="userCredentials">Credentials for the operation.</param>
      <returns>String of JSON containing projection statuses.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Projections.ProjectionsManager.ListAllAsync(EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously lists this status of all projections.
            </summary>
      <param name="userCredentials">Credentials for the operation.</param>
      <returns>List of all ProjectionDetails items containing projection statuses.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Projections.ProjectionsManager.ListOneTimeAsStringAsync(EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously lists this status of all one-time projections.
            </summary>
      <param name="userCredentials">Credentials for the operation.</param>
      <returns>String of JSON containing projection statuses.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Projections.ProjectionsManager.ListOneTimeAsync(EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously lists this status of all one-time projections.
            </summary>
      <param name="userCredentials">Credentials for the operation.</param>
      <returns>List of one-time ProjectionDetails items containing projection statuses.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Projections.ProjectionsManager.ListContinuousAsStringAsync(EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Synchronously lists this status of all continuous projections.
            </summary>
      <param name="userCredentials">Credentials for the operation.</param>
      <returns>String of JSON containing projection statuses.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Projections.ProjectionsManager.ListContinuousAsync(EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Synchronously lists this status of all continuous projections.
            </summary>
      <param name="userCredentials">Credentials for the operation.</param>
      <returns>List of continuous ProjectionDetails items containing projection statuses.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Projections.ProjectionsManager.GetStatusAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously gets the status of a projection.
            </summary>
      <param name="name">The name of the projection.</param>
      <param name="userCredentials">Credentials for the operation.</param>
      <returns>String of JSON containing projection status.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Projections.ProjectionsManager.GetStateAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously gets the state of a projection.
            </summary>
      <param name="name">The name of the projection.</param>
      <param name="userCredentials">Credentials for the operation.</param>
      <returns>String of JSON containing projection state.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionStateAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously gets the state of a projection for a specified partition.
            </summary>
      <param name="name">The name of the projection.</param>
      <param name="partitionId">The id of the partition.</param>
      <param name="userCredentials">Credentials for the operation.</param>
      <returns>String of JSON containing projection state.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Projections.ProjectionsManager.GetResultAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously gets the state of a projection.
            </summary>
      <param name="name">The name of the projection.</param>
      <param name="userCredentials">Credentials for the operation.</param>
      <returns>String of JSON containing projection state.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Projections.ProjectionsManager.GetPartitionResultAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously gets the state of a projection for a specified partition.
            </summary>
      <param name="name">The name of the projection.</param>
      <param name="partitionId">The id of the partition.</param>
      <param name="userCredentials">Credentials for the operation.</param>
      <returns>String of JSON containing projection state.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Projections.ProjectionsManager.GetStatisticsAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously gets the statistics of a projection.
            </summary>
      <param name="name">The name of the projection.</param>
      <param name="userCredentials">Credentials for the operation.</param>
      <returns>String of JSON containing projection statistics.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Projections.ProjectionsManager.GetQueryAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously gets the status of a query.
            </summary>
      <param name="name">The name of the query.</param>
      <param name="userCredentials">Credentials for the operation.</param>
      <returns>String of JSON containing query status.</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Projections.ProjectionsManager.UpdateQueryAsync(System.String,System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously updates the definition of a query.
            </summary>
      <param name="name">The name of the query.</param>
      <param name="query">The JavaScript source code of the query.</param>
      <param name="userCredentials">Credentials for the operation.</param>
    </member>
    <member name="M:EventStore.ClientAPI.Projections.ProjectionsManager.DeleteAsync(System.String,EventStore.ClientAPI.SystemData.UserCredentials)">
      <summary>
            Asynchronously deletes a projection 
            </summary>
      <param name="name">The name of the projection.</param>
      <param name="userCredentials">Credentials for a user with permission to delete a projection</param>
      <returns>A task representing the operation.</returns>
    </member>
    <member name="T:EventStore.ClientAPI.RecordedEvent">
      <summary>
            Represents a previously written event
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.RecordedEvent.EventStreamId">
      <summary>
            The Event Stream that this event belongs to
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.RecordedEvent.EventId">
      <summary>
            The Unique Identifier representing this event
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.RecordedEvent.EventNumber">
      <summary>
            The number of this event in the stream
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.RecordedEvent.EventType">
      <summary>
            The type of event this is
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.RecordedEvent.Data">
      <summary>
            A byte array representing the data of this event
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.RecordedEvent.Metadata">
      <summary>
            A byte array representing the metadata associated with this event
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.RecordedEvent.IsJson">
      <summary>
            Indicates whether the content is internally marked as json
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.RecordedEvent.Created">
      <summary>
            A datetime representing when this event was created in the system
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.RecordedEvent.CreatedEpoch">
      <summary>
            A long representing the milliseconds since the epoch when the was created in the system
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.SliceReadStatus">
      <summary>
            Enumeration detailing the possible outcomes of reading a 
            slice of a stream.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.SliceReadStatus.Success">
      <summary>
            The read was successful.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.SliceReadStatus.StreamNotFound">
      <summary>
            The stream was not found.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.SliceReadStatus.StreamDeleted">
      <summary>
            The stream has previously existed but is deleted.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.StreamPosition">
      <summary>
            Constants for stream positions
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.StreamPosition.Start">
      <summary>
            The first event in a stream
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.StreamPosition.End">
      <summary>
            The last event in the stream.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.SystemData.UserCredentials">
      <summary>
            A username/password pair used for authentication and
            authorization to perform operations over an <see cref="T:EventStore.ClientAPI.IEventStoreConnection" />.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.SystemData.UserCredentials.Username">
      <summary>
            The username
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.SystemData.UserCredentials.Password">
      <summary>
            The password
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.SystemData.UserCredentials.#ctor(System.String,System.String)">
      <summary>
            Constructs a new <see cref="T:EventStore.ClientAPI.SystemData.UserCredentials" />.
            </summary>
      <param name="username">
      </param>
      <param name="password">
      </param>
    </member>
    <member name="T:EventStore.ClientAPI.ExpectedVersion">
      <summary>
            Constants used for expected version control
            </summary>
      <remarks>
            The use of expected version can be a bit tricky especially when discussing idempotency assurances given by the event store.
            
            There are four possible values that can be used for the passing of an expected version.
            
            ExpectedVersion.Any (-2) says that you should not conflict with anything.
            ExpectedVersion.NoStream (-1) says that the stream should not exist when doing your write.
            ExpectedVersion.EmptyStream (0) says the stream should exist but be empty when doing the write.
            
            Any other value states that the last event written to the stream should have a sequence number matching your 
            expected value.
            
            The Event Store will assure idempotency for all operations using any value in ExpectedVersion except for
            ExpectedVersion.Any. When using ExpectedVersion.Any the Event Store will do its best to assure idempotency but
            will not guarantee idempotency.
            </remarks>
    </member>
    <member name="F:EventStore.ClientAPI.ExpectedVersion.Any">
      <summary>
            This write should not conflict with anything and should always succeed.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ExpectedVersion.NoStream">
      <summary>
            The stream being written to should not yet exist. If it does exist treat that as a concurrency problem.
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.ExpectedVersion.EmptyStream">
      <summary>
            The stream should exist and should be empty. If it does not exist or is not empty treat that as a concurrency problem.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Transport.Tcp.LengthPrefixMessageFramer.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:EventStore.ClientAPI.Transport.Tcp.LengthPrefixMessageFramer" /> class.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Transport.Tcp.LengthPrefixMessageFramer.Parse(System.ArraySegment{System.Byte})">
      <summary>
            Parses a stream chunking based on length-prefixed framing. Calls are re-entrant and hold state internally.
            </summary>
      <param name="bytes">A byte array of data to append</param>
    </member>
    <member name="T:Newtonsoft.Json.JsonReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonReader.State">
      <summary>
            Specifies the state of the reader.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader" /> class with the specified <see cref="T:System.IO.TextReader" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>true if the next token was read successfully; false if there are no more tokens to read.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Skip">
      <summary>
            Skips the children of the current token.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken)">
      <summary>
            Sets the current token.
            </summary>
      <param name="newToken">The new token.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken,System.Object)">
      <summary>
            Sets the current token and value.
            </summary>
      <param name="newToken">The new token.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetStateBasedOnCurrent">
      <summary>
            Sets the state based on current token type.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Close">
      <summary>
            Changes the <see cref="T:Newtonsoft.Json.JsonReader.State" /> to Closed. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.CurrentState">
      <summary>
            Gets the current reader state.
            </summary>
      <value>The current reader state.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.CloseInput">
      <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader" /> should be closed when the reader is closed.
            </summary>
      <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader" /> when
            the reader is closed; otherwise false. The default is true.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.SupportMultipleContent">
      <summary>
            Gets or sets a value indicating whether multiple pieces of JSON content can
            be read from a continuous stream without erroring.
            </summary>
      <value>
            true to support reading multiple pieces of JSON content; otherwise false. The default is false.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.QuoteChar">
      <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.DateTimeZoneHandling">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> time zones are handling when reading JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.DateParseHandling">
      <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.FloatParseHandling">
      <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.MaxDepth">
      <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.TokenType">
      <summary>
            Gets the type of the current JSON token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Value">
      <summary>
            Gets the text value of the current JSON token.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.ValueType">
      <summary>
            Gets The Common Language Runtime (CLR) type for the current JSON token.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Depth">
      <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
      <value>The depth of the current token in the JSON document.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Path">
      <summary>
            Gets the path of the current JSON token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Culture">
      <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="reader">The reader.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="stream">The stream.</param>
      <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
      <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader,System.Boolean,System.DateTimeKind)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="reader">The reader.</param>
      <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
      <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>
            A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.Close">
      <summary>
            Changes the <see cref="T:Newtonsoft.Json.JsonReader.State" /> to Closed.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.JsonNet35BinaryCompatibility">
      <summary>
            Gets or sets a value indicating whether binary data reading should compatible with incorrect Json.NET 3.5 written binary.
            </summary>
      <value>
        <c>true</c> if binary data reading will be compatible with incorrect Json.NET 3.5 written binary; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.ReadRootValueAsArray">
      <summary>
            Gets or sets a value indicating whether the root object will be read as a JSON array.
            </summary>
      <value>
        <c>true</c> if the root object will be read as a JSON array; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.DateTimeKindHandling">
      <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.
            </summary>
      <value>The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.#ctor">
      <summary>
            Creates an instance of the <c>JsonWriter</c> class. 
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndObject">
      <summary>
            Writes the end of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndArray">
      <summary>
            Writes the end of an array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndConstructor">
      <summary>
            Writes the end constructor.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String,System.Boolean)">
      <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd">
      <summary>
            Writes the end of the current Json object or array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader)">
      <summary>
            Writes the current <see cref="T:Newtonsoft.Json.JsonReader" /> token and its children.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read the token from.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader,System.Boolean)">
      <summary>
            Writes the current <see cref="T:Newtonsoft.Json.JsonReader" /> token.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read the token from.</param>
      <param name="writeChildren">A flag indicating whether the current token's children should be written.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the specified end token.
            </summary>
      <param name="token">The end token to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteIndent">
      <summary>
            Writes indent characters.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueDelimiter">
      <summary>
            Writes the JSON value delimiter.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteIndentSpace">
      <summary>
            Writes an indent space.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON without changing the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteRawValue(System.String)">
      <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Single})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Double})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Char})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Guid})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.TimeSpan})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Object)">
      <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)">
      <summary>
            Writes out the given white space.
            </summary>
      <param name="ws">The string of white space characters.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.SetWriteState(Newtonsoft.Json.JsonToken,System.Object)">
      <summary>
            Sets the state of the JsonWriter,
            </summary>
      <param name="token">The JsonToken being written.</param>
      <param name="value">The value being written.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.CloseOutput">
      <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader" /> should be closed when the writer is closed.
            </summary>
      <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader" /> when
            the writer is closed; otherwise false. The default is true.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Top">
      <summary>
            Gets the top.
            </summary>
      <value>The top.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.WriteState">
      <summary>
            Gets the state of the writer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Path">
      <summary>
            Gets the path of the writer. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Formatting">
      <summary>
            Indicates how JSON text output is formatted.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.DateFormatHandling">
      <summary>
            Get or set how dates are written to JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.DateTimeZoneHandling">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> time zones are handling when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.StringEscapeHandling">
      <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.FloatFormatHandling">
      <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written to JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.DateFormatString">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatting when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Culture">
      <summary>
            Gets or sets the culture used when writing JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter" /> class.
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.BinaryWriter)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter" /> class.
            </summary>
      <param name="writer">The writer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the end.
            </summary>
      <param name="token">The token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRawValue(System.String)">
      <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Object)">
      <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteObjectId(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value that represents a BSON object id.
            </summary>
      <param name="value">The Object ID value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRegex(System.String,System.String)">
      <summary>
            Writes a BSON regex.
            </summary>
      <param name="pattern">The regex pattern.</param>
      <param name="options">The regex options.</param>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonWriter.DateTimeKindHandling">
      <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime" /> values to BSON.
            When set to <see cref="F:System.DateTimeKind.Unspecified" /> no conversion will occur.
            </summary>
      <value>The <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime" /> values to BSON.</value>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonObjectId">
      <summary>
            Represents a BSON Oid (object id).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonObjectId.#ctor(System.Byte[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonObjectId" /> class.
            </summary>
      <param name="value">The Oid value.</param>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonObjectId.Value">
      <summary>
            Gets or sets the value of the Oid.
            </summary>
      <value>The value of the Oid.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverter">
      <summary>
            Converts an object to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.GetSchema">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of the JSON produced by the JsonConverter.
            </summary>
      <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of the JSON produced by the JsonConverter.</returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverter.CanRead">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverter.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.BinaryConverter">
      <summary>
            Converts a binary value to and from a base 64 string value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DataSetConverter">
      <summary>
            Converts a <see cref="T:System.Data.DataSet" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
      <param name="valueType">Type of the value.</param>
      <returns>
        <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DataTableConverter">
      <summary>
            Converts a <see cref="T:System.Data.DataTable" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
      <param name="valueType">Type of the value.</param>
      <returns>
        <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.CustomCreationConverter`1">
      <summary>
            Create a custom object
            </summary>
      <typeparam name="T">The object type to convert.</typeparam>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)">
      <summary>
            Creates an object which will then be populated by the serializer.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>The created object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DateTimeConverterBase">
      <summary>
            Provides a base class for converting a <see cref="T:System.DateTime" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DiscriminatedUnionConverter">
      <summary>
            Converts a F# discriminated union type to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.EntityKeyMemberConverter">
      <summary>
            Converts an Entity Framework EntityKey to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.ExpandoObjectConverter">
      <summary>
            Converts an ExpandoObject to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.KeyValuePairConverter">
      <summary>
            Converts a <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.BsonObjectIdConverter">
      <summary>
            Converts a <see cref="T:Newtonsoft.Json.Bson.BsonObjectId" /> to and from JSON and BSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.RegexConverter">
      <summary>
            Converts a <see cref="T:System.Text.RegularExpressions.Regex" /> to and from JSON and BSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.StringEnumConverter">
      <summary>
            Converts an <see cref="T:System.Enum" /> to and from its name string value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Converters.StringEnumConverter" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.CamelCaseText">
      <summary>
            Gets or sets a value indicating whether the written enum text should be camel case.
            </summary>
      <value>
        <c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.AllowIntegerValues">
      <summary>
            Gets or sets a value indicating whether integer values are allowed.
            </summary>
      <value>
        <c>true</c> if integers are allowed; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.ConstructorHandling">
      <summary>
            Specifies how constructors are used when initializing objects during deserialization by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ConstructorHandling.Default">
      <summary>
            First attempt to use the public default constructor, then fall back to single paramatized constructor, then the non-public default constructor.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ConstructorHandling.AllowNonPublicDefaultConstructor">
      <summary>
            Json.NET will use a non-public default constructor before falling back to a paramatized constructor.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Converters.VersionConverter">
      <summary>
            Converts a <see cref="T:System.Version" /> to and from a string (e.g. "1.2.3.4").
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.VersionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.VersionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing property value of the JSON that is being converted.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.VersionConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.FloatFormatHandling">
      <summary>
            Specifies float format handling options when writing special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" /> with <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatFormatHandling.String">
      <summary>
            Write special floating point values as strings in JSON, e.g. "NaN", "Infinity", "-Infinity".
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatFormatHandling.Symbol">
      <summary>
            Write special floating point values as symbols in JSON, e.g. NaN, Infinity, -Infinity.
            Note that this will produce non-valid JSON.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatFormatHandling.DefaultValue">
      <summary>
            Write special floating point values as the property's default value in JSON, e.g. 0.0 for a <see cref="T:System.Double" /> property, null for a <see cref="T:System.Nullable`1" /> property.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.FloatParseHandling">
      <summary>
            Specifies how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatParseHandling.Double">
      <summary>
            Floating point numbers are parsed to <see cref="F:Newtonsoft.Json.FloatParseHandling.Double" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatParseHandling.Decimal">
      <summary>
            Floating point numbers are parsed to <see cref="F:Newtonsoft.Json.FloatParseHandling.Decimal" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonContainerAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Id">
      <summary>
            Gets or sets the id.
            </summary>
      <value>The id.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Title">
      <summary>
            Gets or sets the title.
            </summary>
      <value>The title.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Description">
      <summary>
            Gets or sets the description.
            </summary>
      <value>The description.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemConverterType">
      <summary>
            Gets the collection's items converter.
            </summary>
      <value>The collection's items converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.IsReference">
      <summary>
            Gets or sets a value that indicates whether to preserve object references.
            </summary>
      <value>
        <c>true</c> to keep object reference; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemIsReference">
      <summary>
            Gets or sets a value that indicates whether to preserve collection's items references.
            </summary>
      <value>
        <c>true</c> to keep collection's items object references; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemReferenceLoopHandling">
      <summary>
            Gets or sets the reference loop handling used when serializing the collection's items.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemTypeNameHandling">
      <summary>
            Gets or sets the type name handling used when serializing the collection's items.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonDictionaryAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the collection.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="T:Newtonsoft.Json.JsonException">
      <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="T:Newtonsoft.Json.DateFormatHandling">
      <summary>
            Specifies how dates are formatted when writing JSON text.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateFormatHandling.IsoDateFormat">
      <summary>
            Dates are written in the ISO 8601 format, e.g. "2012-03-21T05:40Z".
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateFormatHandling.MicrosoftDateFormat">
      <summary>
            Dates are written in the Microsoft JSON format, e.g. "\/Date(1198908717056)\/".
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.DateParseHandling">
      <summary>
            Specifies how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON text.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateParseHandling.None">
      <summary>
            Date formatted strings are not parsed to a date type and are read as strings.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateParseHandling.DateTime">
      <summary>
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:Newtonsoft.Json.DateParseHandling.DateTime" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset">
      <summary>
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.DateTimeZoneHandling">
      <summary>
            Specifies how to treat the time value when converting between string and <see cref="T:System.DateTime" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Local">
      <summary>
            Treat as local time. If the <see cref="T:System.DateTime" /> object represents a Coordinated Universal Time (UTC), it is converted to the local time.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Utc">
      <summary>
            Treat as a UTC. If the <see cref="T:System.DateTime" /> object represents a local time, it is converted to a UTC.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Unspecified">
      <summary>
            Treat as a local time if a <see cref="T:System.DateTime" /> is being converted to a string.
            If a string is being converted to <see cref="T:System.DateTime" />, convert to a local time if a time zone is specified.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind">
      <summary>
            Time zone information should be preserved when converting.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Formatting">
      <summary>
            Specifies formatting options for the <see cref="T:Newtonsoft.Json.JsonTextWriter" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Formatting.None">
      <summary>
            No special formatting is applied. This is the default.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Formatting.Indented">
      <summary>
            Causes child objects to be indented according to the <see cref="P:Newtonsoft.Json.JsonTextWriter.Indentation" /> and <see cref="P:Newtonsoft.Json.JsonTextWriter.IndentChar" /> settings.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConstructorAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to use the specified constructor when deserializing that object.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonExtensionDataAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to deserialize properties with no matching class member into the specified collection
            and write values during serialization.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonExtensionDataAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonExtensionDataAttribute" /> class.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonExtensionDataAttribute.WriteData">
      <summary>
            Gets or sets a value that indicates whether to write extension data when serializing the object.
            </summary>
      <value>
        <c>true</c> to write extension data when serializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonExtensionDataAttribute.ReadData">
      <summary>
            Gets or sets a value that indicates whether to read extension data when deserializing the object.
            </summary>
      <value>
        <c>true</c> to read extension data when deserializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ITraceWriter">
      <summary>
            Represents a trace writer.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ITraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
      <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
      <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
      <param name="message">The trace message.</param>
      <param name="ex">The trace exception. This parameter is optional.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ITraceWriter.LevelFilter">
      <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
      <value>The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter">
      <summary>
            Represents a trace writer that writes to the application's <see cref="T:System.Diagnostics.TraceListener" /> instances.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
      <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
      <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
      <param name="message">The trace message.</param>
      <param name="ex">The trace exception. This parameter is optional.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.LevelFilter">
      <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
      <value>
            The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IValueProvider">
      <summary>
            Provides methods to get and set values.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ExpressionValueProvider">
      <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using dynamic methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.#ctor(System.Reflection.MemberInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ExpressionValueProvider" /> class.
            </summary>
      <param name="memberInfo">The member info.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.UnderlyingType">
      <summary>
            Gets the underlying type for the contract.
            </summary>
      <value>The underlying type for the contract.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.CreatedType">
      <summary>
            Gets or sets the type created during deserialization.
            </summary>
      <value>The type created during deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.IsReference">
      <summary>
            Gets or sets whether this type contract is serialized as a reference.
            </summary>
      <value>Whether this type contract is serialized as a reference.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.Converter">
      <summary>
            Gets or sets the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for this contract.
            </summary>
      <value>The converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializedCallbacks">
      <summary>
            Gets or sets all methods called immediately after deserialization of the object.
            </summary>
      <value>The methods called immediately after deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializingCallbacks">
      <summary>
            Gets or sets all methods called during deserialization of the object.
            </summary>
      <value>The methods called during deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializedCallbacks">
      <summary>
            Gets or sets all methods called after serialization of the object graph.
            </summary>
      <value>The methods called after serialization of the object graph.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializingCallbacks">
      <summary>
            Gets or sets all methods called before serialization of the object.
            </summary>
      <value>The methods called before serialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnErrorCallbacks">
      <summary>
            Gets or sets all method called when an error is thrown during the serialization of the object.
            </summary>
      <value>The methods called when an error is thrown during the serialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserialized">
      <summary>
            Gets or sets the method called immediately after deserialization of the object.
            </summary>
      <value>The method called immediately after deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializing">
      <summary>
            Gets or sets the method called during deserialization of the object.
            </summary>
      <value>The method called during deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerialized">
      <summary>
            Gets or sets the method called after serialization of the object graph.
            </summary>
      <value>The method called after serialization of the object graph.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializing">
      <summary>
            Gets or sets the method called before serialization of the object.
            </summary>
      <value>The method called before serialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnError">
      <summary>
            Gets or sets the method called when an error is thrown during the serialization of the object.
            </summary>
      <value>The method called when an error is thrown during the serialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator">
      <summary>
            Gets or sets the default creator method used to create the object.
            </summary>
      <value>The default creator method used to create the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreatorNonPublic">
      <summary>
            Gets or sets a value indicating whether the default creator is non public.
            </summary>
      <value>
        <c>true</c> if the default object creator is non-public; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonContainerContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonContainerContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonContainerContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemConverter">
      <summary>
            Gets or sets the default collection items <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <value>The converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemIsReference">
      <summary>
            Gets or sets a value indicating whether the collection items preserve object references.
            </summary>
      <value>
        <c>true</c> if collection items preserve object references; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemReferenceLoopHandling">
      <summary>
            Gets or sets the collection item reference loop handling.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemTypeNameHandling">
      <summary>
            Gets or sets the collection item type name handling.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.MemoryTraceWriter">
      <summary>
            Represents a trace writer that writes to memory. When the trace message limit is
            reached then old trace messages will be removed as new messages are added.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.MemoryTraceWriter" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
      <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
      <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
      <param name="message">The trace message.</param>
      <param name="ex">The trace exception. This parameter is optional.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.GetTraceMessages">
      <summary>
            Returns an enumeration of the most recent trace messages.
            </summary>
      <returns>An enumeration of the most recent trace messages.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> of the most recent trace messages.
            </summary>
      <returns>
            A <see cref="T:System.String" /> of the most recent trace messages.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.MemoryTraceWriter.LevelFilter">
      <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
      <value>
            The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.IJsonLineInfo">
      <summary>
            Provides an interface to enable a class to return line and position information.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.IJsonLineInfo.HasLineInfo">
      <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
      <returns>
        <c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.IJsonLineInfo.LineNumber">
      <summary>
            Gets the current line number.
            </summary>
      <value>The current line number or 0 if no line information is available (for example, HasLineInfo returns false).</value>
    </member>
    <member name="P:Newtonsoft.Json.IJsonLineInfo.LinePosition">
      <summary>
            Gets the current line position.
            </summary>
      <value>The current line position or 0 if no line information is available (for example, HasLineInfo returns false).</value>
    </member>
    <member name="T:Newtonsoft.Json.StringEscapeHandling">
      <summary>
            Specifies how strings are escaped when writing JSON text.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.StringEscapeHandling.Default">
      <summary>
            Only control characters (e.g. newline) are escaped.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeNonAscii">
      <summary>
            All non-ASCII and control characters (e.g. newline) are escaped.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeHtml">
      <summary>
            HTML (&lt;, &gt;, &amp;, ', ") and control characters (e.g. newline) are escaped.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.IJEnumerable`1">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
      <typeparam name="T">The type of token</typeparam>
    </member>
    <member name="P:Newtonsoft.Json.Linq.IJEnumerable`1.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> with the specified key.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JToken">
      <summary>
            Represents an abstract JSON token.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
      <param name="t1">The first <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <param name="t2">The second <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <returns>true if the tokens are equal; otherwise false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AddAfterSelf(System.Object)">
      <summary>
            Adds the specified content immediately after this token.
            </summary>
      <param name="content">A content object that contains simple content or a collection of content objects to be added after this token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AddBeforeSelf(System.Object)">
      <summary>
            Adds the specified content immediately before this token.
            </summary>
      <param name="content">A content object that contains simple content or a collection of content objects to be added before this token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Ancestors">
      <summary>
            Returns a collection of the ancestor tokens of this token.
            </summary>
      <returns>A collection of the ancestor tokens of this token.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AfterSelf">
      <summary>
            Returns a collection of the sibling tokens after this token, in document order.
            </summary>
      <returns>A collection of the sibling tokens after this tokens, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.BeforeSelf">
      <summary>
            Returns a collection of the sibling tokens before this token, in document order.
            </summary>
      <returns>A collection of the sibling tokens before this token, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Value``1(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key converted to the specified type.
            </summary>
      <typeparam name="T">The type to convert the token to.</typeparam>
      <param name="key">The token key.</param>
      <returns>The converted token value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Children">
      <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Children``1">
      <summary>
            Returns a collection of the child tokens of this token, in document order, filtered by the specified type.
            </summary>
      <typeparam name="T">The type to filter the child tokens on.</typeparam>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Values``1">
      <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
      <typeparam name="T">The type to convert the values to.</typeparam>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Remove">
      <summary>
            Removes this token from its parent.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Replace(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Replaces this token with the specified token.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToString">
      <summary>
            Returns the indented JSON for this token.
            </summary>
      <returns>
            The indented JSON for this token.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
      <returns>The JSON for this token using the given formatting and converters.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Boolean">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Boolean" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTimeOffset">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.DateTimeOffset" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Boolean}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int64">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int64" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTime}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Decimal}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Double}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Char}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int32">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int32" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int16">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int16" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt16">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt16" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Char">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Char" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Byte" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.SByte">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.SByte" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int32}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int16}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt16}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Byte}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.SByte}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTime">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.DateTime" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int64}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Single}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Decimal">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Decimal" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt32}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt64}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Double">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Double" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Single">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Single" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.String">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.String" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt32">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt64">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt64" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte[]">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Byte[]" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Guid">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Guid" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Guid}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Guid" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.TimeSpan">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.TimeSpan" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.TimeSpan}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.TimeSpan" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Uri">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Uri" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Boolean)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTimeOffset)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Byte" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Byte})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.SByte)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.SByte" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.SByte})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int64)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int16)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Int16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt16)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int32)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Int32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTime)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Decimal)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Double)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Double" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Single)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Single" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.String)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.String" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt32)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt64)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte[])~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Byte[]" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Uri)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Uri" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.TimeSpan)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.TimeSpan" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.TimeSpan})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Guid)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Guid" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Guid})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.CreateReader">
      <summary>
            Creates an <see cref="T:Newtonsoft.Json.JsonReader" /> for this token.
            </summary>
      <returns>An <see cref="T:Newtonsoft.Json.JsonReader" /> that can be used to read this token and its descendants.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the value of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from an object using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when reading the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the value of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1">
      <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type)">
      <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="objectType">The object type that the token will be deserialized to.</param>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1(Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" /> using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when creating the object.</param>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" /> using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <param name="objectType">The object type that the token will be deserialized to.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when creating the object.</param>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>
            An <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>
            An <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String)">
      <summary>
            Selects a <see cref="T:Newtonsoft.Json.Linq.JToken" /> using a JPath expression. Selects the token that matches the object path.
            </summary>
      <param name="path">
            A <see cref="T:System.String" /> that contains a JPath expression.
            </param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" />, or null.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String,System.Boolean)">
      <summary>
            Selects a <see cref="T:Newtonsoft.Json.Linq.JToken" /> using a JPath expression. Selects the token that matches the object path.
            </summary>
      <param name="path">
            A <see cref="T:System.String" /> that contains a JPath expression.
            </param>
      <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectTokens(System.String)">
      <summary>
            Selects a collection of elements using a JPath expression.
            </summary>
      <param name="path">
            A <see cref="T:System.String" /> that contains a JPath expression.
            </param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the selected elements.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectTokens(System.String,System.Boolean)">
      <summary>
            Selects a collection of elements using a JPath expression.
            </summary>
      <param name="path">
            A <see cref="T:System.String" /> that contains a JPath expression.
            </param>
      <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the selected elements.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.DeepClone">
      <summary>
            Creates a new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken" />. All child tokens are recursively cloned.
            </summary>
      <returns>A new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.EqualityComparer">
      <summary>
            Gets a comparer that can compare two tokens for value equality.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JTokenEqualityComparer" /> that can compare two nodes for value equality.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Parent">
      <summary>
            Gets or sets the parent.
            </summary>
      <value>The parent.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Root">
      <summary>
            Gets the root <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The root <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.HasValues">
      <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Next">
      <summary>
            Gets the next sibling token of this node.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the next sibling token.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Previous">
      <summary>
            Gets the previous sibling token of this node.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the previous sibling token.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Path">
      <summary>
            Gets the path of the JSON token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.First">
      <summary>
            Get the first child token of this token.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Last">
      <summary>
            Get the last child token of this token.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JValue">
      <summary>
            Represents a value in JSON (string, integer, date, etc).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(Newtonsoft.Json.Linq.JValue)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class from another <see cref="T:Newtonsoft.Json.Linq.JValue" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JValue" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Decimal)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Char)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.UInt64)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTimeOffset)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Uri)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.TimeSpan)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CreateComment(System.String)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> comment with the given value.
            </summary>
      <param name="value">The value.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> comment with the given value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CreateString(System.String)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> string with the given value.
            </summary>
      <param name="value">The value.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> string with the given value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.Equals(Newtonsoft.Json.Linq.JValue)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="format">The format.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.IFormatProvider)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="formatProvider">The format provider.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String,System.IFormatProvider)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="format">The format.</param>
      <param name="formatProvider">The format provider.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CompareTo(Newtonsoft.Json.Linq.JValue)">
      <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj" />.
            Zero
            This instance is equal to <paramref name="obj" />.
            Greater than zero
            This instance is greater than <paramref name="obj" />.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance.
            </exception>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.HasValues">
      <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.Value">
      <summary>
            Gets or sets the underlying token value.
            </summary>
      <value>The underlying token value.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JRaw">
      <summary>
            Represents a raw JSON string.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(Newtonsoft.Json.Linq.JRaw)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw" /> class from another <see cref="T:Newtonsoft.Json.Linq.JRaw" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JRaw" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw" /> class.
            </summary>
      <param name="rawJson">The raw json.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.Create(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates an instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.
            </summary>
      <param name="reader">The reader.</param>
      <returns>An instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Required">
      <summary>
            Indicating whether a property is required.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.Default">
      <summary>
            The property is not required. The default state.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.AllowNull">
      <summary>
            The property must be defined in JSON but can be a null value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.Always">
      <summary>
            The property must be defined in JSON and cannot be a null value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonDynamicContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonDynamicContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.Properties">
      <summary>
            Gets the object's properties.
            </summary>
      <value>The object's properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.PropertyNameResolver">
      <summary>
            Gets or sets the property name resolver.
            </summary>
      <value>The property name resolver.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonISerializableContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonISerializableContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonISerializableContract.ISerializableCreator">
      <summary>
            Gets or sets the ISerializable object constructor.
            </summary>
      <value>The ISerializable object constructor.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonLinqContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonLinqContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DynamicValueProvider">
      <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using dynamic methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.#ctor(System.Reflection.MemberInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DynamicValueProvider" /> class.
            </summary>
      <param name="memberInfo">The member info.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ErrorEventArgs">
      <summary>
            Provides data for the Error event.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ErrorEventArgs.#ctor(System.Object,Newtonsoft.Json.Serialization.ErrorContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ErrorEventArgs" /> class.
            </summary>
      <param name="currentObject">The current object.</param>
      <param name="errorContext">The error context.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.CurrentObject">
      <summary>
            Gets the current object the error event is being raised against.
            </summary>
      <value>The current object the error event is being raised against.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorContext">
      <summary>
            Gets the error context.
            </summary>
      <value>The error context.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JPropertyDescriptor">
      <summary>
            Represents a view of a <see cref="T:Newtonsoft.Json.Linq.JProperty" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JPropertyDescriptor" /> class.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.CanResetValue(System.Object)">
      <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
      <returns>
            true if resetting the component changes its value; otherwise, false.
            </returns>
      <param name="component">The component to test for reset capability. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.GetValue(System.Object)">
      <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
      <returns>
            The value of a property for a given component.
            </returns>
      <param name="component">The component with the property for which to retrieve the value. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ResetValue(System.Object)">
      <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
      <param name="component">The component with the property value that is to be reset to the default value. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
      <param name="component">The component with the property value that is to be set. 
                            </param>
      <param name="value">The new value. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
      <returns>
            true if the property should be persisted; otherwise, false.
            </returns>
      <param name="component">The component with the property to be examined for persistence. 
                            </param>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.ComponentType">
      <summary>
            When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
      <returns>
            A <see cref="T:System.Type" /> that represents the type of component this property is bound to. When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> or <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> methods are invoked, the object specified might be an instance of this type.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.IsReadOnly">
      <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
      <returns>
            true if the property is read-only; otherwise, false.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.PropertyType">
      <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
      <returns>
            A <see cref="T:System.Type" /> that represents the type of the property.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.NameHashCode">
      <summary>
            Gets the hash code for the name of the member.
            </summary>
      <value>
      </value>
      <returns>
            The hash code for the name of the member.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IReferenceResolver">
      <summary>
            Used to resolve references when serializing and deserializing JSON by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(System.Object,System.String)">
      <summary>
            Resolves a reference to its object.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="reference">The reference to resolve.</param>
      <returns>The object that</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(System.Object,System.Object)">
      <summary>
            Gets the reference for the sepecified object.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="value">The object to get a reference for.</param>
      <returns>The reference to the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.IsReferenced(System.Object,System.Object)">
      <summary>
            Determines whether the specified object is referenced.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="value">The object to test for a reference.</param>
      <returns>
        <c>true</c> if the specified object is referenced; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.AddReference(System.Object,System.String,System.Object)">
      <summary>
            Adds a reference to the specified object.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="reference">The reference.</param>
      <param name="value">The object to reference.</param>
    </member>
    <member name="T:Newtonsoft.Json.PreserveReferencesHandling">
      <summary>
            Specifies reference handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            Note that references cannot be preserved when a value is set via a non-default constructor such as types that implement ISerializable.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="PreservingObjectReferencesOn" title="Preserve Object References" />
      </example>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.None">
      <summary>
            Do not preserve references when serializing types.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Objects">
      <summary>
            Preserve references when serializing into a JSON object structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Arrays">
      <summary>
            Preserve references when serializing into a JSON array structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.All">
      <summary>
            Preserve references when serializing.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonArrayAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the collection.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with a flag indicating whether the array can contain null items
            </summary>
      <param name="allowNullItems">A flag indicating whether the array can contain null items.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonArrayAttribute.AllowNullItems">
      <summary>
            Gets or sets a value indicating whether null items are allowed in the collection.
            </summary>
      <value>
        <c>true</c> if null items are allowed in the collection; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.DefaultValueHandling">
      <summary>
            Specifies default value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingObject" title="DefaultValueHandling Class" />
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingExample" title="DefaultValueHandling Ignore Example" />
      </example>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Include">
      <summary>
            Include members where the member value is the same as the member's default value when serializing objects.
            Included members are written to JSON. Has no effect when deserializing.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Ignore">
      <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            so that is is not written to JSON.
            This option will ignore all default values (e.g. <c>null</c> for objects and nullable typesl; <c>0</c> for integers,
            decimals and floating point numbers; and <c>false</c> for booleans). The default value ignored can be changed by
            placing the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> on the property.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Populate">
      <summary>
            Members with a default value but no JSON will be set to their default value when deserializing.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.IgnoreAndPopulate">
      <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            and sets members to their default value when deserializing.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverterAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to use the specified <see cref="T:Newtonsoft.Json.JsonConverter" /> when serializing the member or class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonConverterAttribute" /> class.
            </summary>
      <param name="converterType">Type of the converter.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverterAttribute.ConverterType">
      <summary>
            Gets the type of the converter.
            </summary>
      <value>The type of the converter.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonObjectAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(Newtonsoft.Json.MemberSerialization)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with the specified member serialization.
            </summary>
      <param name="memberSerialization">The member serialization.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonObjectAttribute.MemberSerialization">
      <summary>
            Gets or sets the member serialization.
            </summary>
      <value>The member serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonObjectAttribute.ItemRequired">
      <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
      <value>
            	A value indicating whether the object's properties are required.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializerSettings">
      <summary>
            Specifies the settings on a <see cref="T:Newtonsoft.Json.JsonSerializer" /> object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializerSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> class.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceLoopHandling">
      <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) is handled.
            </summary>
      <value>Reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.MissingMemberHandling">
      <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
      <value>Missing member handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ObjectCreationHandling">
      <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.NullValueHandling">
      <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            </summary>
      <value>Null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DefaultValueHandling">
      <summary>
            Gets or sets how null default are handled during serialization and deserialization.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Converters">
      <summary>
            Gets or sets a collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.
            </summary>
      <value>The converters.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.PreserveReferencesHandling">
      <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
      <value>The preserve references handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling">
      <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormat">
      <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
      <value>The type name assembly format.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ConstructorHandling">
      <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
      <value>The constructor handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ContractResolver">
      <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
      <value>The contract resolver.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceResolver">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
      <value>The reference resolver.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TraceWriter">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter" /> used by the serializer when writing trace messages.
            </summary>
      <value>The trace writer.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Binder">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> used by the serializer when resolving type names.
            </summary>
      <value>The binder.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Error">
      <summary>
            Gets or sets the error handler called during serialization and deserialization.
            </summary>
      <value>The error handler called during serialization and deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Context">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used by the serializer when invoking serialization callback methods.
            </summary>
      <value>The context.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatString">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatting when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.MaxDepth">
      <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Formatting">
      <summary>
            Indicates how JSON text output is formatted.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatHandling">
      <summary>
            Get or set how dates are written to JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateTimeZoneHandling">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> time zones are handling during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateParseHandling">
      <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.FloatFormatHandling">
      <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written as JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.FloatParseHandling">
      <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.StringEscapeHandling">
      <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Culture">
      <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.CheckAdditionalContent">
      <summary>
            Gets a value indicating whether there will be a check for additional content after deserializing an object.
            </summary>
      <value>
        <c>true</c> if there will be a check for additional content after deserializing an object; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonValidatingReader">
      <summary>
            Represents a reader that provides <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> validation.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.#ctor(Newtonsoft.Json.JsonReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonValidatingReader" /> class that
            validates the content returned from the given <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from while validating.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Value">
      <summary>
            Gets the text value of the current JSON token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Depth">
      <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
      <value>The depth of the current token in the JSON document.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Path">
      <summary>
            Gets the path of the current JSON token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.QuoteChar">
      <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.TokenType">
      <summary>
            Gets the type of the current JSON token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.ValueType">
      <summary>
            Gets the Common Language Runtime (CLR) type for the current JSON token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Schema">
      <summary>
            Gets or sets the schema.
            </summary>
      <value>The schema.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Reader">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.JsonReader" /> used to construct this <see cref="T:Newtonsoft.Json.JsonValidatingReader" />.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.JsonReader" /> specified in the constructor.</value>
    </member>
    <member name="E:Newtonsoft.Json.JsonValidatingReader.ValidationEventHandler">
      <summary>
            Sets an event handler for receiving schema validation errors.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenEqualityComparer">
      <summary>
            Compares tokens to determine whether they are equal.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.Equals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines whether the specified objects are equal.
            </summary>
      <param name="x">The first object of type <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <param name="y">The second object of type <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.GetHashCode(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Returns a hash code for the specified object.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <returns>A hash code for the specified object.</returns>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.</exception>
    </member>
    <member name="T:Newtonsoft.Json.MemberSerialization">
      <summary>
            Specifies the member serialization options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.OptOut">
      <summary>
            All public members are serialized by default. Members can be excluded using <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute" /> or <see cref="T:System.NonSerializedAttribute" />.
            This is the default member serialization mode.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.OptIn">
      <summary>
            Only members must be marked with <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> or <see cref="T:System.Runtime.Serialization.DataMemberAttribute" /> are serialized.
            This member serialization mode can also be set by marking the class with <see cref="T:System.Runtime.Serialization.DataContractAttribute" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.Fields">
      <summary>
            All public and private fields are serialized. Members can be excluded using <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute" /> or <see cref="T:System.NonSerializedAttribute" />.
            This member serialization mode can also be set by marking the class with <see cref="T:System.SerializableAttribute" />
            and setting IgnoreSerializableAttribute on <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> to false.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.ObjectCreationHandling">
      <summary>
            Specifies how object creation is handled by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Auto">
      <summary>
            Reuse existing objects, create new objects when needed.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Reuse">
      <summary>
            Only reuse existing objects.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Replace">
      <summary>
            Always create new objects.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Converters.IsoDateTimeConverter">
      <summary>
            Converts a <see cref="T:System.DateTime" /> to and from the ISO 8601 date format (e.g. 2008-04-12T12:53Z).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeStyles">
      <summary>
            Gets or sets the date time styles used when converting a date to and from JSON.
            </summary>
      <value>The date time styles used when converting a date to and from JSON.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeFormat">
      <summary>
            Gets or sets the date time format used when converting a date to and from JSON.
            </summary>
      <value>The date time format used when converting a date to and from JSON.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.Culture">
      <summary>
            Gets or sets the culture used when converting a date to and from JSON.
            </summary>
      <value>The culture used when converting a date to and from JSON.</value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter">
      <summary>
            Converts a <see cref="T:System.DateTime" /> to and from a JavaScript date constructor (e.g. new Date(52231943)).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing property value of the JSON that is being converted.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.XmlNodeConverter">
      <summary>
            Converts XML to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="serializer">The calling serializer.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
      <summary>
            Checks if the attributeName is a namespace attribute.
            </summary>
      <param name="attributeName">Attribute name to test.</param>
      <param name="prefix">The attribute name prefix if it has one, otherwise an empty string.</param>
      <returns>True if attribute name is for a namespace attribute, otherwise false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
      <param name="valueType">Type of the value.</param>
      <returns>
        <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeRootElementName">
      <summary>
            Gets or sets the name of the root element to insert when deserializing to XML if the JSON structure has produces multiple root elements.
            </summary>
      <value>The name of the deserialize root element.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.WriteArrayAttribute">
      <summary>
            Gets or sets a flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </summary>
      <value>
        <c>true</c> if the array attibute is written to the XML; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.OmitRootObject">
      <summary>
            Gets or sets a value indicating whether to write the root JSON object.
            </summary>
      <value>
        <c>true</c> if the JSON root object is omitted; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonTextReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to JSON text data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.#ctor(System.IO.TextReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader" /> class with the specified <see cref="T:System.IO.TextReader" />.
            </summary>
      <param name="reader">The <c>TextReader</c> containing the XML data to read.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.DateTimeOffset" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.Close">
      <summary>
            Changes the state to closed. 
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.HasLineInfo">
      <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
      <returns>
        <c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextReader.LineNumber">
      <summary>
            Gets the current line number.
            </summary>
      <value>
            The current line number or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextReader.LinePosition">
      <summary>
            Gets the current line position.
            </summary>
      <value>
            The current line position or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonPropertyAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to always serialize the member with the specified name.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> class with the specified name.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemConverterType">
      <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
      <value>The collection's items converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NullValueHandling">
      <summary>
            Gets or sets the null value handling used when serializing this property.
            </summary>
      <value>The null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.DefaultValueHandling">
      <summary>
            Gets or sets the default value handling used when serializing this property.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ReferenceLoopHandling">
      <summary>
            Gets or sets the reference loop handling used when serializing this property.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ObjectCreationHandling">
      <summary>
            Gets or sets the object creation handling used when deserializing this property.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.TypeNameHandling">
      <summary>
            Gets or sets the type name handling used when serializing this property.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.IsReference">
      <summary>
            Gets or sets whether this property's value is serialized as a reference.
            </summary>
      <value>Whether this property's value is serialized as a reference.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Order">
      <summary>
            Gets or sets the order of serialization and deserialization of a member.
            </summary>
      <value>The numeric order of serialization or deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Required">
      <summary>
            Gets or sets a value indicating whether this property is required.
            </summary>
      <value>
            	A value indicating whether this property is required.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.PropertyName">
      <summary>
            Gets or sets the name of the property.
            </summary>
      <value>The name of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemReferenceLoopHandling">
      <summary>
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </summary>
      <value>The collection's items reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemTypeNameHandling">
      <summary>
            Gets or sets the the type name handling used when serializing the property's collection items.
            </summary>
      <value>The collection's items type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemIsReference">
      <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
      <value>Whether this property's collection items are serialized as a reference.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonIgnoreAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> not to serialize the public field or public read/write property value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonTextWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
      <summary>
            Creates an instance of the <c>JsonWriter</c> class using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
      <param name="textWriter">The <c>TextWriter</c> to write to.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the specified end token.
            </summary>
      <param name="token">The end token to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String,System.Boolean)">
      <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndent">
      <summary>
            Writes indent characters.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueDelimiter">
      <summary>
            Writes the JSON value delimiter.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndentSpace">
      <summary>
            Writes an indent space.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Object)">
      <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Single})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Double})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteWhitespace(System.String)">
      <summary>
            Writes out the given white space.
            </summary>
      <param name="ws">The string of white space characters.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.Indentation">
      <summary>
            Gets or sets how many IndentChars to write for each level in the hierarchy when <see cref="T:Newtonsoft.Json.Formatting" /> is set to <c>Formatting.Indented</c>.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteChar">
      <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.IndentChar">
      <summary>
            Gets or sets which character to use for indenting when <see cref="T:Newtonsoft.Json.Formatting" /> is set to <c>Formatting.Indented</c>.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteName">
      <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonWriterException">
      <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriterException.Path">
      <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
      <value>The path to the JSON where the error occurred.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonReaderException">
      <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.LineNumber">
      <summary>
            Gets the line number indicating where the error occurred.
            </summary>
      <value>The line number indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.LinePosition">
      <summary>
            Gets the line position indicating where the error occurred.
            </summary>
      <value>The line position indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.Path">
      <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
      <value>The path to the JSON where the error occurred.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverterCollection">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConvert">
      <summary>
            Provides methods for converting between common language runtime types and JSON types.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="SerializeObject" title="Serializing and Deserializing JSON with JsonConvert" />
      </example>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.True">
      <summary>
            Represents JavaScript's boolean value true as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.False">
      <summary>
            Represents JavaScript's boolean value false as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.Null">
      <summary>
            Represents JavaScript's null as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.Undefined">
      <summary>
            Represents JavaScript's undefined as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.PositiveInfinity">
      <summary>
            Represents JavaScript's positive infinity as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.NegativeInfinity">
      <summary>
            Represents JavaScript's negative infinity as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.NaN">
      <summary>
            Represents JavaScript's NaN as a string. This field is read-only.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime)">
      <summary>
            Converts the <see cref="T:System.DateTime" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime,Newtonsoft.Json.DateFormatHandling,Newtonsoft.Json.DateTimeZoneHandling)">
      <summary>
            Converts the <see cref="T:System.DateTime" /> to its JSON string representation using the <see cref="T:Newtonsoft.Json.DateFormatHandling" /> specified.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="format">The format the date will be converted to.</param>
      <param name="timeZoneHandling">The time zone handling when the date is converted to a string.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)">
      <summary>
            Converts the <see cref="T:System.DateTimeOffset" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset,Newtonsoft.Json.DateFormatHandling)">
      <summary>
            Converts the <see cref="T:System.DateTimeOffset" /> to its JSON string representation using the <see cref="T:Newtonsoft.Json.DateFormatHandling" /> specified.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="format">The format the date will be converted to.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Boolean)">
      <summary>
            Converts the <see cref="T:System.Boolean" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Char)">
      <summary>
            Converts the <see cref="T:System.Char" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Char" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Enum)">
      <summary>
            Converts the <see cref="T:System.Enum" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Enum" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int32)">
      <summary>
            Converts the <see cref="T:System.Int32" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int16)">
      <summary>
            Converts the <see cref="T:System.Int16" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt16)">
      <summary>
            Converts the <see cref="T:System.UInt16" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt32)">
      <summary>
            Converts the <see cref="T:System.UInt32" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int64)">
      <summary>
            Converts the <see cref="T:System.Int64" />  to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt64)">
      <summary>
            Converts the <see cref="T:System.UInt64" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Single)">
      <summary>
            Converts the <see cref="T:System.Single" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Double)">
      <summary>
            Converts the <see cref="T:System.Double" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Byte)">
      <summary>
            Converts the <see cref="T:System.Byte" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.SByte)">
      <summary>
            Converts the <see cref="T:System.SByte" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Decimal)">
      <summary>
            Converts the <see cref="T:System.Decimal" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Guid)">
      <summary>
            Converts the <see cref="T:System.Guid" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Guid" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan)">
      <summary>
            Converts the <see cref="T:System.TimeSpan" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.TimeSpan" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Uri)">
      <summary>
            Converts the <see cref="T:System.Uri" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Uri" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String)">
      <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char)">
      <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="delimiter">The string delimiter character.</param>
      <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Object)">
      <summary>
            Converts the <see cref="T:System.Object" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object)">
      <summary>
            Serializes the specified object to a JSON string.
            </summary>
      <param name="value">The object to serialize.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting)">
      <summary>
            Serializes the specified object to a JSON string using formatting.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="converters">A collection converters used while serializing.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Serializes the specified object to a JSON string using formatting and a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="converters">A collection converters used while serializing.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Serializes the specified object to a JSON string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
      <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="T:Newtonsoft.Json.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Serializes the specified object to a JSON string using formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
      <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="T:Newtonsoft.Json.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object)">
      <summary>
            Asynchronously serializes the specified object to a JSON string.
            Serialization will happen on a new thread.
            </summary>
      <param name="value">The object to serialize.</param>
      <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object,Newtonsoft.Json.Formatting)">
      <summary>
            Asynchronously serializes the specified object to a JSON string using formatting.
            Serialization will happen on a new thread.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Asynchronously serializes the specified object to a JSON string using formatting and a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            Serialization will happen on a new thread.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
      <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String)">
      <summary>
            Deserializes the JSON to a .NET object.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <returns>The deserialized object from the Json string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to a .NET object using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The deserialized object from the Json string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String)">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <returns>The deserialized object from the Json string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
      <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
      <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="anonymousTypeObject">The anonymous type object.</param>
      <returns>The deserialized anonymous type from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to the given anonymous type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="anonymousTypeObject">The anonymous type object.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>The deserialized anonymous type from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="converters">Converters to use while deserializing.</param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The object to deserialize.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The type of the object to deserialize.</param>
      <param name="converters">Converters to use while deserializing.</param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The type of the object to deserialize to.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync``1(System.String)">
      <summary>
            Asynchronously deserializes the JSON to the specified .NET type.
            Deserialization will happen on a new thread.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Asynchronously deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            Deserialization will happen on a new thread.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(System.String)">
      <summary>
            Asynchronously deserializes the JSON to the specified .NET type.
            Deserialization will happen on a new thread.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Asynchronously deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            Deserialization will happen on a new thread.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The type of the object to deserialize to.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object)">
      <summary>
            Populates the object with values from the JSON string.
            </summary>
      <param name="value">The JSON to populate values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Populates the object with values from the JSON string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The JSON to populate values from.</param>
      <param name="target">The target object to populate values onto.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObjectAsync(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Asynchronously populates the object with values from the JSON string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The JSON to populate values from.</param>
      <param name="target">The target object to populate values onto.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>
            A task that represents the asynchronous populate operation.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode)">
      <summary>
            Serializes the XML node to a JSON string.
            </summary>
      <param name="node">The node to serialize.</param>
      <returns>A JSON string of the XmlNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting)">
      <summary>
            Serializes the XML node to a JSON string using formatting.
            </summary>
      <param name="node">The node to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>A JSON string of the XmlNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting,System.Boolean)">
      <summary>
            Serializes the XML node to a JSON string using formatting and omits the root object if <paramref name="omitRootObject" /> is <c>true</c>.
            </summary>
      <param name="node">The node to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="omitRootObject">Omits writing the root object.</param>
      <returns>A JSON string of the XmlNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String)">
      <summary>
            Deserializes the XmlNode from a JSON string.
            </summary>
      <param name="value">The JSON string.</param>
      <returns>The deserialized XmlNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String)">
      <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName" />.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <returns>The deserialized XmlNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String,System.Boolean)">
      <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName" />
            and writes a .NET array attribute for collections.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
      <returns>The deserialized XmlNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject)">
      <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string.
            </summary>
      <param name="node">The node to convert to JSON.</param>
      <returns>A JSON string of the XNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting)">
      <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string using formatting.
            </summary>
      <param name="node">The node to convert to JSON.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>A JSON string of the XNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting,System.Boolean)">
      <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string using formatting and omits the root object if <paramref name="omitRootObject" /> is <c>true</c>.
            </summary>
      <param name="node">The node to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="omitRootObject">Omits writing the root object.</param>
      <returns>A JSON string of the XNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String)">
      <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string.
            </summary>
      <param name="value">The JSON string.</param>
      <returns>The deserialized XNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String)">
      <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName" />.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <returns>The deserialized XNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String,System.Boolean)">
      <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName" />
            and writes a .NET array attribute for collections.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
      <returns>The deserialized XNode</returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonConvert.DefaultSettings">
      <summary>
            Gets or sets a function that creates default <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            Default settings are automatically used by serialization methods on <see cref="T:Newtonsoft.Json.JsonConvert" />,
            and <see cref="M:Newtonsoft.Json.Linq.JToken.ToObject``1" /> and <see cref="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)" /> on <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            To serialize without using any default settings create a <see cref="T:Newtonsoft.Json.JsonSerializer" /> with
            <see cref="M:Newtonsoft.Json.JsonSerializer.Create" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializationException">
      <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializer">
      <summary>
            Serializes and deserializes objects into and from the JSON format.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> enables you to control how objects are encoded into JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializer" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Create">
      <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings.
            </summary>
      <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Create(Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings.
            </summary>
      <param name="settings">The settings to be applied to the <see cref="T:Newtonsoft.Json.JsonSerializer" />.</param>
      <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.CreateDefault">
      <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings.
            </summary>
      <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.CreateDefault(Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings.
            </summary>
      <param name="settings">The settings to be applied to the <see cref="T:Newtonsoft.Json.JsonSerializer" />.</param>
      <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
      <summary>
            Populates the JSON values onto the target object.
            </summary>
      <param name="reader">The <see cref="T:System.IO.TextReader" /> that contains the JSON structure to reader values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Populate(Newtonsoft.Json.JsonReader,System.Object)">
      <summary>
            Populates the JSON values onto the target object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> that contains the JSON structure to reader values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> that contains the JSON structure to deserialize.</param>
      <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:System.IO.StringReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:System.IO.TextReader" /> containing the object.</param>
      <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The instance of <paramref name="objectType" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize``1(Newtonsoft.Json.JsonReader)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the object.</param>
      <typeparam name="T">The type of the object to deserialize.</typeparam>
      <returns>The instance of <typeparamref name="T" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader,System.Type)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the object.</param>
      <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The instance of <paramref name="objectType" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the Json structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object,System.Type)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
      <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter" /> used to write the Json structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
      <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object,System.Type)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the Json structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
      <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:Newtonsoft.Json.JsonWriter" />. 
            </summary>
      <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter" /> used to write the Json structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceResolver">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Binder">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> used by the serializer when resolving type names.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TraceWriter">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter" /> used by the serializer when writing trace messages.
            </summary>
      <value>The trace writer.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling">
      <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormat">
      <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
      <value>The type name assembly format.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.PreserveReferencesHandling">
      <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling">
      <summary>
            Get or set how reference loops (e.g. a class referencing itself) is handled.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.MissingMemberHandling">
      <summary>
            Get or set how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.NullValueHandling">
      <summary>
            Get or set how null values are handled during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DefaultValueHandling">
      <summary>
            Get or set how null default are handled during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ObjectCreationHandling">
      <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ConstructorHandling">
      <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
      <value>The constructor handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Converters">
      <summary>
            Gets a collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.
            </summary>
      <value>Collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ContractResolver">
      <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Context">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used by the serializer when invoking serialization callback methods.
            </summary>
      <value>The context.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Formatting">
      <summary>
            Indicates how JSON text output is formatted.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatHandling">
      <summary>
            Get or set how dates are written to JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateTimeZoneHandling">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> time zones are handling during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateParseHandling">
      <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.FloatParseHandling">
      <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.FloatFormatHandling">
      <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written as JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.StringEscapeHandling">
      <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatString">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatting when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Culture">
      <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.MaxDepth">
      <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.CheckAdditionalContent">
      <summary>
            Gets a value indicating whether there will be a check for additional JSON content after deserializing an object.
            </summary>
      <value>
        <c>true</c> if there will be a check for additional JSON content after deserializing an object; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="E:Newtonsoft.Json.JsonSerializer.Error">
      <summary>
            Occurs when the <see cref="T:Newtonsoft.Json.JsonSerializer" /> errors during serialization and deserialization.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.Extensions">
      <summary>
            Contains the LINQ to JSON extension methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of tokens that contains the ancestors of every token in the source collection.
            </summary>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JToken" />.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the ancestors of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of tokens that contains the descendants of every token in the source collection.
            </summary>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JContainer" />.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the descendants of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JObject})">
      <summary>
            Returns a collection of child properties of every object in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the properties of every object in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
      <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <param name="key">The token key.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection with the given key.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
      <summary>
            Returns a collection of converted child values of every object in the source collection with the given key.
            </summary>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <param name="key">The token key.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection with the given key.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Converts the value.
            </summary>
      <typeparam name="U">The type to convert the value to.</typeparam>
      <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Converts the value.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <typeparam name="U">The type to convert the value to.</typeparam>
      <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of child tokens of every array in the source collection.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of converted child tokens of every array in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <typeparam name="T">The source collection type.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JContainer">
      <summary>
            Represents a token that can contain other tokens.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.AddingNew" /> event.
            </summary>
      <param name="e">The <see cref="T:System.ComponentModel.AddingNewEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.ListChanged" /> event.
            </summary>
      <param name="e">The <see cref="T:System.ComponentModel.ListChangedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged" /> event.
            </summary>
      <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Children">
      <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Values``1">
      <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
      <typeparam name="T">The type to convert the values to.</typeparam>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Descendants">
      <summary>
            Returns a collection of the descendant tokens for this token in document order.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the descendant tokens of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Add(System.Object)">
      <summary>
            Adds the specified content as children of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="content">The content to be added.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.AddFirst(System.Object)">
      <summary>
            Adds the specified content as the first children of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="content">The content to be added.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.CreateWriter">
      <summary>
            Creates an <see cref="T:Newtonsoft.Json.JsonWriter" /> that can be used to add tokens to the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <returns>An <see cref="T:Newtonsoft.Json.JsonWriter" /> that is ready to have content written to it.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.ReplaceAll(System.Object)">
      <summary>
            Replaces the children nodes of this token with the specified content.
            </summary>
      <param name="content">The content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.RemoveAll">
      <summary>
            Removes the child nodes from this token.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.HasValues">
      <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.First">
      <summary>
            Get the first child token of this token.
            </summary>
      <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.Last">
      <summary>
            Get the last child token of this token.
            </summary>
      <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.Count">
      <summary>
            Gets the count of child JSON tokens.
            </summary>
      <value>The count of child JSON tokens</value>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.ListChanged">
      <summary>
            Occurs when the list changes or an item in the list changes.
            </summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.AddingNew">
      <summary>
            Occurs before an item is added to the collection.
            </summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged">
      <summary>
            Occurs when the items list of the collection has changed, or the collection is reset.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JConstructor">
      <summary>
            Represents a JSON constructor.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(Newtonsoft.Json.Linq.JConstructor)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class from another <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name and content.
            </summary>
      <param name="name">The constructor name.</param>
      <param name="content">The contents of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name and content.
            </summary>
      <param name="name">The constructor name.</param>
      <param name="content">The contents of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name.
            </summary>
      <param name="name">The constructor name.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Name">
      <summary>
            Gets or sets the name of this constructor.
            </summary>
      <value>The constructor name.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JEnumerable`1">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
      <typeparam name="T">The type of token</typeparam>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JEnumerable`1.Empty">
      <summary>
            An empty collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> struct.
            </summary>
      <param name="enumerable">The enumerable.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JEnumerable`1.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> with the specified key.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JObject">
      <summary>
            Represents a JSON object.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(Newtonsoft.Json.Linq.JObject)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class from another <see cref="T:Newtonsoft.Json.Linq.JObject" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JObject" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class with the specified content.
            </summary>
      <param name="content">The contents of the object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class with the specified content.
            </summary>
      <param name="content">The contents of the object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Properties">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of this object's properties.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of this object's properties.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Property(System.String)">
      <summary>
            Gets a <see cref="T:Newtonsoft.Json.Linq.JProperty" /> the specified name.
            </summary>
      <param name="name">The property name.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> with the specified name or null.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.PropertyValues">
      <summary>
            Gets an <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> of this object's property values.
            </summary>
      <returns>An <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> of this object's property values.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> populated from the string that contains JSON.</returns>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String,System.StringComparison)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison" /> will be used to match a property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,System.StringComparison,Newtonsoft.Json.Linq.JToken@)">
      <summary>
            Tries to get the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison" /> will be used to match a property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
      <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
      <returns>true if a value was successfully retrieved; otherwise, false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Add(System.String,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Adds the specified property name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Remove(System.String)">
      <summary>
            Removes the property with the specified name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>true if item was successfully removed; otherwise, false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,Newtonsoft.Json.Linq.JToken@)">
      <summary>
            Tries the get value.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
      <returns>true if a value was successfully retrieved; otherwise, false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanged(System.String)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanged" /> event with the provided arguments.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanging(System.String)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanging" /> event with the provided arguments.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.String)">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            </summary>
      <value>
      </value>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanging">
      <summary>
            Occurs when a property value is changing.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JArray">
      <summary>
            Represents a JSON array.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(Newtonsoft.Json.Linq.JArray)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class from another <see cref="T:Newtonsoft.Json.Linq.JArray" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JArray" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class with the specified content.
            </summary>
      <param name="content">The contents of the array.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class with the specified content.
            </summary>
      <param name="content">The contents of the array.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> populated from the string that contains JSON.</returns>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.IndexOf(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Insert(System.Int32,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.RemoveAt(System.Int32)">
      <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Add(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Clear">
      <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Contains(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.CopyTo(Newtonsoft.Json.Linq.JToken[],System.Int32)">
      <summary>
            Copies to.
            </summary>
      <param name="array">The array.</param>
      <param name="arrayIndex">Index of the array.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Remove(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> at the specified index.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.#ctor(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenReader" /> class.
            </summary>
      <param name="token">The token to read from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor(Newtonsoft.Json.Linq.JContainer)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> class writing to the given <see cref="T:Newtonsoft.Json.Linq.JContainer" />.
            </summary>
      <param name="container">The container being written to.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the end.
            </summary>
      <param name="token">The token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Object)">
      <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JTokenWriter.Token">
      <summary>
            Gets the token being writen.
            </summary>
      <value>The token being writen.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JProperty">
      <summary>
            Represents a JSON property.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(Newtonsoft.Json.Linq.JProperty)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class from another <see cref="T:Newtonsoft.Json.Linq.JProperty" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class.
            </summary>
      <param name="name">The property name.</param>
      <param name="content">The property content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class.
            </summary>
      <param name="name">The property name.</param>
      <param name="content">The property content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JProperty" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JProperty" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Name">
      <summary>
            Gets the property name.
            </summary>
      <value>The property name.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Value">
      <summary>
            Gets or sets the property value.
            </summary>
      <value>The property value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenType">
      <summary>
            Specifies the type of token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.None">
      <summary>
            No token type has been set.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Object">
      <summary>
            A JSON object.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Array">
      <summary>
            A JSON array.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Constructor">
      <summary>
            A JSON constructor.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Property">
      <summary>
            A JSON object property.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Comment">
      <summary>
            A comment.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Integer">
      <summary>
            An integer value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Float">
      <summary>
            A float value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.String">
      <summary>
            A string value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Boolean">
      <summary>
            A boolean value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Null">
      <summary>
            A null value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Undefined">
      <summary>
            An undefined value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Date">
      <summary>
            A date value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Raw">
      <summary>
            A raw JSON value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Bytes">
      <summary>
            A collection of bytes value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Guid">
      <summary>
            A Guid value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Uri">
      <summary>
            A Uri value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.TimeSpan">
      <summary>
            A TimeSpan value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.Extensions">
      <summary>
            Contains the JSON schema extension methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
      <summary>
            Determines whether the <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,System.Collections.Generic.IList{System.String}@)">
      <summary>
            Determines whether the <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
      <param name="errorMessages">When this method returns, contains any error messages generated while validating. </param>
      <returns>
        <c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
      <summary>
            Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Schema.ValidationEventHandler)">
      <summary>
            Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
      <param name="validationEventHandler">The validation event handler.</param>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaException">
      <summary>
            Returns detailed information about the schema exception.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LineNumber">
      <summary>
            Gets the line number indicating where the error occurred.
            </summary>
      <value>The line number indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LinePosition">
      <summary>
            Gets the line position indicating where the error occurred.
            </summary>
      <value>The line position indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.Path">
      <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
      <value>The path to the JSON where the error occurred.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaResolver">
      <summary>
            Resolves <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from an id.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(System.String)">
      <summary>
            Gets a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> for the specified reference.
            </summary>
      <param name="reference">The id.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> for the specified reference.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaResolver.LoadedSchemas">
      <summary>
            Gets or sets the loaded schemas.
            </summary>
      <value>The loaded schemas.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling">
      <summary>
            Specifies undefined schema Id handling options for the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaGenerator" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.None">
      <summary>
            Do not infer a schema Id.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseTypeName">
      <summary>
            Use the .NET type name as the schema Id.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseAssemblyQualifiedName">
      <summary>
            Use the assembly qualified .NET type name as the schema Id.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.ValidationEventArgs">
      <summary>
            Returns detailed information related to the <see cref="T:Newtonsoft.Json.Schema.ValidationEventHandler" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Exception">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> associated with the validation error.
            </summary>
      <value>The JsonSchemaException associated with the validation error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Path">
      <summary>
            Gets the path of the JSON location where the validation error occurred.
            </summary>
      <value>The path of the JSON location where the validation error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Message">
      <summary>
            Gets the text description corresponding to the validation error.
            </summary>
      <value>The text description.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.ValidationEventHandler">
      <summary>
            Represents the callback method that will handle JSON schema validation events and the <see cref="T:Newtonsoft.Json.Schema.ValidationEventArgs" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IContractResolver">
      <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer" /> to resolves a <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for a given <see cref="T:System.Type" />.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverObject" title="IContractResolver Class" />
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverExample" title="IContractResolver Example" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
      <summary>
            Resolves the contract for a given type.
            </summary>
      <param name="type">The type to resolve a contract for.</param>
      <returns>The contract for a given type.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DefaultContractResolver">
      <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer" /> to resolves a <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for a given <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> class.
            </summary>
      <param name="shareCache">
            If set to <c>true</c> the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> will use a cached shared with other resolvers of the same type.
            Sharing the cache will significantly performance because expensive reflection will only happen once but could cause unexpected
            behavior if different instances of the resolver are suppose to produce different results. When set to false it is highly
            recommended to reuse <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> instances with the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
      <summary>
            Resolves the contract for a given type.
            </summary>
      <param name="type">The type to resolve a contract for.</param>
      <returns>The contract for a given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
      <summary>
            Gets the serializable members for the type.
            </summary>
      <param name="objectType">The type to get serializable members for.</param>
      <returns>The serializable members for the type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,Newtonsoft.Json.Serialization.JsonPropertyCollection)">
      <summary>
            Creates the constructor parameters.
            </summary>
      <param name="constructor">The constructor to create properties for.</param>
      <param name="memberProperties">The type's member properties.</param>
      <returns>Properties for the given <see cref="T:System.Reflection.ConstructorInfo" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.
            </summary>
      <param name="matchingMemberProperty">The matching member property.</param>
      <param name="parameterInfo">The constructor parameter.</param>
      <returns>A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
      <summary>
            Resolves the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for the contract.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>The contract's default <see cref="T:Newtonsoft.Json.JsonConverter" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDynamicContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
      <summary>
            Determines which contract type is created for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
      <summary>
            Creates properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.
            </summary>
      <param name="type">The type to create properties for.</param>
            /// <param name="memberSerialization">The member serialization mode for the type.</param><returns>Properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.</returns></member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
      <summary>
            Creates the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> used by the serializer to get and set values from a member.
            </summary>
      <param name="member">The member.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> used by the serializer to get and set values from a member.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
      <param name="memberSerialization">The member's parent <see cref="T:Newtonsoft.Json.MemberSerialization" />.</param>
      <param name="member">The member to create a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for.</param>
      <returns>A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
      <summary>
            Resolves the name of the property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>Name of the property.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(System.String)">
      <summary>
            Gets the resolved name of the property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>Name of the property.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
      <summary>
            Gets a value indicating whether members are being get and set using dynamic code generation.
            This value is determined by the runtime permissions available.
            </summary>
      <value>
        <c>true</c> if using dynamic code generation; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
      <summary>
            Gets or sets the default members search flags.
            </summary>
      <value>The default members search flags.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
      <summary>
            Gets or sets a value indicating whether compiler generated members should be serialized.
            </summary>
      <value>
        <c>true</c> if serialized compiler generated members; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableInterface">
      <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface when serializing and deserializing types.
            </summary>
      <value>
        <c>true</c> if the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableAttribute">
      <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.SerializableAttribute" /> attribute when serializing and deserializing types.
            </summary>
      <value>
        <c>true</c> if the <see cref="T:System.SerializableAttribute" /> attribute will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver">
      <summary>
            Resolves member mappings for a type, camel casing property names.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.ResolvePropertyName(System.String)">
      <summary>
            Resolves the name of the property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>The property name camel cased.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DefaultSerializationBinder">
      <summary>
            The default serialization binder used when resolving and loading classes from type names.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
      <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
      <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object.</param>
      <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object.</param>
      <returns>
            The type of the object the formatter creates a new instance of.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
      <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
      <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
      <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object. </param>
      <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object. </param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ErrorContext">
      <summary>
            Provides information surrounding an error.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Error">
      <summary>
            Gets the error.
            </summary>
      <value>The error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.OriginalObject">
      <summary>
            Gets the original object that caused the error.
            </summary>
      <value>The original object that caused the error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Member">
      <summary>
            Gets the member that caused the error.
            </summary>
      <value>The member that caused the error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Path">
      <summary>
            Gets the path of the JSON location where the error occurred.
            </summary>
      <value>The path of the JSON location where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Handled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.ErrorContext" /> is handled.
            </summary>
      <value>
        <c>true</c> if handled; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonArrayContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonArrayContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.CollectionItemType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the collection items.
            </summary>
      <value>The <see cref="T:System.Type" /> of the collection items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.IsMultidimensionalArray">
      <summary>
            Gets a value indicating whether the collection type is a multidimensional array.
            </summary>
      <value>
        <c>true</c> if the collection type is a multidimensional array; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.SerializationCallback">
      <summary>
            Handles <see cref="T:Newtonsoft.Json.JsonSerializer" /> serialization callback events.
            </summary>
      <param name="o">The object that raised the callback event.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.SerializationErrorCallback">
      <summary>
            Handles <see cref="T:Newtonsoft.Json.JsonSerializer" /> serialization error callback events.
            </summary>
      <param name="o">The object that raised the callback event.</param>
      <param name="context">The streaming context.</param>
      <param name="errorContext">The error context.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ExtensionDataSetter">
      <summary>
            Sets extension data for an object during deserialization.
            </summary>
      <param name="o">The object to set extension data on.</param>
      <param name="key">The extension data key.</param>
      <param name="value">The extension data value.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ExtensionDataGetter">
      <summary>
            Gets extension data for an object during serialization.
            </summary>
      <param name="o">The object to set extension data on.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonDictionaryContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.PropertyNameResolver">
      <summary>
            Gets or sets the property name resolver.
            </summary>
      <value>The property name resolver.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the dictionary keys.
            </summary>
      <value>The <see cref="T:System.Type" /> of the dictionary keys.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryValueType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the dictionary values.
            </summary>
      <value>The <see cref="T:System.Type" /> of the dictionary values.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonProperty">
      <summary>
            Maps a JSON property to a .NET member or constructor parameter.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonProperty.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyName">
      <summary>
            Gets or sets the name of the property.
            </summary>
      <value>The name of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DeclaringType">
      <summary>
            Gets or sets the type that declared this property.
            </summary>
      <value>The type that declared this property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Order">
      <summary>
            Gets or sets the order of serialization and deserialization of a member.
            </summary>
      <value>The numeric order of serialization or deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.UnderlyingName">
      <summary>
            Gets or sets the name of the underlying member or parameter.
            </summary>
      <value>The name of the underlying member or parameter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ValueProvider">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> during serialization.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> during serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyType">
      <summary>
            Gets or sets the type of the property.
            </summary>
      <value>The type of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Converter">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.JsonConverter" /> for the property.
            If set this converter takes presidence over the contract converter for the property type.
            </summary>
      <value>The converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.MemberConverter">
      <summary>
            Gets or sets the member converter.
            </summary>
      <value>The member converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Ignored">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is ignored.
            </summary>
      <value>
        <c>true</c> if ignored; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Readable">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is readable.
            </summary>
      <value>
        <c>true</c> if readable; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Writable">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is writable.
            </summary>
      <value>
        <c>true</c> if writable; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.HasMemberAttribute">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> has a member attribute.
            </summary>
      <value>
        <c>true</c> if has a member attribute; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValue">
      <summary>
            Gets the default value.
            </summary>
      <value>The default value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Required">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is required.
            </summary>
      <value>A value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is required.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.IsReference">
      <summary>
            Gets or sets a value indicating whether this property preserves object references.
            </summary>
      <value>
        <c>true</c> if this instance is reference; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.NullValueHandling">
      <summary>
            Gets or sets the property null value handling.
            </summary>
      <value>The null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValueHandling">
      <summary>
            Gets or sets the property default value handling.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ReferenceLoopHandling">
      <summary>
            Gets or sets the property reference loop handling.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ObjectCreationHandling">
      <summary>
            Gets or sets the property object creation handling.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.TypeNameHandling">
      <summary>
            Gets or sets or sets the type name handling.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ShouldSerialize">
      <summary>
            Gets or sets a predicate used to determine whether the property should be serialize.
            </summary>
      <value>A predicate used to determine whether the property should be serialize.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.GetIsSpecified">
      <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
      <value>A predicate used to determine whether the property should be serialized.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.SetIsSpecified">
      <summary>
            Gets or sets an action used to set whether the property has been deserialized.
            </summary>
      <value>An action used to set whether the property has been deserialized.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemConverter">
      <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
      <value>The collection's items converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemIsReference">
      <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
      <value>Whether this property's collection items are serialized as a reference.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemTypeNameHandling">
      <summary>
            Gets or sets the the type name handling used when serializing the property's collection items.
            </summary>
      <value>The collection's items type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemReferenceLoopHandling">
      <summary>
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </summary>
      <value>The collection's items reference loop handling.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonPropertyCollection">
      <summary>
            A collection of <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> objects.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPropertyCollection" /> class.
            </summary>
      <param name="type">The type.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetKeyForItem(Newtonsoft.Json.Serialization.JsonProperty)">
      <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
      <param name="item">The element from which to extract the key.</param>
      <returns>The key for the specified element.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.AddProperty(Newtonsoft.Json.Serialization.JsonProperty)">
      <summary>
            Adds a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> object.
            </summary>
      <param name="property">The property to add to the collection.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
      <summary>
            Gets the closest matching <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> object.
            First attempts to get an exact case match of propertyName and then
            a case insensitive match.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>A matching property if found.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
      <summary>
            Gets a property by property name.
            </summary>
      <param name="propertyName">The name of the property to get.</param>
      <param name="comparisonType">Type property name string comparison.</param>
      <returns>A matching property if found.</returns>
    </member>
    <member name="T:Newtonsoft.Json.MissingMemberHandling">
      <summary>
            Specifies missing member handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MissingMemberHandling.Ignore">
      <summary>
            Ignore a missing member and do not attempt to deserialize it.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MissingMemberHandling.Error">
      <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException" /> when a missing member is encountered during deserialization.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.NullValueHandling">
      <summary>
            Specifies null value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingObject" title="NullValueHandling Class" />
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingExample" title="NullValueHandling Ignore Example" />
      </example>
    </member>
    <member name="F:Newtonsoft.Json.NullValueHandling.Include">
      <summary>
            Include null values when serializing and deserializing objects.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.NullValueHandling.Ignore">
      <summary>
            Ignore null values when serializing and deserializing objects.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.ReferenceLoopHandling">
      <summary>
            Specifies reference loop handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Error">
      <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException" /> when a loop is encountered.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Ignore">
      <summary>
            Ignore loop references and do not serialize.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Serialize">
      <summary>
            Serialize loop references.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchema">
      <summary>
            An in-memory representation of a JSON Schema.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader)">
      <summary>
            Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the JSON Schema to read.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> object representing the JSON Schema.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the JSON Schema to read.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> to use when resolving schema references.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> object representing the JSON Schema.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from a string that contains schema JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Parses the specified json.
            </summary>
      <param name="json">The json.</param>
      <param name="resolver">The resolver.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter)">
      <summary>
            Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter" /> using the specified <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="resolver">The resolver used.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Id">
      <summary>
            Gets or sets the id.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Title">
      <summary>
            Gets or sets the title.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Required">
      <summary>
            Gets or sets whether the object is required.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ReadOnly">
      <summary>
            Gets or sets whether the object is read only.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Hidden">
      <summary>
            Gets or sets whether the object is visible to users.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Transient">
      <summary>
            Gets or sets whether the object is transient.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Description">
      <summary>
            Gets or sets the description of the object.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Type">
      <summary>
            Gets or sets the types of values allowed by the object.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Pattern">
      <summary>
            Gets or sets the pattern.
            </summary>
      <value>The pattern.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumLength">
      <summary>
            Gets or sets the minimum length.
            </summary>
      <value>The minimum length.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumLength">
      <summary>
            Gets or sets the maximum length.
            </summary>
      <value>The maximum length.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.DivisibleBy">
      <summary>
            Gets or sets a number that the value should be divisble by.
            </summary>
      <value>A number that the value should be divisble by.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Minimum">
      <summary>
            Gets or sets the minimum.
            </summary>
      <value>The minimum.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Maximum">
      <summary>
            Gets or sets the maximum.
            </summary>
      <value>The maximum.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMinimum">
      <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "minimum" attribute.
            </summary>
      <value>A flag indicating whether the value can not equal the number defined by the "minimum" attribute.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMaximum">
      <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "maximum" attribute.
            </summary>
      <value>A flag indicating whether the value can not equal the number defined by the "maximum" attribute.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumItems">
      <summary>
            Gets or sets the minimum number of items.
            </summary>
      <value>The minimum number of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumItems">
      <summary>
            Gets or sets the maximum number of items.
            </summary>
      <value>The maximum number of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Items">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of items.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.PositionalItemsValidation">
      <summary>
            Gets or sets a value indicating whether items in an array are validated using the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> instance at their array position from <see cref="P:Newtonsoft.Json.Schema.JsonSchema.Items" />.
            </summary>
      <value>
        <c>true</c> if items are validated using their array position; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalItems">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional items.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalItems">
      <summary>
            Gets or sets a value indicating whether additional items are allowed.
            </summary>
      <value>
        <c>true</c> if additional items are allowed; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.UniqueItems">
      <summary>
            Gets or sets whether the array items must be unique.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Properties">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of properties.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalProperties">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional properties.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.PatternProperties">
      <summary>
            Gets or sets the pattern properties.
            </summary>
      <value>The pattern properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalProperties">
      <summary>
            Gets or sets a value indicating whether additional properties are allowed.
            </summary>
      <value>
        <c>true</c> if additional properties are allowed; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Requires">
      <summary>
            Gets or sets the required property if this property is present.
            </summary>
      <value>The required property if this property is present.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Enum">
      <summary>
            Gets or sets the a collection of valid enum values allowed.
            </summary>
      <value>A collection of valid enum values allowed.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Disallow">
      <summary>
            Gets or sets disallowed types.
            </summary>
      <value>The disallow types.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Default">
      <summary>
            Gets or sets the default value.
            </summary>
      <value>The default value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Extends">
      <summary>
            Gets or sets the collection of <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> that this schema extends.
            </summary>
      <value>The collection of <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> that this schema extends.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Format">
      <summary>
            Gets or sets the format.
            </summary>
      <value>The format.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaGenerator">
      <summary>
            Generates a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from a specified <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> used to resolve schema references.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,System.Boolean)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> will be nullable.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver,System.Boolean)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> used to resolve schema references.</param>
      <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> will be nullable.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.UndefinedSchemaIdHandling">
      <summary>
            Gets or sets how undefined schemas are handled by the serializer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.ContractResolver">
      <summary>
            Gets or sets the contract resolver.
            </summary>
      <value>The contract resolver.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaType">
      <summary>
            The value types allowed by the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.None">
      <summary>
            No type specified.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.String">
      <summary>
            String type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Float">
      <summary>
            Float type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Integer">
      <summary>
            Integer type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Boolean">
      <summary>
            Boolean type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Object">
      <summary>
            Object type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Array">
      <summary>
            Array type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Null">
      <summary>
            Null type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Any">
      <summary>
            Any type.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonObjectContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonObjectContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.MemberSerialization">
      <summary>
            Gets or sets the object member serialization.
            </summary>
      <value>The member object serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ItemRequired">
      <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
      <value>
            	A value indicating whether the object's properties are required.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.Properties">
      <summary>
            Gets the object's properties.
            </summary>
      <value>The object's properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ConstructorParameters">
      <summary>
            Gets the constructor parameters required for any non-default constructor
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideConstructor">
      <summary>
            Gets or sets the override constructor used to create the object.
            This is set when a constructor is marked up using the
            JsonConstructor attribute.
            </summary>
      <value>The override constructor.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ParametrizedConstructor">
      <summary>
            Gets or sets the parametrized constructor used to create the object.
            </summary>
      <value>The parametrized constructor.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataSetter">
      <summary>
            Gets or sets the extension data setter.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataGetter">
      <summary>
            Gets or sets the extension data getter.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonStringContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonStringContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ReflectionValueProvider">
      <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using reflection.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ReflectionValueProvider" /> class.
            </summary>
      <param name="memberInfo">The member info.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.OnErrorAttribute">
      <summary>
            When applied to a method, specifies that the method is called when an error occurs serializing an object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodWithResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback,Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
      <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic that returns a result
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodReturnLast(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
      <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodNoResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
      <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.GetRestrictions">
      <summary>
            Returns a Restrictions object which includes our current restrictions merged
            with a restriction limiting our type
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ObjectConstructor`1">
      <summary>
            Represents a method that constructs an object.
            </summary>
      <typeparam name="T">The object type to create.</typeparam>
    </member>
    <member name="T:Newtonsoft.Json.TypeNameHandling">
      <summary>
            Specifies type name handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.None">
      <summary>
            Do not include the .NET type name when serializing types.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Objects">
      <summary>
            Include the .NET type name when serializing into a JSON object structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Arrays">
      <summary>
            Include the .NET type name when serializing into a JSON array structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.All">
      <summary>
            Always include the .NET type name when serializing.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Auto">
      <summary>
            Include the .NET type name when the type of the object being serialized is not the same as its declared type.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.Convert(System.Object,System.Globalization.CultureInfo,System.Type)">
      <summary>
            Converts the value to the specified type.
            </summary>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="targetType">The type to convert the value to.</param>
      <returns>The converted type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.TryConvert(System.Object,System.Globalization.CultureInfo,System.Type,System.Object@)">
      <summary>
            Converts the value to the specified type.
            </summary>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="targetType">The type to convert the value to.</param>
      <param name="convertedValue">The converted value if the conversion was successful or the default value of <c>T</c> if it failed.</param>
      <returns>
        <c>true</c> if <c>initialValue</c> was converted successfully; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
      <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="targetType">The type to convert or cast the value to.</param>
      <returns>
            The converted type. If conversion was unsuccessful, the initial value
            is returned if assignable to the target type.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1">
      <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1(System.Type)">
      <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
      <param name="enumType">The enum type to get names and values for.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Newtonsoft.Json.JsonToken">
      <summary>
            Specifies the type of Json token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.None">
      <summary>
            This is returned by the <see cref="T:Newtonsoft.Json.JsonReader" /> if a <see cref="M:Newtonsoft.Json.JsonReader.Read" /> method has not been called. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartObject">
      <summary>
            An object start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartArray">
      <summary>
            An array start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartConstructor">
      <summary>
            A constructor start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.PropertyName">
      <summary>
            An object property name.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Comment">
      <summary>
            A comment.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Raw">
      <summary>
            Raw JSON.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Integer">
      <summary>
            An integer.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Float">
      <summary>
            A float.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.String">
      <summary>
            A string.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Boolean">
      <summary>
            A boolean.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Null">
      <summary>
            A null token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Undefined">
      <summary>
            An undefined token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndObject">
      <summary>
            An object end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndArray">
      <summary>
            An array end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndConstructor">
      <summary>
            A constructor end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Date">
      <summary>
            A Date.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Bytes">
      <summary>
            Byte data.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Utilities.StringBuffer">
      <summary>
            Builds a string. Unlike StringBuilder this class lets you reuse it's internal buffer.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
      <summary>
            Determines whether the collection is null or empty.
            </summary>
      <param name="collection">The collection.</param>
      <returns>
        <c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Adds the elements of the specified collection to the specified generic IList.
            </summary>
      <param name="initial">The list to add to.</param>
      <param name="collection">The collection of elements to add.</param>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Returns the index of the first occurrence in a sequence by using a specified IEqualityComparer.
            </summary>
      <typeparam name="TSource">The type of the elements of source.</typeparam>
      <param name="list">A sequence in which to locate a value.</param>
      <param name="value">The object to locate in the sequence</param>
      <param name="comparer">An equality comparer to compare values.</param>
      <returns>The zero-based index of the first occurrence of value within the entire sequence, if found; otherwise, –1.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
      <summary>
            Gets the type of the typed collection's items.
            </summary>
      <param name="type">The type.</param>
      <returns>The type of the typed collection's items.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
      <summary>
            Gets the member's underlying type.
            </summary>
      <param name="member">The member.</param>
      <returns>The underlying type of the member.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
      <summary>
            Determines whether the member is an indexed property.
            </summary>
      <param name="member">The member.</param>
      <returns>
        <c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
      <summary>
            Determines whether the property is an indexed property.
            </summary>
      <param name="property">The property.</param>
      <returns>
        <c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
      <summary>
            Gets the member's value on the object.
            </summary>
      <param name="member">The member.</param>
      <param name="target">The target object.</param>
      <returns>The member's value on the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
      <summary>
            Sets the member's value on the target object.
            </summary>
      <param name="member">The member.</param>
      <param name="target">The target.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
      <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
      <param name="member">The MemberInfo to determine whether can be read.</param>
            /// <param name="nonPublic">if set to <c>true</c> then allow the member to be gotten non-publicly.</param><returns><c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns></member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
      <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
      <param name="member">The MemberInfo to determine whether can be set.</param>
      <param name="nonPublic">if set to <c>true</c> then allow the member to be set non-publicly.</param>
      <param name="canSetReadOnly">if set to <c>true</c> then allow the member to be set if read-only.</param>
      <returns>
        <c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
      <summary>
            Determines whether the string is all white space. Empty string will return false.
            </summary>
      <param name="s">The string to test whether it is all white space.</param>
      <returns>
        <c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.NullEmptyString(System.String)">
      <summary>
            Nulls an empty string.
            </summary>
      <param name="s">The string.</param>
      <returns>Null if the string was null, otherwise the string unchanged.</returns>
    </member>
    <member name="T:Newtonsoft.Json.WriteState">
      <summary>
            Specifies the state of the <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Error">
      <summary>
            An exception has been thrown, which has left the <see cref="T:Newtonsoft.Json.JsonWriter" /> in an invalid state.
            You may call the <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> method to put the <see cref="T:Newtonsoft.Json.JsonWriter" /> in the <c>Closed</c> state.
            Any other <see cref="T:Newtonsoft.Json.JsonWriter" /> method calls results in an <see cref="T:System.InvalidOperationException" /> being thrown. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Closed">
      <summary>
            The <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> method has been called. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Object">
      <summary>
            An object is being written. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Array">
      <summary>
            A array is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Constructor">
      <summary>
            A constructor is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Property">
      <summary>
            A property is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Start">
      <summary>
            A write method has not been called.
            </summary>
    </member>
    <member name="T:ProtoBuf.BclHelpers">
      <summary>
            Provides support for common .NET types that do not have a direct representation
            in protobuf, using the definitions from bcl.proto
            </summary>
    </member>
    <member name="T:ProtoBuf.BclHelpers.NetObjectOptions">
      <summary>
            Optional behaviours that introduce .NET-specific functionality
            </summary>
    </member>
    <member name="M:ProtoBuf.BclHelpers.GetUninitializedObject(System.Type)">
      <summary>
            Creates a new instance of the specified type, bypassing the constructor.
            </summary>
      <param name="type">The type to create</param>
      <returns>The new instance</returns>
      <exception cref="T:System.NotSupportedException">If the platform does not support constructor-skipping</exception>
    </member>
    <member name="M:ProtoBuf.BclHelpers.WriteTimeSpan(System.TimeSpan,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a TimeSpan to a protobuf stream
            </summary>
    </member>
    <member name="M:ProtoBuf.BclHelpers.ReadTimeSpan(ProtoBuf.ProtoReader)">
      <summary>
            Parses a TimeSpan from a protobuf stream
            </summary>
    </member>
    <member name="M:ProtoBuf.BclHelpers.ReadDateTime(ProtoBuf.ProtoReader)">
      <summary>
            Parses a DateTime from a protobuf stream
            </summary>
    </member>
    <member name="M:ProtoBuf.BclHelpers.WriteDateTime(System.DateTime,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a DateTime to a protobuf stream
            </summary>
    </member>
    <member name="M:ProtoBuf.BclHelpers.ReadDecimal(ProtoBuf.ProtoReader)">
      <summary>
            Parses a decimal from a protobuf stream
            </summary>
    </member>
    <member name="M:ProtoBuf.BclHelpers.WriteDecimal(System.Decimal,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a decimal to a protobuf stream
            </summary>
    </member>
    <member name="M:ProtoBuf.BclHelpers.WriteGuid(System.Guid,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a Guid to a protobuf stream
            </summary>
    </member>
    <member name="M:ProtoBuf.BclHelpers.ReadGuid(ProtoBuf.ProtoReader)">
      <summary>
            Parses a Guid from a protobuf stream
            </summary>
    </member>
    <member name="M:ProtoBuf.BclHelpers.ReadNetObject(System.Object,ProtoBuf.ProtoReader,System.Int32,System.Type,ProtoBuf.BclHelpers.NetObjectOptions)">
      <summary>
            Reads an *implementation specific* bundled .NET object, including (as options) type-metadata, identity/re-use, etc.
            </summary>
    </member>
    <member name="M:ProtoBuf.BclHelpers.WriteNetObject(System.Object,ProtoBuf.ProtoWriter,System.Int32,ProtoBuf.BclHelpers.NetObjectOptions)">
      <summary>
            Writes an *implementation specific* bundled .NET object, including (as options) type-metadata, identity/re-use, etc.
            </summary>
    </member>
    <member name="T:ProtoBuf.IExtension">
      <summary>
            Provides addition capability for supporting unexpected fields during
            protocol-buffer serialization/deserialization. This allows for loss-less
            round-trip/merge, even when the data is not fully understood.
            </summary>
    </member>
    <member name="M:ProtoBuf.IExtension.BeginAppend">
      <summary>
            Requests a stream into which any unexpected fields can be persisted.
            </summary>
      <returns>A new stream suitable for storing data.</returns>
    </member>
    <member name="M:ProtoBuf.IExtension.EndAppend(System.IO.Stream,System.Boolean)">
      <summary>
            Indicates that all unexpected fields have now been stored. The
            implementing class is responsible for closing the stream. If
            "commit" is not true the data may be discarded.
            </summary>
      <param name="stream">The stream originally obtained by BeginAppend.</param>
      <param name="commit">True if the append operation completed successfully.</param>
    </member>
    <member name="M:ProtoBuf.IExtension.BeginQuery">
      <summary>
            Requests a stream of the unexpected fields previously stored.
            </summary>
      <returns>A prepared stream of the unexpected fields.</returns>
    </member>
    <member name="M:ProtoBuf.IExtension.EndQuery(System.IO.Stream)">
      <summary>
            Indicates that all unexpected fields have now been read. The
            implementing class is responsible for closing the stream.
            </summary>
      <param name="stream">The stream originally obtained by BeginQuery.</param>
    </member>
    <member name="M:ProtoBuf.IExtension.GetLength">
      <summary>
            Requests the length of the raw binary stream; this is used
            when serializing sub-entities to indicate the expected size.
            </summary>
      <returns>The length of the binary stream representing unexpected data.</returns>
    </member>
    <member name="T:ProtoBuf.BufferExtension">
      <summary>
            Provides a simple buffer-based implementation of an <see cref="T:ProtoBuf.IExtension">extension</see> object.
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoBeforeSerializationAttribute">
      <summary>Specifies a method on the root-contract in an hierarchy to be invoked before serialization.</summary>
    </member>
    <member name="T:ProtoBuf.ProtoAfterSerializationAttribute">
      <summary>Specifies a method on the root-contract in an hierarchy to be invoked after serialization.</summary>
    </member>
    <member name="T:ProtoBuf.ProtoBeforeDeserializationAttribute">
      <summary>Specifies a method on the root-contract in an hierarchy to be invoked before deserialization.</summary>
    </member>
    <member name="T:ProtoBuf.ProtoAfterDeserializationAttribute">
      <summary>Specifies a method on the root-contract in an hierarchy to be invoked after deserialization.</summary>
    </member>
    <member name="M:ProtoBuf.Compiler.CompilerContext.UsingBlock.#ctor(ProtoBuf.Compiler.CompilerContext,ProtoBuf.Compiler.Local)">
      <summary>
            Creates a new "using" block (equivalent) around a variable;
            the variable must exist, and note that (unlike in C#) it is
            the variables *final* value that gets disposed. If you need
            *original* disposal, copy your variable first.
            
            It is the callers responsibility to ensure that the variable's
            scope fully-encapsulates the "using"; if not, the variable
            may be re-used (and thus re-assigned) unexpectedly.
            </summary>
    </member>
    <member name="M:ProtoBuf.Compiler.CompilerContext.LoadNullRef">
      <summary>
            Pushes a null reference onto the stack. Note that this should only
            be used to return a null (or set a variable to null); for null-tests
            use BranchIfTrue / BranchIfFalse.
            </summary>
    </member>
    <member name="T:ProtoBuf.DataFormat">
      <summary>
            Sub-format to use when serializing/deserializing data
            </summary>
    </member>
    <member name="F:ProtoBuf.DataFormat.Default">
      <summary>
            Uses the default encoding for the data-type.
            </summary>
    </member>
    <member name="F:ProtoBuf.DataFormat.ZigZag">
      <summary>
            When applied to signed integer-based data (including Decimal), this
            indicates that zigzag variant encoding will be used. This means that values
            with small magnitude (regardless of sign) take a small amount
            of space to encode.
            </summary>
    </member>
    <member name="F:ProtoBuf.DataFormat.TwosComplement">
      <summary>
            When applied to signed integer-based data (including Decimal), this
            indicates that two's-complement variant encoding will be used.
            This means that any -ve number will take 10 bytes (even for 32-bit),
            so should only be used for compatibility.
            </summary>
    </member>
    <member name="F:ProtoBuf.DataFormat.FixedSize">
      <summary>
            When applied to signed integer-based data (including Decimal), this
            indicates that a fixed amount of space will be used.
            </summary>
    </member>
    <member name="F:ProtoBuf.DataFormat.Group">
      <summary>
            When applied to a sub-message, indicates that the value should be treated
            as group-delimited.
            </summary>
    </member>
    <member name="T:ProtoBuf.IExtensible">
      <summary>
            Indicates that the implementing type has support for protocol-buffer
            <see cref="T:ProtoBuf.IExtension">extensions</see>.
            </summary>
      <remarks>Can be implemented by deriving from Extensible.</remarks>
    </member>
    <member name="M:ProtoBuf.IExtensible.GetExtensionObject(System.Boolean)">
      <summary>
            Retrieves the <see cref="T:ProtoBuf.IExtension">extension</see> object for the current
            instance, optionally creating it if it does not already exist.
            </summary>
      <param name="createIfMissing">Should a new extension object be
            created if it does not already exist?</param>
      <returns>The extension object if it exists (or was created), or null
            if the extension object does not exist or is not available.</returns>
      <remarks>The <c>createIfMissing</c> argument is false during serialization,
            and true during deserialization upon encountering unexpected fields.</remarks>
    </member>
    <member name="T:ProtoBuf.Extensible">
      <summary>
            Simple base class for supporting unexpected fields allowing
            for loss-less round-tips/merge, even if the data is not understod.
            The additional fields are (by default) stored in-memory in a buffer.
            </summary>
      <remarks>As an example of an alternative implementation, you might
            choose to use the file system (temporary files) as the back-end, tracking
            only the paths [such an object would ideally be IDisposable and use
            a finalizer to ensure that the files are removed].</remarks>
      <seealso cref="T:ProtoBuf.IExtensible" />
    </member>
    <member name="M:ProtoBuf.Extensible.GetExtensionObject(System.Boolean)">
      <summary>
            Retrieves the <see cref="T:ProtoBuf.IExtension">extension</see> object for the current
            instance, optionally creating it if it does not already exist.
            </summary>
      <param name="createIfMissing">Should a new extension object be
            created if it does not already exist?</param>
      <returns>The extension object if it exists (or was created), or null
            if the extension object does not exist or is not available.</returns>
      <remarks>The <c>createIfMissing</c> argument is false during serialization,
            and true during deserialization upon encountering unexpected fields.</remarks>
    </member>
    <member name="M:ProtoBuf.Extensible.GetExtensionObject(ProtoBuf.IExtension@,System.Boolean)">
      <summary>
            Provides a simple, default implementation for <see cref="T:ProtoBuf.IExtension">extension</see> support,
            optionally creating it if it does not already exist. Designed to be called by
            classes implementing <see cref="T:ProtoBuf.IExtensible" />.
            </summary>
      <param name="createIfMissing">Should a new extension object be
            created if it does not already exist?</param>
      <param name="extensionObject">The extension field to check (and possibly update).</param>
      <returns>The extension object if it exists (or was created), or null
            if the extension object does not exist or is not available.</returns>
      <remarks>The <c>createIfMissing</c> argument is false during serialization,
            and true during deserialization upon encountering unexpected fields.</remarks>
    </member>
    <member name="M:ProtoBuf.Extensible.AppendValue``1(ProtoBuf.IExtensible,System.Int32,``0)">
      <summary>
            Appends the value as an additional (unexpected) data-field for the instance.
            Note that for non-repeated sub-objects, this equates to a merge operation;
            for repeated sub-objects this adds a new instance to the set; for simple
            values the new value supercedes the old value.
            </summary>
      <remarks>Note that appending a value does not remove the old value from
            the stream; avoid repeatedly appending values for the same field.</remarks>
      <typeparam name="TValue">The type of the value to append.</typeparam>
      <param name="instance">The extensible object to append the value to.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <param name="value">The value to append.</param>
    </member>
    <member name="M:ProtoBuf.Extensible.AppendValue``1(ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,``0)">
      <summary>
            Appends the value as an additional (unexpected) data-field for the instance.
            Note that for non-repeated sub-objects, this equates to a merge operation;
            for repeated sub-objects this adds a new instance to the set; for simple
            values the new value supercedes the old value.
            </summary>
      <remarks>Note that appending a value does not remove the old value from
            the stream; avoid repeatedly appending values for the same field.</remarks>
      <typeparam name="TValue">The data-type of the field.</typeparam>
      <param name="format">The data-format to use when encoding the value.</param>
      <param name="instance">The extensible object to append the value to.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <param name="value">The value to append.</param>
    </member>
    <member name="M:ProtoBuf.Extensible.GetValue``1(ProtoBuf.IExtensible,System.Int32)">
      <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            The value returned is the composed value after merging any duplicated content; if the
            value is "repeated" (a list), then use GetValues instead.
            </summary>
      <typeparam name="TValue">The data-type of the field.</typeparam>
      <param name="instance">The extensible object to obtain the value from.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <returns>The effective value of the field, or the default value if not found.</returns>
    </member>
    <member name="M:ProtoBuf.Extensible.GetValue``1(ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat)">
      <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            The value returned is the composed value after merging any duplicated content; if the
            value is "repeated" (a list), then use GetValues instead.
            </summary>
      <typeparam name="TValue">The data-type of the field.</typeparam>
      <param name="instance">The extensible object to obtain the value from.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <param name="format">The data-format to use when decoding the value.</param>
      <returns>The effective value of the field, or the default value if not found.</returns>
    </member>
    <member name="M:ProtoBuf.Extensible.TryGetValue``1(ProtoBuf.IExtensible,System.Int32,``0@)">
      <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            The value returned (in "value") is the composed value after merging any duplicated content;
            if the value is "repeated" (a list), then use GetValues instead.
            </summary>
      <typeparam name="TValue">The data-type of the field.</typeparam>
      <param name="value">The effective value of the field, or the default value if not found.</param>
      <param name="instance">The extensible object to obtain the value from.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <returns>True if data for the field was present, false otherwise.</returns>
    </member>
    <member name="M:ProtoBuf.Extensible.TryGetValue``1(ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,``0@)">
      <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            The value returned (in "value") is the composed value after merging any duplicated content;
            if the value is "repeated" (a list), then use GetValues instead.
            </summary>
      <typeparam name="TValue">The data-type of the field.</typeparam>
      <param name="value">The effective value of the field, or the default value if not found.</param>
      <param name="instance">The extensible object to obtain the value from.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <param name="format">The data-format to use when decoding the value.</param>
      <returns>True if data for the field was present, false otherwise.</returns>
    </member>
    <member name="M:ProtoBuf.Extensible.TryGetValue``1(ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,System.Boolean,``0@)">
      <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            The value returned (in "value") is the composed value after merging any duplicated content;
            if the value is "repeated" (a list), then use GetValues instead.
            </summary>
      <typeparam name="TValue">The data-type of the field.</typeparam>
      <param name="value">The effective value of the field, or the default value if not found.</param>
      <param name="instance">The extensible object to obtain the value from.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <param name="format">The data-format to use when decoding the value.</param>
      <param name="allowDefinedTag">Allow tags that are present as part of the definition; for example, to query unknown enum values.</param>
      <returns>True if data for the field was present, false otherwise.</returns>
    </member>
    <member name="M:ProtoBuf.Extensible.GetValues``1(ProtoBuf.IExtensible,System.Int32)">
      <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            Each occurrence of the field is yielded separately, making this usage suitable for "repeated"
            (list) fields.
            </summary>
      <remarks>The extended data is processed lazily as the enumerator is iterated.</remarks>
      <typeparam name="TValue">The data-type of the field.</typeparam>
      <param name="instance">The extensible object to obtain the value from.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <returns>An enumerator that yields each occurrence of the field.</returns>
    </member>
    <member name="M:ProtoBuf.Extensible.GetValues``1(ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat)">
      <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            Each occurrence of the field is yielded separately, making this usage suitable for "repeated"
            (list) fields.
            </summary>
      <remarks>The extended data is processed lazily as the enumerator is iterated.</remarks>
      <typeparam name="TValue">The data-type of the field.</typeparam>
      <param name="instance">The extensible object to obtain the value from.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <param name="format">The data-format to use when decoding the value.</param>
      <returns>An enumerator that yields each occurrence of the field.</returns>
    </member>
    <member name="M:ProtoBuf.Extensible.TryGetValue(ProtoBuf.Meta.TypeModel,System.Type,ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,System.Boolean,System.Object@)">
      <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            The value returned (in "value") is the composed value after merging any duplicated content;
            if the value is "repeated" (a list), then use GetValues instead.
            </summary>
      <param name="type">The data-type of the field.</param>
      <param name="model">The model to use for configuration.</param>
      <param name="value">The effective value of the field, or the default value if not found.</param>
      <param name="instance">The extensible object to obtain the value from.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <param name="format">The data-format to use when decoding the value.</param>
      <param name="allowDefinedTag">Allow tags that are present as part of the definition; for example, to query unknown enum values.</param>
      <returns>True if data for the field was present, false otherwise.</returns>
    </member>
    <member name="M:ProtoBuf.Extensible.GetValues(ProtoBuf.Meta.TypeModel,System.Type,ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat)">
      <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            Each occurrence of the field is yielded separately, making this usage suitable for "repeated"
            (list) fields.
            </summary>
      <remarks>The extended data is processed lazily as the enumerator is iterated.</remarks>
      <param name="model">The model to use for configuration.</param>
      <param name="type">The data-type of the field.</param>
      <param name="instance">The extensible object to obtain the value from.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <param name="format">The data-format to use when decoding the value.</param>
      <returns>An enumerator that yields each occurrence of the field.</returns>
    </member>
    <member name="M:ProtoBuf.Extensible.AppendValue(ProtoBuf.Meta.TypeModel,ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,System.Object)">
      <summary>
            Appends the value as an additional (unexpected) data-field for the instance.
            Note that for non-repeated sub-objects, this equates to a merge operation;
            for repeated sub-objects this adds a new instance to the set; for simple
            values the new value supercedes the old value.
            </summary>
      <remarks>Note that appending a value does not remove the old value from
            the stream; avoid repeatedly appending values for the same field.</remarks>
      <param name="model">The model to use for configuration.</param>
      <param name="format">The data-format to use when encoding the value.</param>
      <param name="instance">The extensible object to append the value to.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <param name="value">The value to append.</param>
    </member>
    <member name="T:ProtoBuf.ExtensibleUtil">
      <summary>
            This class acts as an internal wrapper allowing us to do a dynamic
            methodinfo invoke; an't put into Serializer as don't want on public
            API; can't put into Serializer&lt;T&gt; since we need to invoke
            accross classes, which isn't allowed in Silverlight)
            </summary>
    </member>
    <member name="M:ProtoBuf.ExtensibleUtil.GetExtendedValues``1(ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,System.Boolean,System.Boolean)">
      <summary>
            All this does is call GetExtendedValuesTyped with the correct type for "instance";
            this ensures that we don't get issues with subclasses declaring conflicting types -
            the caller must respect the fields defined for the type they pass in.
            </summary>
    </member>
    <member name="M:ProtoBuf.ExtensibleUtil.GetExtendedValues(ProtoBuf.Meta.TypeModel,System.Type,ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,System.Boolean,System.Boolean)">
      <summary>
            All this does is call GetExtendedValuesTyped with the correct type for "instance";
            this ensures that we don't get issues with subclasses declaring conflicting types -
            the caller must respect the fields defined for the type they pass in.
            </summary>
    </member>
    <member name="M:ProtoBuf.ExtensibleUtil.AppendExtendValueTyped``2(ProtoBuf.Meta.TypeModel,``0,System.Int32,ProtoBuf.DataFormat,``1)">
      <summary>
            Stores the given value into the instance's stream; the serializer
            is inferred from TValue and format.
            </summary>
      <remarks>Needs to be public to be callable thru reflection in Silverlight</remarks>
    </member>
    <member name="T:ProtoBuf.Helpers">
      <summary>
            Not all frameworks are created equal (fx1.1 vs fx2.0,
            micro-framework, compact-framework,
            silverlight, etc). This class simply wraps up a few things that would
            otherwise make the real code unnecessarily messy, providing fallback
            implementations if necessary.
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoTypeCode">
      <summary>
            Intended to be a direct map to regular TypeCode, but:
            - with missing types
            - existing on WinRT
            </summary>
    </member>
    <member name="T:ProtoBuf.ImplicitFields">
      <summary>
            Specifies the method used to infer field tags for members of the type
            under consideration. Tags are deduced using the invariant alphabetic
            sequence of the members' names; this makes implicit field tags very brittle,
            and susceptible to changes such as field names (normally an isolated
            change).
            </summary>
    </member>
    <member name="F:ProtoBuf.ImplicitFields.None">
      <summary>
            No members are serialized implicitly; all members require a suitable
            attribute such as [ProtoMember]. This is the recmomended mode for
            most scenarios.
            </summary>
    </member>
    <member name="F:ProtoBuf.ImplicitFields.AllPublic">
      <summary>
            Public properties and fields are eligible for implicit serialization;
            this treats the public API as a contract. Ordering beings from ImplicitFirstTag.
            </summary>
    </member>
    <member name="F:ProtoBuf.ImplicitFields.AllFields">
      <summary>
            Public and non-public fields are eligible for implicit serialization;
            this acts as a state/implementation serializer. Ordering beings from ImplicitFirstTag.
            </summary>
    </member>
    <member name="T:ProtoBuf.Meta.CallbackSet">
      <summary>
            Represents the set of serialization callbacks to be used when serializing/deserializing a type.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.CallbackSet.BeforeSerialize">
      <summary>Called before serializing an instance</summary>
    </member>
    <member name="P:ProtoBuf.Meta.CallbackSet.BeforeDeserialize">
      <summary>Called before deserializing an instance</summary>
    </member>
    <member name="P:ProtoBuf.Meta.CallbackSet.AfterSerialize">
      <summary>Called after serializing an instance</summary>
    </member>
    <member name="P:ProtoBuf.Meta.CallbackSet.AfterDeserialize">
      <summary>Called after deserializing an instance</summary>
    </member>
    <member name="P:ProtoBuf.Meta.CallbackSet.NonTrivial">
      <summary>
            True if any callback is set, else False
            </summary>
    </member>
    <member name="T:ProtoBuf.Meta.MetaType">
      <summary>
            Represents a type at runtime for use with protobuf, allowing the field mappings (etc) to be defined
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.ToString">
      <summary>
            Get the name of the type being represented
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.AddSubType(System.Int32,System.Type)">
      <summary>
            Adds a known sub-type to the inheritance model
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.AddSubType(System.Int32,System.Type,ProtoBuf.DataFormat)">
      <summary>
            Adds a known sub-type to the inheritance model
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.SetCallbacks(System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
      <summary>
            Assigns the callbacks to use during serialiation/deserialization.
            </summary>
      <param name="beforeSerialize">The method (or null) called before serialization begins.</param>
      <param name="afterSerialize">The method (or null) called when serialization is complete.</param>
      <param name="beforeDeserialize">The method (or null) called before deserialization begins (or when a new instance is created during deserialization).</param>
      <param name="afterDeserialize">The method (or null) called when deserialization is complete.</param>
      <returns>The set of callbacks.</returns>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.SetCallbacks(System.String,System.String,System.String,System.String)">
      <summary>
            Assigns the callbacks to use during serialiation/deserialization.
            </summary>
      <param name="beforeSerialize">The name of the method (or null) called before serialization begins.</param>
      <param name="afterSerialize">The name of the method (or null) called when serialization is complete.</param>
      <param name="beforeDeserialize">The name of the method (or null) called before deserialization begins (or when a new instance is created during deserialization).</param>
      <param name="afterDeserialize">The name of the method (or null) called when deserialization is complete.</param>
      <returns>The set of callbacks.</returns>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.SetFactory(System.Reflection.MethodInfo)">
      <summary>
            Designate a factory-method to use to create instances of this type
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.SetFactory(System.String)">
      <summary>
            Designate a factory-method to use to create instances of this type
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.ThrowIfFrozen">
      <summary>
            Throws an exception if the type has been made immutable
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.Add(System.Int32,System.String)">
      <summary>
            Adds a member (by name) to the MetaType
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.AddField(System.Int32,System.String)">
      <summary>
            Adds a member (by name) to the MetaType, returning the ValueMember rather than the fluent API.
            This is otherwise identical to Add.
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.Add(System.String)">
      <summary>
            Adds a member (by name) to the MetaType
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.SetSurrogate(System.Type)">
      <summary>
            Performs serialization of this type via a surrogate; all
            other serialization options are ignored and handled
            by the surrogate's configuration.
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.Add(System.String[])">
      <summary>
            Adds a set of members (by name) to the MetaType
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.Add(System.Int32,System.String,System.Object)">
      <summary>
            Adds a member (by name) to the MetaType
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.Add(System.Int32,System.String,System.Type,System.Type)">
      <summary>
            Adds a member (by name) to the MetaType, including an itemType and defaultType for representing lists
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.AddField(System.Int32,System.String,System.Type,System.Type)">
      <summary>
            Adds a member (by name) to the MetaType, including an itemType and defaultType for representing lists, returning the ValueMember rather than the fluent API.
            This is otherwise identical to Add.
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.GetFields">
      <summary>
            Returns the ValueMember instances associated with this type
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.GetSubtypes">
      <summary>
            Returns the SubType instances associated with this type
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.CompileInPlace">
      <summary>
            Compiles the serializer for this type; this is *not* a full
            standalone compile, but can significantly boost performance
            while allowing additional types to be added.
            </summary>
      <remarks>An in-place compile can access non-public types / members</remarks>
    </member>
    <member name="P:ProtoBuf.Meta.MetaType.BaseType">
      <summary>
            Gets the base-type for this type
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.MetaType.IncludeSerializerMethod">
      <summary>
            When used to compile a model, should public serialization/deserialzation methods
            be included for this type?
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.MetaType.AsReferenceDefault">
      <summary>
            Should this type be treated as a reference by default?
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.MetaType.HasCallbacks">
      <summary>
            Indicates whether the current type has defined callbacks 
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.MetaType.HasSubtypes">
      <summary>
            Indicates whether the current type has defined subtypes
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.MetaType.Callbacks">
      <summary>
            Returns the set of callbacks defined for this type
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.MetaType.Name">
      <summary>
            Gets or sets the name of this contract.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.MetaType.Type">
      <summary>
            The runtime type that the meta-type represents
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.MetaType.UseConstructor">
      <summary>
            Gets or sets whether the type should use a parameterless constructor (the default),
            or whether the type should skip the constructor completely. This option is not supported
            on compact-framework.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.MetaType.ConstructType">
      <summary>
            The concrete type to create when a new instance of this type is needed; this may be useful when dealing
            with dynamic proxies, or with interface-based APIs
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.MetaType.Item(System.Int32)">
      <summary>
            Returns the ValueMember that matchs a given field number, or null if not found
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.MetaType.Item(System.Reflection.MemberInfo)">
      <summary>
            Returns the ValueMember that matchs a given member (property/field), or null if not found
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.MetaType.EnumPassthru">
      <summary>
            Gets or sets a value indicating that an enum should be treated directly as an int/short/etc, rather
            than enforcing .proto enum rules. This is useful *in particul* for [Flags] enums.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.MetaType.IgnoreListHandling">
      <summary>
            Gets or sets a value indicating that this type should NOT be treated as a list, even if it has
            familiar list-like characteristics (enumerable, add, etc)
            </summary>
    </member>
    <member name="T:ProtoBuf.Meta.TypeModel">
      <summary>
            Provides protobuf serialization support for a number of types
            </summary>
    </member>
    <member name="T:ProtoBuf.Meta.TypeModel.CallbackType">
      <summary>
            Indicates the type of callback to be used
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.MapType(System.Type)">
      <summary>
            Resolve a System.Type to the compiler-specific type
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.MapType(System.Type,System.Boolean)">
      <summary>
            Resolve a System.Type to the compiler-specific type
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.TrySerializeAuxiliaryType(ProtoBuf.ProtoWriter,System.Type,ProtoBuf.DataFormat,System.Int32,System.Object,System.Boolean)">
      <summary>
            This is the more "complete" version of Serialize, which handles single instances of mapped types.
            The value is written as a complete field, including field-header and (for sub-objects) a
            length-prefix
            In addition to that, this provides support for:
             - basic values; individual int / string / Guid / etc
             - IEnumerable sequences of any type handled by TrySerializeAuxiliaryType
             
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.Serialize(System.IO.Stream,System.Object)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream.
            </summary>
      <param name="value">The existing instance to be serialized (cannot be null).</param>
      <param name="dest">The destination stream to write to.</param>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.Serialize(System.IO.Stream,System.Object,ProtoBuf.SerializationContext)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream.
            </summary>
      <param name="value">The existing instance to be serialized (cannot be null).</param>
      <param name="dest">The destination stream to write to.</param>
      <param name="context">Additional information about this serialization operation.</param>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.Serialize(ProtoBuf.ProtoWriter,System.Object)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied writer.
            </summary>
      <param name="value">The existing instance to be serialized (cannot be null).</param>
      <param name="dest">The destination writer to write to.</param>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.DeserializeWithLengthPrefix(System.IO.Stream,System.Object,System.Type,ProtoBuf.PrefixStyle,System.Int32)">
      <summary>
            Applies a protocol-buffer stream to an existing instance (or null), using length-prefixed
            data - useful with network IO.
            </summary>
      <param name="type">The type being merged.</param>
      <param name="value">The existing instance to be modified (can be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <param name="fieldNumber">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.DeserializeWithLengthPrefix(System.IO.Stream,System.Object,System.Type,ProtoBuf.PrefixStyle,System.Int32,ProtoBuf.Serializer.TypeResolver)">
      <summary>
            Applies a protocol-buffer stream to an existing instance (or null), using length-prefixed
            data - useful with network IO.
            </summary>
      <param name="type">The type being merged.</param>
      <param name="value">The existing instance to be modified (can be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <param name="expectedField">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
      <param name="resolver">Used to resolve types on a per-field basis.</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.DeserializeWithLengthPrefix(System.IO.Stream,System.Object,System.Type,ProtoBuf.PrefixStyle,System.Int32,ProtoBuf.Serializer.TypeResolver,System.Int32@)">
      <summary>
            Applies a protocol-buffer stream to an existing instance (or null), using length-prefixed
            data - useful with network IO.
            </summary>
      <param name="type">The type being merged.</param>
      <param name="value">The existing instance to be modified (can be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <param name="expectedField">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
      <param name="resolver">Used to resolve types on a per-field basis.</param>
      <param name="bytesRead">Returns the number of bytes consumed by this operation (includes length-prefix overheads and any skipped data).</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.DeserializeItems(System.IO.Stream,System.Type,ProtoBuf.PrefixStyle,System.Int32,ProtoBuf.Serializer.TypeResolver)">
      <summary>
            Reads a sequence of consecutive length-prefixed items from a stream, using
            either base-128 or fixed-length prefixes. Base-128 prefixes with a tag
            are directly comparable to serializing multiple items in succession
            (use the <see cref="F:ProtoBuf.Serializer.ListItemTag" /> tag to emulate the implicit behavior
            when serializing a list/array). When a tag is
            specified, any records with different tags are silently omitted. The
            tag is ignored. The tag is ignores for fixed-length prefixes.
            </summary>
      <param name="source">The binary stream containing the serialized records.</param>
      <param name="style">The prefix style used in the data.</param>
      <param name="expectedField">The tag of records to return (if non-positive, then no tag is
            expected and all records are returned).</param>
      <param name="resolver">On a field-by-field basis, the type of object to deserialize (can be null if "type" is specified). </param>
      <param name="type">The type of object to deserialize (can be null if "resolver" is specified).</param>
      <returns>The sequence of deserialized objects.</returns>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.DeserializeItems(System.IO.Stream,System.Type,ProtoBuf.PrefixStyle,System.Int32,ProtoBuf.Serializer.TypeResolver,ProtoBuf.SerializationContext)">
      <summary>
            Reads a sequence of consecutive length-prefixed items from a stream, using
            either base-128 or fixed-length prefixes. Base-128 prefixes with a tag
            are directly comparable to serializing multiple items in succession
            (use the <see cref="F:ProtoBuf.Serializer.ListItemTag" /> tag to emulate the implicit behavior
            when serializing a list/array). When a tag is
            specified, any records with different tags are silently omitted. The
            tag is ignored. The tag is ignores for fixed-length prefixes.
            </summary>
      <param name="source">The binary stream containing the serialized records.</param>
      <param name="style">The prefix style used in the data.</param>
      <param name="expectedField">The tag of records to return (if non-positive, then no tag is
            expected and all records are returned).</param>
      <param name="resolver">On a field-by-field basis, the type of object to deserialize (can be null if "type" is specified). </param>
      <param name="type">The type of object to deserialize (can be null if "resolver" is specified).</param>
      <returns>The sequence of deserialized objects.</returns>
      <param name="context">Additional information about this serialization operation.</param>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.DeserializeItems``1(System.IO.Stream,ProtoBuf.PrefixStyle,System.Int32)">
      <summary>
            Reads a sequence of consecutive length-prefixed items from a stream, using
            either base-128 or fixed-length prefixes. Base-128 prefixes with a tag
            are directly comparable to serializing multiple items in succession
            (use the <see cref="F:ProtoBuf.Serializer.ListItemTag" /> tag to emulate the implicit behavior
            when serializing a list/array). When a tag is
            specified, any records with different tags are silently omitted. The
            tag is ignored. The tag is ignores for fixed-length prefixes.
            </summary>
      <typeparam name="T">The type of object to deserialize.</typeparam>
      <param name="source">The binary stream containing the serialized records.</param>
      <param name="style">The prefix style used in the data.</param>
      <param name="expectedField">The tag of records to return (if non-positive, then no tag is
            expected and all records are returned).</param>
      <returns>The sequence of deserialized objects.</returns>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.DeserializeItems``1(System.IO.Stream,ProtoBuf.PrefixStyle,System.Int32,ProtoBuf.SerializationContext)">
      <summary>
            Reads a sequence of consecutive length-prefixed items from a stream, using
            either base-128 or fixed-length prefixes. Base-128 prefixes with a tag
            are directly comparable to serializing multiple items in succession
            (use the <see cref="F:ProtoBuf.Serializer.ListItemTag" /> tag to emulate the implicit behavior
            when serializing a list/array). When a tag is
            specified, any records with different tags are silently omitted. The
            tag is ignored. The tag is ignores for fixed-length prefixes.
            </summary>
      <typeparam name="T">The type of object to deserialize.</typeparam>
      <param name="source">The binary stream containing the serialized records.</param>
      <param name="style">The prefix style used in the data.</param>
      <param name="expectedField">The tag of records to return (if non-positive, then no tag is
            expected and all records are returned).</param>
      <returns>The sequence of deserialized objects.</returns>
      <param name="context">Additional information about this serialization operation.</param>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.SerializeWithLengthPrefix(System.IO.Stream,System.Object,System.Type,ProtoBuf.PrefixStyle,System.Int32)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream,
            with a length-prefix. This is useful for socket programming,
            as DeserializeWithLengthPrefix can be used to read the single object back
            from an ongoing stream.
            </summary>
      <param name="type">The type being serialized.</param>
      <param name="value">The existing instance to be serialized (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <param name="dest">The destination stream to write to.</param>
      <param name="fieldNumber">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.SerializeWithLengthPrefix(System.IO.Stream,System.Object,System.Type,ProtoBuf.PrefixStyle,System.Int32,ProtoBuf.SerializationContext)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream,
            with a length-prefix. This is useful for socket programming,
            as DeserializeWithLengthPrefix can be used to read the single object back
            from an ongoing stream.
            </summary>
      <param name="type">The type being serialized.</param>
      <param name="value">The existing instance to be serialized (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <param name="dest">The destination stream to write to.</param>
      <param name="fieldNumber">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
      <param name="context">Additional information about this serialization operation.</param>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.Deserialize(System.IO.Stream,System.Object,System.Type)">
      <summary>
            Applies a protocol-buffer stream to an existing instance (which may be null).
            </summary>
      <param name="type">The type (including inheritance) to consider.</param>
      <param name="value">The existing instance to be modified (can be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.Deserialize(System.IO.Stream,System.Object,System.Type,ProtoBuf.SerializationContext)">
      <summary>
            Applies a protocol-buffer stream to an existing instance (which may be null).
            </summary>
      <param name="type">The type (including inheritance) to consider.</param>
      <param name="value">The existing instance to be modified (can be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
      <param name="context">Additional information about this serialization operation.</param>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.Deserialize(System.IO.Stream,System.Object,System.Type,System.Int32)">
      <summary>
            Applies a protocol-buffer stream to an existing instance (which may be null).
            </summary>
      <param name="type">The type (including inheritance) to consider.</param>
      <param name="value">The existing instance to be modified (can be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <param name="length">The number of bytes to consume.</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.Deserialize(System.IO.Stream,System.Object,System.Type,System.Int32,ProtoBuf.SerializationContext)">
      <summary>
            Applies a protocol-buffer stream to an existing instance (which may be null).
            </summary>
      <param name="type">The type (including inheritance) to consider.</param>
      <param name="value">The existing instance to be modified (can be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <param name="length">The number of bytes to consume (or -1 to read to the end of the stream).</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
      <param name="context">Additional information about this serialization operation.</param>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.Deserialize(ProtoBuf.ProtoReader,System.Object,System.Type)">
      <summary>
            Applies a protocol-buffer reader to an existing instance (which may be null).
            </summary>
      <param name="type">The type (including inheritance) to consider.</param>
      <param name="value">The existing instance to be modified (can be null).</param>
      <param name="source">The reader to apply to the instance (cannot be null).</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.TryDeserializeAuxiliaryType(ProtoBuf.ProtoReader,ProtoBuf.DataFormat,System.Int32,System.Type,System.Object@,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            This is the more "complete" version of Deserialize, which handles single instances of mapped types.
            The value is read as a complete field, including field-header and (for sub-objects) a
            length-prefix..kmc  
            
            In addition to that, this provides support for:
             - basic values; individual int / string / Guid / etc
             - IList sets of any type handled by TryDeserializeAuxiliaryType
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.Create">
      <summary>
            Creates a new runtime model, to which the caller
            can add support for a range of types. A model
            can be used "as is", or can be compiled for
            optimal performance.
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.ResolveProxies(System.Type)">
      <summary>
            Applies common proxy scenarios, resolving the actual type to consider
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.IsDefined(System.Type)">
      <summary>
            Indicates whether the supplied type is explicitly modelled by the model
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.GetKey(System.Type@)">
      <summary>
            Provides the key that represents a given type in the current model.
            The type is also normalized for proxies at the same time.
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.GetKeyImpl(System.Type)">
      <summary>
            Provides the key that represents a given type in the current model.
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.Serialize(System.Int32,System.Object,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream.
            </summary>
      <param name="key">Represents the type (including inheritance) to consider.</param>
      <param name="value">The existing instance to be serialized (cannot be null).</param>
      <param name="dest">The destination stream to write to.</param>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.Deserialize(System.Int32,System.Object,ProtoBuf.ProtoReader)">
      <summary>
            Applies a protocol-buffer stream to an existing instance (which may be null).
            </summary>
      <param name="key">Represents the type (including inheritance) to consider.</param>
      <param name="value">The existing instance to be modified (can be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.DeepClone(System.Object)">
      <summary>
            Create a deep clone of the supplied instance; any sub-items are also cloned.
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.ThrowUnexpectedSubtype(System.Type,System.Type)">
      <summary>
            Indicates that while an inheritance tree exists, the exact type encountered was not
            specified in that hierarchy and cannot be processed.
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.ThrowUnexpectedType(System.Type)">
      <summary>
            Indicates that the given type was not expected, and cannot be processed.
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.ThrowCannotCreateInstance(System.Type)">
      <summary>
            Indicates that the given type cannot be constructed; it may still be possible to 
            deserialize into existing instances.
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.CanSerializeContractType(System.Type)">
      <summary>
            Returns true if the type supplied is either a recognised contract type,
            or a *list* of a recognised contract type. 
            </summary>
      <remarks>Note that primitives always return false, even though the engine
            will, if forced, try to serialize such</remarks>
      <returns>True if this type is recognised as a serializable entity, else false</returns>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.CanSerialize(System.Type)">
      <summary>
            Returns true if the type supplied is a basic type with inbuilt handling,
            a recognised contract type, or a *list* of a basic / contract type. 
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.CanSerializeBasicType(System.Type)">
      <summary>
            Returns true if the type supplied is a basic type with inbuilt handling,
            or a *list* of a basic type with inbuilt handling
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.GetSchema(System.Type)">
      <summary>
            Suggest a .proto definition for the given type
            </summary>
      <param name="type">The type to generate a .proto definition for, or <c>null</c> to generate a .proto that represents the entire model</param>
      <returns>The .proto definition as a string</returns>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.CreateFormatter(System.Type)">
      <summary>
            Creates a new IFormatter that uses protocol-buffer [de]serialization.
            </summary>
      <returns>A new IFormatter to be used during [de]serialization.</returns>
      <param name="type">The type of object to be [de]deserialized by the formatter.</param>
    </member>
    <member name="E:ProtoBuf.Meta.TypeModel.DynamicTypeFormatting">
      <summary>
            Used to provide custom services for writing and parsing type names when using dynamic types. Both parsing and formatting
            are provided on a single API as it is essential that both are mapped identically at all times.
            </summary>
    </member>
    <member name="T:ProtoBuf.Meta.RuntimeTypeModel">
      <summary>
            Provides protobuf serialization support for a number of types that can be defined at runtime
            </summary>
    </member>
    <member name="T:ProtoBuf.Meta.RuntimeTypeModel.CompilerOptions">
      <summary>
            Represents configuration options for compiling a model to 
            a standalone assembly.
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.RuntimeTypeModel.CompilerOptions.SetFrameworkOptions(ProtoBuf.Meta.MetaType)">
      <summary>
            Import framework options from an existing type
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.CompilerOptions.TargetFrameworkName">
      <summary>
            The TargetFrameworkAttribute FrameworkName value to burn into the generated assembly
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.CompilerOptions.TargetFrameworkDisplayName">
      <summary>
            The TargetFrameworkAttribute FrameworkDisplayName value to burn into the generated assembly
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.CompilerOptions.TypeName">
      <summary>
            The name of the TypeModel class to create
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.CompilerOptions.OutputPath">
      <summary>
            The path for the new dll
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.CompilerOptions.ImageRuntimeVersion">
      <summary>
            The runtime version for the generated assembly
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.CompilerOptions.MetaDataVersion">
      <summary>
            The runtime version for the generated assembly
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.RuntimeTypeModel.GetTypes">
      <summary>
            Returns a sequence of the Type instances that can be
            processed by this model.
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.RuntimeTypeModel.GetSchema(System.Type)">
      <summary>
            Suggest a .proto definition for the given type
            </summary>
      <param name="type">The type to generate a .proto definition for, or <c>null</c> to generate a .proto that represents the entire model</param>
      <returns>The .proto definition as a string</returns>
    </member>
    <member name="M:ProtoBuf.Meta.RuntimeTypeModel.Add(System.Type,System.Boolean)">
      <summary>
            Adds support for an additional type in this model, optionally
            appplying inbuilt patterns. If the type is already known to the
            model, the existing type is returned **without** applying
            any additional behaviour.
            </summary>
      <remarks>Inbuilt patterns include:
            [ProtoContract]/[ProtoMember(n)]
            [DataContract]/[DataMember(Order=n)]
            [XmlType]/[XmlElement(Order=n)]
            [On{Des|S}erializ{ing|ed}]
            ShouldSerialize*/*Specified
            </remarks>
      <param name="type">The type to be supported</param>
      <param name="applyDefaultBehaviour">Whether to apply the inbuilt configuration patterns (via attributes etc), or
            just add the type with no additional configuration (the type must then be manually configured).</param>
      <returns>The MetaType representing this type, allowing
            further configuration.</returns>
    </member>
    <member name="M:ProtoBuf.Meta.RuntimeTypeModel.ThrowIfFrozen">
      <summary>
            Verifies that the model is still open to changes; if not, an exception is thrown
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.RuntimeTypeModel.Freeze">
      <summary>
            Prevents further changes to this model
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.RuntimeTypeModel.GetKeyImpl(System.Type)">
      <summary>
            Provides the key that represents a given type in the current model.
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.RuntimeTypeModel.Serialize(System.Int32,System.Object,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream.
            </summary>
      <param name="key">Represents the type (including inheritance) to consider.</param>
      <param name="value">The existing instance to be serialized (cannot be null).</param>
      <param name="dest">The destination stream to write to.</param>
    </member>
    <member name="M:ProtoBuf.Meta.RuntimeTypeModel.Deserialize(System.Int32,System.Object,ProtoBuf.ProtoReader)">
      <summary>
            Applies a protocol-buffer stream to an existing instance (which may be null).
            </summary>
      <param name="key">Represents the type (including inheritance) to consider.</param>
      <param name="value">The existing instance to be modified (can be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
    </member>
    <member name="M:ProtoBuf.Meta.RuntimeTypeModel.CompileInPlace">
      <summary>
            Compiles the serializers individually; this is *not* a full
            standalone compile, but can significantly boost performance
            while allowing additional types to be added.
            </summary>
      <remarks>An in-place compile can access non-public types / members</remarks>
    </member>
    <member name="M:ProtoBuf.Meta.RuntimeTypeModel.Compile">
      <summary>
            Fully compiles the current model into a static-compiled model instance
            </summary>
      <remarks>A full compilation is restricted to accessing public types / members</remarks>
      <returns>An instance of the newly created compiled type-model</returns>
    </member>
    <member name="M:ProtoBuf.Meta.RuntimeTypeModel.Compile(System.String,System.String)">
      <summary>
            Fully compiles the current model into a static-compiled serialization dll
            (the serialization dll still requires protobuf-net for support services).
            </summary>
      <remarks>A full compilation is restricted to accessing public types / members</remarks>
      <param name="name">The name of the TypeModel class to create</param>
      <param name="path">The path for the new dll</param>
      <returns>An instance of the newly created compiled type-model</returns>
    </member>
    <member name="M:ProtoBuf.Meta.RuntimeTypeModel.Compile(ProtoBuf.Meta.RuntimeTypeModel.CompilerOptions)">
      <summary>
            Fully compiles the current model into a static-compiled serialization dll
            (the serialization dll still requires protobuf-net for support services).
            </summary>
      <remarks>A full compilation is restricted to accessing public types / members</remarks>
      <returns>An instance of the newly created compiled type-model</returns>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.InferTagFromNameDefault">
      <summary>
            Global default that
            enables/disables automatic tag generation based on the existing name / order
            of the defined members. See <seealso cref="P:ProtoBuf.ProtoContractAttribute.InferTagFromName" />
            for usage and <b>important warning</b> / explanation.
            You must set the global default before attempting to serialize/deserialize any
            impacted type.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.AutoAddProtoContractTypesOnly">
      <summary>
            Global default that determines whether types are considered serializable
            if they have [DataContract] / [XmlType]. With this enabled, <b>ONLY</b>
            types marked as [ProtoContract] are added automatically.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.UseImplicitZeroDefaults">
      <summary>
            Global switch that enables or disables the implicit
            handling of "zero defaults"; meanning: if no other default is specified,
            it assumes bools always default to false, integers to zero, etc.
            
            If this is disabled, no such assumptions are made and only *explicit*
            default values are processed. This is enabled by default to 
            preserve similar logic to v1.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.AllowParseableTypes">
      <summary>
            Global switch that determines whether types with a <c>.ToString()</c> and a <c>Parse(string)</c>
            should be serialized as strings.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.Default">
      <summary>
            The default model, used to support ProtoBuf.Serializer
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.Item(System.Type)">
      <summary>
            Obtains the MetaType associated with a given Type for the current model,
            allowing additional configuration.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.AutoCompile">
      <summary>
            Should serializers be compiled on demand? It may be useful
            to disable this for debugging purposes.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.AutoAddMissingTypes">
      <summary>
            Should support for unexpected types be added automatically?
            If false, an exception is thrown when unexpected types
            are encountered.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.MetadataTimeoutMilliseconds">
      <summary>
            The amount of time to wait if there are concurrent metadata access operations
            </summary>
    </member>
    <member name="E:ProtoBuf.Meta.RuntimeTypeModel.LockContended">
      <summary>
            If a lock-contention is detected, this event signals the *owner* of the lock responsible for the blockage, indicating
            what caused the problem; this is only raised if the lock-owning code successfully completes.
            </summary>
    </member>
    <member name="T:ProtoBuf.Meta.LockContentedEventArgs">
      <summary>
            Contains the stack-trace of the owning code when a lock-contention scenario is detected
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.LockContentedEventArgs.OwnerStackTrace">
      <summary>
            The stack-trace of the code that owned the lock when a lock-contention scenario occurred
            </summary>
    </member>
    <member name="T:ProtoBuf.Meta.LockContentedEventHandler">
      <summary>
            Event-type that is raised when a lock-contention scenario is detected
            </summary>
    </member>
    <member name="T:ProtoBuf.Meta.SubType">
      <summary>
            Represents an inherited type in a type hierarchy.
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.SubType.#ctor(System.Int32,ProtoBuf.Meta.MetaType,ProtoBuf.DataFormat)">
      <summary>
            Creates a new SubType instance.
            </summary>
      <param name="fieldNumber">The field-number that is used to encapsulate the data (as a nested
            message) for the derived dype.</param>
      <param name="derivedType">The sub-type to be considered.</param>
      <param name="format">Specific encoding style to use; in particular, Grouped can be used to avoid buffering, but is not the default.</param>
    </member>
    <member name="P:ProtoBuf.Meta.SubType.FieldNumber">
      <summary>
            The field-number that is used to encapsulate the data (as a nested
            message) for the derived dype.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.SubType.DerivedType">
      <summary>
            The sub-type to be considered.
            </summary>
    </member>
    <member name="T:ProtoBuf.Meta.TypeFormatEventArgs">
      <summary>
            Event arguments needed to perform type-formatting functions; this could be resolving a Type to a string suitable for serialization, or could
            be requesting a Type from a string. If no changes are made, a default implementation will be used (from the assembly-qualified names).
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.TypeFormatEventArgs.Type">
      <summary>
            The type involved in this map; if this is initially null, a Type is expected to be provided for the string in FormattedName.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.TypeFormatEventArgs.FormattedName">
      <summary>
            The formatted-name involved in this map; if this is initially null, a formatted-name is expected from the type in Type.
            </summary>
    </member>
    <member name="T:ProtoBuf.Meta.TypeFormatEventHandler">
      <summary>
            Delegate type used to perform type-formatting functions; the sender originates as the type-model.
            </summary>
    </member>
    <member name="T:ProtoBuf.Meta.ValueMember">
      <summary>
            Represents a member (property/field) that is mapped to a protobuf field
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.ValueMember.#ctor(ProtoBuf.Meta.RuntimeTypeModel,System.Type,System.Int32,System.Reflection.MemberInfo,System.Type,System.Type,System.Type,ProtoBuf.DataFormat,System.Object)">
      <summary>
            Creates a new ValueMember instance
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.ValueMember.#ctor(ProtoBuf.Meta.RuntimeTypeModel,System.Int32,System.Type,System.Type,System.Type,ProtoBuf.DataFormat)">
      <summary>
            Creates a new ValueMember instance
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.ValueMember.SetSpecified(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
      <summary>
            Specifies methods for working with optional data members.
            </summary>
      <param name="getSpecified">Provides a method (null for none) to query whether this member should
            be serialized; it must be of the form "bool {Method}()". The member is only serialized if the
            method returns true.</param>
      <param name="setSpecified">Provides a method (null for none) to indicate that a member was
            deserialized; it must be of the form "void {Method}(bool)", and will be called with "true"
            when data is found.</param>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.FieldNumber">
      <summary>
            The number that identifies this member in a protobuf stream
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.Member">
      <summary>
            Gets the member (field/property) which this member relates to.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.ItemType">
      <summary>
            Within a list / array / etc, the type of object for each item in the list (especially useful with ArrayList)
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.MemberType">
      <summary>
            The underlying type of the member
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.DefaultType">
      <summary>
            For abstract types (IList etc), the type of concrete object to create (if required)
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.ParentType">
      <summary>
            The type the defines the member
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.DefaultValue">
      <summary>
            The default value of the item (members with this value will not be serialized)
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.DataFormat">
      <summary>
            Specifies the rules used to process the field; this is used to determine the most appropriate
            wite-type, but also to describe subtypes <i>within</i> that wire-type (such as SignedVariant)
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.IsStrict">
      <summary>
            Indicates whether this field should follow strict encoding rules; this means (for example) that if a "fixed32"
            is encountered when "variant" is defined, then it will fail (throw an exception) when parsing. Note that
            when serializing the defined type is always used.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.IsPacked">
      <summary>
            Indicates whether this field should use packed encoding (which can save lots of space for repeated primitive values).
            This option only applies to list/array data of primitive types (int, double, etc).
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.OverwriteList">
      <summary>
            Indicates whether this field should *repace* existing values (the default is false, meaning *append*).
            This option only applies to list/array data.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.IsRequired">
      <summary>
            Indicates whether this field is mandatory.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.AsReference">
      <summary>
            Enables full object-tracking/full-graph support.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.DynamicType">
      <summary>
            Embeds the type information into the stream, allowing usage with types not known in advance.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.Name">
      <summary>
            Gets the logical name for this member in the schema (this is not critical for binary serialization, but may be used
            when inferring a schema).
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.SupportNull">
      <summary>
            Should lists have extended support for null values? Note this makes the serialization less efficient.
            </summary>
    </member>
    <member name="T:ProtoBuf.PrefixStyle">
      <summary>
            Specifies the type of prefix that should be applied to messages.
            </summary>
    </member>
    <member name="F:ProtoBuf.PrefixStyle.None">
      <summary>
            No length prefix is applied to the data; the data is terminated only be the end of the stream.
            </summary>
    </member>
    <member name="F:ProtoBuf.PrefixStyle.Base128">
      <summary>
            A base-128 length prefix is applied to the data (efficient for short messages).
            </summary>
    </member>
    <member name="F:ProtoBuf.PrefixStyle.Fixed32">
      <summary>
            A fixed-length (little-endian) length prefix is applied to the data (useful for compatibility).
            </summary>
    </member>
    <member name="F:ProtoBuf.PrefixStyle.Fixed32BigEndian">
      <summary>
            A fixed-length (big-endian) length prefix is applied to the data (useful for compatibility).
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoContractAttribute">
      <summary>
            Indicates that a type is defined for protocol-buffer serialization.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoContractAttribute.Name">
      <summary>
            Gets or sets the defined name of the type.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoContractAttribute.ImplicitFirstTag">
      <summary>
            Gets or sets the fist offset to use with implicit field tags;
            only uesd if ImplicitFields is set.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoContractAttribute.UseProtoMembersOnly">
      <summary>
            If specified, alternative contract markers (such as markers for XmlSerailizer or DataContractSerializer) are ignored.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoContractAttribute.IgnoreListHandling">
      <summary>
            If specified, do NOT treat this type as a list, even if it looks like one.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoContractAttribute.ImplicitFields">
      <summary>
            Gets or sets the mechanism used to automatically infer field tags
            for members. This option should be used in advanced scenarios only.
            Please review the important notes against the ImplicitFields enumeration.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoContractAttribute.InferTagFromName">
      <summary>
            Enables/disables automatic tag generation based on the existing name / order
            of the defined members. This option is not used for members marked
            with ProtoMemberAttribute, as intended to provide compatibility with
            WCF serialization. WARNING: when adding new fields you must take
            care to increase the Order for new elements, otherwise data corruption
            may occur.
            </summary>
      <remarks>If not explicitly specified, the default is assumed from Serializer.GlobalOptions.InferTagFromName.</remarks>
    </member>
    <member name="P:ProtoBuf.ProtoContractAttribute.InferTagFromNameHasValue">
      <summary>
            Has a InferTagFromName value been explicitly set? if not, the default from the type-model is assumed.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoContractAttribute.DataMemberOffset">
      <summary>
            Specifies an offset to apply to [DataMember(Order=...)] markers;
            this is useful when working with mex-generated classes that have
            a different origin (usually 1 vs 0) than the original data-contract.
            
            This value is added to the Order of each member.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoContractAttribute.SkipConstructor">
      <summary>
            If true, the constructor for the type is bypassed during deserialization, meaning any field initializers
            or other initialization code is skipped.
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoEnumAttribute">
      <summary>
            Used to define protocol-buffer specific behavior for
            enumerated values.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoEnumAttribute.HasValue">
      <summary>
            Indicates whether this instance has a customised value mapping
            </summary>
      <returns>true if a specific value is set</returns>
    </member>
    <member name="P:ProtoBuf.ProtoEnumAttribute.Value">
      <summary>
            Gets or sets the specific value to use for this enum during serialization.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoEnumAttribute.Name">
      <summary>
            Gets or sets the defined name of the enum, as used in .proto
            (this name is not used during serialization).
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoException">
      <summary>
            Indicates an error during serialization/deserialization of a proto stream.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoException.#ctor">
      <summary>Creates a new ProtoException instance.</summary>
    </member>
    <member name="M:ProtoBuf.ProtoException.#ctor(System.String)">
      <summary>Creates a new ProtoException instance.</summary>
    </member>
    <member name="M:ProtoBuf.ProtoException.#ctor(System.String,System.Exception)">
      <summary>Creates a new ProtoException instance.</summary>
    </member>
    <member name="T:ProtoBuf.ProtoIgnoreAttribute">
      <summary>
            Indicates that a member should be excluded from serialization; this
            is only normally used when using implict fields.
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoPartialIgnoreAttribute">
      <summary>
            Indicates that a member should be excluded from serialization; this
            is only normally used when using implict fields. This allows
            ProtoIgnoreAttribute usage
            even for partial classes where the individual members are not
            under direct control.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoPartialIgnoreAttribute.#ctor(System.String)">
      <summary>
            Creates a new ProtoPartialIgnoreAttribute instance.
            </summary>
      <param name="memberName">Specifies the member to be ignored.</param>
    </member>
    <member name="P:ProtoBuf.ProtoPartialIgnoreAttribute.MemberName">
      <summary>
            The name of the member to be ignored.
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoIncludeAttribute">
      <summary>
            Indicates the known-types to support for an individual
            message. This serializes each level in the hierarchy as
            a nested message to retain wire-compatibility with
            other protocol-buffer implementations.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoIncludeAttribute.#ctor(System.Int32,System.Type)">
      <summary>
             Creates a new instance of the ProtoIncludeAttribute.
             </summary>
      <param name="tag">The unique index (within the type) that will identify this data.</param>
      <param name="knownType">The additional type to serialize/deserialize.</param>
    </member>
    <member name="M:ProtoBuf.ProtoIncludeAttribute.#ctor(System.Int32,System.String)">
      <summary>
            Creates a new instance of the ProtoIncludeAttribute.
            </summary>
      <param name="tag">The unique index (within the type) that will identify this data.</param>
      <param name="knownTypeName">The additional type to serialize/deserialize.</param>
    </member>
    <member name="P:ProtoBuf.ProtoIncludeAttribute.Tag">
      <summary>
            Gets the unique index (within the type) that will identify this data.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoIncludeAttribute.KnownTypeName">
      <summary>
            Gets the additional type to serialize/deserialize.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoIncludeAttribute.KnownType">
      <summary>
            Gets the additional type to serialize/deserialize.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoIncludeAttribute.DataFormat">
      <summary>
            Specifies whether the inherited sype's sub-message should be
            written with a length-prefix (default), or with group markers.
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoMemberAttribute">
      <summary>
            Declares a member to be used in protocol-buffer serialization, using
            the given Tag. A DataFormat may be used to optimise the serialization
            format (for instance, using zigzag encoding for negative numbers, or 
            fixed-length encoding for large values.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoMemberAttribute.CompareTo(System.Object)">
      <summary>
            Compare with another ProtoMemberAttribute for sorting purposes
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoMemberAttribute.CompareTo(ProtoBuf.ProtoMemberAttribute)">
      <summary>
            Compare with another ProtoMemberAttribute for sorting purposes
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoMemberAttribute.#ctor(System.Int32)">
      <summary>
            Creates a new ProtoMemberAttribute instance.
            </summary>
      <param name="tag">Specifies the unique tag used to identify this member within the type.</param>
    </member>
    <member name="P:ProtoBuf.ProtoMemberAttribute.Name">
      <summary>
            Gets or sets the original name defined in the .proto; not used
            during serialization.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoMemberAttribute.DataFormat">
      <summary>
            Gets or sets the data-format to be used when encoding this value.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoMemberAttribute.Tag">
      <summary>
            Gets the unique tag used to identify this member within the type.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoMemberAttribute.IsRequired">
      <summary>
            Gets or sets a value indicating whether this member is mandatory.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoMemberAttribute.IsPacked">
      <summary>
            Gets a value indicating whether this member is packed.
            This option only applies to list/array data of primitive types (int, double, etc).
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoMemberAttribute.OverwriteList">
      <summary>
            Indicates whether this field should *repace* existing values (the default is false, meaning *append*).
            This option only applies to list/array data.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoMemberAttribute.AsReference">
      <summary>
            Enables full object-tracking/full-graph support.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoMemberAttribute.DynamicType">
      <summary>
            Embeds the type information into the stream, allowing usage with types not known in advance.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoMemberAttribute.Options">
      <summary>
            Gets or sets a value indicating whether this member is packed (lists/arrays).
            </summary>
    </member>
    <member name="T:ProtoBuf.MemberSerializationOptions">
      <summary>
            Additional (optional) settings that control serialization of members
            </summary>
    </member>
    <member name="F:ProtoBuf.MemberSerializationOptions.None">
      <summary>
            Default; no additional options
            </summary>
    </member>
    <member name="F:ProtoBuf.MemberSerializationOptions.Packed">
      <summary>
            Indicates that repeated elements should use packed (length-prefixed) encoding
            </summary>
    </member>
    <member name="F:ProtoBuf.MemberSerializationOptions.Required">
      <summary>
            Indicates that the given item is required
            </summary>
    </member>
    <member name="F:ProtoBuf.MemberSerializationOptions.AsReference">
      <summary>
            Enables full object-tracking/full-graph support
            </summary>
    </member>
    <member name="F:ProtoBuf.MemberSerializationOptions.DynamicType">
      <summary>
            Embeds the type information into the stream, allowing usage with types not known in advance
            </summary>
    </member>
    <member name="F:ProtoBuf.MemberSerializationOptions.OverwriteList">
      <summary>
            Indicates whether this field should *repace* existing values (the default is false, meaning *append*).
            This option only applies to list/array data.
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoPartialMemberAttribute">
      <summary>
            Declares a member to be used in protocol-buffer serialization, using
            the given Tag and MemberName. This allows ProtoMemberAttribute usage
            even for partial classes where the individual members are not
            under direct control.
            A DataFormat may be used to optimise the serialization
            format (for instance, using zigzag encoding for negative numbers, or 
            fixed-length encoding for large values.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoPartialMemberAttribute.#ctor(System.Int32,System.String)">
      <summary>
            Creates a new ProtoMemberAttribute instance.
            </summary>
      <param name="tag">Specifies the unique tag used to identify this member within the type.</param>
      <param name="memberName">Specifies the member to be serialized.</param>
    </member>
    <member name="P:ProtoBuf.ProtoPartialMemberAttribute.MemberName">
      <summary>
            The name of the member to be serialized.
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoReader">
      <summary>
            A stateful reader, used to read a protobuf stream. Typical usage would be (sequentially) to call
            ReadFieldHeader and (after matching the field) an appropriate Read* method.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.#ctor(System.IO.Stream,ProtoBuf.Meta.TypeModel,ProtoBuf.SerializationContext)">
      <summary>
            Creates a new reader against a stream
            </summary>
      <param name="source">The source stream</param>
      <param name="model">The model to use for serialization; this can be null, but this will impair the ability to deserialize sub-objects</param>
      <param name="context">Additional context about this serialization operation</param>
    </member>
    <member name="M:ProtoBuf.ProtoReader.#ctor(System.IO.Stream,ProtoBuf.Meta.TypeModel,ProtoBuf.SerializationContext,System.Int32)">
      <summary>
            Creates a new reader against a stream
            </summary>
      <param name="source">The source stream</param>
      <param name="model">The model to use for serialization; this can be null, but this will impair the ability to deserialize sub-objects</param>
      <param name="context">Additional context about this serialization operation</param>
      <param name="length">The number of bytes to read, or -1 to read until the end of the stream</param>
    </member>
    <member name="M:ProtoBuf.ProtoReader.Dispose">
      <summary>
            Releases resources used by the reader, but importantly <b>does not</b> Dispose the 
            underlying stream; in many typical use-cases the stream is used for different
            processes, so it is assumed that the consumer will Dispose their stream separately.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadUInt32">
      <summary>
            Reads an unsigned 32-bit integer from the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadInt16">
      <summary>
            Reads a signed 16-bit integer from the stream: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadUInt16">
      <summary>
            Reads an unsigned 16-bit integer from the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadByte">
      <summary>
            Reads an unsigned 8-bit integer from the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadSByte">
      <summary>
            Reads a signed 8-bit integer from the stream; supported wire-types: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadInt32">
      <summary>
            Reads a signed 32-bit integer from the stream; supported wire-types: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadInt64">
      <summary>
            Reads a signed 64-bit integer from the stream; supported wire-types: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadString">
      <summary>
            Reads a string from the stream (using UTF8); supported wire-types: String
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ThrowEnumException(System.Type,System.Int32)">
      <summary>
            Throws an exception indication that the given value cannot be mapped to an enum.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadDouble">
      <summary>
            Reads a double-precision number from the stream; supported wire-types: Fixed32, Fixed64
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadObject(System.Object,System.Int32,ProtoBuf.ProtoReader)">
      <summary>
            Reads (merges) a sub-message from the stream, internally calling StartSubItem and EndSubItem, and (in between)
            parsing the message in accordance with the model associated with the reader
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.EndSubItem(ProtoBuf.SubItemToken,ProtoBuf.ProtoReader)">
      <summary>
            Makes the end of consuming a nested message in the stream; the stream must be either at the correct EndGroup
            marker, or all fields of the sub-message must have been consumed (in either case, this means ReadFieldHeader
            should return zero)
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.StartSubItem(ProtoBuf.ProtoReader)">
      <summary>
            Begins consuming a nested message in the stream; supported wire-types: StartGroup, String
            </summary>
      <remarks>The token returned must be help and used when callining EndSubItem</remarks>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadFieldHeader">
      <summary>
            Reads a field header from the stream, setting the wire-type and retuning the field number. If no
            more fields are available, then 0 is returned. This methods respects sub-messages.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.TryReadFieldHeader(System.Int32)">
      <summary>
            Looks ahead to see whether the next field in the stream is what we expect
            (typically; what we've just finished reading - for example ot read successive list items)
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.Hint(ProtoBuf.WireType)">
      <summary>
            Compares the streams current wire-type to the hinted wire-type, updating the reader if necessary; for example,
            a Variant may be updated to SignedVariant. If the hinted wire-type is unrelated then no change is made.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.Assert(ProtoBuf.WireType)">
      <summary>
            Verifies that the stream's current wire-type is as expected, or a specialized sub-type (for example,
            SignedVariant) - in which case the current wire-type is updated. Otherwise an exception is thrown.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.SkipField">
      <summary>
            Discards the data for the current field.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadUInt64">
      <summary>
            Reads an unsigned 64-bit integer from the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadSingle">
      <summary>
            Reads a single-precision number from the stream; supported wire-types: Fixed32, Fixed64
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadBoolean">
      <summary>
            Reads a boolean value from the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:ProtoBuf.ProtoReader.AppendBytes(System.Byte[],ProtoBuf.ProtoReader)">
      <summary>
            Reads a byte-sequence from the stream, appending them to an existing byte-sequence (which can be null); supported wire-types: String
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadLengthPrefix(System.IO.Stream,System.Boolean,ProtoBuf.PrefixStyle,System.Int32@)">
      <summary>
            Reads the length-prefix of a message from a stream without buffering additional data, allowing a fixed-length
            reader to be created.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.DirectReadLittleEndianInt32(System.IO.Stream)">
      <summary>
            Reads a little-endian encoded integer. An exception is thrown if the data is not all available.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.DirectReadBigEndianInt32(System.IO.Stream)">
      <summary>
            Reads a big-endian encoded integer. An exception is thrown if the data is not all available.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.DirectReadVarintInt32(System.IO.Stream)">
      <summary>
            Reads a varint encoded integer. An exception is thrown if the data is not all available.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.DirectReadBytes(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Reads a string (of a given lenth, in bytes) directly from the source into a pre-existing buffer. An exception is thrown if the data is not all available.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.DirectReadBytes(System.IO.Stream,System.Int32)">
      <summary>
            Reads a given number of bytes directly from the source. An exception is thrown if the data is not all available.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.DirectReadString(System.IO.Stream,System.Int32)">
      <summary>
            Reads a string (of a given lenth, in bytes) directly from the source. An exception is thrown if the data is not all available.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadLengthPrefix(System.IO.Stream,System.Boolean,ProtoBuf.PrefixStyle,System.Int32@,System.Int32@)">
      <summary>
            Reads the length-prefix of a message from a stream without buffering additional data, allowing a fixed-length
            reader to be created.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.TryReadUInt32Variant(System.IO.Stream,System.UInt32@)">
      <returns>The number of bytes consumed; 0 if no data available</returns>
    </member>
    <member name="M:ProtoBuf.ProtoReader.AppendExtensionData(ProtoBuf.IExtensible)">
      <summary>
            Copies the current field into the instance as extension data
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.HasSubValue(ProtoBuf.WireType,ProtoBuf.ProtoReader)">
      <summary>
            Indicates whether the reader still has data remaining in the current sub-item,
            additionally setting the wire-type for the next field if there is more data.
            This is used when decoding packed data.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.NoteObject(System.Object,ProtoBuf.ProtoReader)">
      <summary>
            Utility method, not intended for public use; this helps maintain the root object is complex scenarios
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadType">
      <summary>
            Reads a Type from the stream, using the model's DynamicTypeFormatting if appropriate; supported wire-types: String
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoReader.FieldNumber">
      <summary>
            Gets the number of the field being processed.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoReader.WireType">
      <summary>
            Indicates the underlying proto serialization format on the wire.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoReader.InternStrings">
      <summary>
            Gets / sets a flag indicating whether strings should be checked for repetition; if
            true, any repeated UTF-8 byte sequence will result in the same String instance, rather
            than a second instance of the same string. Enabled by default. Note that this uses
            a <i>custom</i> interner - the system-wide string interner is not used.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoReader.Context">
      <summary>
            Addition information about this deserialization operation.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoReader.Position">
      <summary>
            Returns the position of the current reader (note that this is not necessarily the same as the position
            in the underlying stream, if multiple readers are used on the same stream)
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoReader.Model">
      <summary>
            Get the TypeModel associated with this reader
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoWriter">
      <summary>
            Represents an output stream for writing protobuf data.
            
            Why is the API backwards (static methods with writer arguments)?
            See: http://marcgravell.blogspot.com/2010/03/last-will-be-first-and-first-will-be.html
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteObject(System.Object,System.Int32,ProtoBuf.ProtoWriter)">
      <summary>
            Write an encapsulated sub-object, using the supplied unique key (reprasenting a type).
            </summary>
      <param name="value">The object to write.</param>
      <param name="key">The key that uniquely identifies the type within the model.</param>
      <param name="writer">The destination.</param>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteRecursionSafeObject(System.Object,System.Int32,ProtoBuf.ProtoWriter)">
      <summary>
            Write an encapsulated sub-object, using the supplied unique key (reprasenting a type) - but the
            caller is asserting that this relationship is non-recursive; no recursion check will be
            performed.
            </summary>
      <param name="value">The object to write.</param>
      <param name="key">The key that uniquely identifies the type within the model.</param>
      <param name="writer">The destination.</param>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteFieldHeader(System.Int32,ProtoBuf.WireType,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a field-header, indicating the format of the next data we plan to write.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteBytes(System.Byte[],ProtoBuf.ProtoWriter)">
      <summary>
            Writes a byte-array to the stream; supported wire-types: String
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteBytes(System.Byte[],System.Int32,System.Int32,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a byte-array to the stream; supported wire-types: String
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.StartSubItem(System.Object,ProtoBuf.ProtoWriter)">
      <summary>
            Indicates the start of a nested record.
            </summary>
      <param name="instance">The instance to write.</param>
      <param name="writer">The destination.</param>
      <returns>A token representing the state of the stream; this token is given to EndSubItem.</returns>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.EndSubItem(ProtoBuf.SubItemToken,ProtoBuf.ProtoWriter)">
      <summary>
            Indicates the end of a nested record.
            </summary>
      <param name="token">The token obtained from StartubItem.</param>
      <param name="writer">The destination.</param>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.#ctor(System.IO.Stream,ProtoBuf.Meta.TypeModel,ProtoBuf.SerializationContext)">
      <summary>
            Creates a new writer against a stream
            </summary>
      <param name="dest">The destination stream</param>
      <param name="model">The model to use for serialization; this can be null, but this will impair the ability to serialize sub-objects</param>
      <param name="context">Additional context about this serialization operation</param>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.Close">
      <summary>
            Flushes data to the underlying stream, and releases any resources. The underlying stream is *not* disposed
            by this operation.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.Flush(ProtoBuf.ProtoWriter)">
      <summary>
            Writes any buffered data (if possible) to the underlying stream.
            </summary>
      <param name="writer">The writer to flush</param>
      <remarks>It is not always possible to fully flush, since some sequences
            may require values to be back-filled into the byte-stream.</remarks>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteUInt32Variant(System.UInt32,ProtoBuf.ProtoWriter)">
      <summary>
            Writes an unsigned 32-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteString(System.String,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a string to the stream; supported wire-types: String
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteUInt64(System.UInt64,ProtoBuf.ProtoWriter)">
      <summary>
            Writes an unsigned 64-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteInt64(System.Int64,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a signed 64-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteUInt32(System.UInt32,ProtoBuf.ProtoWriter)">
      <summary>
            Writes an unsigned 16-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteInt16(System.Int16,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a signed 16-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteUInt16(System.UInt16,ProtoBuf.ProtoWriter)">
      <summary>
            Writes an unsigned 16-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteByte(System.Byte,ProtoBuf.ProtoWriter)">
      <summary>
            Writes an unsigned 8-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteSByte(System.SByte,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a signed 8-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteInt32(System.Int32,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a signed 32-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteDouble(System.Double,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a double-precision number to the stream; supported wire-types: Fixed32, Fixed64
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteSingle(System.Single,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a single-precision number to the stream; supported wire-types: Fixed32, Fixed64
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.ThrowEnumException(ProtoBuf.ProtoWriter,System.Object)">
      <summary>
            Throws an exception indicating that the given enum cannot be mapped to a serialized value.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteBoolean(System.Boolean,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a boolean to the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.AppendExtensionData(ProtoBuf.IExtensible,ProtoBuf.ProtoWriter)">
      <summary>
            Copies any extension data stored for the instance to the underlying stream
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.SetPackedField(System.Int32,ProtoBuf.ProtoWriter)">
      <summary>
            Used for packed encoding; indicates that the next field should be skipped rather than
            a field header written. Note that the field number must match, else an exception is thrown
            when the attempt is made to write the (incorrect) field. The wire-type is taken from the
            subsequent call to WriteFieldHeader. Only primitive types can be packed.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.SetRootObject(System.Object)">
      <summary>
            Specifies a known root object to use during reference-tracked serialization
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteType(System.Type,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a Type to the stream, using the model's DynamicTypeFormatting if appropriate; supported wire-types: String
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoWriter.Context">
      <summary>
            Addition information about this serialization operation.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoWriter.Model">
      <summary>
            Get the TypeModel associated with this writer
            </summary>
    </member>
    <member name="T:ProtoBuf.SerializationContext">
      <summary>
            Additional information about a serialization operation
            </summary>
    </member>
    <member name="M:ProtoBuf.SerializationContext.op_Implicit(ProtoBuf.SerializationContext)~System.Runtime.Serialization.StreamingContext">
      <summary>
            Convert a SerializationContext to a StreamingContext
            </summary>
    </member>
    <member name="M:ProtoBuf.SerializationContext.op_Implicit(System.Runtime.Serialization.StreamingContext)~ProtoBuf.SerializationContext">
      <summary>
            Convert a StreamingContext to a SerializationContext
            </summary>
    </member>
    <member name="P:ProtoBuf.SerializationContext.Context">
      <summary>
            Gets or sets a user-defined object containing additional information about this serialization/deserialization operation.
            </summary>
    </member>
    <member name="P:ProtoBuf.SerializationContext.Default">
      <summary>
            A default SerializationContext, with minimal information.
            </summary>
    </member>
    <member name="P:ProtoBuf.SerializationContext.State">
      <summary>
            Gets or sets the source or destination of the transmitted data.
            </summary>
    </member>
    <member name="T:ProtoBuf.Serializer">
      <summary>
            Provides protocol-buffer serialization capability for concrete, attributed types. This
            is a *default* model, but custom serializer models are also supported.
            </summary>
      <remarks>
            Protocol-buffer serialization is a compact binary format, designed to take
            advantage of sparse data and knowledge of specific data types; it is also
            extensible, allowing a type to be deserialized / merged even if some data is
            not recognised.
            </remarks>
    </member>
    <member name="T:ProtoBuf.Serializer.NonGeneric">
      <summary>
            Provides non-generic access to the default serializer.
            </summary>
    </member>
    <member name="M:ProtoBuf.Serializer.NonGeneric.DeepClone(System.Object)">
      <summary>
            Create a deep clone of the supplied instance; any sub-items are also cloned.
            </summary>
    </member>
    <member name="M:ProtoBuf.Serializer.NonGeneric.Serialize(System.IO.Stream,System.Object)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream.
            </summary>
      <param name="instance">The existing instance to be serialized (cannot be null).</param>
      <param name="dest">The destination stream to write to.</param>
    </member>
    <member name="M:ProtoBuf.Serializer.NonGeneric.Deserialize(System.Type,System.IO.Stream)">
      <summary>
            Creates a new instance from a protocol-buffer stream
            </summary>
      <param name="type">The type to be created.</param>
      <param name="source">The binary stream to apply to the new instance (cannot be null).</param>
      <returns>A new, initialized instance.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.NonGeneric.Merge(System.IO.Stream,System.Object)">
      <summary>Applies a protocol-buffer stream to an existing instance.</summary>
      <param name="instance">The existing instance to be modified (cannot be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <returns>The updated instance</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.NonGeneric.SerializeWithLengthPrefix(System.IO.Stream,System.Object,ProtoBuf.PrefixStyle,System.Int32)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream,
            with a length-prefix. This is useful for socket programming,
            as DeserializeWithLengthPrefix/MergeWithLengthPrefix can be used to read the single object back
            from an ongoing stream.
            </summary>
      <param name="instance">The existing instance to be serialized (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <param name="destination">The destination stream to write to.</param>
      <param name="fieldNumber">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
    </member>
    <member name="M:ProtoBuf.Serializer.NonGeneric.TryDeserializeWithLengthPrefix(System.IO.Stream,ProtoBuf.PrefixStyle,ProtoBuf.Serializer.TypeResolver,System.Object@)">
      <summary>
            Applies a protocol-buffer stream to an existing instance (or null), using length-prefixed
            data - useful with network IO.
            </summary>
      <param name="value">The existing instance to be modified (can be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <param name="resolver">Used to resolve types on a per-field basis.</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.NonGeneric.CanSerialize(System.Type)">
      <summary>
            Indicates whether the supplied type is explicitly modelled by the model
            </summary>
    </member>
    <member name="T:ProtoBuf.Serializer.GlobalOptions">
      <summary>
            Global switches that change the behavior of protobuf-net
            </summary>
    </member>
    <member name="P:ProtoBuf.Serializer.GlobalOptions.InferTagFromName">
      <summary>
        <see cref="P:ProtoBuf.Meta.RuntimeTypeModel.InferTagFromNameDefault" />
      </summary>
    </member>
    <member name="T:ProtoBuf.Serializer.TypeResolver">
      <summary>
            Maps a field-number to a type
            </summary>
    </member>
    <member name="F:ProtoBuf.Serializer.ListItemTag">
      <summary>
            The field number that is used as a default when serializing/deserializing a list of objects.
            The data is treated as repeated message with field number 1.
            </summary>
    </member>
    <member name="M:ProtoBuf.Serializer.GetProto``1">
      <summary>
            Suggest a .proto definition for the given type
            </summary>
      <typeparam name="T">The type to generate a .proto definition for</typeparam>
      <returns>The .proto definition as a string</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.DeepClone``1(``0)">
      <summary>
            Create a deep clone of the supplied instance; any sub-items are also cloned.
            </summary>
    </member>
    <member name="M:ProtoBuf.Serializer.Merge``1(System.IO.Stream,``0)">
      <summary>
            Applies a protocol-buffer stream to an existing instance.
            </summary>
      <typeparam name="T">The type being merged.</typeparam>
      <param name="instance">The existing instance to be modified (can be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.Deserialize``1(System.IO.Stream)">
      <summary>
            Creates a new instance from a protocol-buffer stream
            </summary>
      <typeparam name="T">The type to be created.</typeparam>
      <param name="source">The binary stream to apply to the new instance (cannot be null).</param>
      <returns>A new, initialized instance.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.Serialize``1(System.IO.Stream,``0)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream.
            </summary>
      <param name="instance">The existing instance to be serialized (cannot be null).</param>
      <param name="destination">The destination stream to write to.</param>
    </member>
    <member name="M:ProtoBuf.Serializer.ChangeType``2(``0)">
      <summary>
            Serializes a given instance and deserializes it as a different type;
            this can be used to translate between wire-compatible objects (where
            two .NET types represent the same data), or to promote/demote a type
            through an inheritance hierarchy.
            </summary>
      <remarks>No assumption of compatibility is made between the types.</remarks>
      <typeparam name="TFrom">The type of the object being copied.</typeparam>
      <typeparam name="TTo">The type of the new object to be created.</typeparam>
      <param name="instance">The existing instance to use as a template.</param>
      <returns>A new instane of type TNewType, with the data from TOldType.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.Serialize``1(System.Runtime.Serialization.SerializationInfo,``0)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied SerializationInfo.
            </summary>
      <typeparam name="T">The type being serialized.</typeparam>
      <param name="instance">The existing instance to be serialized (cannot be null).</param>
      <param name="info">The destination SerializationInfo to write to.</param>
    </member>
    <member name="M:ProtoBuf.Serializer.Serialize``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,``0)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied SerializationInfo.
            </summary>
      <typeparam name="T">The type being serialized.</typeparam>
      <param name="instance">The existing instance to be serialized (cannot be null).</param>
      <param name="info">The destination SerializationInfo to write to.</param>
      <param name="context">Additional information about this serialization operation.</param>
    </member>
    <member name="M:ProtoBuf.Serializer.Serialize``1(System.Xml.XmlWriter,``0)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied XmlWriter.
            </summary>
      <typeparam name="T">The type being serialized.</typeparam>
      <param name="instance">The existing instance to be serialized (cannot be null).</param>
      <param name="writer">The destination XmlWriter to write to.</param>
    </member>
    <member name="M:ProtoBuf.Serializer.Merge``1(System.Xml.XmlReader,``0)">
      <summary>
            Applies a protocol-buffer from an XmlReader to an existing instance.
            </summary>
      <typeparam name="T">The type being merged.</typeparam>
      <param name="instance">The existing instance to be modified (cannot be null).</param>
      <param name="reader">The XmlReader containing the data to apply to the instance (cannot be null).</param>
    </member>
    <member name="M:ProtoBuf.Serializer.Merge``1(System.Runtime.Serialization.SerializationInfo,``0)">
      <summary>
            Applies a protocol-buffer from a SerializationInfo to an existing instance.
            </summary>
      <typeparam name="T">The type being merged.</typeparam>
      <param name="instance">The existing instance to be modified (cannot be null).</param>
      <param name="info">The SerializationInfo containing the data to apply to the instance (cannot be null).</param>
    </member>
    <member name="M:ProtoBuf.Serializer.Merge``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,``0)">
      <summary>
            Applies a protocol-buffer from a SerializationInfo to an existing instance.
            </summary>
      <typeparam name="T">The type being merged.</typeparam>
      <param name="instance">The existing instance to be modified (cannot be null).</param>
      <param name="info">The SerializationInfo containing the data to apply to the instance (cannot be null).</param>
      <param name="context">Additional information about this serialization operation.</param>
    </member>
    <member name="M:ProtoBuf.Serializer.PrepareSerializer``1">
      <summary>
            Precompiles the serializer for a given type.
            </summary>
    </member>
    <member name="M:ProtoBuf.Serializer.CreateFormatter``1">
      <summary>
            Creates a new IFormatter that uses protocol-buffer [de]serialization.
            </summary>
      <typeparam name="T">The type of object to be [de]deserialized by the formatter.</typeparam>
      <returns>A new IFormatter to be used during [de]serialization.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.DeserializeItems``1(System.IO.Stream,ProtoBuf.PrefixStyle,System.Int32)">
      <summary>
            Reads a sequence of consecutive length-prefixed items from a stream, using
            either base-128 or fixed-length prefixes. Base-128 prefixes with a tag
            are directly comparable to serializing multiple items in succession
            (use the <see cref="F:ProtoBuf.Serializer.ListItemTag" /> tag to emulate the implicit behavior
            when serializing a list/array). When a tag is
            specified, any records with different tags are silently omitted. The
            tag is ignored. The tag is ignores for fixed-length prefixes.
            </summary>
      <typeparam name="T">The type of object to deserialize.</typeparam>
      <param name="source">The binary stream containing the serialized records.</param>
      <param name="style">The prefix style used in the data.</param>
      <param name="fieldNumber">The tag of records to return (if non-positive, then no tag is
            expected and all records are returned).</param>
      <returns>The sequence of deserialized objects.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.DeserializeWithLengthPrefix``1(System.IO.Stream,ProtoBuf.PrefixStyle)">
      <summary>
            Creates a new instance from a protocol-buffer stream that has a length-prefix
            on data (to assist with network IO).
            </summary>
      <typeparam name="T">The type to be created.</typeparam>
      <param name="source">The binary stream to apply to the new instance (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <returns>A new, initialized instance.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.DeserializeWithLengthPrefix``1(System.IO.Stream,ProtoBuf.PrefixStyle,System.Int32)">
      <summary>
            Creates a new instance from a protocol-buffer stream that has a length-prefix
            on data (to assist with network IO).
            </summary>
      <typeparam name="T">The type to be created.</typeparam>
      <param name="source">The binary stream to apply to the new instance (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <param name="fieldNumber">The expected tag of the item (only used with base-128 prefix style).</param>
      <returns>A new, initialized instance.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.MergeWithLengthPrefix``1(System.IO.Stream,``0,ProtoBuf.PrefixStyle)">
      <summary>
            Applies a protocol-buffer stream to an existing instance, using length-prefixed
            data - useful with network IO.
            </summary>
      <typeparam name="T">The type being merged.</typeparam>
      <param name="instance">The existing instance to be modified (can be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.SerializeWithLengthPrefix``1(System.IO.Stream,``0,ProtoBuf.PrefixStyle)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream,
            with a length-prefix. This is useful for socket programming,
            as DeserializeWithLengthPrefix/MergeWithLengthPrefix can be used to read the single object back
            from an ongoing stream.
            </summary>
      <typeparam name="T">The type being serialized.</typeparam>
      <param name="instance">The existing instance to be serialized (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <param name="destination">The destination stream to write to.</param>
    </member>
    <member name="M:ProtoBuf.Serializer.SerializeWithLengthPrefix``1(System.IO.Stream,``0,ProtoBuf.PrefixStyle,System.Int32)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream,
            with a length-prefix. This is useful for socket programming,
            as DeserializeWithLengthPrefix/MergeWithLengthPrefix can be used to read the single object back
            from an ongoing stream.
            </summary>
      <typeparam name="T">The type being serialized.</typeparam>
      <param name="instance">The existing instance to be serialized (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <param name="destination">The destination stream to write to.</param>
      <param name="fieldNumber">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
    </member>
    <member name="M:ProtoBuf.Serializer.TryReadLengthPrefix(System.IO.Stream,ProtoBuf.PrefixStyle,System.Int32@)">
      <summary>Indicates the number of bytes expected for the next message.</summary>
      <param name="source">The stream containing the data to investigate for a length.</param>
      <param name="style">The algorithm used to encode the length.</param>
      <param name="length">The length of the message, if it could be identified.</param>
      <returns>True if a length could be obtained, false otherwise.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.TryReadLengthPrefix(System.Byte[],System.Int32,System.Int32,ProtoBuf.PrefixStyle,System.Int32@)">
      <summary>Indicates the number of bytes expected for the next message.</summary>
      <param name="buffer">The buffer containing the data to investigate for a length.</param>
      <param name="index">The offset of the first byte to read from the buffer.</param>
      <param name="count">The number of bytes to read from the buffer.</param>
      <param name="style">The algorithm used to encode the length.</param>
      <param name="length">The length of the message, if it could be identified.</param>
      <returns>True if a length could be obtained, false otherwise.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.FlushPool">
      <summary>
            Releases any internal buffers that have been reserved for efficiency; this does not affect any serialization
            operations; simply: it can be used (optionally) to release the buffers for garbage collection (at the expense
            of having to re-allocate a new buffer for the next operation, rather than re-use prior buffers).
            </summary>
    </member>
    <member name="M:ProtoBuf.Serializers.IProtoSerializer.Write(System.Object,ProtoBuf.ProtoWriter)">
      <summary>
            Perform the steps necessary to serialize this data.
            </summary>
      <param name="value">The value to be serialized.</param>
      <param name="dest">The writer entity that is accumulating the output data.</param>
    </member>
    <member name="M:ProtoBuf.Serializers.IProtoSerializer.Read(System.Object,ProtoBuf.ProtoReader)">
      <summary>
            Perform the steps necessary to deserialize this data.
            </summary>
      <param name="value">The current value, if appropriate.</param>
      <param name="source">The reader providing the input data.</param>
      <returns>The updated / replacement value.</returns>
    </member>
    <member name="M:ProtoBuf.Serializers.IProtoSerializer.EmitWrite(ProtoBuf.Compiler.CompilerContext,ProtoBuf.Compiler.Local)">
      <summary>Emit the IL necessary to perform the given actions
            to serialize this data.
            </summary>
      <param name="ctx">Details and utilities for the method being generated.</param>
      <param name="valueFrom">The source of the data to work against;
            If the value is only needed once, then LoadValue is sufficient. If
            the value is needed multiple times, then note that a "null"
            means "the top of the stack", in which case you should create your
            own copy - GetLocalWithValue.</param>
    </member>
    <member name="M:ProtoBuf.Serializers.IProtoSerializer.EmitRead(ProtoBuf.Compiler.CompilerContext,ProtoBuf.Compiler.Local)">
      <summary>
            Emit the IL necessary to perform the given actions to deserialize this data.
            </summary>
      <param name="ctx">Details and utilities for the method being generated.</param>
      <param name="entity">For nested values, the instance holding the values; note
            that this is not always provided - a null means not supplied. Since this is always
            a variable or argument, it is not necessary to consume this value.</param>
    </member>
    <member name="P:ProtoBuf.Serializers.IProtoSerializer.ExpectedType">
      <summary>
            The type that this serializer is intended to work for.
            </summary>
    </member>
    <member name="P:ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue">
      <summary>
            Indicates whether a Read operation <em>replaces</em> the existing value, or
            <em>extends</em> the value. If false, the "value" parameter to Read is
            discarded, and should be passed in as null.
            </summary>
    </member>
    <member name="P:ProtoBuf.Serializers.IProtoSerializer.ReturnsValue">
      <summary>
            Now all Read operations return a value (although most do); if false no
            value should be expected.
            </summary>
    </member>
    <member name="T:ProtoBuf.ServiceModel.ProtoBehaviorAttribute">
      <summary>
            Uses protocol buffer serialization on the specified operation; note that this
            must be enabled on both the client and server.
            </summary>
    </member>
    <member name="T:ProtoBuf.ServiceModel.ProtoBehaviorExtension">
      <summary>
            Configuration element to swap out DatatContractSerilaizer with the XmlProtoSerializer for a given endpoint.
            </summary>
      <seealso cref="T:ProtoBuf.ServiceModel.ProtoEndpointBehavior" />
    </member>
    <member name="M:ProtoBuf.ServiceModel.ProtoBehaviorExtension.#ctor">
      <summary>
            Creates a new ProtoBehaviorExtension instance.
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.ProtoBehaviorExtension.CreateBehavior">
      <summary>
            Creates a behavior extension based on the current configuration settings.
            </summary>
      <returns>The behavior extension.</returns>
    </member>
    <member name="P:ProtoBuf.ServiceModel.ProtoBehaviorExtension.BehaviorType">
      <summary>
            Gets the type of behavior.
            </summary>
    </member>
    <member name="T:ProtoBuf.ServiceModel.ProtoEndpointBehavior">
      <summary>
            Behavior to swap out DatatContractSerilaizer with the XmlProtoSerializer for a given endpoint.
             <example>
            Add the following to the server and client app.config in the system.serviceModel section:
             <behaviors><endpointBehaviors><behavior name="ProtoBufBehaviorConfig"><ProtoBufSerialization /></behavior></endpointBehaviors></behaviors><extensions><behaviorExtensions><add name="ProtoBufSerialization" type="ProtoBuf.ServiceModel.ProtoBehaviorExtension, protobuf-net, Version=1.0.0.255, Culture=neutral, PublicKeyToken=257b51d87d2e4d67" /></behaviorExtensions></extensions>
            
            Configure your endpoints to have a behaviorConfiguration as follows:
            
             <service name="TK.Framework.Samples.ServiceModel.Contract.SampleService"><endpoint address="http://myhost:9003/SampleService" binding="basicHttpBinding" behaviorConfiguration="ProtoBufBehaviorConfig" bindingConfiguration="basicHttpBindingConfig" name="basicHttpProtoBuf" contract="ISampleServiceContract" /></service><client><endpoint address="http://myhost:9003/SampleService" binding="basicHttpBinding" bindingConfiguration="basicHttpBindingConfig" contract="ISampleServiceContract" name="BasicHttpProtoBufEndpoint" behaviorConfiguration="ProtoBufBehaviorConfig" /></client></example></summary>
    </member>
    <member name="T:ProtoBuf.ServiceModel.ProtoOperationBehavior">
      <summary>
            Describes a WCF operation behaviour that can perform protobuf serialization
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.ProtoOperationBehavior.#ctor(System.ServiceModel.Description.OperationDescription)">
      <summary>
            Create a new ProtoOperationBehavior instance
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.ProtoOperationBehavior.CreateSerializer(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Collections.Generic.IList{System.Type})">
      <summary>
            Creates a protobuf serializer if possible (falling back to the default WCF serializer)
            </summary>
    </member>
    <member name="P:ProtoBuf.ServiceModel.ProtoOperationBehavior.Model">
      <summary>
            The type-model that should be used with this behaviour
            </summary>
    </member>
    <member name="T:ProtoBuf.ServiceModel.XmlProtoSerializer">
      <summary>
            An xml object serializer that can embed protobuf data in a base-64 hunk (looking like a byte[])
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.XmlProtoSerializer.TryCreate(ProtoBuf.Meta.TypeModel,System.Type)">
      <summary>
            Attempt to create a new serializer for the given model and type
            </summary>
      <returns>A new serializer instance if the type is recognised by the model; null otherwise</returns>
    </member>
    <member name="M:ProtoBuf.ServiceModel.XmlProtoSerializer.#ctor(ProtoBuf.Meta.TypeModel,System.Type)">
      <summary>
            Creates a new serializer for the given model and type
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.XmlProtoSerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)">
      <summary>
            Ends an object in the output
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.XmlProtoSerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>
            Begins an object in the output
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.XmlProtoSerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>
            Writes the body of an object in the output
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.XmlProtoSerializer.IsStartObject(System.Xml.XmlDictionaryReader)">
      <summary>
            Indicates whether this is the start of an object we are prepared to handle
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.XmlProtoSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary>
            Reads the body of an object
            </summary>
    </member>
    <member name="T:ProtoBuf.SubItemToken">
      <summary>
            Used to hold particulars relating to nested objects. This is opaque to the caller - simply
            give back the token you are given at the end of an object.
            </summary>
    </member>
    <member name="T:ProtoBuf.WireType">
      <summary>
            Indicates the encoding used to represent an individual value in a protobuf stream
            </summary>
    </member>
    <member name="F:ProtoBuf.WireType.None">
      <summary>
            Represents an error condition
            </summary>
    </member>
    <member name="F:ProtoBuf.WireType.Variant">
      <summary>
            Base-128 variant-length encoding
            </summary>
    </member>
    <member name="F:ProtoBuf.WireType.Fixed64">
      <summary>
            Fixed-length 8-byte encoding
            </summary>
    </member>
    <member name="F:ProtoBuf.WireType.String">
      <summary>
            Length-variant-prefixed encoding
            </summary>
    </member>
    <member name="F:ProtoBuf.WireType.StartGroup">
      <summary>
            Indicates the start of a group
            </summary>
    </member>
    <member name="F:ProtoBuf.WireType.EndGroup">
      <summary>
            Indicates the end of a group
            </summary>
    </member>
    <member name="F:ProtoBuf.WireType.Fixed32">
      <summary>
            Fixed-length 4-byte encoding
            </summary>10
        </member>
    <member name="F:ProtoBuf.WireType.SignedVariant">
      <summary>
            This is not a formal wire-type in the "protocol buffers" spec, but
            denotes a variant integer that should be interpreted using
            zig-zag semantics (so -ve numbers aren't a significant overhead)
            </summary>
    </member>
  </members>
</doc>