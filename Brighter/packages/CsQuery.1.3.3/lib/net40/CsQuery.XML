<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CsQuery</name>
    </assembly>
    <members>
        <member name="T:CsQuery.Config">
            <summary>
            Global configuration and defaults
            </summary>
        </member>
        <member name="F:CsQuery.Config._DynamicObjectType">
            <summary>
            Internal to avoid Obsolete warning from DomRenderingOptions until we remove it
            </summary>
        </member>
        <member name="M:CsQuery.Config.GetDefaultOutputFormatter">
             <summary>
             Creates an OutputFormatter using the default options &amp; encoder.
             </summary>
            
             <returns>
             The default output formatter.
             </returns>
        </member>
        <member name="F:CsQuery.Config.StartupOptions">
            <summary>
            The default startup options. These are flags. 
            </summary>
        </member>
        <member name="P:CsQuery.Config.DomRenderingOptions">
            <summary>
            The default rendering options. These will be used when configuring a default OutputFormatter.
            Note that if the default OutputFormatter has been changed, this setting is not guaranteed to
            have any effect on output.
            </summary>
        </member>
        <member name="P:CsQuery.Config.HtmlParsingOptions">
            <summary>
            The default HTML parsing options. These will be used when parsing HTML without specifying any options. 
            </summary>
        </member>
        <member name="P:CsQuery.Config.HtmlEncoder">
            <summary>
            The default HTML encoder.
            </summary>
        </member>
        <member name="P:CsQuery.Config.OutputFormatter">
            <summary>
            The default OutputFormatter. The GetOutputFormatter property can also be used to provide a
            new instance whenever a default OutputFormatter is requested; setting that property will
            supersede any existing value of this property.
            </summary>
        </member>
        <member name="P:CsQuery.Config.GetOutputFormatter">
            <summary>
            A delegate that returns a new instance of the default output formatter to use for rendering.
            The OutputFormatter property can also be used to return a single instance of a reusable
            IOutputFormatter object; setting that property will supersede any existing value of this
            property.
            </summary>
        </member>
        <member name="P:CsQuery.Config.WebRequestFactory">
            <summary>
            A method that returns a new HttpWebRequest. This is mostly useful for providing an alternate
            implementation for testing.
            </summary>
        </member>
        <member name="P:CsQuery.Config.DocType">
            <summary>
            Default document type. This is the parsing mode that will be used when creating documents
            that have no DocType and no mode is explicitly defined.
            </summary>
        </member>
        <member name="P:CsQuery.Config.DynamicObjectType">
            <summary>
            Gets or sets the default dynamic object type. This is the type of object used by default when
            parsing JSON into an unspecified type.
            </summary>
        </member>
        <member name="P:CsQuery.Config.PseudoClassFilters">
             <summary>
             Provides access to the PseudoSelectors object, which allows registering new filters and accessing information
             and instances about existing filters.
             </summary>
            
             <value>
             The pseudo PseudoSelectors configuration object.
             </value>
        </member>
        <member name="T:CsQuery.StartupOptions">
            <summary>
            Flags for specifying initial configuration behavior of CsQuery.
            </summary>
        </member>
        <member name="F:CsQuery.StartupOptions.LookForExtensions">
            <summary>
            When true, CsQuery will scan the client assembly for extensions. Any classes 
            found in a namespace CsQuery.Extensions will be configured automatically. Default is true; 
            disable this flag to disable this behavior
            </summary>
        </member>
        <member name="T:CsQuery.CQ">
             <summary>
             The CQ object is analogus to the basic jQuery object. It has instance methods that mirror the
             methods of a jQuery object, and static methods that mirror utility methods such as "$.map".
             
             Most methods return a new jQuery object that is bound to the same document, but a different
             selection set. In a web browser, you genally only have a single context (the browser DOM).
             Here, you could have many, though most of the time you will only be working with one.
             </summary>
            
             <remarks>
             Document is an IDomDocument object, referred to sometimes as the "DOM", and represents the
             DOM that this CsQuery objects applies to. When CQ methods are run, the resulting CQ object
             will refer to the same Document as the original. Selectors always run against this DOM.
             
             Creating a CQ object from something that is not bound to a DOM (such as an HTML string, or an
             unbound IDomObject or IDomElement object) will result in a new Document being created, that
             is unrelated to any other active objects you may have. Adding unbound elements using methods
             such as Append will cause them to become part of the target DOM. They will be removed from
             whatever DOM they previously belonged to. (Elements cannot be part of more than one DOM). If
             you don't want to remove something while adding to a CQ object from a different DOM, then you
             should clone the elements.
             
             Selection is a set of DOM nodes matching the selector.
             
             Elements is a set of IDomElement nodes matching the selector. This is a subset of Selection -
             it excludes non-Element nodes.
             
             The static Create() methods create new DOMs. To create a CsQuery object based on an existing
             dom, use new CQ() (similar to jQuery() methods).
             </remarks>
            
             <implementation>
             Most of the jQuery methods are implemented in separate files under the "CQ_jQuery" folder. 
             Methods which are not part of the jQuery API are found under the "CQ_CsQuery" folder.
             </implementation>
        </member>
        <member name="M:CsQuery.CQ.HasAttr(System.String)">
             <summary>
             Test for the existence of an attribute.
             </summary>
            
             <param name="name">
             The name of the attribute to get.
             </param>
            
             <returns>
             A string of the attribute value, or null if the attribute does not exist.
             </returns>
            
        </member>
        <member name="M:CsQuery.CQ.AttrReplace(System.String,System.String,System.String)">
             <summary>
             Perform a substring replace on the contents of the named attribute in each item in the
             selection set.
             </summary>
            
             <param name="name">
             The attribute name.
             </param>
             <param name="replaceWhat">
             The string to match.
             </param>
             <param name="replaceWith">
             The value to replace each occurrence with.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Version">
             <summary>
             Return the current assembly's version.
             </summary>
            
             <returns>
             A string
             </returns>
        </member>
        <member name="M:CsQuery.CQ.CreateFromUrl(System.String,CsQuery.Web.ServerConfig)">
             <summary>
             Creates a new DOM from an HTML file.
             </summary>
            
             <param name="url">
             The URL of the remote server.
             </param>
             <param name="options">
             The options to use when creating the reqest.
             </param>
            
             <returns>
             A CQ object composed from the HTML response from the server.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.CreateFromUrlAsync(System.String,CsQuery.Web.ServerConfig)">
             <summary>
             Start an asynchronous request to an HTTP server, returning a promise that will resolve when
             the request is completed or rejected.
             </summary>
            
             <param name="url">
             The URL of the remote server
             </param>
             <param name="options">
             The options to use when creating the reqest
             </param>
            
             <returns>
             A promise that resolves when the request completes
             </returns>
        </member>
        <member name="M:CsQuery.CQ.CreateFromUrlAsync(System.String,System.Action{CsQuery.Web.ICsqWebResponse},System.Action{CsQuery.Web.ICsqWebResponse},CsQuery.Web.ServerConfig)">
             <summary>
             Start an asynchronous request to an HTTP server.
             </summary>
            
             <param name="url">
             The URL of the remote server.
             </param>
             <param name="callbackSuccess">
             A delegate to invoke upon successful completion of the request.
             </param>
             <param name="callbackFail">
             A delegate to invoke upon failure.
             </param>
             <param name="options">
             Options to use when creating the request.
             </param>
            
             <returns>
             A unique identifier which will be passed through to the response and can be used to assocate
             a response with this request.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.CreateFromUrlAsync(System.String,System.Int32,System.Action{CsQuery.Web.ICsqWebResponse},System.Action{CsQuery.Web.ICsqWebResponse},CsQuery.Web.ServerConfig)">
             <summary>
             Start an asynchronous request to an HTTP server.
             </summary>
            
             <param name="url">
             The URL of the remote server.
             </param>
             <param name="id">
             An identifier that will be passed through to the response.
             </param>
             <param name="callbackSuccess">
             A delegate to invoke upon successful completion of the request.
             </param>
             <param name="callbackFail">
             A delegate to invoke upon failure.
             </param>
             <param name="options">
             Options to use when creating the request.
             </param>
        </member>
        <member name="M:CsQuery.CQ.WaitForAsyncEvents(System.Int32)">
             <summary>
             Waits until all async events have completed. Use for testing primarily as a web app should
             not stop normally.
             </summary>
            
             <param name="timeout">
             The maximum number of milliseconds to wait.
             </param>
            
             <returns>
             true if all events were cleared in the allotted time, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.WhenAll(CsQuery.Promises.IPromise[])">
             <summary>
             Return a new promise that resolves when all the promises passed in are resolved.
             </summary>
            
             <param name="promises">
             One or more promises
             </param>
            
             <returns>
             A new promise
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Create">
             <summary>
             Create an empty CQ object.
             </summary>
            
             <returns>
             A new CQ object
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Create(System.String)">
             <summary>
             Create a new CQ object from a single element. Unlike the constructor method
             <see cref="T:CsQuery.CQ"/> this new objet is not bound to any context from the element.
             </summary>
            
             <param name="html">
             A string containing HTML.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Create(System.Char[])">
             <summary>
             Create a new CQ object from an HTML character array. Node: this method is obsolete; it may be
             removed in a future release. Character arrays were supported in prior versions because this
             was how all data was converted internally; this is not the case any more, and it's an
             unlikely format for typical input. Use string or stream methods instead.
             </summary>
            
             <param name="html">
             The HTML source for the document.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Create(CsQuery.IDomObject)">
             <summary>
             Create a new CQ object from a single element. Unlike the constructor method <see cref="T:CsQuery.CQ"/>
             this new objet is not bound to any context from the element.
             </summary>
            
             <param name="element">
             The element to wrap
             </param>
            
             <returns>
             A new CQ object
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Create(System.String,CsQuery.HtmlParsingMode,CsQuery.HtmlParsingOptions,CsQuery.DocType)">
             <summary>
             Creeate a new CQ object from an HTML string.
             </summary>
            
             <param name="html">
             A string containing HTML.
             </param>
             <param name="parsingMode">
             (optional) the mode.
             </param>
             <param name="parsingOptions">
             (optional) options for controlling the parsing.
             </param>
             <param name="docType">
             (optional) type of the document.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Create(System.String,System.Object)">
             <summary>
             Create a new CQ from an HTML fragment, and use quickSet to create attributes (and/or css)
             </summary>
            
             <param name="html">
             A string of HTML.
             </param>
             <param name="quickSet">
             an object containing CSS properties and attributes to be applied to the resulting fragment.
             </param>
            
             <returns>
             A new CQ object
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Create(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Creeate a new CQ object from a squence of elements, or another CQ object. The new object will
             contain clones of the original objects; they are no longer bound to their owning context. If
             you want to wrap these elements and retain their context, use "new CQ(...)" instead.
             </summary>
            
             <param name="elements">
             A sequence of elements.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Create(System.IO.Stream)">
             <summary>
             Create a new CQ object from a stream of HTML text, attempting to automatically detect the
             character set encoding from BOM. 
             </summary>
            
             <param name="html">
             An open Stream.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Create(System.IO.Stream,System.Text.Encoding)">
             <summary>
             Create a new CQ from a stream of HTML text in the specified encoding.
             </summary>
            
             <param name="html">
             An open Stream.
             </param>
             <param name="encoding">
             The character set encoding.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Create(System.IO.TextReader)">
             <summary>
             Create a new CQ object from a TextReader containing HTML.
             </summary>
            
             <param name="html">
             A TextReader containing HTML.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Create(System.IO.Stream,System.Text.Encoding,CsQuery.HtmlParsingMode,CsQuery.HtmlParsingOptions,CsQuery.DocType)">
             <summary>
             Create a new CQ object from a stream of HTML, treating the HTML as a content document.
             </summary>
            
             <param name="html">
             An open Stream.
             </param>
             <param name="encoding">
             The character set encoding.
             </param>
             <param name="parsingMode">
             (optional) the mode.
             </param>
             <param name="parsingOptions">
             (optional) options for controlling the parsing.
             </param>
             <param name="docType">
             (optional) type of the document.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Create(System.IO.TextReader,CsQuery.HtmlParsingMode,CsQuery.HtmlParsingOptions,CsQuery.DocType)">
             <summary>
             Create a new CQ object from a TextReader containg HTML
             </summary>
            
             <param name="html">
             A string of HTML.
             </param>
             <param name="parsingMode">
             (optional) the mode.
             </param>
             <param name="parsingOptions">
             (optional) options for controlling the parsing.
             </param>
             <param name="docType">
             (optional) type of the document.
             </param>
            
             <returns>
             The new fragment.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.CreateFragment(System.String)">
             <summary>
             Create a new fragment from a TextReader containing HTML text.
             </summary>
            
             <param name="html">
             A string of HTML.
             </param>
            
             <returns>
             The new fragment.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.CreateFragment(System.String,System.String)">
             <summary>
             Creeate a new fragment from HTML text, in the context of a specific HTML tag.
             </summary>
            
             <param name="html">
             A string of HTML.
             </param>
             <param name="context">
             The HTML tag name which is the context
             </param>
            
             <returns>
             The new fragment.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.CreateFragment(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Create a new CQ object from a sequence of elements, or another CQ object.
             </summary>
            
             <param name="elements">
             A sequence of elements.
             </param>
            
             <returns>
             The new fragment.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.CreateDocument(System.String)">
             <summary>
             Creeate a new DOM from HTML text using full HTML5 tag generation.
             </summary>
            
             <param name="html">
             A string of HTML
             </param>
            
             <returns>
             The new document.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.CreateDocument(System.IO.Stream)">
             <summary>
             Creates a new DOM from a stream containing HTML
             </summary>
            
             <param name="html">
             An open Stream
             </param>
            
             <returns>
             The new document.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.CreateDocument(System.IO.Stream,System.Text.Encoding)">
             <summary>
             Creeate a new DOM from HTML text using full HTML5 tag generation.
             </summary>
            
             <param name="html">
             An open Stream.
             </param>
             <param name="encoding">
             The character set encoding.
             </param>
            
             <returns>
             The new document.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.CreateDocument(System.IO.TextReader)">
             <summary>
             Creates a new DOM from a stream containing HTML
             </summary>
            
             <param name="html">
             A n open Stream
             </param>
            
             <returns>
             The new document.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.CreateDocumentFromFile(System.String)">
             <summary>
             Creates a new DOM from an HTML file.
             </summary>
            
             <param name="htmlFile">
             The full path to the file
             </param>
            
             <returns>
             The new document from file.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.CreateFromFile(System.String)">
             <summary>
             Creates a new DOM from an HTML file.
             </summary>
            
             <param name="htmlFile">
             The full path to the file
             </param>
            
             <returns>
             The new from file.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Save(System.String,CsQuery.DomRenderingOptions)">
             <summary>
             Save the current Document to an HTML file.
             </summary>
            
             <returns>
             A new CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.MakeRoot">
             <summary>
             The current selection set will become the only members of the document in this object. This
             is a destructive method that will completely replace the document.
             </summary>
            
             <returns>
             The current CQ object
             </returns>
        </member>
        <member name="M:CsQuery.CQ.MakeRoot(System.String)">
             <summary>
             The elements identified by the selector will become the only members of the document in this
             object. This is a destructive method that will completely replace the document.
             </summary>
            
             <param name="selector">
             A selector that determines which elements will become the new document.
             </param>
            
             <returns>
             The current CQ object
             </returns>
        </member>
        <member name="M:CsQuery.CQ.GetTableColumn">
             <summary>
             Given a table header or cell, returns all members of the column in the table. This will most
             likely not work as you would expect if there are colspan cells.
             </summary>
            
             <returns>
             A new CQ object containing all the th and td cells in the specified column.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.GetTableColumn(System.Int32)">
             <summary>
             Selects then zero-based nth cells  (th and td) from all rows in any matched tables. This will
             most likely no do what you expect if the table has colspan cells.
             </summary>
            
             <param name="column">
             The zero-based index of the column to target.
             </param>
            
             <returns>
             A new CQ object containing all the th and td cells in the specified column.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.SetSelected(System.String,System.IConvertible)">
             <summary>
             Set a specific item, identified by the 2nd parameter, of a named option group, identified by
             the first parameter, as selected.
             </summary>
            
             <param name="groupName">
             The value of the name attribute identifying this option group.
             </param>
             <param name="value">
             The option value to set as selected
             </param>
            
             <returns>
             The current CQ object
             </returns>
        </member>
        <member name="M:CsQuery.CQ.IncludeWhen(System.Boolean)">
             <summary>
             Conditionally includes a selection. This is the equivalent of calling Remove() only when
             "include" is false.
             </summary>
            
             <param name="include">
             true to include, false to exclude.
             </param>
            
             <returns>
             The current CQ object
             </returns>
        </member>
        <member name="M:CsQuery.CQ.KeepOne(System.Boolean,System.String,System.String)">
             <summary>
             Given two selectors, shows the content of one, and removes the content of the other, based on
             the boolean parameter.
             </summary>
            
             <param name="which">
             A boolean value to indicate whether the first or second selector should be used to determine
             the elements that are kept. When true, the first is kept and the 2nd removed. When false, the
             opposite happens.
             </param>
             <param name="trueSelector">
             The true selector.
             </param>
             <param name="falseSelector">
             The false selector.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.KeepOne(System.Boolean,CsQuery.CQ,CsQuery.CQ)">
             <summary>
             Given two CQ objects, shows the one, and removes the the other from the document, based on
             the boolean parameter.
             </summary>
            
             <param name="which">
             A boolean value to indicate whether the first or second selector should be used to determine
             the elements that are kept. When true, the first is kept and the 2nd removed. When false, the
             opposite happens.
             </param>
             <param name="trueContent">
             The true content.
             </param>
             <param name="falseContent">
             The false content.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.KeepOne(System.Int32,System.String[])">
             <summary>
             Removes all but one of a list selectors/objects based on the zero-based index of the first
             parameter. The remaining one is explicitly shown.
             </summary>
            
             <param name="which">
             An integer representing the zero-based index of the content from the list of items passed
             which should be kept and shown.
             </param>
             <param name="content">
             A variable-length parameters list containing content.
             </param>
            
             <returns>
             The current CQ object
             </returns>
        </member>
        <member name="M:CsQuery.CQ.KeepOne(System.Int32,CsQuery.CQ[])">
             <summary>
             Removes all but one of a list selectors/objects based on the zero-based index of the first
             parameter. The remaining one is explicitly shown.
             </summary>
            
             <param name="which">
             An integer representing the zero-based index of the content from the list of items passed
             which should be kept and shown.
             </param>
             <param name="content">
             A variable-length parameters list containing content.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.FirstElement">
             <summary>
             The first IDomElement (e.g. not text/special nodes) in the selection set, or null if none
             exists.
             </summary>
            
             <returns>
             An IDomElement object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.EnsureCsQuery(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Return a CsQuery object wrapping the enumerable passed, or the object itself if it's already
             a CsQuery obect. Unlike CsQuery(context), this will not create a new CsQuery object from an
             existing one.
             </summary>
            
             <param name="elements">
             A sequence of IDomObject elements.
             </param>
            
             <returns>
             A new CQ object when the source is disconnect elements, or the CQ object passed.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.SelectionHtml">
             <summary>
             Returns the HTML for all selected documents, separated by commas. No inner html or children
             are included.
             </summary>
            
             <remarks>
             This method does not return valid HTML, but rather a single string containing an abbreviated
             version of the markup for only documents in the selection set, separated by commas. This is
             intended for inspecting a selection set, for example while debugging.
             </remarks>
            
             <returns>
             A string of HTML.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.SelectionHtml(System.Boolean)">
             <summary>
             Returns the HTML for all selected documents, separated by commas.
             </summary>
            
             <remarks>
             This method does not return valid HTML, but rather a single string containing an abbreviated
             version of the markup for only documents in the selection set, separated by commas. This is
             intended for inspecting a selection set, for example while debugging.
             </remarks>
            
             <param name="includeInner">
             When true, the complete HTML (e.g. including children) is included for each element.
             </param>
            
             <returns>
             A string of HTML.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.NewCqInDomain">
             <summary>
             Create a new, empty CsQuery object bound to this domain.
             </summary>
            
             <returns>
             A new CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.NewCqUnbound">
             <summary>
             Creates a new instance of the CQ object. This should be used inside CQ to create a new object
             under all circumstances so it can be overridden by derived classes.
             </summary>
            
             <returns>
             A new CQ object
             </returns>
        </member>
        <member name="M:CsQuery.CQ.RenderSelection">
             <summary>
             Renders just the selection set completely.
             </summary>
            
             <remarks>
             This method will only render the HTML for elements in the current selection set. To render
             the entire document for output, use the Render method.
             </remarks>
            
             <returns>
             A string of HTML.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Render">
             <summary>
             Renders the document to a string.
             </summary>
            
             <remarks>
             This method renders the entire document, regardless of the current selection. This is the
             primary method used for rendering the final HTML of a document after manipulation; it
             includes the &lt;doctype&gt; and &lt;html&gt; nodes.
             </remarks>
            
             <returns>
             A string of HTML.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Render(CsQuery.DomRenderingOptions)">
             <summary>
             Render the complete DOM with specific options.
             </summary>
            
             <param name="options">
             (optional) option flags that control how the output is rendered.
             </param>
            
             <returns>
             A string of HTML.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Render(CsQuery.Output.IOutputFormatter)">
             <summary>
             Render the entire document, parsed through a formatter passed using the parameter.
             </summary>
            
             <remarks>
             CsQuery by default does not format the output at all, but rather returns exactly the same
             contents of each element from the source, including all extra whitespace. If you want to
             produce output that is formatted in a specific way, you can create an OutputFormatter for
             this purpose. The included <see cref="T:CsQuery.OutputFormatters.FormatPlainText"/> does some
             basic formatting by removing extra whitespace and adding newlines in a few useful places.
             (This formatter is pretty basic). A formatter to perform indenting to create human-readable
             output would be useful and will be included in some future release.
             </remarks>
            
             <param name="formatter">
             An object that parses a CQ object and returns a string of HTML.
             </param>
            
             <returns>
             A string of HTML.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Render(CsQuery.Output.IOutputFormatter,System.IO.TextWriter)">
             <summary>
             Render the entire document, parsed through a formatter passed using the parameter, to the
             specified writer.
             </summary>
            
             <param name="formatter">
             The formatter.
             </param>
             <param name="writer">
             The writer.
             </param>
        </member>
        <member name="M:CsQuery.CQ.Render(System.Text.StringBuilder,CsQuery.DomRenderingOptions)">
             <summary>
             Render the entire document, parsed through a formatter passed using the parameter, with the
             specified options.
             </summary>
            
             <param name="sb">
             The sb.
             </param>
             <param name="options">
             (optional) options for controlling the operation.
             </param>
        </member>
        <member name="M:CsQuery.CQ.Append(System.String[])">
             <summary>
             Insert content, specified by the parameter, to the end of each element in the set of matched
             elements.
             </summary>
            
             <param name="content">
             One or more HTML strings to append.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/append/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Append(CsQuery.IDomObject)">
             <summary>
             Insert the element, specified by the parameter, to the end of each element in the set of
             matched elements.
             </summary>
            
             <param name="element">
             The element to exclude.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/append/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Append(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Insert the sequence of elements, specified by the parameter, to the end of each element in
             the set of matched elements.
             </summary>
            
             <param name="elements">
             The elements to be excluded.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/append/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Append(System.Func{System.Int32,System.String,System.String})">
             <summary>
             Appends a func.
             </summary>
            
             <param name="func">
             A delegate to a function that returns an HTML string to insert at the end
             of each element in the set of matched elements. Receives the index position of the element in
             the set and the old HTML value of the element as arguments. Within the function, this refers
             to the current element in the set.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/append/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Append(System.Func{System.Int32,System.String,CsQuery.IDomElement})">
             <summary>
             Insert content, specified by the parameter, to the end of each element in the set of matched
             elements.
             </summary>
            
             <param name="func">
             A delegate to a function that returns an IDomElement to insert at the end of each element in
             the set of matched elements. Receives the index position of the element in the set and the
             old HTML value of the element as arguments. Within the function, this refers to the current
             element in the set.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/append/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Append(System.Func{System.Int32,System.String,System.Collections.Generic.IEnumerable{CsQuery.IDomElement}})">
             <summary>
             Insert content, specified by the parameter, to the end of each element in the set of matched
             elements.
             </summary>
            
             <param name="func">
             A delegate to a function that returns a sequence of IDomElement objects to insert at the end
             of each element in the set of matched elements. Receives the index position of the element in
             the set and the old HTML value of the element as arguments. Within the function, this refers
             to the current element in the set.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/append/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Append(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},CsQuery.CQ@)">
             <summary>
             Append each element passed by parameter to each element in the selection set. The inserted
             elements are returned.
             </summary>
            
             <param name="elements">
             The elements to be excluded.
             </param>
             <param name="insertedElements">
             A CQ object containing all the elements added.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.GetTrueTarget(CsQuery.IDomElement)">
             <summary>
             Deals with tbody as the target of appends.
             </summary>
            
             <param name="target">
             The true target.
             </param>
            
             <returns>
             Either the element itself, or the TBODY element if the target was a TABLE
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Add(System.String)">
             <summary>
             Add elements to the set of matched elements from a selector or an HTML fragment.
             </summary>
            
             <param name="selector">
             A CSS selector.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/add/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Add(CsQuery.IDomObject)">
             <summary>
             Add an element to the set of matched elements.
             </summary>
            
             <param name="element">
             The element to add.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/add/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Add(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Add elements to the set of matched elements.
             </summary>
            
             <param name="elements">
             The elements to add.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/add/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Add(System.String,System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Add elements to the set of matched elements from a selector or an HTML fragment.
             </summary>
            
             <param name="selector">
             A string representing a selector expression to find additional elements to add to the set of
             matched elements.
             </param>
             <param name="context">
             The point in the document at which the selector should begin matching; similar to the context
             argument of the $(selector, context) method.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/add/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Add(System.String,CsQuery.IDomObject)">
             <summary>
             Add elements to the set of matched elements from a selector or an HTML fragment.
             </summary>
            
             <param name="selector">
             A string representing a selector expression to find additional elements to add to the set of
             matched elements.
             </param>
             <param name="context">
             The point in the document at which the selector should begin matching; similar to the context
             argument of the $(selector, context) method.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/add/
             </url>
        </member>
        <member name="M:CsQuery.CQ.AddClass(System.String)">
             <summary>
             Adds the specified class, or each class in a space-separated list, to each of the set of
             matched elements.
             </summary>
            
             <param name="className">
             One or more class names to be added to the class attribute of each matched element.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/addclass/
             </url>
        </member>
        <member name="M:CsQuery.CQ.ToggleClass(System.String)">
             <summary>
             Add or remove one or more classes from each element in the set of matched elements, depending
             on either the class's presence.
             </summary>
            
             <param name="classes">
             One or more class names (separated by spaces) to be toggled for each element in the matched
             set.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/toggleClass/
             </url>
        </member>
        <member name="M:CsQuery.CQ.ToggleClass(System.String,System.Boolean)">
             <summary>
             Add or remove one or more classes from each element in the set of matched elements, depending
             on the value of the switch argument.
             </summary>
            
             <param name="classes">
             One or more class names (separated by spaces) to be toggled for each element in the matched
             set.
             </param>
             <param name="addRemoveSwitch">
             a boolean value that determine whether the class should be added (true) or removed (false).
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/toggleClass/
             </url>
        </member>
        <member name="M:CsQuery.CQ.HasClass(System.String)">
             <summary>
             Determine whether any of the matched elements are assigned the given class.
             </summary>
            
             <param name="className">
             The class name to search for.
             </param>
            
             <returns>
             true if the class exists on any of the elements, false if not.
             </returns>
            
             <url>
             http://api.jquery.com/hasclass/
             </url>
        </member>
        <member name="M:CsQuery.CQ.AppendTo(System.String[])">
             <summary>
             Insert every element in the set of matched elements to the end of each element in the targets.
             </summary>
            
             <remarks>
             The .Append() and .appendTo() methods perform the same task. The major difference is in the
             syntax-specifically, in the placement of the content and target. With .Append(), the selector
             expression preceding the method is the container into which the content is inserted. With
             .AppendTo(), on the other hand, the content precedes the method, either as a selector
             expression or as markup created on the fly, and it is inserted into the target container.
             </remarks>
            
             <param name="target">
             A selector that results in HTML to which the selection set will be appended.
             </param>
            
             <returns>
              A CQ object containing all the elements added
             </returns>
            
             <url>
             http://api.jquery.com/appendTo/
             </url>
        </member>
        <member name="M:CsQuery.CQ.AppendTo(CsQuery.IDomObject)">
             <summary>
             Insert every element in the set of matched elements to the end of the target.
             </summary>
            
             <param name="target">
             The element to which the elements in the current selection set should be appended.
             </param>
            
             <returns>
             A new CQ object containing the target elements.
             </returns>
            
             <url>
             http://api.jquery.com/appendTo/
             </url>
        </member>
        <member name="M:CsQuery.CQ.AppendTo(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Insert every element in the set of matched elements to the end of the target.
             </summary>
            
             <param name="targets">
             The targets to which the current selection will be appended.
             </param>
            
             <returns>
             A new CQ object containing the target elements.
             </returns>
            
             <url>
             http://api.jquery.com/appendTo/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Attr(System.String)">
             <summary>
             Get the value of an attribute for the first element in the set of matched elements.
             </summary>
            
             <param name="name">
             The name of the attribute to get.
             </param>
            
             <returns>
             A string of the attribute value, or null if the attribute does not exist.
             </returns>
            
             <url>
             http://api.jquery.com/attr/#attr1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Attr``1(System.String)">
             <summary>
             Get the value of an attribute for the first element in the set of matched elements.
             </summary>
            
             <remarks>
             This is a CsQuery extension. Attribute values are always stored as strings internally, in
             line with their being created and represented as HTML string data. This method simplifies
             converting to another type such as integer for attributes that represent strongly-type values.
             </remarks>
            
             <typeparam name="T">
             Type to which the attribute value should be converted.
             </typeparam>
             <param name="name">
             The name of the attribute to get.
             </param>
            
             <returns>
             A strongly-typed value representing the attribute, or default(T) if the attribute does not
             exist.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Attr(System.String,System.IConvertible)">
             <summary>
             Set one or more attributes for the set of matched elements.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when attemting to change the type of an INPUT element that already exists on the DOM.
             </exception>
            
             <param name="name">
             THe attribute name.
             </param>
             <param name="value">
             The value to set.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.AttrSet(System.Object)">
             <summary>
             Map an object to a set of attributes name/values and set those attributes on each object in
             the selection set.
             </summary>
            
             <remarks>
             The jQuery API uses the same method "Attr" for a wide variety of purposes. For Attr and Css
             methods, the overloads that we would like to use to match all the ways the method is used in
             the jQuery API don't work out in the strongly-typed world of C#. To resolved this, the
             methods AttrSet and CssSet were created for methods where an object or a string of JSON are
             passed (a map) to set multiple methods.
             </remarks>
            
             <param name="map">
             An object whose properties names represent attribute names, or a string that is valid JSON
             data that represents an object of attribute names/values.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/attr/#attr2
             </url>
        </member>
        <member name="M:CsQuery.CQ.AttrSet(System.Object,System.Boolean)">
             <summary>
             Map an object to attributes, optionally using "quickSet" to set other properties in addition
             to the attributes.
             </summary>
            
             <param name="map">
             An object whose properties names represent attribute names, or a string that is valid JSON
             data that represents an object of attribute names/values.
             </param>
             <param name="quickSet">
             If true, set any css from a sub-map object passed with "css", html from "html", inner text
             from "text", and css from "width" and "height" properties.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.RemoveAttr(System.String)">
             <summary>
             Remove an attribute from each element in the set of matched elements.
             </summary>
            
             <param name="name">
             The attribute name to remove.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/removeAttr/
             </url>
        </member>
        <member name="M:CsQuery.CQ.RemoveProp(System.String)">
             <summary>
             Remove a property from the set of matched elements.
             </summary>
            
             <remarks>
             In CsQuery, there is no distinction between an attribute and a property. In a real browser
             DOM, this method will actually remove a property from an element, causing consequences such
             as the inability to set it later. In CsQuery, the DOM is stateless and is simply a
             representation of the HTML that created it. This method is included for compatibility, but
             causes no special behavior.
             </remarks>
            
             <param name="name">
             The property (attribute) name to remove.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/removeProp/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Before(System.String)">
             <summary>
             Insert content, specified by the parameter, before each element in the set of matched
             elements.
             </summary>
            
             <param name="selector">
             A CSS selector that determines the elements to insert.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/before/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Before(CsQuery.IDomObject)">
             <summary>
             Insert the element, specified by the parameter, before each element in the set of matched
             elements.
             </summary>
            
             <param name="element">
             The element to insert.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/before/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Before(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Insert each element, specified by the parameter, before each element in the set of matched
             elements.
             </summary>
            
             <param name="elements">
             The elements to insert.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/before/
             </url>
        </member>
        <member name="M:CsQuery.CQ.After(System.String)">
             <summary>
             Insert content, specified by the parameter, after each element in the set of matched elements.
             </summary>
            
             <param name="selector">
             A CSS selector that determines the elements to insert.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/after/
             </url>
        </member>
        <member name="M:CsQuery.CQ.After(CsQuery.IDomObject)">
             <summary>
             Insert an element, specified by the parameter, after each element in the set of matched
             elements.
             </summary>
            
             <param name="element">
             The element to insert.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/after/
             </url>
        </member>
        <member name="M:CsQuery.CQ.After(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Insert elements, specified by the parameter, after each element in the set of matched
             elements.
             </summary>
            
             <param name="elements">
             The elements to insert.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/after/
             </url>
        </member>
        <member name="M:CsQuery.CQ.InsertAtOffset(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},System.Int32)">
             <summary>
             Inserts an element at the specified offset from a target. Helper method for Before and After.
             </summary>
            
             <param name="target">
             Target for the.
             </param>
             <param name="offset">
             The offset.
             </param>
            
             <returns>
             .
             </returns>
        </member>
        <member name="M:CsQuery.CQ.InsertAtOffset(CsQuery.CQ,System.Int32,CsQuery.CQ@)">
             <summary>
             Insert every element in the selection at or after the index of each target (adding offset to
             the index). If there is more than one target, the a clone is made of the selection for the
             2nd and later targets.
             </summary>
            
             <remarks>
             This is a helper for Before and After. There is special handling when the target is not part
             of a DOM. Instead of altering the DOM, this method will alter the selection set, and return a
             CQ object that contains the new sequence. Normally, it would return the same CQ object (but
             alter the DOM).
             </remarks>
            
             <param name="target">
             The target element.
             </param>
             <param name="offset">
             The offset from the target at which to begin inserting.
             </param>
             <param name="insertedElements">
             [out] The inserted elements.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Closest(System.String)">
             <summary>
             Get the first ancestor element that matches the selector, beginning at the current element
             and progressing up through the DOM tree.
             </summary>
            
             <param name="selector">
             A CSS selector.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/closest/#closest1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Closest(CsQuery.IDomObject)">
             <summary>
             Return the element passed by parameter, if it is an ancestor of any elements in the selection
             set.
             </summary>
            
             <param name="element">
             The element to target.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/closest/#closest1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Closest(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Get the first ancestor element of any element in the seleciton set that is also one of the
             elements in the sequence passed by parameter, beginning at the current element and
             progressing up through the DOM tree.
             </summary>
            
             <param name="elements">
             The elements to target.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/closest/#closest1
             </url>
        </member>
        <member name="M:CsQuery.CQ.AndSelf">
             <summary>
             Add the previous set of elements on the stack to the current set.
             </summary>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/andself/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Children(System.String)">
             <summary>
             Get the children of each element in the set of matched elements, optionally filtered by a
             selector.
             </summary>
            
             <param name="filter">
             A selector that must match each element returned.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/children/
             </url>
        </member>
        <member name="M:CsQuery.CQ.SelectionChildren">
             <summary>
             Return all children of all selected elements. Helper method for Children()
             </summary>
            
             <returns>
             A new sequence.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Clone">
             <summary>
             Create a deep copy of the set of matched elements. Clone makes copies of the actual elements
             in a selection set; it doesn't simply make a copy of a selector's results.
             </summary>
            
             <returns>
             A new CQ object that contains a clone of each element in the original selection set.
             </returns>
            
             <url>
             http://api.jquery.com/clone/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Contents">
             <summary>
             Get the children of each element in the set of matched elements, including text and comment
             nodes.
             </summary>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/contents/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Parent(System.String)">
             <summary>
             Get the parent of each element in the current set of matched elements, optionally filtered by
             a selector.
             </summary>
            
             <param name="selector">
             A string containing a selector expression to match elements against.
             </param>
            
             <returns>
             A new CQ object
             </returns>
            
             <url>
             http://api.jquery.com/parents/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Extend(System.Object,System.Object[])">
             <summary>
             Map each property of the objects in sources to the target object.  Returns an expando object
             (either the target object, if it's an expando object, or a new expando object)
             </summary>
            
             <param name="target">
             .
             </param>
             <param name="sources">
             .
             </param>
            
             <returns>
             .
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Extend(System.Boolean,System.Object,System.Object[])">
             <summary>
             Map each property of the objects in sources to the target object.  Returns an expando object
             (either the target object, if it's an expando object, or a new expando object)
             </summary>
            
             <param name="deep">
             true to deep.
             </param>
             <param name="target">
             .
             </param>
             <param name="sources">
             .
             </param>
            
             <returns>
             .
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Map``1(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},System.Func{CsQuery.IDomObject,``0})">
             <summary>
             Map each element of the result set to a new form. If a value is returned from the function,
             the element will be excluded.
             </summary>
            
             <typeparam name="T">
             .
             </typeparam>
             <param name="elements">
             .
             </param>
             <param name="function">
             .
             </param>
            
             <returns>
             An enumerator that allows foreach to be used to process map&lt; t&gt; in this collection.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Map``1(System.Func{CsQuery.IDomObject,``0})">
             <summary>
             Map each element of the result set to a new form. If a value is returned from the function,
             the element will be excluded.
             </summary>
            
             <typeparam name="T">
             Generic type parameter.
             </typeparam>
             <param name="function">
             .
             </param>
            
             <returns>
             An enumerator that allows foreach to be used to process map&lt; t&gt; in this collection.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.ParentsUntil(System.String,System.String)">
             <summary>
             Get the ancestors of each element in the current set of matched elements, up to but not
             including any element matched by the selector, optionally filtered by another selector.
             </summary>
            
             <param name="selector">
             A string containing a selector expression to match elements against.
             </param>
             <param name="filter">
             (optional) a selector which limits the elements returned.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/parentsUntil/
             </url>
        </member>
        <member name="M:CsQuery.CQ.ParentsUntil(CsQuery.IDomElement,System.String)">
             <summary>
             Get the ancestors of each element in the current set of matched elements, up to but not
             including the element matched by the selector.
             </summary>
            
             <param name="element">
             The element.
             </param>
             <param name="filter">
             (optional) a selector which limits the elements returned.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/parentsUntil/
             </url>
             
        </member>
        <member name="M:CsQuery.CQ.ParentsUntil(System.Collections.Generic.IEnumerable{CsQuery.IDomElement},System.String)">
             <summary>
             Get the ancestors of each element in the current set of matched elements, up to but not
             including any element matched by the selector, optionally filtered by another selector.
             </summary>
            
             <param name="elements">
             The elements.
             </param>
             <param name="filter">
             (optional) a selector which limits the elements returned.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.First">
             <summary>
             Reduce the set of matched elements to the first in the set.
             </summary>
            
             <returns>
             A new CQ object containing the first element in the set, or no elements if the source was
             empty.
             </returns>
            
             <url>
             http://api.jquery.com/first/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Last">
             <summary>
             Reduce the set of matched elements to the last in the set.
             </summary>
            
             <returns>
             A new CQ object containing the last element in the set, or no elements if the source was
             empty.
             </returns>
            
             <url>
             http://api.jquery.com/last/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Eq(System.Int32)">
             <summary>
             Reduce the set of matched elements to the one at the specified index.
             </summary>
            
             <param name="index">
             The zero-based index within the current selection set to match.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/eq/
             </url>
        </member>
        <member name="M:CsQuery.CQ.End">
             <summary>
             End the most recent filtering operation in the current chain and return the set of matched
             elements to its previous state.
             </summary>
            
             <returns>
             The CQ object at the root of the current chain, or a new, empty selection if this CQ object
             is the direct result of a Create()
             </returns>
            
             <url>
             http://api.jquery.com/end/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Siblings(System.String)">
             <summary>
             Description: Get the siblings of each element in the set of matched elements, optionally
             filtered by a selector.
             </summary>
            
             <param name="selector">
             A selector used to filter the siblings.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/siblings/
             </url>
        </member>
        <member name="M:CsQuery.CQ.GetSiblings(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Return all the siblings of each element in the sequence.
             </summary>
            
             <param name="elements">
             The elements.
             </param>
            
             <returns>
             An enumerator that exposes each sibling of each element passed.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Width(System.Int32)">
             <summary>
             Set the CSS width of each element in the set of matched elements.
             </summary>
            
             <remarks>
             There is no Width() method in CsQuery because this is a value calculated by the browser.
             While we can set the CSS of an element, it would be futile to try to return a useful value.
             If you want to inspect the current CSS width for an element, please use Css() methods
             instead. This ensures there is no confusion about the use of Width() in CsQuery.
             </remarks>
            
             <param name="value">
             An integer representing the number of pixels.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/width/#width2
             </url>
        </member>
        <member name="M:CsQuery.CQ.Width(System.String)">
             <summary>
             Set the CSS width of each element in the set of matched elements.
             </summary>
            
             <remarks>
             There are no Height() or Width() methods  in CsQuery because these are value calculated by
             the browser that depend on the page layout, as well as things like the browser window size
             which don't even exist in CsQuery. While we can set the CSS of an element, it would be futile
             to try to return a useful value. If you want to inspect the current CSS width for an element,
             please use Css() methods instead. This ensures there is no confusion about the use of Width()
             and Height()
             in CsQuery.
             </remarks>
            
             <param name="value">
             An integer along with a unit of measure appended (as a string), e.g. "100px".
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/width/#width2
             </url>
        </member>
        <member name="M:CsQuery.CQ.Height(System.Int32)">
             <summary>
             Set the CSS width of each element in the set of matched elements.
             </summary>
            
             <remarks>
             There are no Height() or Width() methods  in CsQuery because these are value calculated by
             the browser that depend on the page layout, as well as things like the browser window size
             which don't even exist in CsQuery. While we can set the CSS of an element, it would be futile
             to try to return a useful value. If you want to inspect the current CSS width for an element,
             please use Css() methods instead. This ensures there is no confusion about the use of Width()
             and Height()
             in CsQuery.
             </remarks>
            
             <param name="value">
             An integer representing the number of pixels.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/height/#height2
             </url>
        </member>
        <member name="M:CsQuery.CQ.Height(System.String)">
             <summary>
             Set the CSS height of each element in the set of matched elements.
             </summary>
            
             <remarks>
             There are no Height() or Width() methods  in CsQuery because these are value calculated by
             the browser that depend on the page layout, as well as things like the browser window size
             which don't even exist in CsQuery. While we can set the CSS of an element, it would be futile
             to try to return a useful value. If you want to inspect the current CSS width for an element,
             please use Css() methods instead. This ensures there is no confusion about the use of Width()
             and Height()
             in CsQuery.
             </remarks>
            
             <param name="value">
             An integer along with a unit of measure appended (as a string), e.g. "100px".
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/height/#height2
             </url>
        </member>
        <member name="M:CsQuery.CQ.Is(System.String)">
             <summary>
             Check the current matched set of elements against a selector and return true if at least one
             of these elements matches the selector.
             </summary>
            
             <param name="selector">
             A string containing a selector expression to match elements against.
             </param>
            
             <returns>
             true if at least one element in the selection set matches.
             </returns>
            
             <url>
             http://api.jquery.com/is/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Is(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Check the current matched set of elements against a sequence of elements, or another CQ
             object, and return true if at least one of these elements matches the selector.
             </summary>
            
             <param name="elements">
             A sequence of elements or a CQ object to match against the current selection set.
             </param>
            
             <returns>
             true if the sequence matches, false if it fails.
             </returns>
            
             <url>
             http://api.jquery.com/is/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Is(CsQuery.IDomObject)">
             <summary>
             Check the current matched set of elements against an element, and return true if the element
             is found within the selection set.
             </summary>
            
             <param name="element">
             An element to match against the current selection set.
             </param>
            
             <returns>
             true if it is found, false if it fails.
             </returns>
            
             <url>
             http://api.jquery.com/is/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Val``1">
             <summary>
             Get the current value of the first element in the set of matched elements, and try to convert
             to the specified type.
             </summary>
            
             <typeparam name="T">
             The type to which the value should be converted.
             </typeparam>
            
             <returns>
             A value or object of type T.
             </returns>
            
             <url>
             http://api.jquery.com/val/#val1
             </url>
        </member>
        <member name="M:CsQuery.CQ.ValOrDefault``1">
             <summary>
             Gets the current value of the first element in the selection set, converted to the specified
             type, or if the selection set is empty, the default value for the specified type.
             </summary>
            
             <typeparam name="T">
             The type to which the value should be converted.
             </typeparam>
            
             <returns>
             A value or object of type T.
             </returns>
            
             <url>
             http://api.jquery.com/val/#val1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Val">
             <summary>
             Get the current value of the first element in the set of matched elements. When using Val()
             to access an OPTION group with the "multiple" flag set, this method with return a comma-
             separated string (rather than the array returned by jQuery) of each selected option. When
             there is no "value" property on an option, the text returned for the value of each selected
             option is the inner text of the OPTION element.
             </summary>
            
             <returns>
             A string of the value.
             </returns>
            
             <url>
             http://api.jquery.com/val/#val1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Val(System.Object)">
             <summary>
             Set the value of each element in the set of matched elements. If a comma-separated value is
             passed to a multiple select list, then it will be treated as an array.
             </summary>
            
             <param name="value">
             A string of text or an array of strings corresponding to the value of each matched element to
             set as selected/checked.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/val/#val2
             </url>
        </member>
        <member name="M:CsQuery.CQ.GetValueString(System.Object)">
             <summary>
             Returns: null if the value is null; if it's sequence, the concatenated string of each
             object's ToString(); or finally the object itself its string representation if not a string.
             </summary>
            
             <param name="value">
             The object to process
             </param>
            
             <returns>
             The value string.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.ReplaceAll(System.String)">
             <summary>
             Replace the target, which is the result of the selector passed, with the set of matched
             elements.
             </summary>
            
             <param name="selector">
             A selector expression indicating which element(s) to replace.
             </param>
            
             <returns>
             The current CQ object
             </returns>
            
             <url>
             http://api.jquery.com/replaceAll/
             </url>
        </member>
        <member name="M:CsQuery.CQ.ReplaceAll(CsQuery.IDomObject)">
             <summary>
             Replace the target element with the set of matched elements.
             </summary>
            
             <param name="target">
             An element.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/replaceAll/
             </url>
        </member>
        <member name="M:CsQuery.CQ.ReplaceAll(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Replace each target element with the set of matched elements.
             </summary>
            
             <param name="targets">
             The targets to be replaced.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/replaceAll/
             </url>
        </member>
        <member name="M:CsQuery.CQ.ReplaceWith(System.String[])">
             <summary>
             Replace each element in the set of matched elements with the provided new content.
             </summary>
            
             <param name="content">
             The HTML string of the content to insert.
             </param>
            
             <returns>
             The current CQ object
             </returns>
            
             <url>
             http://api.jquery.com/replaceWith/
             </url>
        </member>
        <member name="M:CsQuery.CQ.ReplaceWith(CsQuery.IDomObject)">
             <summary>
             Replace each element in the set of matched elements with the element passed by parameter.
             </summary>
            
             <param name="element">
             The element to replace the content with.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/replaceWith/
             </url>
        </member>
        <member name="M:CsQuery.CQ.ReplaceWith(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Replace each element in the set of matched elements with the sequence of elements or CQ
             object provided.
             </summary>
            
             <param name="elements">
             The new conent to replace the selection set content with.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/replaceWith/
             </url>
        </member>
        <member name="M:CsQuery.CQ.RemoveClass">
             <summary>
             Remove all classes from each element in the set of matched elements.
             </summary>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/removeClass/
             </url>
        </member>
        <member name="M:CsQuery.CQ.RemoveClass(System.String)">
             <summary>
             Remove one or more classess from each element in the set of matched elements.
             </summary>
            
             <param name="className">
             One or more space-separated classes to be removed from the class attribute of each matched
             element.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Remove(System.String)">
             <summary>
             Remove all selected elements from the Document.
             </summary>
            
             <param name="selector">
             A selector expression that filters the set of matched elements to be removed.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/remove/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Detach(System.String)">
             <summary>
             This is synonymous with Remove in CsQuery, since there's nothing associated with an element
             that is not rendered. It is included for compatibility.
             </summary>
            
             <remarks>
             CsQuery does not maintain data such as initial visibility state when using Show/Hide, or an
             internal data structure when using Data methods. There is no data associated with an element
             that is not represented entirely through the markup that it will render. In the future, it's
             possible we may add such functionality for certain features, so it may be desirable to use
             Detach instead of Remove in those situations. This ensures forward compatibility.
             </remarks>
            
             <param name="selector">
             A selector expression that filters the set of matched elements to be removed.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Get">
             <summary>
             Return the active selection set.
             </summary>
            
             <returns>
             An sequence of IDomObject elements representing the current selection set.
             </returns>
            
             <url>
             http://api.jquery.com/get/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Get(System.Int32)">
             <summary>
             Return a specific element from the selection set.
             </summary>
            
             <param name="index">
             The zero-based index of the element to be returned.
             </param>
            
             <returns>
             An IDomObject.
             </returns>
            
             <url>
             http://api.jquery.com/get/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Prev(System.String)">
             <summary>
             Get the immediately preceding sibling of each element in the set of matched elements,
             optionally filtered by a selector.
             </summary>
            
             <param name="selector">
             A string containing a selector expression to match elements against.
             </param>
            
             <returns>
             A new CQ object
             </returns>
            
             <url>
             http://api.jquery.com/prev/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Next(System.String)">
             <summary>
             Get the immediately following sibling of each element in the set of matched elements. If a
             selector is provided, it retrieves the next sibling only if it matches that selector.
             </summary>
            
             <param name="selector">
             A string containing a selector expression to match elements against.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/next/
             </url>
        </member>
        <member name="M:CsQuery.CQ.NextAll(System.String)">
             <summary>
             Get all following siblings of each element in the set of matched elements, optionally
             filtered by a selector.
             </summary>
            
             <param name="filter">
             A selector that must match each element returned.
             </param>
            
             <returns>
             A new CQ object
             </returns>
            
             <url>
             http://api.jquery.com/nextAll/
             </url>
        </member>
        <member name="M:CsQuery.CQ.NextUntil(System.String,System.String)">
             <summary>
             Get all following siblings of each element up to but not including the element matched by the
             selector, optionally filtered by a selector.
             </summary>
            
             <param name="selector">
             A selector that must match each element returned.
             </param>
             <param name="filter">
             A selector use to filter each result
             </param>
            
             <returns>
             A new CQ object
             </returns>
            
             <url>
             http://api.jquery.com/nextUntil/
             </url>
        </member>
        <member name="M:CsQuery.CQ.PrevAll(System.String)">
             <summary>
             Get all preceding siblings of each element in the set of matched elements, optionally
             filtered by a selector.
             </summary>
            
             <param name="filter">
             A selector that must match each element returned.
             </param>
            
             <returns>
             A new CQ object
             </returns>
            
             <url>
             http://api.jquery.com/prevAll/
             </url>
        </member>
        <member name="M:CsQuery.CQ.PrevUntil(System.String,System.String)">
             <summary>
             Get all preceding siblings of each element up to but not including the element matched by the
             selector, optionally filtered by a selector.
             </summary>
            
             <param name="selector">
             A selector that must match each element returned.
             </param>
             <param name="filter">
             A selector use to filter each result.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/prevUntil/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Empty">
             <summary>
             Remove all child nodes of the set of matched elements from the DOM.
             </summary>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/empty/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Prop(System.String,System.IConvertible)">
             <summary>
             Set one or more properties for the set of matched elements.
             </summary>
            
             <param name="name">
             The property to set
             </param>
             <param name="value">
             The value
             </param>
            
             <returns>
             The current CQ object
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Prop(System.String)">
             <summary>
             Test whether the named property is set for the first element in the selection set.
             </summary>
            
             <remarks>
             When used to test the "selected" property of options in option groups, and none are
             explicitly marked as "selected", this will return "true" for the first option in the group,
             per browser DOM behavior.
             </remarks>
            
             <param name="name">
             The property name.
             </param>
            
             <returns>
             true if it is set, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.SetProp(System.String,System.Object)">
             <summary>
             Helper function for Attr &amp; Prop. Sets a property to true or false for an object that is
             "truthy" or not.
             </summary>
            
             <param name="name">
             The property name.
             </param>
             <param name="value">
             .The value.
             </param>
        </member>
        <member name="M:CsQuery.CQ.Slice(System.Int32)">
             <summary>
             Reduce the set of matched elements to a subset beginning with the 0-based index provided.
             </summary>
            
             <param name="start">
             The 0-based index at which to begin selecting.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/slice/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Slice(System.Int32,System.Int32)">
             <summary>
             Reduce the set of matched elements to a subset specified by a range of indices.
             </summary>
            
             <param name="start">
             The 0-based index at which to begin selecting.
             </param>
             <param name="end">
             The 0-based index of the element at which to stop selecting. The actual element at this
             position is not included in the result.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/slice/
             </url>
        </member>
        <member name="M:CsQuery.CQ.InsertAfter(CsQuery.IDomObject)">
             <summary>
             Insert every element in the set of matched elements after the target.
             </summary>
            
             <summary>
             Inserts an after described by target.
             </summary>
            
             <param name="target">
             The target to insert after.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/insertAfter/
             </url>
        </member>
        <member name="M:CsQuery.CQ.InsertAfter(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Insert every element in the set of matched elements after each element in the target sequence.
             </summary>
            
             <remarks>
             If there is a single element in the target, the elements in the selection set will be moved
             before the target (not cloned). If there is more than one target element, however, cloned
             copies of the inserted element will be created for each target after the first, and that new
             set (the original element plus clones) is returned.
             </remarks>
            
             <param name="target">
             A sequence of elements or a CQ object.
             </param>
            
             <returns>
             The set of elements inserted, including the original elements and any clones made if there
             was more than one target.
             </returns>
            
             <url>
             http://api.jquery.com/insertAfter/
             </url>
        </member>
        <member name="M:CsQuery.CQ.InsertAfter(System.String)">
             <summary>
             Insert every element in the set of matched elements after the target.
             </summary>
            
             <remarks>
             If there is a single element in the resulting set of the selection created by the parameter
             selector, then the original elements in this object's selection set will be moved before it.
             If there is more than one target element, however, cloned copies of the inserted element will
             be created for each target after the first, and that new set (the original element plus
             clones) is returned.
             </remarks>
            
             <param name="selectorTarget">
             A selector identifying the target elements after which each element in the current set will
             be inserted.
             </param>
            
             <returns>
             The set of elements inserted, including the original elements and any clones made if there
             was more than one target.
             </returns>
            
             <url>
             http://api.jquery.com/insertAfter/
             </url>
        </member>
        <member name="M:CsQuery.CQ.InsertBefore(System.String)">
             <summary>
             Insert every element in the set of matched elements before each elemeent in the selection set
             created from the target selector.
             </summary>
            
             <remarks>
             If there is a single element in the resulting set of the selection created by the parameter
             selector, then the original elements in this object's selection set will be moved before it.
             If there is more than one target element, however, cloned copies of the inserted element will
             be created for each target after the first, and that new set (the original element plus
             clones) is returned.
             </remarks>
            
             <param name="selector">
             A selector. The matched set of elements will be inserted before the element(s) specified by
             this selector.
             </param>
            
             <returns>
             The set of elements inserted, including the original elements and any clones made if there
             was more than one target.
             </returns>
            
             <url>
             http://api.jquery.com/insertBefore/
             </url>
        </member>
        <member name="M:CsQuery.CQ.InsertBefore(CsQuery.IDomObject)">
             <summary>
             Insert every element in the set of matched elements before the target.
             </summary>
            
             <param name="target">
             The element to which the elements in the current selection set should inserted after.
             </param>
            
             <returns>
             The current CQ object
             </returns>
            
             <url>
             http://api.jquery.com/insertBefore/
             </url>
        </member>
        <member name="M:CsQuery.CQ.InsertBefore(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Insert every element in the set of matched elements before the target.
             </summary>
            
             <remarks>
             If there is a single element in the target, the elements in the selection set will be moved
             before the target (not cloned). If there is more than one target element, however, cloned
             copies of the inserted element will be created for each target after the first, and that new
             set (the original element plus clones) is returned.
             </remarks>
            
             <param name="target">
             A sequence of elements or a CQ object that is the target; each element in the selection set
             will be inserted after each element in the target.
             </param>
            
             <returns>
             The set of elements inserted, including the original elements and any clones made if there
             was more than one target.
             </returns>
            
             <url>
             http://api.jquery.com/insertBefore/
             </url>
        </member>
        <member name="M:CsQuery.CQ.InsertAtOffset(CsQuery.IDomObject,System.Int32)">
             <summary>
             Support for InsertAfter and InsertBefore. An offset of 0 will insert before the current
             element. 1 after.
             </summary>
            
             <param name="target">
             The target object
             </param>
             <param name="offset">
             The offset from the targe object to insert
             </param>
            
             <returns>
             The current CQ object
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Index">
             <summary>
             Search for a given element from among the matched elements.
             </summary>
            
             <returns>
             The index of the element, or -1 if it was not found.
             </returns>
            
             <url>
             http://api.jquery.com/index/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Index(System.String)">
             <summary>
             Returns the position of the current selection within the new selection defined by "selector".
             </summary>
            
             <param name="selector">
             The selector string.
             </param>
            
             <returns>
             The zero-based index of the selection within the new selection
             </returns>
            
             <url>
             http://api.jquery.com/index/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Index(CsQuery.IDomObject)">
             <summary>
             Returns the position of the element passed in within the selection set.
             </summary>
            
             <param name="element">
             The element to exclude.
             </param>
            
             <returns>
             The zero-based index of "element" within the selection set, or -1 if it was not a member of
             the current selection.
             </returns>
            
             <url>
             http://api.jquery.com/index/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Index(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Returns the position of the first element in the sequence passed by parameter within the
             current selection set..
             </summary>
            
             <param name="elements">
             The element to look for.
             </param>
            
             <returns>
             The zero-based index of the first element in the sequence within the selection.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.GetElementIndex(CsQuery.IDomObject)">
            <summary>
            Return the relative position of an element among its Element siblings (non-element nodes excluded)
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Hide">
             <summary>
             Hide the matched elements.
             </summary>
            
             <remarks>
             The jQuery docs say "This is roughly equivalent to calling .css('display', 'none')." With
             CsQuery, it is exactly equivalent. Unlike jQuery, CsQuery does not store the current value of
             the "display" style and restore it, because there is no concept of "effective style" in
             CsQuery. We don't attempt to calculate the actual style that would be in effect since we
             don't do any style sheet parsing. Instead, this method really just sets display: none. When
             showing again, any "display" style is removed.
             
             This means if you were to assign a non-default value for "display" such as "inline" to a div,
             then Hide(), then Show(), it would no longer be displayed inline, as it would in jQuery.
             Since CsQuery is not used interactively (yet, anyway), this sequence of events seems unlikely,
             and supporting it exactly as jQuery does seems unnecessary. This functionality could
             certainly be added in the future.
             </remarks>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/hide/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Show">
             <summary>
             Display the matched elements.
             </summary>
            
             <remarks>
             This method simply removes the "display: none" css style, if present. See
             <see cref="T:CsQuery.CQ.Hide"/> for an explanation of how this differs from jQuery.
             </remarks>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/show/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Toggle">
             <summary>
             Display or hide the matched elements.
             </summary>
            
             <returns>
             The curren CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/toggle/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Toggle(System.Boolean)">
             <summary>
             Display or hide the matched elements based on the value of the parameter.
             </summary>
            
             <param name="isVisible">
             true to show the matched elements, or false to hide them.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/toggle/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Select(System.String)">
             <summary>
             Select elements and return a new CSQuery object.
             </summary>
            
             <remarks>
             The "Select" method is the default CsQuery method. It's overloads are identical to the
             overloads of the CQ object's property indexer (the square-bracket notation) and it functions
             the same way. This is analogous to the default jQuery method, e.g. $(...).
             </remarks>
            
             <param name="selector">
             A string containing a selector expression.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/jQuery/#jQuery1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Select(CsQuery.IDomObject)">
             <summary>
             Return a new CQ object wrapping an element.
             </summary>
            
             <param name="element">
             The element to wrap.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/jQuery/#jQuery1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Select(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Return a new CQ object wrapping a sequence of elements.
             </summary>
            
             <param name="elements">
             The elements to wrap
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/jQuery/#jQuery1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Select(System.String,CsQuery.IDomObject)">
             <summary>
             Select elements from within a context.
             </summary>
            
             <param name="selector">
             A string containing a selector expression.
             </param>
             <param name="context">
             The point in the document at which the selector should begin matching; similar to the context
             argument of the CQ.Create(selector, context) method.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/jQuery/#jQuery1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Select(System.String,System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Select elements from within a context.
             </summary>
            
             <param name="selector">
             A string containing a selector expression.
             </param>
             <param name="context">
             The points in the document at which the selector should begin matching; similar to the
             context argument of the CQ.Create(selector, context) method. Only elements found below the
             members of the sequence in the document can be matched.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/jQuery/#jQuery1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Filter(System.String)">
             <summary>
             Reduce the set of matched elements to those that match the selector or pass the function's
             test.
             </summary>
            
             <param name="selector">
             A string containing a selector expression to match the current set of elements against.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/filter/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Filter(CsQuery.IDomObject)">
             <summary>
             Reduce the set of matched elements to those that matching the element passed by parameter.
             </summary>
            
             <param name="element">
             The element to match.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/filter/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Filter(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Reduce the set of matched elements to those matching any of the elements in a sequence passed
             by parameter.
             </summary>
            
             <param name="elements">
             The elements to match.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/filter/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Filter(System.Func{CsQuery.IDomObject,System.Boolean})">
             <summary>
             Reduce the set of matched elements to those that match the selector or pass the function's
             test.
             </summary>
            
             <remarks>
             This method doesn't offer anything that can't easily be accomplished with a LINQ "where"
             query but is included for completeness.
             </remarks>
            
             <param name="function">
             A function used as a test for each element in the set.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/filter/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Filter(System.Func{CsQuery.IDomObject,System.Int32,System.Boolean})">
             <summary>
             Reduce the set of matched elements to those that match the selector or pass the function's
             test.
             </summary>
            
             <remarks>
             This method doesn't offer anything that can't easily be accomplished with a LINQ "where"
             query but is included for completeness.
             </remarks>
            
             <param name="function">
             A function used as a test for each element in the set.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/filter/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Find(System.String)">
             <summary>
             Get the descendants of each element in the current set of matched elements, filtered by a
             selector.
             </summary>
            
             <param name="selector">
             A string containing a selector expression to match elements against.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/find/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Find(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Get the descendants of each element in the current set of matched elements, filtered by a
             sequence of elements or CQ object.
             </summary>
            
             <param name="elements">
             The elements to match against.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/find/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Find(CsQuery.IDomObject)">
             <summary>
             Get a single element, if it is a descendant of the current selection set.
             </summary>
            
             <param name="element">
             The element to matc.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/find/
             </url>
        </member>
        <member name="M:CsQuery.CQ.EachUntil(System.Func{System.Int32,CsQuery.IDomObject,System.Boolean})">
             <summary>
             Iterate over each matched element, calling the delegate passed by parameter for each element.
             If the delegate returns false, the iteration is stopped.
             </summary>
            
             <remarks>
             The overloads of Each the inspect the return value have a different method name (EachUntil)
             because the C# compiler will not choose the best-matchine method when passing method groups.
             See: http://stackoverflow.com/questions/2057146/compiler-ambiguous-invocation-error-anonymous-
             method-and-method-group-with-fun.
             </remarks>
            
             <param name="func">
             A function delegate returning a boolean, and accepting an integer and an IDomObject
             parameter. The integer is the zero-based index of the current iteration, and the IDomObject
             is the current element.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/each/
             </url>
        </member>
        <member name="M:CsQuery.CQ.EachUntil(System.Func{CsQuery.IDomObject,System.Boolean})">
             <summary>
             Iterate over each matched element, calling the delegate passed by parameter for each element.
             If the delegate returns false, the iteration is stopped.
             </summary>
            
             <remarks>
             The overloads of Each the inspect the return value have a different method name (EachUntil)
             because the C# compiler will not choose the best-matchine method when passing method groups.
             See: http://stackoverflow.com/questions/2057146/compiler-ambiguous-invocation-error-anonymous-
             method-and-method-group-with-fun.
             </remarks>
            
             <param name="func">
             A function delegate returning a boolean.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/each/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Each(System.Action{CsQuery.IDomObject})">
             <summary>
             Iterate over each matched element, calling the delegate passed by parameter for each element
             </summary>
            
             <param name="func">
             A delegate accepting a single IDomObject paremeter
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/each/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Each(System.Action{System.Int32,CsQuery.IDomObject})">
             <summary>
             Iterate over each matched element, calling the delegate passed by parameter for each element.
             </summary>
            
             <param name="func">
             A delegate accepting an integer parameter, and an IDomObject paremeter. The integer is the
             zero-based index of the current iteration.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/each/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Iterate over each element in a sequence, and call a delegate for each element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="func"></param>
        </member>
        <member name="M:CsQuery.CQ.Data">
             <summary>
             Returns all values at named data store for the first element in the jQuery collection, as set
             by data(name, value). Put another way, this method constructs an object based on the names
             and values of any attributes starting with "data-".
             </summary>
            
             <returns>
             A dynamic object.
             </returns>
            
             <url>
             http://api.jquery.com/data/#data2
             </url>
        </member>
        <member name="M:CsQuery.CQ.Data(System.String,System.String)">
             <summary>
             Store arbitrary data associated with the specified element, and render it as JSON on the
             element in a format that can be read by the jQuery "Data()" methods.
             </summary>
            
             <param name="key">
             The name of the key to associate with this data object.
             </param>
             <param name="data">
             An string to be associated with the key.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/data/#data1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Data(System.String,System.Object)">
             <summary>
             Store arbitrary data associated with the specified element, and render it as JSON on the
             element in a format that can be read by the jQuery "Data()" methods.
             </summary>
            
             <remarks>
             Though the jQuery "Data" methods are designed to read the HTML5 "data-" attributes like the
             CsQuery version, jQuery Data keeps its data in an internal data store that is unrelated to
             the element attributes. This is not particularly necessary when working in C# since you have
             many other framework options for managing data. Rather, this method has been implemented to
             simplify passing data back and forth between the client and server. You should be able to use
             CsQuery's Data methods to set arbitrary objects as data, and read them directly from the
             client using the jQuery data method. Bear and mind that because CsQuery intends to write
             every object you assign using "Data" as a JSON string on a "data-" attribute, there's a lot
             of conversion going on which will probably have imperfect results if you just try to use it
             as a way to attach an object to an element. It's therefore advised that you think of it as a
             way to get data to the client primarily.
             </remarks>
            
             <param name="key">
             The name of the key to associate with this data object.
             </param>
             <param name="data">
             An string containing properties to be mapped to JSON data.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/data/#data1
             </url>
        </member>
        <member name="M:CsQuery.CQ.DataSet(System.Object)">
             <summary>
             Convert an object to JSON and stores each named property as a data element.
             </summary>
            
             <remarks>
             Because of conflicts with the overloaded signatures compared to the jQuery API, the general
             Data method that maps an entire object has been implemented as DataSet.
             
             Though the jQuery "Data" methods are designed to read the HTML5 "data-" attributes like the
             CsQuery version, jQuery Data keeps its data in an internal data store that is unrelated to
             the element attributes. This is not particularly necessary when working in C# since you have
             many other framwork options for managing data. Rather, this method has been implemented to
             simplify passing data back and forth between the client and server. You should be able to use
             CsQuery's Data methods to set arbitrary objects as data, and read them directly from the
             client using the jQuery data method. Bear and mind that because CsQuery intends to write
             every object you assign using "Data" as a JSON string on a "data-" attribute, there's a lot
             of conversion going on which will probably have imperfect results if you just try to use it
             as a way to attach an object to an element. It's therefore advised that you think of it as a
             way to get data to the client primarily.
             </remarks>
            
             <param name="data">
             An object containing properties which will be mapped to data attributes.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/data/#data1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Data(System.String)">
             <summary>
             Returns an object or value at named data store for the first element in the jQuery collection,
             as set by data(name, value).
             </summary>
            
             <param name="key">
             The named key to identify the data, resulting in access to an attribute named "data-{key}".
             </param>
            
             <returns>
             An object representing the stored data. This could be a value type, or a POCO with properties
             each containing other objects or values, depending on the data that was initially set.
             </returns>
            
             <url>
             http://api.jquery.com/data/#data2
             </url>
        </member>
        <member name="M:CsQuery.CQ.Data``1(System.String)">
             <summary>
             Returns an object or value at named data store for the first element in the jQuery collection,
             as set by data(name, value).
             </summary>
            
             <typeparam name="T">
             The type to which to cast the data. This type should match the type used when setting the
             data initially, or be a type that is compatible with the JSON data structure stored in the
             data attribute.
             </typeparam>
             <param name="key">
             The name of the key to associate with this data object.
             </param>
            
             <returns>
             An object of type T.
             </returns>
            
             <url>
             http://api.jquery.com/data/#data2
             </url>
        </member>
        <member name="M:CsQuery.CQ.RemoveData">
             <summary>
             Remove all data- attributes from the element.
             </summary>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/removeData/
             </url>
        </member>
        <member name="M:CsQuery.CQ.RemoveData(System.String)">
             <summary>
             Remove a previously-stored piece of data identified by a key.
             </summary>
            
             <param name="key">
             A string naming the piece of data to delete, or pieces of data if the string has multiple
             values separated by spaces.
             </param>
            
             <returns>
             THe current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/removeData/
             </url>
        </member>
        <member name="M:CsQuery.CQ.RemoveData(System.Collections.Generic.IEnumerable{System.String})">
             <summary>
             Remove all data from an element.
             </summary>
            
             <param name="keys">
             An array or space-separated string naming the pieces of data to delete.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/removeData/
             </url>
        </member>
        <member name="M:CsQuery.CQ.DataRaw(System.String)">
             <summary>
             Returns data as a string, with no attempt to parse it from JSON. This is the equivalent of
             using the Attr("data-{key}") method.
             </summary>
            
             <param name="key">
             The key identifying the data.
             </param>
            
             <returns>
             A string.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.HasData">
             <summary>
             Determine whether an element has any jQuery data associated with it.
             </summary>
            
             <returns>
             true if there is any data, false if not.
             </returns>
            
             <url>
             http://api.jquery.com/jQuery.hasData/
             </url>
        </member>
        <member name="M:CsQuery.CQ.CssSet(System.Object)">
             <summary>
             Set one or more CSS properties for the set of matched elements from JSON data.
             </summary>
            
             <param name="map">
             An object whose properties names represent css property names, or a string that is valid JSON
             data that represents an object of css style names/values.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/css/#css2
             </url>
        </member>
        <member name="M:CsQuery.CQ.Css(System.String,System.IConvertible)">
             <summary>
             Set one or more CSS properties for the set of matched elements.
             </summary>
            
             <remarks>
             By default, this method will validate that the CSS style name and value are valid CSS3. To
             assing a style without validatoin, use the overload of this method and set the "strict"
             parameter to false.
             </remarks>
            
             <param name="name">
             The name of the style.
             </param>
             <param name="value">
             The value of the style.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/css/#css2
             </url>
        </member>
        <member name="M:CsQuery.CQ.Css``1(System.String)">
             <summary>
             Get the value of a style property for the first element in the set of matched elements, and
             converts to a numeric type T. Any numeric type strings are ignored when converting to numeric
             values.
             </summary>
            
             <typeparam name="T">
             The type. This should probably be a numeric type, but the method will attempt to convert to
             any IConvertible type passed.
             </typeparam>
             <param name="style">
             The name of the CSS style to retrieve.
             </param>
            
             <returns>
             A value of type T.
             </returns>
            
             <url>
             http://api.jquery.com/css/#css1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Css(System.String)">
             <summary>
             Get the value of a style property for the first element in the set of matched elements.
             </summary>
            
             <param name="style">
             The name of the CSS style.
             </param>
            
             <returns>
             A string of the value of the named CSS style.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Html">
             <summary>
             Get the HTML contents of the first element in the set of matched elements.
             </summary>
            
             <returns>
             A string of HTML.
             </returns>
            
             <url>
             http://api.jquery.com/html/#html1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Html(System.String[])">
             <summary>
             Set the HTML contents of each element in the set of matched elements. Any elements without
             InnerHtml are ignored.
             </summary>
            
             <param name="html">
             One or more strings of HTML markup.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/html/#html2
             </url>
        </member>
        <member name="M:CsQuery.CQ.Wrap(System.String)">
             <summary>
             Wrap an HTML structure around each element in the set of matched elements.
             </summary>
            
             <param name="wrappingSelector">
             A string that is either a selector or a string of HTML that defines the structure to wrap
             around the set of matched elements.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/wrap/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Wrap(CsQuery.IDomObject)">
             <summary>
             Wrap an HTML structure around each element in the set of matched elements.
             </summary>
            
             <param name="element">
             An element which is the structure to wrap around the selection set.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/wrap/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Wrap(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Wrap an HTML structure around each element in the set of matched elements.
             </summary>
            
             <param name="wrapper">
             A sequence of elements that is the structure to wrap around the selection set. There may be
             multiple elements but there should be only one innermost element in the sequence.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/wrap/
             </url>
        </member>
        <member name="M:CsQuery.CQ.WrapAll(System.String)">
             <summary>
             Wrap an HTML structure around all elements in the set of matched elements.
             </summary>
            
             <param name="wrappingSelector">
             A string that is either a selector or a string of HTML that defines the structure to wrap
             around the set of matched elements.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/wrapall/
             </url>
        </member>
        <member name="M:CsQuery.CQ.WrapAll(CsQuery.IDomObject)">
             <summary>
             Wrap an HTML structure around all elements in the set of matched elements.
             </summary>
            
             <param name="element">
             An element which is the structure to wrap around the selection set.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/wrapall/
             </url>
        </member>
        <member name="M:CsQuery.CQ.WrapAll(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Wrap an HTML structure around all elements in the set of matched elements.
             </summary>
            
             <param name="wrapper">
             A sequence of elements that is the structure to wrap around each element in the selection
             set. There may be multiple elements but there should be only one innermost element in the
             sequence.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/wrapall/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Unwrap">
             <summary>
             Remove the parents of the set of matched elements from the DOM, leaving the matched elements
             in their place.
             </summary>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/unwrap/
             </url>
        </member>
        <member name="M:CsQuery.CQ.WrapInner(System.String)">
             <summary>
             Wrap an HTML structure around the content of each element in the set of matched elements.
             </summary>
            
             <param name="selector">
             An HTML snippet or elector expression specifying the structure to wrap around the content of
             the matched elements.
             </param>
            
             <returns>
             The current CQ object
             </returns>
            
             <url>
             http://api.jquery.com/wrapinner/
             </url>
        </member>
        <member name="M:CsQuery.CQ.WrapInner(CsQuery.IDomObject)">
             <summary>
             Wrap an HTML structure around the content of each element in the set of matched elements.
             </summary>
            
             <param name="wrapper">
             A sequence of elements that is the structure to wrap around the content of the selection set.
             There may be multiple elements but there should be only one innermost element in the sequence.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/wrapinner/
             </url>
        </member>
        <member name="M:CsQuery.CQ.WrapInner(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Wrap an HTML structure around the content of each element in the set of matched elements.
             </summary>
            
             <param name="wrapper">
             A sequence of elements that is the structure to wrap around the content of the selection set.
             There may be multiple elements but there should be only one innermost element in the sequence.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/wrapinner/
             </url>
        </member>
        <member name="M:CsQuery.CQ.GetInnermostContainer(System.Collections.Generic.IEnumerable{CsQuery.IDomElement},CsQuery.IDomElement@,CsQuery.IDomElement@)">
             <summary>
             Ouptuts the deepest-nested object, it's root element from the list of elements passed, and
             returns the depth, given a structure. Helper method for Wrap.
             </summary>
            
             <param name="elements">
             The sequence to analyze
             </param>
             <param name="element">
             [ouy] The innermost element container
             </param>
             <param name="rootElement">
             [out] The root element.
             </param>
            
             <returns>
             The innermost container.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.PrependTo(System.String[])">
             <summary>
             Insert every element in the set of matched elements to the beginning of the target.
             </summary>
            
             <param name="target">
             One or more HTML strings that will be targeted.
             </param>
            
             <returns>
             A CQ object containing all the elements added
             </returns>
            
             <url>
             http://api.jquery.com/prependTo/
             </url>
        </member>
        <member name="M:CsQuery.CQ.PrependTo(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Insert every element in the set of matched elements to the beginning of the target.
             </summary>
            
             <param name="targets">
             The targets to which the current selection will be appended.
             </param>
            
             <returns>
             A new CQ object representing the target elements.
             </returns>
            
             <url>
             http://api.jquery.com/prependTo/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Prepend(CsQuery.IDomObject[])">
             <summary>
             Insert content, specified by the parameter, to the beginning of each element in the set of
             matched elements.
             </summary>
            
             <param name="elements">
             One or more elements.
             </param>
            
             <returns>
             A new CQ object representing the inserte content.
             </returns>
            
             <url>
             http://api.jquery.com/prepend/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Prepend(System.String[])">
             <summary>
             Insert content, specified by the parameter, to the beginning of each element in the set of
             matched elements.
             </summary>
            
             <param name="selector">
             One or more selectors or HTML strings.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/prepend/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Prepend(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Insert content, specified by the parameter, to the beginning of each element in the set of
             matched elements.
             </summary>
            
             <param name="elements">
             The elements to be inserted.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/prepend/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Prepend(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},CsQuery.CQ@)">
             <summary>
             Insert content, specified by the parameter, to the beginning of each element in the set of
             matched elements.
             </summary>
            
             <param name="elements">
             The elements to be inserted.
             </param>
             <param name="insertedElements">
             A CQ object containing all the elements added.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/prepend/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Text">
             <summary>
             Get the combined text contents of each element in the set of matched elements, including
             their descendants.
             </summary>
            
             <returns>
             A string containing the text contents of the selection.
             </returns>
            
             <url>
             http://api.jquery.com/text/#text1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Text(System.String)">
             <summary>
             Set the content of each element in the set of matched elements to the specified text.
             </summary>
            
             <param name="value">
             A string of text.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/text/#text2
             </url>
        </member>
        <member name="M:CsQuery.CQ.Text(System.Func{System.Int32,System.String,System.Object})">
             <summary>
             Set the content of each element in the set of matched elements to the text returned by the
             specified function delegate.
             </summary>
            
             <param name="func">
             A delegate to a function that returns an HTML string to insert at the end of each element in
             the set of matched elements. Receives the index position of the element in the set and the
             old HTML value of the element as arguments. The function can return any data type, if it is not
             a string, it's ToString() method will be used to convert it to a string.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/text/#text2
             </url>
        </member>
        <member name="M:CsQuery.CQ.Text(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Helper for public Text() function to act recursively.
             </summary>
            
             <param name="sb">
             .
             </param>
             <param name="elements">
             .
             </param>
        </member>
        <member name="M:CsQuery.CQ.Text(System.Text.StringBuilder,CsQuery.IDomObject)">
             <summary>
             Get the combined text contents of this and all child elements.
             </summary>
            
             <param name="sb">
             The StribgBuilder object to write to
             </param>
             <param name="obj">
             The object.
             </param>
        </member>
        <member name="M:CsQuery.CQ.SetChildText(CsQuery.IDomElement,System.String)">
             <summary>
             Sets a child text for this element, using the text node type appropriate for this element's type
             </summary>
            
             <param name="el">
             The element to add text to
             </param>
             <param name="text">
             The text.
             </param>
        </member>
        <member name="M:CsQuery.CQ.Has(System.String)">
             <summary>
             Reduce the set of matched elements to those that have a descendant that matches the selector
             or DOM element.
             </summary>
            
             <param name="selector">
             A valid CSS/jQuery selector.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/has/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Has(CsQuery.IDomObject)">
             <summary>
             Reduce the set of matched elements to those that have the element passed as a descendant.
             </summary>
            
             <param name="element">
             The element to match.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/has/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Has(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Reduce the set of matched elements to those that have each of the elements passed as a descendant.
             </summary>
            
             <param name="elements">
             The elements to be excluded.
             </param>
            
             <returns>
             A new CQ object
             </returns>
            
             <url>
             http://api.jquery.com/has/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Not(System.String)">
             <summary>
             Remove elements from the set of matched elements.
             </summary>
            
             <param name="selector">
             A CSS selector.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/not/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Not(CsQuery.IDomObject)">
             <summary>
             Selects all elements except the element passed as a parameter.
             </summary>
            
             <param name="element">
             The element to exclude.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/not/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Not(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Selects all elements except those passed as a parameter.
             </summary>
            
             <param name="elements">
             The elements to be excluded.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/not/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Parents(System.String)">
             <summary>
             Get the ancestors of each element in the current set of matched elements, optionally filtered
             by a selector.
             </summary>
            
             <param name="filter">
             (optional) a selector which limits the elements returned.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/parents/
             </url>
        </member>
        <member name="M:CsQuery.CQ.ToString">
             <summary>
             Returns the HTML of each selected element in order. <see cref="M:CsQuery.CQ.SelectionHtml"/>
             </summary>
            
             <returns>
             A string of HTML
             </returns>
        </member>
        <member name="M:CsQuery.CQ.GetEnumerator">
             <summary>
             Returns an enumeration of the current selection set for this CQ object
             </summary>
            
             <returns>
             The enumerator.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Clear">
            <summary>
            Clear the entire object.
            </summary>
        </member>
        <member name="M:CsQuery.CQ.ClearSelections">
            <summary>
            Clears the current selection set.
            </summary>
        </member>
        <member name="M:CsQuery.CQ.SetSelection(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},CsQuery.Implementation.SelectionSetOrder,CsQuery.Implementation.SelectionSetOrder)">
             <summary>
             Sets the selection set for this object, and asserts that the order in which it as assigned is
             the order passed. This allows most operations to return the original set directly; if it is
             requested in a different order then it will be sorted.
             </summary>
            
             <param name="selectionSet">
             The current selection set including all node types.
             </param>
             <param name="inputOrder">
             The order in which the elements appear in selectionSet. If omitted, Ascending is the default.
             </param>
             <param name="outputOrder">
             The default output order, if different from the inputOrder. If omitted, the same as the input
             order is the default.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.SetSelection(CsQuery.IDomObject,CsQuery.Implementation.SelectionSetOrder)">
             <summary>
             Sets the selection set for this object to a single element..
             </summary>
            
             <param name="element">
             The element to add.
             </param>
             <param name="outputOrder">
             The default output order. If omitted, Ascending (DOM) order is the default.
             </param>
            
             <returns>
             The current CQ object
             </returns>
        </member>
        <member name="M:CsQuery.CQ.MapMultipleValues(System.Object)">
             <summary>
             Map a CSV or enumerable object to a hashset.
             </summary>
            
             <param name="value">
             the object or sequence to map
             </param>
            
             <returns>
             A new hashset
             </returns>
        </member>
        <member name="M:CsQuery.CQ.SetOptionSelected(System.Collections.Generic.IEnumerable{CsQuery.IDomElement},System.Object,System.Boolean)">
             <summary>
             Helper function for option groups to set multiple options when passed a CSV of values.
             </summary>
            
             <param name="elements">
             .
             </param>
             <param name="value">
             .
             </param>
             <param name="multiple">
             true to multiple.
             </param>
        </member>
        <member name="M:CsQuery.CQ.SetOptionSelected(System.Collections.Generic.IEnumerable{CsQuery.IDomElement},System.Collections.Generic.HashSet{System.String},System.Boolean)">
             <summary>
             Helper function for option groups to set multiple options when passed a CSV of values.
             </summary>
            
             <param name="elements">
             .
             </param>
             <param name="values">
             The values.
             </param>
             <param name="multiple">
             true to multiple.
             </param>
        </member>
        <member name="M:CsQuery.CQ.AddSelection(CsQuery.IDomObject)">
             <summary>
             Add an item to the list of selected elements. It should be part of this DOM.
             </summary>
            
             <param name="element">
             The element to add
             </param>
            
             <returns>
             true if the element was added.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.AddSelection(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Adds each element to the current selection set. 
             </summary>
            
             <param name="elements">
             The elements to add
             </param>
            
             <returns>
             true if any elements were added.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.MapRangeToNewCQ(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},System.Func{CsQuery.IDomObject,System.Collections.Generic.IEnumerable{CsQuery.IDomObject}})">
             <summary>
             Map range of elements to a new CQ object using a function delegate to populate it.
             </summary>
            
             <param name="source">
             Source elements
             </param>
             <param name="del">
             Delegate to the mapping function
             </param>
            
             <returns>
             A new CQ object
             </returns>
        </member>
        <member name="M:CsQuery.CQ.MergeSelections(System.Collections.Generic.IEnumerable{System.String})">
             <summary>
             Runs a set of selectors and returns the combined result as a single enumerable.
             </summary>
            
             <param name="selectors">
             A sequence of strings that area each selectors
             </param>
            
             <returns>
             An enumerator that allows foreach to be used to process merge selections in this collection.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.MergeContent(System.Collections.Generic.IEnumerable{System.String})">
             <summary>
             Runs a set of HTML creation selectors and returns result as a single enumerable.
             </summary>
            
             <param name="content">
             A sequence of strings that are each valid HTML
             </param>
            
             <returns>
             A new sequence containing all the elements from all the selectors.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.OnlyElements(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Enumerates only the IDomElements in the sequence provided. Any other elemnent types are excluded..
             </summary>
            
             <param name="objects">
             The objects.
             </param>
            
             <returns>
             An enumerator that allows foreach to be used to process only elements in this collection.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.FilterIfSelector(System.String,System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Filter a sequence using a selector if the selector is not empty. If it's empty, return a new
             CQ object containing the original list.
             </summary>
            
             <param name="selector">
             The selector.
             </param>
             <param name="list">
             The source sequence.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.FilterIfSelector(System.String,System.Collections.Generic.IEnumerable{CsQuery.IDomObject},CsQuery.Implementation.SelectionSetOrder)">
             <summary>
             Filter a sequence using a selector if the selector is not empty. If it's empty, return a new CQ object
             containing the original list.
             </summary>
            
             <param name="selector">
             The selector.
             </param>
             <param name="list">
             The source sequence
             </param>
             <param name="order">
             The order in which the elements of the new CQ object should be returned
             </param>
            
             <returns>
             A new CQ object
             </returns>
        </member>
        <member name="M:CsQuery.CQ.FilterElements(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},System.String)">
             <summary>
             Filter a sequence using a selector, ignoring missing selectors
             </summary>
            
             <param name="elements">
             The sequence to filter
             </param>
             <param name="selector">
             The selector.
             </param>
            
             <returns>
             An enumerator that allows foreach to be used to process filter elements in this collection.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.FilterElementsIgnoreNull(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},System.String)">
             <summary>
             Filter an element list using another selector. A null selector results in no filtering; an
             empty string selector results in an empty list being return.
             </summary>
            
             <param name="elements">
             The sequence to filter.
             </param>
             <param name="selector">
             The selector.
             </param>
            
             <returns>
             The filtered list.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.#ctor">
            <summary>
            Creates a new, empty CQ object.
            </summary>
        </member>
        <member name="M:CsQuery.CQ.#ctor(System.String,CsQuery.HtmlParsingMode,CsQuery.HtmlParsingOptions,CsQuery.DocType)">
             <summary>
             Create a new CQ object from an HTML string.
             </summary>
            
             <param name="html">
             The HTML source.
             </param>
             <param name="parsingMode">
             The HTML parsing mode.
             </param>
             <param name="parsingOptions">
             (optional) options for controlling the parsing.
             </param>
             <param name="docType">
             (optional) type of the document.
             </param>
        </member>
        <member name="M:CsQuery.CQ.#ctor(System.IO.Stream,System.Text.Encoding,CsQuery.HtmlParsingMode,CsQuery.HtmlParsingOptions,CsQuery.DocType)">
             <summary>
             Create a new CQ object from an HTML stream.
             <see cref="M:CsQuery.CQ.Create(System.Char[])"/>
             </summary>
            
             <param name="html">
             The html source of the new document.
             </param>
             <param name="encoding">
             The character set encoding.
             </param>
             <param name="parsingMode">
             The HTML parsing mode.
             </param>
             <param name="parsingOptions">
             (optional) options for controlling the parsing.
             </param>
             <param name="docType">
             (optional) type of the document.
             </param>
        </member>
        <member name="M:CsQuery.CQ.#ctor(System.IO.TextReader,CsQuery.HtmlParsingMode,CsQuery.HtmlParsingOptions,CsQuery.DocType)">
             <summary>
             Create a new CQ object from an HTML string.
             </summary>
            
             <param name="html">
             The html source of the new document.
             </param>
             <param name="parsingMode">
             The HTML parsing mode.
             </param>
             <param name="parsingOptions">
             (optional) options for controlling the parsing.
             </param>
             <param name="docType">
             (optional) type of the document.
             </param>
        </member>
        <member name="M:CsQuery.CQ.#ctor(CsQuery.IDomObject)">
             <summary>
             Create a new CQ object wrapping a single element.
             </summary>
             
             <remarks>
             This differs from the <see cref="M:CsQuery.CQ.Create(CsQuery.IDomObject)"/> method in that this document is still
             related to its owning document; this is the same as if the element had just been selected.
             The Create method, conversely, creates an entirely new Document context contining a single
             element (a clone of this element).
             </remarks>
            
             <param name="element">
             The element.
             </param>
        </member>
        <member name="M:CsQuery.CQ.#ctor(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Create a new CsQuery object wrapping an existing sequence of elements.
             </summary>
            
             <param name="elements">
             A sequence of elements to populate the object
             </param>
        </member>
        <member name="M:CsQuery.CQ.#ctor(CsQuery.IDomObject,CsQuery.CQ)">
             <summary>
             Create a new CQ object wrapping a single DOM element, in the context of another CQ object.
             </summary>
            
             <remarks>
             This differs from the overload accepting a single IDomObject parameter in that it associates
             the new object with a previous object, as if it were part of a selector chain. In practice
             this will rarely make a difference, but some methods such as <see cref="M:CsQuery.CQ.End"/> use
             this information.
             </remarks>
            
             <param name="element">
             The element to wrap.
             </param>
             <param name="context">
             The context.
             </param>
        </member>
        <member name="M:CsQuery.CQ.#ctor(System.String,CsQuery.CQ)">
             <summary>
             Create a new CsQuery object using an existing instance and a selector. if the selector is
             null or missing, then it will contain no selection results.
             </summary>
            
             <param name="selector">
             A valid CSS selector.
             </param>
             <param name="context">
             The context.
             </param>
        </member>
        <member name="M:CsQuery.CQ.#ctor(System.String,System.String,CsQuery.CQ)">
             <summary>
             Create a new CsQuery object from a selector HTML, and assign CSS from a JSON string, within a context.
             </summary>
            
             <param name="selector">
             The 
             </param>
             <param name="cssJson">
             The JSON containing CSS
             </param>
             <param name="context">
             The context
             </param>
        </member>
        <member name="M:CsQuery.CQ.#ctor(System.String,System.Object,CsQuery.CQ)">
             <summary>
             Create a new CsQuery object from a selector or HTML, and assign CSS, within a context.
             </summary>
            
             <param name="selector">
             The selector or HTML markup
             </param>
             <param name="css">
             The object whose property names and values map to CSS
             </param>
             <param name="context">
             The context
             </param>
        </member>
        <member name="M:CsQuery.CQ.#ctor(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},CsQuery.CQ)">
             <summary>
             Create a new CsQuery object from a set of DOM elements, assigning the 2nd parameter as a context for this object.
             </summary>
            
             <param name="elements">
             The elements that make up the selection set in the new object
             </param>
             <param name="context">
             A CQ object that will be assigned as the context for this one.
             </param>
        </member>
        <member name="M:CsQuery.CQ.op_Implicit(System.String)~CsQuery.CQ">
             <summary>
             Create a new CQ object from html.
             </summary>
            
             <param name="html">
             A string of HTML
             </param>
        </member>
        <member name="M:CsQuery.CQ.CreateNewDocument">
            <summary>
            Bind this instance to a new empty DomDocument configured with the default options.
            </summary>
        </member>
        <member name="M:CsQuery.CQ.CreateNewFragment">
            <summary>
            Bind this instance to a new empty DomFragment configured with the default options.
            </summary>
        </member>
        <member name="M:CsQuery.CQ.CreateNewFragment(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Bind this instance to a new DomFragment created from a sequence of elements.
             </summary>
            
             <param name="elements">
             The elements to provide the source for this object's DOM.
             </param>
        </member>
        <member name="M:CsQuery.CQ.CreateNew(CsQuery.CQ,System.IO.Stream,System.Text.Encoding,CsQuery.HtmlParsingMode,CsQuery.HtmlParsingOptions,CsQuery.DocType)">
             <summary>
             Bind this instance to a new DomFragment created from HTML in a specific HTML tag context.
             </summary>
            
             <param name="target">
             The target.
             </param>
             <param name="html">
             The HTML.
             </param>
             <param name="encoding">
             The character set encoding.
             </param>
             <param name="parsingMode">
             The HTML parsing mode.
             </param>
             <param name="parsingOptions">
             (optional) options for controlling the parsing.
             </param>
             <param name="docType">
             (optional) type of the document.
             </param>
        </member>
        <member name="M:CsQuery.CQ.CreateNewFragment(CsQuery.CQ,System.String,System.String,CsQuery.DocType)">
             <summary>
             Bind this instance to a new DomFragment created from HTML using the specified parsing mode and element context
             </summary>
            
             <param name="target">
             The target.
             </param>
             <param name="html">
             The HTML.
             </param>
             <param name="context">
             The context (e.g. an HTML tag name)
             </param>
             <param name="docType">
             (optional) type of the document.
             </param>
        </member>
        <member name="M:CsQuery.CQ.ConfigureNewInstance(CsQuery.CQ,System.Collections.Generic.IEnumerable{CsQuery.IDomObject},CsQuery.CQ)">
             <summary>
             Configures a new instance for a sequence of elements and an existing context.
             </summary>
            
             <param name="dom">
             The dom.
             </param>
             <param name="elements">
             A sequence of elements.
             </param>
             <param name="context">
             The context.
             </param>
        </member>
        <member name="M:CsQuery.CQ.ConfigureNewInstance(System.String,CsQuery.CQ)">
             <summary>
             Configures a new instance for a sequence of elements and an existing context.
             </summary>
            
             <param name="selector">
             A valid CSS selector.
             </param>
             <param name="context">
             The context.
             </param>
        </member>
        <member name="M:CsQuery.CQ.ToJSON(System.Object)">
             <summary>
             Convert an object to JSON.
             </summary>
            
             <param name="json">
             The obect to serialize.
             </param>
            
             <returns>
             A JSON formatted string.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.ParseJSON``1(System.String)">
             <summary>
             Parse JSON into a typed object.
             </summary>
            
             <typeparam name="T">
             The target type of the object to create.
             </typeparam>
             <param name="json">
             The JSON string to deserialize.
             </param>
            
             <returns>
             A new object of type T
             </returns>
        </member>
        <member name="M:CsQuery.CQ.ParseJSON(System.String)">
             <summary>
             Parse a JSON string into an expando object, or a json value into a primitive type.
             </summary>
            
             <param name="json">
             The JSON string to deserialize.
             </param>
            
             <returns>
             A new object of type T
             </returns>
        </member>
        <member name="M:CsQuery.CQ.ParseJSON(System.String,System.Type)">
             <summary>
             Parse a JSON string into an expando object, or a json value into a primitive type.
             </summary>
            
             <param name="json">
             The JSON string to deserialize.
             </param>
             <param name="type">
             The type of object to create
             </param>
            
             <returns>
             A new object of the specified type
             </returns>
        </member>
        <member name="M:CsQuery.CQ.ToExpando(System.Object)">
             <summary>
             Convert a dictionary to a dynamic object. Use to get another expando object from a sub-
             object of an expando object, e.g. as returned from JSON data.
             </summary>
            
             <param name="obj">
             The object.
             </param>
            
             <returns>
             obj as a JsObject.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.ToDynamic``1(System.Object)">
             <summary>
             Converts an object to a dynamic object of type T.
             </summary>
            
             <typeparam name="T">
             The type of object to create. This must be an IDynamicMetaObjectProvider that also implements
             IDictionary&lt;string,object&gt;
             </typeparam>
             <param name="obj">
             The object.
             </param>
            
             <returns>
             A new object of type T.
             </returns>
        </member>
        <member name="P:CsQuery.CQ.Item(System.Int32)">
             <summary>
             Return a specific element from the selection set.
             </summary>
            
             <param name="index">
             The zero-based index of the element to be returned.
             </param>
            
             <returns>
             An IDomObject.
             </returns>
            
             <url>
             http://api.jquery.com/get/.
             </url>
        </member>
        <member name="P:CsQuery.CQ.Item(System.String)">
             <summary>
             Select elements and return a new CSQuery object.
             </summary>
            
             <remarks>
             The "Select" method is the default CsQuery method. It's overloads are identical to the
             overloads of the CQ object's property indexer and it functions the same way. This is
             analogous to the default jQuery method, e.g. $(...).
             </remarks>
            
             <param name="selector">
             A string containing a selector expression.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/jQuery/#jQuery1
             </url>
        </member>
        <member name="P:CsQuery.CQ.Item(CsQuery.IDomObject)">
             <summary>
             Return a new CQ object wrapping an element.
             </summary>
            
             <param name="element">
             The element to wrap.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/jQuery/#jQuery1
             </url>
        </member>
        <member name="P:CsQuery.CQ.Item(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Return a new CQ object wrapping a sequence of elements.
             </summary>
            
             <param name="element">
             The elements to wrap.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/jQuery/#jQuery1
             </url>
        </member>
        <member name="P:CsQuery.CQ.Item(System.String,CsQuery.IDomObject)">
             <summary>
             Select elements from within a context.
             </summary>
            
             <param name="selector">
             A string containing a selector expression.
             </param>
             <param name="context">
             The point in the document at which the selector should begin matching; similar to the context
             argument of the CQ.Create(selector, context) method.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/jQuery/#jQuery1
             </url>
        </member>
        <member name="P:CsQuery.CQ.Item(System.String,System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Select elements from within a context.
             </summary>
            
             <param name="selector">
             A string containing a selector expression.
             </param>
             <param name="context">
             The points in the document at which the selector should begin matching; similar to the
             context argument of the CQ.Create(selector, context) method. Only elements found below the
             members of the sequence in the document can be matched.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/jQuery/#jQuery1
             </url>
        </member>
        <member name="P:CsQuery.CQ.Length">
             <summary>
             The number of elements in the CQ object.
             </summary>
            
             <url>
             http://api.jquery.com/length/
             </url>
        </member>
        <member name="P:CsQuery.CQ.Document">
             <summary>
             Represents the full, parsed DOM for an object created with an HTML parameter. The Document is
             the equivalent of the "document" in a browser. The Document node for a complete HTML document
             should have only two children, the DocType node and the HTML node.
             </summary>
            
             <value>
             Returns the Document for this CQ object. This can also be an IDomFragment type, which is a
             derived type of IDomDocument. This is mostly a useful distinction to determine
             programatically how the CQ object was created and whether it's intended to represent a
             complete HTML document, or only a partial fragment.
             </value>
        </member>
        <member name="P:CsQuery.CQ.Selector">
             <summary>
             The selector (parsed) used to create this instance.
             </summary>
            
             <remarks>
             This is not guaranteed to have useful data, since CQ objects can be created indirectly and
             not represent a selector. If this object was created directly from a selector, this will
             contain the Selector object. The ToString() overload will show how the selector was parsed.
             </remarks>
        </member>
        <member name="P:CsQuery.CQ.Selection">
            <summary>
            The entire selection set as a sequence of elements. This is the default enumerator for a CQ
            object as well.
            </summary>
        </member>
        <member name="P:CsQuery.CQ.Elements">
            <summary>
            Returns only IDomElement objects from the current selection.
            </summary>
        </member>
        <member name="P:CsQuery.CQ.Order">
            <summary>
            Gets or sets the order in which the selection set is returned. Usually, this is the order
            that elements appear in the DOM. Some operations could result in a selection set that's in an
            arbitrary order, though.
            </summary>
        </member>
        <member name="P:CsQuery.CQ.CsQueryParent">
            <summary>
            The object from which this CsQuery was created.
            </summary>
        </member>
        <member name="P:CsQuery.CQ.SelectionSet">
            <summary>
            The current selection set including all node types.
            </summary>
        </member>
        <member name="P:CsQuery.CQ.DefaultDomRenderingOptions">
            <summary>
            DEPRECATED. Please use CsQuery.Config.DomRenderingOptions. 
            </summary>
        </member>
        <member name="P:CsQuery.CQ.DefaultDocType">
            <summary>
            DEPRECATED. Please use CsQuery.Config.DocType
            </summary>
        </member>
        <member name="P:CsQuery.CQ.Browser">
            <summary>
            (Alpha) Provide simple user agent information.
            </summary>
        </member>
        <member name="T:CsQuery.CSSRuleType">
            <summary>
            Values that represent CSSRuleType.
            </summary>
        </member>
        <member name="F:CsQuery.CSSRuleType.UNKNOWN_RULE">
            <summary>
            An unknown rule.
            </summary>
        </member>
        <member name="F:CsQuery.CSSRuleType.STYLE_RULE">
            <summary>
            A CSS Style rule.
            </summary>
        </member>
        <member name="F:CsQuery.CSSRuleType.CHARSET_RULE">
            <summary>
            A character set rule.
            </summary>
        </member>
        <member name="F:CsQuery.CSSRuleType.IMPORT_RULE">
            <summary>
            An import rule.
            </summary>
        </member>
        <member name="F:CsQuery.CSSRuleType.MEDIA_RULE">
            <summary>
            A media rule.
            </summary>
        </member>
        <member name="F:CsQuery.CSSRuleType.FONT_FACE_RULE">
            <summary>
            A font face rule.
            </summary>
        </member>
        <member name="F:CsQuery.CSSRuleType.PAGE_RULE">
            <summary>
            A page rule.
            </summary>
        </member>
        <member name="T:CsQuery.ICSSRule">
             <summary>
             Interface for icss rule.
             </summary>
            
             <url>
             http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSRule
             </url>
        </member>
        <member name="P:CsQuery.ICSSRule.Type">
            <summary>
            Gets the type of rule.
            </summary>
        </member>
        <member name="P:CsQuery.ICSSRule.CssText">
            <summary>
            The parsable textual representation of the rule. This reflects the current state of the rule
            and not its initial value.
            </summary>
        </member>
        <member name="P:CsQuery.ICSSRule.ParentStyleSheet">
            <summary>
            The style sheet that contains this rule.
            </summary>
        </member>
        <member name="P:CsQuery.ICSSRule.ParentRule">
            <summary>
            If this rule is contained inside another rule (e.g. a style rule inside an @media block),
            this is the containing rule. If this rule is not nested inside any other rules, this returns
            null.
            </summary>
        </member>
        <member name="T:CsQuery.ICSSStyleRule">
             <summary>
             Interface for a CSS style rule.
             </summary>
            
             <url>
             http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleRule
             </url>
        </member>
        <member name="P:CsQuery.ICSSStyleRule.SelectorText">
            <summary>
            The textual representation of the selector for the rule set. The implementation may have
            stripped out insignificant whitespace while parsing the selector.
            </summary>
        </member>
        <member name="P:CsQuery.ICSSStyleRule.Style">
            <summary>
            The declaration-block of this rule set.
            </summary>
        </member>
        <member name="T:CsQuery.ICSSStyleSheet">
             <summary>
             Interface to a CSS style sheet.
             </summary>
            
             <url>
             http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleSheet
             </url>
        </member>
        <member name="P:CsQuery.ICSSStyleSheet.Disabled">
            <summary>
            Indicates whether the style sheet is applied to the document. 
            </summary>
        </member>
        <member name="P:CsQuery.ICSSStyleSheet.Href">
            <summary>
            If the style sheet is a linked style sheet, the value of its attribute is its location. For inline style sheets, the value of this attribute is null.
            </summary>
        </member>
        <member name="P:CsQuery.ICSSStyleSheet.OwnerNode">
            <summary>
            The node that associates this style sheet with the document. For HTML, this may be the
            corresponding LINK or STYLE element.
            </summary>
        </member>
        <member name="P:CsQuery.ICSSStyleSheet.Type">
            <summary>
            This specifies the style sheet language for this style sheet. This will always be "text/css"
            </summary>
        </member>
        <member name="P:CsQuery.ICSSStyleSheet.CssRules">
            <summary>
            Gets the CSS rules for this style sheet.
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.CSSRule">
             <summary>
             Interface for icss rule.
             </summary>
            
             <url>
             http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSRule
             </url>
        </member>
        <member name="M:CsQuery.Implementation.CSSRule.#ctor(CsQuery.ICSSStyleSheet,CsQuery.ICSSRule)">
             <summary>
             Constructor for a CSS rule.
             </summary>
            
             <param name="parentStyleSheet">
             The parent style sheet.
             </param>
             <param name="parentRule">
             The parent rule.
             </param>
        </member>
        <member name="P:CsQuery.Implementation.CSSRule.Type">
            <summary>
            Gets the type of rule.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.CSSRule.CssText">
            <summary>
            The parsable textual representation of the rule. This reflects the current state of the rule
            and not its initial value.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.CSSRule.ParentStyleSheet">
             <summary>
             The style sheet that contains this rule.
             </summary>
            
             <value>
             The parent style sheet.
             </value>
        </member>
        <member name="P:CsQuery.Implementation.CSSRule.ParentRule">
             <summary>
             If this rule is contained inside another rule (e.g. a style rule inside an @media block),
             this is the containing rule. If this rule is not nested inside any other rules, this returns
             null.
             </summary>
            
             <value>
             The parent rule.
             </value>
        </member>
        <member name="T:CsQuery.Implementation.CSSStyleChangedArgs">
            <summary>
            Arguments for when a style is changed.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleChangedArgs.#ctor(System.Boolean)">
             <summary>
             Constructor.
             </summary>
            
             <param name="hasStyles">
             A value indicating whether this object has styles following the change.
             </param>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleChangedArgs.HasStyles">
            <summary>
            Gets a value indicating whether this object has styles following the change.
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.CSSStyleRule">
             <summary>
             A CSS style rule.
             </summary>
            
             <url>
             http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleRule
             </url>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleRule.#ctor(CsQuery.ICSSStyleSheet,CsQuery.ICSSRule)">
             <summary>
             Constructor.
             </summary>
            
             <param name="parentStyleSheet">
             The parent style sheet.
             </param>
             <param name="parentRule">
             The parent rule.
             </param>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleRule.SelectorText">
            <summary>
            The textual representation of the selector for the rule set. The implementation may have
            stripped out insignificant whitespace while parsing the selector.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleRule.Style">
            <summary>
            The declaration-block of this rule set.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleRule.CssText">
            <summary>
            The parsable textual representation of the rule. This reflects the current state of the rule
            and not its initial value.
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.CSSStyleSheet">
             <summary>
             A CSS style sheet.
             </summary>
            
             <url>
             http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleSheet
             </url>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleSheet.#ctor(CsQuery.IDomElement)">
             <summary>
             Constructor.
             </summary>
            
             <param name="ownerNode">
             The node that owns this item.
             </param>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleSheet.Disabled">
            <summary>
            Indicates whether the style sheet is applied to the document.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleSheet.Href">
            <summary>
            If the style sheet is a linked style sheet, the value of its attribute is its location. For
            inline style sheets, the value of this attribute is null.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleSheet.OwnerNode">
             <summary>
             The node that associates this style sheet with the document. For HTML, this may be the
             corresponding LINK or STYLE element.
             </summary>
            
             <value>
             The owner node.
             </value>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleSheet.Type">
             <summary>
             This specifies the style sheet language for this style sheet. This will always be "text/css".
             </summary>
            
             <value>
             The type.
             </value>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleSheet.CssRules">
             <summary>
             Gets the CSS rules for this style sheet.
             </summary>
            
             <value>
             The CSS rules.
             </value>
        </member>
        <member name="T:CsQuery.Implementation.HTMLStyleElement">
            <summary>
            A STYLE element
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.DomElement">
            <summary>
            HTML elements.
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.DomContainer`1">
            <summary>
            Base class for Dom object that contain other elements
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.DomObject`1">
            <summary>
            Base class for anything that exists in the DOM
            </summary>
            
        </member>
        <member name="T:CsQuery.Implementation.DomObject">
            <summary>
            Something that appears in the DOM. This is essentially the same as a Node in the browser DOM,
            but IDomObject represents only things that may appear in the DOM (e.g. not an attribute,
            document, doctype)
            </summary>
        </member>
        <member name="T:CsQuery.IDomObject">
            <summary>
            An node that appears directly in the DOM. This is essentially synonymous with a Node, but it does
            not include attributes.
            
            All properties of Element nodes are implemented in IDomObject even though many are only applicable to
            Elements. Attempting to read a property that doesn't exist on the node type will generally return 'null'
            whereas attempting to write will throw an exception. This is intended to make coding against this model
            the same as coding against the actual DOM, where accessing nonexistent properties is acceptable. Because
            some javascript code actually uses this in logic we allow the same kind of access. It also eliminates the
            need to cast frequently, for example, when accessing the results of a jQuery object by index.
            </summary>
        </member>
        <member name="T:CsQuery.IDomNode">
            <summary>
            Interface for a node. This is the most generic construct in the CsQuery DOM.
            </summary>
        </member>
        <member name="M:CsQuery.IDomNode.Render">
             <summary>
             Renders the complete HTML for this element, including its children.
             </summary>
            
             <returns>
             a string of HTML.
             </returns>
        </member>
        <member name="M:CsQuery.IDomNode.Render(CsQuery.DomRenderingOptions)">
             <summary>
             Renders the complete HTML for this element, including its children.
             </summary>
            
             <returns>
             a string of HTML
             </returns>
        </member>
        <member name="M:CsQuery.IDomNode.Render(CsQuery.Output.IOutputFormatter)">
             <summary>
             Renders the complete HTML for this element, including its children, using the OutputFormatter.
             </summary>
            
             <returns>
             a string of HTML
             </returns>
        </member>
        <member name="M:CsQuery.IDomNode.Render(CsQuery.Output.IOutputFormatter,System.IO.TextWriter)">
             <summary>
             Renders the complete HTML for this element, including its children, using the OutputFormatter.
             </summary>
            
             <returns>
             a string of HTML
             </returns>
        </member>
        <member name="M:CsQuery.IDomNode.Render(System.Text.StringBuilder)">
             <summary>
             Renders the complete HTML for this element to a StringBuilder. Note: This is obsolete; use Render(IOutputFormatter)
             </summary>
            
             <param name="sb">
             An existing StringBuilder instance to append this element's HTML.
             </param>
        </member>
        <member name="M:CsQuery.IDomNode.Render(System.Text.StringBuilder,CsQuery.DomRenderingOptions)">
             <summary>
             Renders the complete HTML for this element, including its children, using the OutputFormatter.
             </summary>
            
             <param name="sb">
             An existing StringBuilder instance to append this element's HTML.
             </param>
             <param name="options">
             (optional) options for controlling the operation.
             </param>
        </member>
        <member name="M:CsQuery.IDomNode.Remove">
            <summary>
            Removes this object from it's parent, and consequently the Document, if any, to which it belongs.
            </summary>
        </member>
        <member name="M:CsQuery.IDomNode.Clone">
             <summary>
             Makes a deep copy of this object.
             </summary>
            
             <returns>
             A copy of this object.
             </returns>
        </member>
        <member name="P:CsQuery.IDomNode.NodeType">
            <summary>
            Gets the type of the node.
            </summary>
        </member>
        <member name="P:CsQuery.IDomNode.NodeName">
             <summary>
             The node (tag) name, in upper case.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Node.nodeName
             </url>
        </member>
        <member name="P:CsQuery.IDomNode.NodeValue">
             <summary>
             Gets or sets the value of this node.
             </summary>
            
             <remarks>
             For the document itself, nodeValue returns null. For text, comment, and CDATA nodes,
             nodeValue returns the content of the node.
             </remarks>
            
             <url>
             https://developer.mozilla.org/en/DOM/Node.nodeValue
             </url>
        </member>
        <member name="P:CsQuery.IDomNode.HasChildren">
             <summary>
             Gets a value indicating whether this object has any children. For node types that cannot have
             children, it will always return false. To determine if a node is allowed to have children,
             use the ChildrenAllowed property.
             </summary>
            
             <seealso cref="P:CsQuery.IDomObject.ChildrenAllowed"/>
        </member>
        <member name="P:CsQuery.IDomNode.Index">
            <summary>
            Gets zero-based index of this object relative to its siblings including all node types.
            </summary>
        </member>
        <member name="P:CsQuery.IDomNode.ChildNodes">
            <summary>
            Return an INodeList of the direct children of this node.
            </summary>
        </member>
        <member name="P:CsQuery.IDomNode.ChildElements">
            <summary>
            Return a sequence containing only the element children of this node (e.g. no text, cdata, comments)
            </summary>
        </member>
        <member name="P:CsQuery.IDomNode.IsIndexed">
            <summary>
            Gets a value indicating whether this node should be is indexed. Generally, this is true for IDomElement
            nodes that are within an IDomDocument and false otherwise.
            </summary>
        </member>
        <member name="P:CsQuery.IDomNode.IsDisconnected">
             <summary>
             Gets a value indicating whether this object belongs to a Document or not.
             </summary>
            
             <remarks>
             Disconnected elements are not bound to a DomDocument object. This could be because
             they were instantiated outside a document context, or were removed as a result of
             an operation such as ReplaceWith.
             </remarks>
        </member>
        <member name="P:CsQuery.IDomNode.IsFragment">
            <summary>
            Gets a value indicating whether this object belongs is a fragmment and is bound to an 
            IDomFragment object.
            </summary>
        </member>
        <member name="M:CsQuery.IDomObject.AppendChild(CsQuery.IDomObject)">
             <summary>
             Adds a node to the end of the list of children of a specified parent node. If the node
             already exists it is removed from current parent node, then added to new parent node.
             </summary>
            
             <param name="element">
             The element to append.
             </param>
            
             <url>
             https://developer.mozilla.org/en/DOM/Node.appendChild
             </url>
        </member>
        <member name="M:CsQuery.IDomObject.RemoveChild(CsQuery.IDomObject)">
             <summary>
             Removes a child node from the DOM. Returns removed node.
             </summary>
            
             <param name="element">
             The element to remove.
             </param>
            
             <url>
             https://developer.mozilla.org/En/DOM/Node.removeChild
             </url>
        </member>
        <member name="M:CsQuery.IDomObject.InsertBefore(CsQuery.IDomObject,CsQuery.IDomObject)">
             <summary>
             Inserts the specified node before a reference element as a child of the current node.
             </summary>
            
             <param name="newNode">
             The node to insert.
             </param>
             <param name="referenceNode">
             The node before which the new node will be inserted.
             </param>
            
             <url>
             https://developer.mozilla.org/en/DOM/Node.insertBefore
             </url>
        </member>
        <member name="M:CsQuery.IDomObject.InsertAfter(CsQuery.IDomObject,CsQuery.IDomObject)">
             <summary>
             Inserts the specified node after a reference element as a child of the current node.
             </summary>
            
             <remarks>
             This is a CsQuery extension.
             </remarks>
            
             <param name="newNode">
             The new node to be inserted.
             </param>
             <param name="referenceNode">
             The node after which the new node will be inserted.
             </param>
        </member>
        <member name="M:CsQuery.IDomObject.SetAttribute(System.String)">
             <summary>
             Adds a new boolean attribute or sets its value to true.
             </summary>
            
             <remarks>
             In HTML, some element attributes can be specified without a value, such as "checked" or
             "multiple." These are not really attributes but rather the default values for element boolean
             properties. CsQuery does not distinguish between properties and attributes since the DOM is
             stateless, it only reflects the actual markup it represents. The real DOM, to the contrary,
             can be changed through javascript. It would be possible for an element's property to be
             different from the default value that is specified by its markup.
             
             Because of this, we treat properties and attributes the same. A property is simply an
             attribute with no specific value, it either exists or does not exist. This overload of
             SetAttribute allows you to set a boolean attribute. You can use RemoveAttribute to unset it.
             
             It is also possible to set an attribute to an empty string, e.g. with markup like  
                 &lt;div someAttr=""&gt;
                 
             
             </remarks>
            
             <param name="name">
             The attribute name.
             </param>
        </member>
        <member name="M:CsQuery.IDomObject.SetAttribute(System.String,System.String)">
             <summary>
             Adds a new attribute or changes the value of an existing attribute on the specified element.
             </summary>
            
             <remarks>
             Setting an attribute to null is the equivalent of using RemoveAttribute. Setting an attribute
             to an empty string will cause it to be rendered as an empty value, e.g.
             
                 &lt;div someAttr=""&gt;
             
             If you want to set a boolean attribute that renders just as the attribute name, use
             SetAttribute(name) overload. When using GetAttribute to inspect an attribute value, note that
             both boolean and empty-string attributes will return an empty string. There is no way to determine
             using GetAttribute if the atttribute was set as a boolean property, or an empty string.
             </remarks>
            
             <param name="name">
             The attribute name.
             </param>
             <param name="value">
             For input elements, the "value" property of this element. Returns null for other element
             types.
             </param>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.setAttribute
             </url>
        </member>
        <member name="M:CsQuery.IDomObject.GetAttribute(System.String)">
             <summary>
             Returns the value of the named attribute on the specified element. If the named attribute
             does not exist, the value returned will be null. The empty string is returned for values that
             exist but have no value.
             </summary>
            
             <remarks>
             If an attribute does not exist, this returns null. If an attribute was set as a boolean
             property attribute, or the attribute has an empty string value, an empty string will be
             returned. Note that an empty-string value for GetAttribute could result in an attribute
             rendering as either a property, or an empty string value, e.g.
             
             &amp;ltdiv someAttr&gt;
             &amp;ltdiv someAttr=""&gt;
             
             There is no way to determine whether an attribute was set as a property or empty string other
             than rendering. The internal data will match the way it was parsed from HTML, or the way it
             was set. When set using  <code>SetAttribute(name)</code> it will be displayed as a boolean
             property; when set using <code>SetAttribute(name,"")</code> it will be displayed as an empty
             string.
             </remarks>
            
             <param name="name">
             The attribute name.
             </param>
            
             <returns>
             The attribute value string.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.getAttribute
             </url>
        </member>
        <member name="M:CsQuery.IDomObject.GetAttribute(System.String,System.String)">
             <summary>
             Returns the value of the named attribute on the specified element. If the named attribute
             does not exist, the value returned will be the provide "defaultValue".
             </summary>
            
             <remarks>
             This overload is a CsQuery extension.
             </remarks>
            
             <param name="name">
             The attribute name.
             </param>
             <param name="defaultValue">
             A string to return if the attribute does not exist.
             </param>
            
             <returns>
             The attribute value string.
             </returns>
            
             <seealso cref="T:CsQuery.IDomObject.GetAttribute"/>
        </member>
        <member name="M:CsQuery.IDomObject.TryGetAttribute(System.String,System.String@)">
             <summary>
             Try to get a named attribute.
             </summary>
            
             <remarks>
             This overload is a CsQuery extension.
             </remarks>
            
             <param name="name">
             The attribute name.
             </param>
             <param name="value">
             The attribute value, or null if the named attribute does not exist.
             </param>
            
             <returns>
             true if the attribute exists, false if it does not.
             </returns>
        </member>
        <member name="M:CsQuery.IDomObject.HasAttribute(System.String)">
             <summary>
             Returns a boolean value indicating whether the specified element has the specified attribute or not.
             </summary>
            
             <param name="name">
             The attribute name.
             </param>
            
             <returns>
             true if the named attribute exists, false if not.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.hasAttribute
             </url>
        </member>
        <member name="M:CsQuery.IDomObject.RemoveAttribute(System.String)">
             <summary>
             Removes an attribute from the specified element.
             </summary>
            
             <param name="name">
             The attribute name.
             </param>
            
             <returns>
             true if it the attribute exists, false if the attribute did not exist. If the attribute
             exists it will always be removed, that is, it is not possible for this method to fail unless
             the attribute does not exist.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.removeAttribute
             </url>
        </member>
        <member name="M:CsQuery.IDomObject.HasClass(System.String)">
             <summary>
             Returns a boolean value indicating whether the named class exists on this element.
             </summary>
            
             <param name="className">
             The class name for which to test.
             </param>
            
             <returns>
             true if the class is a member of this elements classes, false if not.
             </returns>
             <remarks>This is a CsQuery extension.</remarks>
        </member>
        <member name="M:CsQuery.IDomObject.AddClass(System.String)">
             <summary>
             Adds the class.
             </summary>
            
             <param name="className">
             The class name for which to test.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.IDomObject.RemoveClass(System.String)">
             <summary>
             Removes the named class from the classes defined for this element.
             </summary>
            
             <remarks>
             This method is a CsQuery extension.
             </remarks>
            
             <param name="className">
             The class name to remove.
             </param>
            
             <returns>
             true if the class exists and was removed from this element, false if the class did not exist.
             If the class exists it will always be removed, that is, it is not possible for this method to
             fail if the class exists.
             </returns>
        </member>
        <member name="M:CsQuery.IDomObject.HasStyle(System.String)">
             <summary>
             Returns a boolean value indicating whether the named style is defined in the styles for this
             element.
             </summary>
            
             <param name="styleName">
             Name of the style to test.
             </param>
            
             <returns>
             true if the style is explicitly defined on this element, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.IDomObject.AddStyle(System.String)">
             <summary>
             Adds a style descriptor to this element, validating the style name and value against the CSS3
             ruleset. The string should be of the form "styleName: styleDef;", e.g.
             
                 "width: 10px;"
             
             The trailing semicolon is optional.
             
             </summary>
            
             <param name="styleString">
             The style string.
             </param>
        </member>
        <member name="M:CsQuery.IDomObject.AddStyle(System.String,System.Boolean)">
             <summary>
             Adds a style descriptor to this element, optionally validating against the CSS3 ruleset. The
             default method always validates; this overload should be used if validation is not desired.
             </summary>
            
             <param name="style">
             An object encapsulating the Styles associated with this element.
             </param>
             <param name="strict">
             true to enforce validation of CSS3 styles.
             </param>
        </member>
        <member name="M:CsQuery.IDomObject.RemoveStyle(System.String)">
             <summary>
             Removes the named style from this element.
             </summary>
            
             <param name="name">
             The style name.
             </param>
            
             <returns>
             true if the style exists and is removed, false if the style did not exist.
             </returns>
        </member>
        <member name="M:CsQuery.IDomObject.DescendantCount">
             <summary>
             Return the total number of descendants of this element
             </summary>
            
             <returns>
             int, the total number of descendants
             </returns>
        </member>
        <member name="M:CsQuery.IDomObject.Cq">
             <summary>
             Wrap this element in a CQ object. This is the CsQuery equivalent of the common jQuery
             construct $(el). Since there is no default method in C# that we can use to create a similar
             syntax, this method serves the same purpose.
             </summary>
            
             <returns>
             A new CQ object wrapping this element.
             </returns>
        </member>
        <member name="M:CsQuery.IDomObject.Clone">
             <summary>
             Clone this element.
             </summary>
            
             <returns>
             A copy of this element that is not bound to the original.
             </returns>
        </member>
        <member name="P:CsQuery.IDomObject.Document">
            <summary>
            The HTML document to which this element belongs
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.ParentNode">
            <summary>
            The direct parent of this node
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.Item(System.Int32)">
             <summary>
             The child node at the specified index.
             </summary>
            
             <param name="index">
             The zero-based index of the child node to access.
             </param>
            
             <returns>
             IDomObject, the element at the specified index within this node's children.
             </returns>
        </member>
        <member name="P:CsQuery.IDomObject.Item(System.String)">
             <summary>
             Get or set the value of the named attribute on this element.
             </summary>
            
             <param name="attribute">
             The attribute name.
             </param>
            
             <returns>
             An attribute value.
             </returns>
        </member>
        <member name="P:CsQuery.IDomObject.Id">
            <summary>
            Get or set value of the id attribute.
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.Attributes">
            <summary>
            An interface to access the attributes collection of this element.
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.Style">
            <summary>
            An object encapsulating the Styles associated with this element.
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.ClassName">
             <summary>
             gets and sets the value of the class attribute of the specified element.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.className
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.Classes">
            <summary>
            All the unique class names applied to this object.
            </summary>
            <value>
            A sequence of strings	   
            </value>
        </member>
        <member name="P:CsQuery.IDomObject.Value">
            <summary>
            For input elements, the "value" property of this element. Returns null for other element
            types.
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.DefaultValue">
            <summary>
            The value of an input element, or the text of a textarea element.
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.InnerHTML">
             <summary>
             Gets or sets or gets the HTML of an elements descendants.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.innerHTML
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.OuterHTML">
             <summary>
             Gets or sets the outer HTML.
             </summary>
            
             <url>
             https://developer.mozilla.org/en-US/docs/DOM/element.outerHTML
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.InnerText">
             <summary>
             Gets or sets the text content of a node and its descendants.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Node.textContent
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.FirstChild">
             <summary>
             Returns the node's first child in the tree, or null if the node is childless. If the node is a Document, it returns the first node in the list of its direct children.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.firstChild
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.FirstElementChild">
             <summary>
             Returns the element's first child element or null if there are no child elements.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Element.firstElementChild
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.LastChild">
             <summary>
             Returns the last child of a node.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Node.lastChild
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.LastElementChild">
             <summary>
             Returns the element's last child element or null if there are no child elements.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Element.lastElementChild
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.NextSibling">
             <summary>
             Returns the node immediately following the specified one in its parent's childNodes list, or
             null if the specified node is the last node in that list.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Node.nextSibling
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.PreviousSibling">
             <summary>
             Returns the node immediately preceding the specified one in its parent's childNodes list,
             null if the specified node is the first in that list.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Node.previousSibling
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.NextElementSibling">
             <summary>
             Returns the element immediately following the specified one in its parent's children list,
             or null if the specified element is the last one in the list.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Element.nextElementSibling
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.PreviousElementSibling">
             <summary>
             Returns the element immediately prior to the specified one in its parent's children list, or
             null if the specified element is the first one in the list.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Element.previousElementSibling
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.HasAttributes">
            <summary>
            Returns true if this node has any attributes.
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.HasClasses">
            <summary>
            Returns true if this node has CSS classes.
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.HasStyles">
            <summary>
            Returns true if this node has any styles defined.
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.Selected">
             <summary>
             Indicates whether the element is selected or not. This value is read-only. To change the
             selection, set either the selectedIndex or selectedItem property of the containing element.
             </summary>
            
             <remarks>
             In CsQuery, this property simply indicates the presence of a "selected" attribute. The
             accompanying "SelectedIndex" and "SelectedItem" properties have not been implemented as of
             this writing.
             </remarks>
            
             <url>
             https://developer.mozilla.org/en/XUL/Attribute/selected
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.Checked">
             <summary>
             Gets or sets a value indicating whether the element is checked.
             </summary>
            
             <remarks>
             In CsQuery, this property simply indicates the presence of a "checked" attribute.
             </remarks>
            
             <url>
             https://developer.mozilla.org/en/XUL/Property/checked
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.ReadOnly">
             <summary>
             Gets or sets a value indicating whether the only should be read.
             </summary>
            
             <remarks>
             In CsQuery, this property simply indicates the presence of a "readonly" attribute.
             </remarks>
            
             <url>
             https://developer.mozilla.org/en/XUL/Property/readOnly
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.Type">
             <summary>
             The value of the "type" attribute. For input elements, this property always returns a
             lowercase value and defaults to "text" if there is no type attribute. For other element types,
             it simply returns the value of the "type" attribute.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/XUL/Property/type
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.Name">
             <summary>
             Gets or sets the name attribute of an DOM object, it only applies to the following elements:
             &lt;a&gt; , &lt;applet&gt; , &lt;form&gt; , &lt;frame&gt; , &lt;iframe&gt; , &lt;img&gt; ,
             &lt;input&gt; , &lt;map&gt; , &lt;meta&gt; , &lt;object&gt; , &lt;option&gt; , &lt;param&gt; ,
             &lt;select&gt; , and &lt;textarea&gt; .
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.name
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.InnerHtmlAllowed">
            <summary>
            Gets a value indicating whether HTML is allowed as a child of this element. It is possible
            for this value to be false but InnerTextAllowed to be true for elements which can have inner
            content, but no child HTML markup, such as &lt;textarea&gt; and &lt;script&gt;
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.InnerTextAllowed">
            <summary>
            Gets a value indicating whether text content is allowed as a child of this element. 
            DEPRECATED 7-1-2012, PLEASE USE ChildrenAllowed(). This will be removed in a future release.
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.ChildrenAllowed">
            <summary>
            Gets a value indicating whether this element may have children. When false, it means this is
            a void element.
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.Depth">
            <summary>
            Gets the depth of this node relative to the Document node, which has depth zero.
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.PathID">
            <summary>
            Gets a unique ID for this element among its siblings
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.Path">
            <summary>
            Gets the unique path to this element from the root of the heirarchy. This is generally only
            used for internal purposes.
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.NodeNameID">
            <summary>
            The internal token ID for this element's node name. 
            </summary>
        </member>
        <member name="F:CsQuery.Implementation.DomObject._Document">
            <summary>
            A reference to the owning document. This is also the topmost node in the tree.
            </summary>
        </member>
        <member name="F:CsQuery.Implementation.DomObject._Index">
            <summary>
            Backing property for index.
            </summary>
        </member>
        <member name="F:CsQuery.Implementation.DomObject._ParentNode">
            <summary>
            The parent node. Do not expose this. _ParentNode should only be managed by the ParentNode
            property.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.CloneImplementation">
             <summary>
             The implementation for Clone.
             </summary>
            
             <returns>
             A clone of this object.
             </returns>
        </member>
        <member name="F:CsQuery.Implementation.DomObject.DocInfo">
            <summary>
            Information describing metadata about the element's owning document. This is essentially a
            cache, it prevents us from having to check to see if there's an owning document and access it
            directly. This is an optimizaton as this happens often.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.GetPath">
             <summary>
             Gets the full path to this document.
             </summary>
            
             <returns>
             The path.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.GetDepth">
             <summary>
             Gets the depth of the current node.
             </summary>
            
             <returns>
             The depth.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.Render">
             <summary>
             Renders the complete HTML for this element, including its children.
             </summary>
            
             <returns>
             a string of HTML.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.Render(CsQuery.Output.IOutputFormatter,System.IO.TextWriter)">
             <summary>
             Renders the complete HTML for this element, including its children, using the specified
             OutputFormatter.
             </summary>
            
             <param name="formatter">
             The formatter that controls how the ouput is rendered.
             </param>
             <param name="writer">
             The writer to which output should be written.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.Render(CsQuery.Output.IOutputFormatter)">
             <summary>
             Renders the complete HTML for this element, including its children, using the specified
             OutputFormatter.
             </summary>
            
             <param name="formatter">
             The formatter.
             </param>
            
             <returns>
             a string of HTML.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.Render(CsQuery.DomRenderingOptions)">
             <summary>
             Renders the complete HTML for this element, including its children.
             </summary>
            
             <returns>
             a string of HTML
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.Render(System.Text.StringBuilder)">
             <summary>
             Renders the complete HTML for this element, including its children, using the OutputFormatter.
             </summary>
            
             <param name="sb">
             An existing StringBuilder instance to append this element's HTML.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.Render(System.Text.StringBuilder,CsQuery.DomRenderingOptions)">
             <summary>
             Renders the complete HTML for this element to a StringBuilder. Note: This obsolete and will
             be removed; please use Render(IOutputFormatter).
             </summary>
            
             <param name="sb">
             An existing StringBuilder instance to append this element's HTML.
             </param>
             <param name="options">
             (optional) options for controlling the operation.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.Cq">
             <summary>
             Wrap this element in a CQ object. This is the CsQuery equivalent of the common jQuery
             construct $(el). Since there is no default method in C# that we can use to create a similar
             syntax, this method serves the same purpose.
             </summary>
            
             <returns>
             A new CQ object wrapping this element.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.Clone">
             <summary>
             Clone this element.
             </summary>
            
             <returns>
             A copy of this element that is not bound to the original.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.Remove">
             <summary>
             Removes this object from it's parent, and consequently the Document, if any, to which it
             belongs.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the the node has no parent.
             </exception>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.DescendantCount">
             <summary>
             Return the total number of descendants of this element.
             </summary>
            
             <returns>
             int, the total number of descendants.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.AppendChild(CsQuery.IDomObject)">
             <summary>
             Adds a node to the end of the list of children of a specified parent node. If the node
             already exists it is removed from current parent node, then added to new parent node.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="element">
             The element to append.
             </param>
            
             <url>
             https://developer.mozilla.org/en/DOM/Node.appendChild
             </url>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.AppendChildUnsafe(CsQuery.IDomObject)">
             <summary>
             Appends a child without checking to see if its already a member of the DOM. For use in DOM
             construction to avoid unneeded overhead.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="element">
             The element to append.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.RemoveChild(CsQuery.IDomObject)">
             <summary>
             Removes a child node from the DOM. Returns removed node.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="element">
             The element to remove.
             </param>
            
             <url>
             https://developer.mozilla.org/En/DOM/Node.removeChild
             </url>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.InsertBefore(CsQuery.IDomObject,CsQuery.IDomObject)">
             <summary>
             Inserts the specified node before a reference element as a child of the current node.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="newNode">
             The node to insert.
             </param>
             <param name="referenceNode">
             The node before which the new node will be inserted.
             </param>
            
             <url>
             https://developer.mozilla.org/en/DOM/Node.insertBefore
             </url>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.InsertAfter(CsQuery.IDomObject,CsQuery.IDomObject)">
             <summary>
             Inserts the specified node after a reference element as a child of the current node.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="newNode">
             The new node to be inserted.
             </param>
             <param name="referenceNode">
             The node after which the new node will be inserted.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.SetAttribute(System.String)">
             <summary>
             Adds a new boolean attribute or sets its value to true.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the object type does not support attributes
             </exception>
            
             <param name="name">
             The attribute name.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.SetAttribute(System.String,System.String)">
             <summary>
             Adds a new attribute or changes the value of an existing attribute on the specified element.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the object type does not support attributes
             </exception>
            
             <param name="name">
             The attribute name.
             </param>
             <param name="value">
             For input elements, the "value" property of this element. Returns null for other element
             types.
             </param>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.setAttribute
             </url>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.GetAttribute(System.String)">
             <summary>
             Returns the value of the named attribute on the specified element. If the named attribute
             does not exist, the value returned will either be null or "" (the empty string)
             </summary>
            
             <param name="name">
             The attribute name.
             </param>
            
             <returns>
             The attribute value string.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.getAttribute
             </url>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.GetAttribute(System.String,System.String)">
             <summary>
             Returns the value of the named attribute on the specified element. If the named attribute
             does not exist, the value returned will either be the provide "defaultValue".
             </summary>
            
             <param name="name">
             The attribute name.
             </param>
             <param name="defaultValue">
             A string to return if the attribute does not exist.
             </param>
            
             <returns>
             The attribute value string.
             </returns>
            
             <seealso cref="T:CsQuery.IDomObject.GetAttribute"/>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.TryGetAttribute(System.String,System.String@)">
             <summary>
             Try to get a named attribute.
             </summary>
            
             <param name="name">
             The attribute name.
             </param>
             <param name="value">
             The attribute value, or null if the named attribute does not exist.
             </param>
            
             <returns>
             true if the attribute exists, false if it does not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.HasAttribute(System.String)">
             <summary>
             Returns a boolean value indicating whether the specified element has the specified attribute
             or not.
             </summary>
            
             <param name="name">
             The attribute name.
             </param>
            
             <returns>
             true if the named attribute exists, false if not.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.hasAttribute
             </url>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.RemoveAttribute(System.String)">
             <summary>
             Removes an attribute from the specified element.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="name">
             The attribute name.
             </param>
            
             <returns>
             true if it the attribute exists, false if the attribute did not exist. If the attribute
             exists it will always be removed, that is, it is not possible for this method to fail unless
             the attribute does not exist.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.removeAttribute
             </url>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.HasClass(System.String)">
             <summary>
             Returns a boolean value indicating whether the named class exists on this element.
             </summary>
            
             <param name="className">
             The class name for which to test.
             </param>
            
             <returns>
             true if the class is a member of this elements classes, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.AddClass(System.String)">
             <summary>
             Adds the class.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="className">
             The class name for which to test.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.RemoveClass(System.String)">
             <summary>
             Removes the named class from the classes defined for this element.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="className">
             The class name to remove.
             </param>
            
             <returns>
             true if the class exists and was removed from this element, false if the class did not exist.
             If the class exists it will always be removed, that is, it is not possible for this method to
             fail if the class exists.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.HasStyle(System.String)">
             <summary>
             Returns a boolean value indicating whether the named style is defined in the styles for this
             element.
             </summary>
            
             <param name="styleName">
             Name of the style to test.
             </param>
            
             <returns>
             true if the style is explicitly defined on this element, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.AddStyle(System.String)">
             <summary>
             Adds a style descriptor to this element, validating the style name and value against the CSS3
             ruleset. The string should be of the form "styleName: styleDef;", e.g.
             
                 "width: 10px;"
             
             The trailing semicolon is optional.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="styleString">
             The style string.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.AddStyle(System.String,System.Boolean)">
             <summary>
             Adds a style descriptor to this element, optionally validating against the CSS3 ruleset. The
             default method always validates; this overload should be used if validation is not desired.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="styleString">
             An object encapsulating the Styles associated with this element.
             </param>
             <param name="strict">
             true to enforce validation of CSS3 styles.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.RemoveStyle(System.String)">
             <summary>
             Removes the named style from this element.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="name">
             The style name.
             </param>
            
             <returns>
             true if the style exists and is removed, false if the style did not exist.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.ToString">
             <summary>
             The ToString() override for an object depends on the type of element.
             </summary>
            
             <returns>
             A <see cref="T:System.String" /> that represents the current IDomObject.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.CloneChildren">
             <summary>
             An enumeration of clones of the chilren of this object
             </summary>
            
             <returns>
             An enumerator 
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.ElementHtml">
             <summary>
             Returns the HTML for this element, but ignoring children/innerHTML.
             </summary>
            
             <returns>
             A string of HTML
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.IndexKeys">
             <summary>
             Enumerates index keys for this element.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is not valid for this element type
             </exception>
            
             <returns>
             A sequence of keys
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.UpdateDocumentFlags">
            <summary>
            Updates the cached Document and property flags.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.UpdateDocumentFlags(CsQuery.IDomDocument)">
             <summary>
             Updates the cached Document and property flags.
             </summary>
            
             <param name="document">
             A reference to the owning document. This is also the topmost node in the tree.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.CsQuery#IDomNode#Clone">
             <summary>
             Makes a deep copy of this object.
             </summary>
            
             <returns>
             A copy of this object.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.System#ICloneable#Clone">
             <summary>
             Makes a deep copy of this object.
             </summary>
            
             <returns>
             A copy of this object.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.NodeType">
            <summary>
            Gets the type of the node.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.HasChildren">
            <summary>
            Gets a value indicating whether this object has children.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.InnerHtmlAllowed">
            <summary>
            Gets a value indicating whether HTML is allowed as a child of this element. It is possible
            for this value to be false but InnerTextAllowed to be true for elements which can have inner
            content, but no child HTML markup, such as &lt;textarea&gt; and &lt;script&gt;
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.NodeNameID">
            <summary>
            Gets the identifier of the node name.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.InnerTextAllowed">
            <summary>
            Gets a value indicating whether text content is allowed as a child of this element.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.ChildrenAllowed">
            <summary>
            Gets a value indicating whether this element may have children. When false, it means this is
            a void element.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.IsIndexed">
            <summary>
            Gets a value indicating whether this object type should be indexed.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Path">
            <summary>
            The full path to this node. This is calculated by requesting the parent path and adding its
            own ID.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Document">
            <summary>
            The DOM for this object. This is obtained by looking at its parents value until it finds a
            non-null Document in a parent. The value is cached locally as long as the current value of
            Parent remains the same.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.InnerText">
            <summary>
            Gets or sets the text content of a node and its descendants.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.InnerHTML">
            <summary>
            Gets or sets or gets the HTML of an elements descendants.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.OuterHTML">
             <summary>
             Gets or sets the outer HTML.
             </summary>
            
             <url>
             https://developer.mozilla.org/en-US/docs/DOM/element.outerHTML
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.ChildNodes">
            <summary>
            Gets the child nodes.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.ParentNode">
            <summary>
            The direct parent of this node.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.IsFragment">
            <summary>
            The element is not associated with an IDomDocument.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.IsDisconnected">
            <summary>
            Gets a value indicating whether this object belongs to a Document or not.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.PathID">
            <summary>
            Unique ID assigned when added to a dom. This is not the full path but just the ID at this
            level. The full path is never stored with each node to prevent having to regenerate if node
            trees are moved.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Depth">
            <summary>
            Gets the depth of the current node.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.ChildElements">
            <summary>
            Gets the child elements.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Index">
            <summary>
            The element's absolute index among its siblings.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.DefaultValue">
            <summary>
            The value of an input element, or the text of a textarea element.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.NodeValue">
            <summary>
            Gets or sets the node value.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Type">
             <summary>
             The value of the "type" attribute. For input elements, this property always returns a
             lowercase value and defaults to "text" if there is no type attribute. For other element types,
             it simply returns the value of the "type" attribute.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/XUL/Property/type
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Name">
             <summary>
             Gets or sets the name attribute of an DOM object, it only applies to the following elements:
             &lt;a&gt; , &lt;applet&gt; , &lt;form&gt; , &lt;frame&gt; , &lt;iframe&gt; , &lt;img&gt; ,
             &lt;input&gt; , &lt;map&gt; , &lt;meta&gt; , &lt;object&gt; , &lt;option&gt; , &lt;param&gt; ,
             &lt;select&gt; , and &lt;textarea&gt; .
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.name
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Id">
            <summary>
            Get or set value of the id attribute.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Value">
            <summary>
            For input elements, the "value" property of this element. Returns null for other element
            types.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.ClassName">
            <summary>
            gets and sets the value of the class attribute of the specified element.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Classes">
            <summary>
            A sequence of all unique class names defined on this element.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Attributes">
            <summary>
            An interface to access the attributes collection of this element.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Style">
            <summary>
            An object encapsulating the Styles associated with this element.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.NodeName">
            <summary>
            The node (tag) name, in upper case.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.FirstChild">
             <summary>
             Returns the node's first child in the tree, or null if the node is childless. If the node is
             a Document, it returns the first node in the list of its direct children.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.firstChild
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.LastChild">
             <summary>
             Returns the last child of a node.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Node.lastChild
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.FirstElementChild">
             <summary>
             Returns the element's first child element or null if there are no child elements.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Element.firstElementChild
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.LastElementChild">
             <summary>
             Returns the element's last child element or null if there are no child elements.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Element.lastElementChild
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.HasAttributes">
            <summary>
            Returns true if this node has any attributes.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.HasClasses">
            <summary>
            Returns true if this node has CSS classes.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.HasStyles">
            <summary>
            Returns true if this node has any styles defined.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Checked">
             <summary>
             Gets or sets a value indicating whether the element is checked.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/XUL/Property/checked
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.ReadOnly">
             <summary>
             Gets or sets a value indicating whether the only should be read.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/XUL/Property/readOnly
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.NextSibling">
             <summary>
             Returns the node immediately following the specified one in its parent's childNodes list, or
             null if the specified node is the last node in that list.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Node.nextSibling
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.PreviousSibling">
             <summary>
             Returns the node immediately preceding the specified one in its parent's childNodes list,
             null if the specified node is the first in that list.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Node.previousSibling
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.NextElementSibling">
             <summary>
             Returns the element immediately following the specified one in its parent's children list, or
             null if the specified element is the last one in the list.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Element.nextElementSibling
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.PreviousElementSibling">
             <summary>
             Returns the element immediately prior to the specified one in its parent's children list, or
             null if the specified element is the first one in the list.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Element.previousElementSibling
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Item(System.Int32)">
             <summary>
             The child node at the specified index.
             </summary>
            
             <param name="index">
             The zero-based index of the child node to access.
             </param>
            
             <returns>
             IDomObject, the element at the specified index within this node's children.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Item(System.String)">
             <summary>
             The child node at the specified index.
             </summary>
            
             <param name="attribute">
             The zero-based index of the child node to access.
             </param>
            
             <returns>
             IDomObject, the element at the specified index within this node's children.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.ElementIndex">
            <summary>
            The index excluding text nodes.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.IsBlock">
            <summary>
            Gets a value indicating whether this object is a block element
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.IndexReference">
            <summary>
            Gets the object to which this index entry refers.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Selected">
             <summary>
             Indicates whether the element is selected or not. This value is read-only. To change the
             selection, set either the selectedIndex or selectedItem property of the containing element.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/XUL/Attribute/selected
             </url>
        </member>
        <member name="T:CsQuery.Implementation.DomObject.DocumentInfo">
            <summary>
            Flags indicating particular states regarding the owning document.
            </summary>
        </member>
        <member name="F:CsQuery.Implementation.DomObject.DocumentInfo.IsIndexed">
            <summary>
            The parent document is indexed.
            </summary>
        </member>
        <member name="F:CsQuery.Implementation.DomObject.DocumentInfo.IsDocument">
            <summary>
            The parent document is a document (not a fragment).
            </summary>
        </member>
        <member name="F:CsQuery.Implementation.DomObject.DocumentInfo.IsConnected">
            <summary>
            The parent document is valid.
            </summary>
        </member>
        <member name="F:CsQuery.Implementation.DomObject.DocumentInfo.IsParentTested">
            <summary>
            The parent document has already been tested..
            </summary>
        </member>
        <member name="T:CsQuery.IDomObject`1">
             <summary>
             Strongly-typed interface for building typed subclasses of IDomObject.
             </summary>
            
             <typeparam name="T">
             Type of the out.
             </typeparam>
        </member>
        <member name="M:CsQuery.IDomObject`1.Clone">
             <summary>
             Clone this element.
             </summary>
            
             <returns>
             A copy of this element that is not bound to the original.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject`1.#ctor">
            <summary>
            Default constructor for the abstract class.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomObject`1.Clone">
             <summary>
             Makes a deep copy of this object.
             </summary>
            
             <returns>
             A copy of this object.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject`1.CloneImplementation">
             <summary>
             This is called by the base class DomObject, and ensures that the typed Clone implementations
             get called when the object is accessed through the IDomObject interface.
             </summary>
            
             <returns>
             A new IDomObject
             </returns>
        </member>
        <member name="T:CsQuery.IDomContainer">
            <summary>
            Interface for objects that can contain other objects. Note that to allow some consistency with how DOM
            objects are used in the browser DOM, many methods are part of the base IDomObject interface so that they
            can be used (and return null/missing data) on elements to which they don't apply. So in actuality the only 
            unique methods are nonstandard ones.
            </summary>
        </member>
        <member name="M:CsQuery.IDomContainer.CloneChildren">
             <summary>
             An enumeration of clones of the chilren of this object
             </summary>
            
             <returns>
             An enumerator 
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomContainer`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomContainer`1.#ctor(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Constructor that populates the container with the passed elements.
             </summary>
            
             <param name="elements">
             The elements.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomContainer`1.AppendChild(CsQuery.IDomObject)">
             <summary>
             Appends a child.
             </summary>
            
             <param name="item">
             The item.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomContainer`1.AppendChildUnsafe(CsQuery.IDomObject)">
             <summary>
             Appends a child without checking if it already exists.c
             </summary>
            
             <param name="item">
             The item.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomContainer`1.RemoveChild(CsQuery.IDomObject)">
             <summary>
             Removes the child.
             </summary>
            
             <param name="item">
             The item.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomContainer`1.InsertBefore(CsQuery.IDomObject,CsQuery.IDomObject)">
             <summary>
             Inserts the new node before a reference node.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the reference node isn't a child of this node.
             </exception>
            
             <param name="newNode">
             The new node.
             </param>
             <param name="referenceNode">
             The reference node.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomContainer`1.InsertAfter(CsQuery.IDomObject,CsQuery.IDomObject)">
             <summary>
             Inserts a new node after a reference node.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the reference node isn't a child of this node.
             </exception>
            
             <param name="newNode">
             The new node.
             </param>
             <param name="referenceNode">
             The reference node.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomContainer`1.DescendantCount">
             <summary>
             Gets the number of descendants of this element.
             </summary>
            
             <returns>
             An integer.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.DomContainer`1.ChildNodes">
            <summary>
            Returns all children (including inner HTML as objects);
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomContainer`1.ChildNodesInternal">
            <summary>
            The child nodes as a concete object.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomContainer`1.HasChildren">
            <summary>
            Gets a value indicating whether this object has children.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomContainer`1.FirstChild">
             <summary>
             Returns the node's first child in the tree, or null if the node is childless. If the node is
             a Document, it returns the first node in the list of its direct children.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.firstChild
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomContainer`1.FirstElementChild">
             <summary>
             Returns the element's first child element or null if there are no child elements.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Element.firstElementChild
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomContainer`1.LastChild">
             <summary>
             Returns the last child of a node.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Node.lastChild
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomContainer`1.LastElementChild">
             <summary>
             Returns the element's last child element or null if there are no child elements.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Element.lastElementChild
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomContainer`1.ChildElements">
            <summary>
            Get all child elements
            </summary>
        </member>
        <member name="T:CsQuery.IDomElement">
            <summary>
            A regular DOM element
            </summary>
        </member>
        <member name="T:CsQuery.IDomIndexedNode">
            <summary>
            An marker and interface exposing properties required for a node that should be indexed
            </summary>
        </member>
        <member name="M:CsQuery.IDomIndexedNode.IndexKeys">
             <summary>
             A sequence of all the index keys that can be used to access this object
             </summary>
            
             <returns>
             An sequence of strings
             </returns>
        </member>
        <member name="P:CsQuery.IDomIndexedNode.IndexReference">
            <summary>
            The object that is the target of the index (normally, the object itself)
            </summary>
        </member>
        <member name="M:CsQuery.IDomElement.ElementHtml">
             <summary>
             Returns the HTML for this element, but ignoring children/innerHTML.
             </summary>
            
             <returns>
             A string of HTML.
             </returns>
        </member>
        <member name="P:CsQuery.IDomElement.IsBlock">
            <summary>
            The element is a block element.
            </summary>
        </member>
        <member name="P:CsQuery.IDomElement.ElementIndex">
            <summary>
            Get this element's index only among other elements (e.g. excluding text &amp; other non-
            element node types)
            </summary>
        </member>
        <member name="T:CsQuery.IAttributeCollection">
            <summary>
            Interface for methods to access the attributes on a DOM element.
            </summary>
        </member>
        <member name="M:CsQuery.IAttributeCollection.GetAttribute(System.String)">
            <summary>
            Get the value of a named attribute
            </summary>
            <param name="name">The attribute name</param>
            <returns>The attribute value</returns>
        </member>
        <member name="M:CsQuery.IAttributeCollection.SetAttribute(System.String,System.String)">
            <summary>
            Set the value of a named attribute
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="P:CsQuery.IAttributeCollection.Item(System.String)">
            <summary>
            Get or set the value of a named attribute
            </summary>
            <param name="attributeName">The attribute name</param>
            <returns>The attribute value</returns>
            <returntype>string</returntype>
        </member>
        <member name="P:CsQuery.IAttributeCollection.Length">
            <summary>
            The number of attributes in this attribute collection. This includes special attributes such as
            "class", "id", and "style"
            </summary>
            <returntype>int</returntype>
        </member>
        <member name="F:CsQuery.Implementation.DomElement._InnerAttributes">
            <summary>
            The dom attributes.
            </summary>
        </member>
        <member name="F:CsQuery.Implementation.DomElement._Style">
            <summary>
            Backing field for _Style.
            </summary>
        </member>
        <member name="F:CsQuery.Implementation.DomElement._Classes">
            <summary>
            Backing field for _Classes.
            </summary>
        </member>
        <member name="F:CsQuery.Implementation.DomElement._NodeNameID">
            <summary>
            Backing field for NodeNameID property.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.#ctor(System.UInt16)">
             <summary>
             Create a new DomElement node of a nodeTipe determined by a token ID.
             </summary>
            
             <param name="tokenId">
             Token represnting an existing tokenized node type.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.Create(System.String)">
             <summary>
             Creates a new element
             </summary>
            
             <param name="nodeName">
             The NodeName for the element (upper case).
             </param>
            
             <returns>
             A new element that inherits DomElement
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.ElementHtml">
             <summary>
             Returns the HTML for this element, but ignoring children/innerHTML.
             </summary>
            
             <returns>
             A string of HTML
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.IndexKeys">
             <summary>
             Returns all the keys that should be in the index for this item (keys for class, tag,
             attributes, and id)
             </summary>
            
             <returns>
             An enumerator that allows foreach to be used to process index keys in this collection.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.Clone">
             <summary>
             Makes a deep copy of this object.
             </summary>
            
             <returns>
             A copy of this object.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.CloneChildren">
             <summary>
             Enumerates clone children in this collection.
             </summary>
            
             <returns>
             An enumerator that allows foreach to be used to process clone children in this collection.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.HasStyle(System.String)">
             <summary>
             Query if 'name' has style.
             </summary>
            
             <param name="name">
             .
             </param>
            
             <returns>
             true if style, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.HasClass(System.String)">
             <summary>
             Query if 'name' has class.
             </summary>
            
             <param name="name">
             .
             </param>
            
             <returns>
             true if class, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.AddClass(System.String)">
             <summary>
             Adds the class.
             </summary>
            
             <param name="name">
             .
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.RemoveClass(System.String)">
             <summary>
             Removes the class described by name.
             </summary>
            
             <param name="name">
             .
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.HasAttribute(System.String)">
             <summary>
             Query if 'tokenId' has attribute.
             </summary>
            
             <param name="name">
             .
             </param>
            
             <returns>
             true if attribute, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.SetAttribute(System.String,System.String)">
             <summary>
             Set the value of a named attribute.
             </summary>
            
             <param name="name">
             .
             </param>
             <param name="value">
             .
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.SetAttribute(System.UInt16,System.String)">
             <summary>
             Set the value of a named attribute.
             </summary>
            
             <param name="tokenId">
             .
             </param>
             <param name="value">
             .
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.SetAttribute(System.String)">
             <summary>
             Sets an attribute with no value.
             </summary>
            
             <param name="name">
             The attribute name
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.SetAttribute(System.UInt16)">
             <summary>
             Sets an attribute with no value.
             </summary>
            
             <param name="tokenId">
             The token
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.SetAttributeRaw(System.UInt16,System.String)">
             <summary>
             Used by DomElement to (finally) set the ID value.
             </summary>
            
             <param name="tokenId">
             THe attribute token
             </param>
             <param name="value">
             The attribute value
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.RemoveAttribute(System.String)">
             <summary>
             Removes the attribute described by name.
             </summary>
            
             <param name="name">
             The attribute name to remove
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.RemoveAttribute(System.UInt16)">
             <summary>
             Removes the attribute described by name.
             </summary>
            
             <param name="tokenId">
             The token for the attribute
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.GetAttribute(System.String)">
             <summary>
             Gets an attribute value, or returns null if the value is missing. If a valueless attribute is
             found, this will also return null. HasAttribute should be used to test for such attributes.
             Attributes with an empty string value will return String.Empty.
             </summary>
            
             <param name="name">
             .
             </param>
            
             <returns>
             The attribute.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.GetAttribute(System.UInt16)">
             <summary>
             Gets an attribute value, or returns null if the value is missing. If a valueless attribute is
             found, this will also return null. HasAttribute should be used to test for such attributes.
             Attributes with an empty string value will return String.Empty.
             </summary>
            
             <param name="tokenId">
             .
             </param>
            
             <returns>
             The attribute.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.GetAttribute(System.String,System.String)">
             <summary>
             Return an attribute value identified by name. If it doesn't exist, return the provided
             default value.
             </summary>
            
             <param name="name">
             The attribute name.
             </param>
             <param name="defaultValue">
             .
             </param>
            
             <returns>
             The attribute.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.GetAttribute(System.UInt16,System.String)">
             <summary>
             Return an attribute value identified by a token ID. If it doesn't exist, return the provided
             default value.
             </summary>
            
             <param name="tokenId">
             .
             </param>
             <param name="defaultValue">
             .
             </param>
            
             <returns>
             The attribute.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.TryGetAttribute(System.UInt16,System.String@)">
             <summary>
             Try get attribute.
             </summary>
            
             <param name="tokenId">
             .
             </param>
             <param name="value">
             .
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.TryGetAttribute(System.String,System.String@)">
             <summary>
             Try get attribute.
             </summary>
            
             <param name="name">
             .
             </param>
             <param name="value">
             .
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.ToString">
             <summary>
             Convert this object into a string representation.
             </summary>
            
             <returns>
             This object as a string.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.AddStyle(System.String)">
             <summary>
             Add a single style in the form "styleName: value".
             </summary>
            
             <param name="style">
             .
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.AddStyle(System.String,System.Boolean)">
             <summary>
             Add a single style in the form "styleName: value".
             </summary>
            
             <param name="style">
             .
             </param>
             <param name="strict">
             true to strict.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.RemoveStyle(System.String)">
             <summary>
             Removes the style described by name.
             </summary>
            
             <param name="name">
             .
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.SetStyles(System.String)">
             <summary>
             Sets the styles.
             </summary>
            
             <param name="styles">
             The styles.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.SetStyles(System.String,System.Boolean)">
             <summary>
             Sets the styles.
             </summary>
            
             <param name="styles">
             The styles.
             </param>
             <param name="strict">
             true to strict.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.SetStyle(System.String,System.String)">
             <summary>
             Sets a style.
             </summary>
            
             <exception cref="T:System.NotImplementedException">
             Thrown when the requested operation is unimplemented.
             </exception>
            
             <param name="name">
             .
             </param>
             <param name="value">
             .
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.SetStyle(System.String,System.String,System.Boolean)">
             <summary>
             Sets a style.
             </summary>
            
             <exception cref="T:System.NotImplementedException">
             Thrown when the requested operation is unimplemented.
             </exception>
            
             <param name="name">
             .
             </param>
             <param name="value">
             .
             </param>
             <param name="strict">
             true to strict.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.GetStyle(System.String)">
             <summary>
             Gets a style.
             </summary>
            
             <exception cref="T:System.NotImplementedException">
             Thrown when the requested operation is unimplemented.
             </exception>
            
             <param name="name">
             .
             </param>
            
             <returns>
             The style.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.AttributeIndexKey(System.String)">
             <summary>
             Attribute index key.
             </summary>
            
             <param name="attrName">
             Name of the attribute.
             </param>
            
             <returns>
             .
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.AttributeIndexKey(System.UInt16)">
             <summary>
             Attribute index key.
             </summary>
            
             <param name="attrId">
             Identifier for the attribute.
             </param>
            
             <returns>
             .
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.AttributeRemoveFromIndex(System.UInt16)">
             <summary>
             Attribute remove from index.
             </summary>
            
             <param name="attrId">
             Identifier for the attribute.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.AttributeAddToIndex(System.UInt16)">
             <summary>
             Attribute add to index.
             </summary>
            
             <param name="attrId">
             Identifier for the attribute.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.SetClassName(System.String)">
             <summary>
             Sets the class name.
             </summary>
            
             <param name="className">
             And sets the value of the class attribute of the specified element.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.hasDefaultValue">
             <summary>
             Query if this object has default value.
             </summary>
            
             <returns>
             true if default value, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.IndexKey(System.String,System.UInt16)">
             <summary>
             Index key.
             </summary>
            
             <param name="prefix">
             The prefix.
             </param>
             <param name="keyTokenId">
             Identifier for the key token.
             </param>
            
             <returns>
             A string
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.IndexKey(System.String,System.String)">
             <summary>
             Index key.
             </summary>
            
             <param name="prefix">
             The prefix.
             </param>
             <param name="key">
             The key.
             </param>
            
             <returns>
             A string
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.IndexKey(System.String,System.String,System.String)">
             <summary>
             Index key.
             </summary>
            
             <param name="prefix">
             The prefix.
             </param>
             <param name="key">
             The key.
             </param>
             <param name="path">
             Full pathname of the file.
             </param>
            
             <returns>
             .
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.IndexKey(System.String,System.UInt16,System.String)">
             <summary>
             Generates a key that will be used to refernece this item in the index
             </summary>
            
             <param name="prefix">
             The prefix.
             </param>
             <param name="keyTokenId">
             Identifier for the key token.
             </param>
             <param name="path">
             Full path to the element.
             </param>
            
             <returns>
             A string representing the key for this item in the index
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.DescendantElements">
             <summary>
             Enumerates all descendant elements in this collection.
             </summary>
            
             <returns>
             A sequence of IDomElement objects
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.HasAttribute(System.UInt16)">
             <summary>
             Query if 'tokenId' has attribute.
             </summary>
            
             <param name="tokenId">
             .
             </param>
            
             <returns>
             true if attribute, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.TryGetAttributeForMatching(System.UInt16,System.String@)">
             <summary>
             Gets an attribute value for matching, accounting for default values of special attribute
             types.
             </summary>
            
             <param name="attributeId">
             Identifier for the attribute.
             </param>
             <param name="value">
             The matched value
             </param>
            
             <returns>
             The attribute for matching.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.Closest(System.UInt16)">
             <summary>
             Return the first ancestor of the specified tag
             </summary>
            
             <param name="tagID">
             Identifier for the tag.
             </param>
            
             <returns>
             An IDomContainer
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.SetProp(System.UInt16,System.Boolean)">
             <summary>
             Sets a boolean property by creating or removing it
             </summary>
            
             <param name="tagId">
             Identifier for the tag.
             </param>
             <param name="value">
             The value to set
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.ChildElementsOfTag``1(System.UInt16)">
             <summary>
             Returns all child elements of a specific tag, cast to a type
             </summary>
            
             <typeparam name="T">
             Generic type parameter.
             </typeparam>
             <param name="nodeNameId">
             Backing field for NodeNameID property.
             </param>
            
             <returns>
             An enumerator.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#String}}#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.System#Collections#IEnumerable#GetEnumerator">
             <summary>
             Gets the enumerator.
             </summary>
            
             <returns>
             The enumerator.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.AttributesCollection">
             <summary>
             Enumerate the attributes + class &amp; style.
             </summary>
            
             <returns>
             An enumerator that allows foreach to be used to process attributes collection in this
             collection.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.IndexAttributesTokens">
             <summary>
             Return a sequence of tokens for each non-class, non-style attribute that should be
             added to the attribute index.
             </summary>
            
             <returns>
             An enumerator of ushort.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.InnerAttributes">
            <summary>
            Gets the dom attributes.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.HasInnerAttributes">
            <summary>
            Returns true if this node has any actual attributes (not class or style)
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.Style">
            <summary>
            An object encapsulating the Styles associated with this element.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.Attributes">
             <summary>
             Access to the IAttributeCollection interface for this element's attributes.
             </summary>
            
             <implementation>
             We don't actually refer to the inner AttributeCollection object here because we cannot allow
             users to set attributes directly in the object: they must use SetAttribute so that special
             handling for "class" and "style" as well as indexing can be performed. To avoid creating a
             wrapper object,.
             </implementation>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.ClassName">
            <summary>
            gets and sets the value of the "class" attribute of the specified element.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.Id">
            <summary>
            Get or set value of the "id" attribute.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.NodeName">
            <summary>
            The NodeName for the element. This always returns the name in upper case.
            </summary>11
        </member>
        <member name="P:CsQuery.Implementation.DomElement.NodeNameID">
            <summary>
            Gets the token that represents this element's NodeName
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.Type">
             <summary>
             The value of the "type" attribute. For input elements, this property always returns a
             lowercase value and defaults to "text" if there is no type attribute. For other element types,
             it simply returns the value of the "type" attribute.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/XUL/Property/type
             </url>
            
             <implementation>
             TODO: in HTML5 type can be used on OL attributes (and maybe others?) and its value is case
             sensitive. The Type of input elements is always lower case, though. This behavior needs to be
             verified against the spec.
             </implementation>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.Name">
             <summary>
             Gets or sets the name attribute of an DOM object, it only applies to the following elements:
             &lt;a&gt; , &lt;applet&gt; , &lt;form&gt; , &lt;frame&gt; , &lt;iframe&gt; , &lt;img&gt; ,
             &lt;input&gt; , &lt;map&gt; , &lt;meta&gt; , &lt;object&gt; , &lt;option&gt; , &lt;param&gt; ,
             &lt;select&gt; , and &lt;textarea&gt; .
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.name
             </url>
            
             <implementation>
             TODO: Verify that the attribute is applicable to this node type and return null otherwise.
             </implementation>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.DefaultValue">
            <summary>
            The value of an input element, or the text of a textarea element.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.Value">
            <summary>
            For input elements, the "value" property of this element. Returns null for other element
            types.
            </summary>
            <remarks>
            TODO: Value is only mapped to an attribute on certain elements. The HasValueProperty method 
            resolves this. When setting the Value property for any other element, it should still track
            the value but never render it.
            We do just the opposite; we don't return the value in that situation but always render it.
            This should be fixed to work like the DOM so setting Value doesn't render. 
            </remarks>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.NodeType">
            <summary>
            Gets the type of the node.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.ParentNode">
            <summary>
            The direct parent of this node.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.HasAttributes">
            <summary>
            Returns true if this node has any attributes.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.HasStyles">
            <summary>
            Returns true if this node has any styles defined.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.HasClasses">
            <summary>
            Returns true if this node has CSS classes.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.IsIndexed">
            <summary>
            Gets a value indicating whether this object type should be indexed.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.InnerHtmlAllowed">
            <summary>
            Gets a value indicating whether HTML is allowed as a child of this element. It is possible
            for this value to be false but InnerTextAllowed to be true for elements which can have inner
            content, but no child HTML markup, such as &lt;textarea&gt; and &lt;script&gt;
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.InnerTextAllowed">
            <summary>
            Gets a value indicating whether text content is allowed as a child of this element.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.ChildrenAllowed">
            <summary>
            Gets a value indicating whether this element may have children. When false, it means this is
            a void element.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.Item(System.String)">
             <summary>
             The child node at the specified index.
             </summary>
            
             <param name="attribute">
             The zero-based index of the child node to access.
             </param>
            
             <returns>
             IDomObject, the element at the specified index within this node's children.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.Item(System.Int32)">
             <summary>
             The child node at the specified index.
             </summary>
            
             <param name="index">
             The zero-based index of the child node to access.
             </param>
            
             <returns>
             IDomObject, the element at the specified index within this node's children.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.Checked">
             <summary>
             Gets or sets a value indicating whether the element is checked.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/XUL/Property/checked
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.ReadOnly">
             <summary>
             Gets or sets a value indicating whether the only should be read.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/XUL/Property/readOnly
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.InnerHTML">
            <summary>
            Returns text of the inner HTML. When setting, any children will be removed.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.InnerText">
            <summary>
            Gets or sets the text content of a node and its descendants.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.ElementIndex">
            <summary>
            The index excluding text nodes.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.IndexReference">
            <summary>
            The object to which this index refers.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.IsBlock">
            <summary>
            Returns true if this element is a block-type element.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.Classes">
            <summary>
            A sequence of all unique class names defined on this element.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.OuterHTML">
             <summary>
             Gets or sets the outer HTML.
             </summary>
            
             <url>
             https://developer.mozilla.org/en-US/docs/DOM/element.outerHTML
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.CsQuery#IAttributeCollection#Item(System.String)">
             <summary>
             Get the named attribute value
             </summary>
            
             <param name="attributeName">
             The name of the attribute
             </param>
            
             <returns>
             A string of the attribute value
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.CsQuery#IAttributeCollection#Length">
             <summary>
             The number of attributes in this attribute collection. This includes special attributes such
             as "class", "id", and "style".
             </summary>
            
             <returntype>
             int
             </returntype>
        </member>
        <member name="M:CsQuery.Implementation.HTMLStyleElement.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.HTMLScriptElement">
            <summary>
            A SCRIPT
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.HTMLScriptElement.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.HTMLLabelElement">
             <summary>
             A LABEL element.
             </summary>
            
             <url>
             http://dev.w3.org/html5/spec/single-page.html#the-label-element
             </url>
        </member>
        <member name="T:CsQuery.IHTMLLabelElement">
             <summary>
             A LABEL element.
             </summary>
            
             <url>
             http://dev.w3.org/html5/spec/single-page.html#the-label-element
             </url>
        </member>
        <member name="P:CsQuery.IHTMLLabelElement.Form">
            <summary>
            The form to which the label belongs
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLLabelElement.HtmlFor">
            <summary>
            Gets or sets the for attribute
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLLabelElement.Control">
            <summary>
            The control bound to this label
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.HTMLLabelElement.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HTMLLabelElement.Form">
            <summary>
            The form to which the label belongs
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HTMLLabelElement.HtmlFor">
            <summary>
            Gets or sets the for attribute
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HTMLLabelElement.Control">
            <summary>
            The control bound to this label. If the "for" attribute is set, this is the control with that
            ID. If not, the first input control that is a child of the label will be returned.
            </summary>
        </member>
        <member name="T:CsQuery.IReadOnlyCollection`1">
             <summary>
             Interface for read only collection.
             </summary>
            
             <typeparam name="T">
             Generic type parameter.
             </typeparam>
        </member>
        <member name="P:CsQuery.IReadOnlyCollection`1.Count">
            <summary>
            Gets the number of items in the collection. 
            </summary>
        </member>
        <member name="T:CsQuery.IHTMLFormElement">
             <summary>
             A FORM element.
             </summary>
            
             <url>
             http://dev.w3.org/html5/spec/single-page.html#the-form-element
             </url>
        </member>
        <member name="T:CsQuery.INodeList`1">
             <summary>
             Interface to a a read-only, strongly-typed node list.
             </summary>
            
             <typeparam name="T">
             Generic type parameter.
             </typeparam>
        </member>
        <member name="T:CsQuery.IReadOnlyList`1">
             <summary>
             Interface for read only list.
             </summary>
            
             <typeparam name="T">
             Generic type parameter.
             </typeparam>
        </member>
        <member name="P:CsQuery.IReadOnlyList`1.Item(System.Int32)">
             <summary>
             Indexer to get items within this collection using array index syntax.
             </summary>
            
             <param name="index">
             Zero-based index of the entry to access.
             </param>
            
             <returns>
             The indexed item.
             </returns>
        </member>
        <member name="M:CsQuery.INodeList`1.Item(System.Int32)">
             <summary>
             Get the item at the specified index
             </summary>
            
             <param name="index">
             Zero-based index of the item
             </param>
            
             <returns>
             An item
             </returns>
        </member>
        <member name="M:CsQuery.INodeList`1.ToList">
             <summary>
             Converts this object to a read-only list.
             </summary>
            
             <returns>
             This object as an IList&lt;IDomObject&gt;
             </returns>
        </member>
        <member name="P:CsQuery.INodeList`1.Length">
            <summary>
            The number of nodes in this INodeList
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLFormElement.AcceptCharset">
            <summary>
            The accept-charset content attribute.
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLFormElement.Action">
            <summary>
            The action attribute
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLFormElement.Autocomplete">
            <summary>
            The automcomplete attribute
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLFormElement.Enctype">
            <summary>
            Gets or sets the enctype.
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLFormElement.Encoding">
            <summary>
            Gets or sets the encoding.
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLFormElement.Method">
            <summary>
            Gets or sets the method attribute.
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLFormElement.NoValidate">
            <summary>
            Gets or sets a value indicating whether the no validate.
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLFormElement.Target">
            <summary>
            Gets or sets the target attribute
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLFormElement.Elements">
            <summary>
            An INodeList containing the form elements.
            </summary>
        </member>
        <member name="T:CsQuery.RelLink">
            <summary>
            Values allowable for the Rel attribute
            </summary>
        </member>
        <member name="F:CsQuery.RelLink.Alternate">
            <summary>
            Gives alternate representations of the current document.
            </summary>
        </member>
        <member name="F:CsQuery.RelLink.Author">
            <summary>
            Gives a link to the current document's author.
            </summary>
        </member>
        <member name="F:CsQuery.RelLink.Help">
            <summary>
            Provides a link to context-sensitive help.
            </summary>
        </member>
        <member name="F:CsQuery.RelLink.Icon">
            <summary>
            Imports an icon to represent the current document.
            </summary>
        </member>
        <member name="F:CsQuery.RelLink.License">
            <summary>
            Indicates that the main content of the current document is covered by the copyright license described by the referenced document
            </summary>
        </member>
        <member name="F:CsQuery.RelLink.Next">
            <summary>
            Indicates that the current document is a part of a series, and that the next document in the series is the referenced document.
            </summary>
        </member>
        <member name="F:CsQuery.RelLink.Prefetch">
            <summary>
            Specifies that the target resource should be preemptively cached.
            </summary>
        </member>
        <member name="F:CsQuery.RelLink.Prev">
            <summary>
            Indicates that the current document is a part of a series, and that the previous document in the series is the referenced document.
            </summary>
        </member>
        <member name="F:CsQuery.RelLink.Search">
            <summary>
            Gives a link to a resource that can be used to search through the current document and its related pages.
            </summary>
        </member>
        <member name="F:CsQuery.RelLink.Stylesheet">
            <summary>
            Imports a stylesheet.
            </summary>
        </member>
        <member name="T:CsQuery.IHTMLMeterElement">
             <summary>
             An PROGRESS element
             </summary>
            
             <url>
             http://dev.w3.org/html5/spec/the-meter-element.html#the-meter-element
             </url>
        </member>
        <member name="P:CsQuery.IHTMLMeterElement.Value">
            <summary>
            The current value
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLMeterElement.Min">
            <summary>
            The maximum value
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLMeterElement.Max">
            <summary>
            The maximum value
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLMeterElement.Low">
            <summary>
            The low value
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLMeterElement.High">
            <summary>
            The high value
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLMeterElement.Optimum">
            <summary>
            The optimum value
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLMeterElement.Labels">
            <summary>
             A NodeList of all LABEL elements within this Progress element
            </summary>
        </member>
        <member name="T:CsQuery.IHTMLLIElement">
             <summary>
             An LI element.
             </summary>
            
             <url>
             http://dev.w3.org/html5/spec/single-page.html#the-li-element
             </url>
        </member>
        <member name="P:CsQuery.IHTMLLIElement.Value">
            <summary>
            A valid integer giving the ordinal value of the list item.
            </summary>
        </member>
        <member name="T:CsQuery.IHTMLProgressElement">
             <summary>
             An PROGRESS element
             </summary>
            
             <url>
             http://dev.w3.org/html5/markup/progress.html
             </url>
        </member>
        <member name="P:CsQuery.IHTMLProgressElement.Value">
            <summary>
            The current value
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLProgressElement.Max">
            <summary>
            The maximum value
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLProgressElement.Position">
            <summary>
            If the progress bar is an indeterminate progress bar, then the position IDL attribute must
            return −1. Otherwise, it must return the result of dividing the current value by the maximum
            value.
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLProgressElement.Labels">
            <summary>
             A NodeList of all LABEL elements within this Progress element
            </summary>
        </member>
        <member name="T:CsQuery.IHTMLOptionElement">
            <summary>
            An HTMLOPTION element
            </summary>
            <url>http://dev.w3.org/html5/spec/single-page.html#attr-option-disabled</url>
        </member>
        <member name="P:CsQuery.IHTMLOptionElement.Disabled">
            <summary>
            Gets or sets a value indicating whether this object is disabled.
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLOptionElement.Form">
            <summary>
            The form with which the element is associated
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLOptionElement.Label">
            <summary>
            Gets or sets the label attribute.
            </summary>
        </member>
        <member name="T:CsQuery.IHTMLInputElement">
             <summary>
             An HTML INPUT element.
             </summary>
            
             <url>
             http://dev.w3.org/html5/markup/input.html
             </url>
        </member>
        <member name="P:CsQuery.IHTMLInputElement.Form">
            <summary>
            The form with which to associate the element.
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLInputElement.Autofocus">
            <summary>
            A URL that provides the destination of the hyperlink. If the href attribute is not specified,
            the element represents a placeholder hyperlink.
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLInputElement.Required">
            <summary>
            Specifies that the element is a required part of form submission.
            </summary>
        </member>
        <member name="T:CsQuery.IHTMLAnchorElement">
             <summary>
             An Anchor (A) element.
             </summary>
            
             <url>
             http://dev.w3.org/html5/spec/single-page.html#the-a-element
             </url>
        </member>
        <member name="P:CsQuery.IHTMLAnchorElement.Target">
            <summary>
            A name or keyword giving a browsing context for UAs to use when following the hyperlink.
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLAnchorElement.Href">
            <summary>
            A URL that provides the destination of the hyperlink. If the href attribute is not specified,
            the element represents a placeholder hyperlink.
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLAnchorElement.Rel">
            <summary>
            The rel attribute on a and area elements controls what kinds of links the elements create.
            The attribue's value must be a set of space-separated tokens. 
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLAnchorElement.Hreflang">
            <summary>
            A list of tokens that specify the relationship between the document containing the hyperlink
            and the destination indicated by the hyperlink.
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLAnchorElement.Media">
            <summary>
            The media for which the destination of the hyperlink was designed.
            </summary>
        </member>
        <member name="T:CsQuery.RelAnchor">
            <summary>
            Values allowable for the Rel attribute
            </summary>
        </member>
        <member name="F:CsQuery.RelAnchor.Alternate">
            <summary>
            Gives alternate representations of the current document.
            </summary>
        </member>
        <member name="F:CsQuery.RelAnchor.Author">
            <summary>
            Gives a link to the current document's author.
            </summary>
        </member>
        <member name="F:CsQuery.RelAnchor.Bookmark">
            <summary>
            Gives the permalink for the nearest ancestor section.
            </summary>
        </member>
        <member name="F:CsQuery.RelAnchor.Help">
            <summary>
            Provides a link to context-sensitive help.
            </summary>
        </member>
        <member name="F:CsQuery.RelAnchor.License">
            <summary>
            Indicates that the main content of the current document is covered by the copyright license described by the referenced document
            </summary>
        </member>
        <member name="F:CsQuery.RelAnchor.Next">
            <summary>
            Indicates that the current document is a part of a series, and that the next document in the series is the referenced document.
            </summary>
        </member>
        <member name="F:CsQuery.RelAnchor.Nofollow">
            <summary>
            Indicates that the current document's original author or publisher does not endorse the referenced document.
            </summary>
        </member>
        <member name="F:CsQuery.RelAnchor.Noreferrer">
            <summary>
            Requires that the user agent not send an HTTP Referer (sic) header if the user follows the hyperlink.
            </summary>
        </member>
        <member name="F:CsQuery.RelAnchor.Prefetch">
            <summary>
            Specifies that the target resource should be preemptively cached.
            </summary>
        </member>
        <member name="F:CsQuery.RelAnchor.Prev">
            <summary>
            Indicates that the current document is a part of a series, and that the previous document in the series is the referenced document.
            </summary>
        </member>
        <member name="F:CsQuery.RelAnchor.Search">
            <summary>
            Gives a link to a resource that can be used to search through the current document and its related pages.
            </summary>
        </member>
        <member name="F:CsQuery.RelAnchor.Tag">
            <summary>
            Gives a tag (identified by the given address) that applies to the current document.
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.HtmlFormElement">
             <summary>
             A FORM element.
             </summary>
            
             <url>
             http://dev.w3.org/html5/spec/single-page.html#the-form-element
             </url>
        </member>
        <member name="M:CsQuery.Implementation.HtmlFormElement.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.HtmlFormElement.ToList">
             <summary>
             Converts this object to a list.
             </summary>
            
             <returns>
             This object as an IList&lt;IDomElement&gt;
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.HtmlFormElement.Item(System.Int32)">
             <summary>
             The form element at the specified index
             </summary>
            
             <param name="index">
             Zero-based index of the form element to obtain.
             </param>
            
             <returns>
             An IDomElement
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.HtmlFormElement.GetEnumerator">
             <summary>
             Gets an enumerator of the form's elements.
             </summary>
            
             <returns>
             The enumerator.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.HtmlFormElement.Target">
            <summary>
            A name or keyword giving a browsing context for UAs to use when following the hyperlink.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HtmlFormElement.AcceptCharset">
             <summary>
             The accept-charset attribute gives the character encodings that are to be used for the
             submission. If specified, the value must be an ordered set of unique space-separated tokens
             that are ASCII case-insensitive, and each token must be an ASCII case-insensitive match for
             the preferred MIME name of an ASCII-compatible character encoding.
             </summary>
            
             <value>
             The accept charset.
             </value>
            
             <url>
             http://dev.w3.org/html5/spec/single-page.html#attr-form-accept-charset
             </url>
        </member>
        <member name="P:CsQuery.Implementation.HtmlFormElement.Action">
             <summary>
             The action and formaction content attributes, if specified, must have a value that is a valid
             non-empty URL potentially surrounded by spaces.
             </summary>
            
             <value>
             A string
             </value>
        </member>
        <member name="P:CsQuery.Implementation.HtmlFormElement.Autocomplete">
             <summary>
             The automcomplete attribute. The "off" state indicates that by default, input elements in the
             form will have their resulting autocompletion state set to off; the "on" state indicates that
             by default, input elements in the form will have their resulting autocompletion state set to
             on.
             </summary>
            
             <value>
             The autocomplete.
             </value>
        </member>
        <member name="P:CsQuery.Implementation.HtmlFormElement.Enctype">
             <summary>
             Gets or sets the encoding type for the form. This must be one of "application/x-www-form-urlencoded",
             "multipart/form-data", or "text/plain".
             </summary>
            
             <value>
             The enctype.
             </value>
        </member>
        <member name="P:CsQuery.Implementation.HtmlFormElement.Encoding">
             <summary>
             Gets or sets the encoding. This is a synonym for Enctype.
             </summary>
            
             <value>
             The encoding.
             </value>
        </member>
        <member name="P:CsQuery.Implementation.HtmlFormElement.Method">
             <summary>
             Gets or sets the method attribute. This must be one of GET or POST. When missing, the default
             value is GET.
             </summary>
            
             <value>
             The method.
             </value>
            
             <url>
             http://dev.w3.org/html5/spec/single-page.html#attr-fs-method
             </url>
        </member>
        <member name="P:CsQuery.Implementation.HtmlFormElement.NoValidate">
             <summary>
             Gets or sets a value indicating whether the form should be validated during submission.
             </summary>
            
             <value>
             true to skip validation, false for normal behavior.
             </value>
        </member>
        <member name="P:CsQuery.Implementation.HtmlFormElement.Elements">
             <summary>
             An INodeList containing the form elements.
             </summary>
            
             <value>
             The elements.
             </value>
        </member>
        <member name="P:CsQuery.Implementation.HtmlFormElement.Length">
             <summary>
             The number of elements in this form.
             </summary>
            
             <value>
             An integer
             </value>
        </member>
        <member name="P:CsQuery.Implementation.HtmlFormElement.Indexer(System.Int32)">
             <summary>
             The form element at the specified index.
             </summary>
            
             <param name="index">
             The zero-based index of the element to access.
             </param>
            
             <returns>
             IDomObject
             </returns>
        </member>
        <member name="T:CsQuery.Implementation.HTMLMeterElement">
            <summary>
            An HTML progress element.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.HTMLMeterElement.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HTMLMeterElement.Value">
            <summary>
            The value of the meter
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HTMLMeterElement.Max">
            <summary>
            The maximum value.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HTMLMeterElement.Min">
            <summary>
            The minimum value.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HTMLMeterElement.Low">
            <summary>
            The low value.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HTMLMeterElement.High">
            <summary>
            The high value.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HTMLMeterElement.Optimum">
            <summary>
            The optimum value.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HTMLMeterElement.Labels">
            <summary>
            A NodeList of all LABEL elements within this Progress element
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.HTMLLIElement">
            <summary>
            An HTML LI element.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.HTMLLIElement.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HTMLLIElement.Value">
            <summary>
            The Value property of this LI element, or zero if it is not set.
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.HTMLProgressElement">
            <summary>
            An HTML progress element.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.HTMLProgressElement.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HTMLProgressElement.Value">
            <summary>
            For Progress elements, returns the value of the "value" attribute, or zero.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HTMLProgressElement.Max">
            <summary>
            The maximum value allowed for this Progress bar.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HTMLProgressElement.Position">
             <summary>
            If the progress bar is an indeterminate progress bar, then the position IDL attribute must
            return −1. Otherwise, it must return the result of dividing the current value by the maximum
            value.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HTMLProgressElement.Labels">
            <summary>
            A NodeList of all LABEL elements within this Progress element
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.HTMLTextAreaElement">
            <summary>
            An HTML text area element.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.HTMLTextAreaElement.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HTMLTextAreaElement.Value">
            <summary>
            The value of the HTMLRawInnerTextElementBase's contents
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HTMLTextAreaElement.InnerText">
            <summary>
            For HTMLRawInnerTextElementBase elements, InnerText doesn't actually do anything, whereas Value is the InnerText.
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.HTMLOptionElement">
            <summary>
            An HTML option element.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.HTMLOptionElement.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HTMLOptionElement.Value">
            <summary>
            The value of the OPTIOn element, or empty string if none specified.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HTMLOptionElement.Disabled">
            <summary>
            Gets or sets a value indicating whether this object is disabled.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HTMLOptionElement.Form">
            <summary>
            The form with which the element is associated.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HTMLOptionElement.Label">
            <summary>
            Gets or sets the label for this Option element
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HTMLOptionElement.Selected">
             <summary>
             Indicates whether the element is selected or not. This value is read-only. To change the
             selection, set either the selectedIndex or selectedItem property of the containing element.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/XUL/Attribute/selected
             </url>
        </member>
        <member name="T:CsQuery.Implementation.HTMLInputElement">
            <summary>
            An HTML input element.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.HTMLInputElement.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.HTMLInputElement.IndexKeys">
             <summary>
             Returns all the keys that should be in the index for this item (keys for class, tag,
             attributes, and id)
             </summary>
            
             <returns>
             An enumerator that allows foreach to be used to process index keys in this collection.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.HTMLInputElement.Form">
             <summary>
             The value of form element with which to associate the element.
             </summary>
            
             <remarks>
             The HTML5 spec says "The value of the id attribute on the form with which to associate the
             element." This is not what browsers currently return; they return the actual element. We'll
             keep that for now.
             </remarks>
        </member>
        <member name="P:CsQuery.Implementation.HTMLInputElement.Autofocus">
            <summary>
            A URL that provides the destination of the hyperlink. If the href attribute is not specified,
            the element represents a placeholder hyperlink.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HTMLInputElement.Required">
            <summary>
            Specifies that the element is a required part of form submission.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HTMLInputElement.Type">
             <summary>
             The value of the "type" attribute. For input elements, this property always returns a
             lowercase value and defaults to "text" if there is no type attribute. For other element types,
             it simply returns the value of the "type" attribute.
             </summary>
            
             <remarks>
             TODO: in HTML5 type can be used on OL attributes (and maybe others?) and its value is case
             sensitive. The Type of input elements is always lower case, though. This behavior needs to be
             verified against the spec.
             </remarks>
            
             <value>
             The type.
             </value>
            
             <url>
             https://developer.mozilla.org/en/XUL/Property/type
             </url>
        </member>
        <member name="P:CsQuery.Implementation.HTMLInputElement.HasChildren">
            <summary>
            Gets a value indicating whether this object has children. For input elements, this is always false.
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.HtmlAnchorElement">
             <summary>
             An Anchor (A) element.
             </summary>
            
             <url>
             http://dev.w3.org/html5/spec/single-page.html#the-a-element
             </url>
        </member>
        <member name="M:CsQuery.Implementation.HtmlAnchorElement.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HtmlAnchorElement.Target">
            <summary>
            A name or keyword giving a browsing context for UAs to use when following the hyperlink.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HtmlAnchorElement.Href">
            <summary>
            A URL that provides the destination of the hyperlink. If the href attribute is not specified,
            the element represents a placeholder hyperlink.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HtmlAnchorElement.Rel">
            <summary>
            The rel attribute on a and area elements controls what kinds of links the elements create.
            The attribue's value must be a set of space-separated tokens.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HtmlAnchorElement.Hreflang">
            <summary>
            A list of tokens that specify the relationship between the document containing the hyperlink
            and the destination indicated by the hyperlink.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HtmlAnchorElement.Media">
            <summary>
            The media for which the destination of the hyperlink was designed.
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.HTMLSelectElement">
            <summary>
            An HTML SELECT element.
            </summary>
        </member>
        <member name="T:CsQuery.IHTMLSelectElement">
            <summary>
            A SELECT element
            </summary>
        </member>
        <member name="P:CsQuery.IHTMLSelectElement.Options">
            <summary>
            A collection of HTML option elements (in document order)
            </summary>
            <url>https://developer.mozilla.org/en/DOM/HTMLOptionsCollection</url>
        </member>
        <member name="P:CsQuery.IHTMLSelectElement.SelectedIndex">
             <summary>
             Returns the index of the currently selected item. You may select an item by assigning its
             index to this property. By assigning -1 to this property, all items will be deselected.
             Returns -1 if no items are selected.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/XUL/Property/selectedIndex.
             </url>
        </member>
        <member name="P:CsQuery.IHTMLSelectElement.SelectedItem">
             <summary>
             Holds the currently selected item. If no item is currently selected, this value will be null.
             You can select an item by setting this value. A select event will be sent to the container
             (i.e. the listbox, richlistbox, etc., not the list item that was selected) when it is changed
             either via this property, the selectedIndex property, or changed by the user.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/XUL/Property/selectedItem
             </url>
        </member>
        <member name="P:CsQuery.IHTMLSelectElement.Multiple">
             <summary>
             This Boolean attribute indicates that multiple options can be selected in the list. If it is
             not specified, then only one option can be selected at a time.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/HTML/Element/select
             </url>
        </member>
        <member name="P:CsQuery.IHTMLSelectElement.Length">
            <summary>
            Gets the number of options in the select
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.HTMLSelectElement.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HTMLSelectElement.Options">
             <summary>
             A collection of HTML option elements (in document order)
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/HTMLOptionsCollection
             </url>
        </member>
        <member name="P:CsQuery.Implementation.HTMLSelectElement.Length">
            <summary>
            The number OPTION elements contained by this SELECT
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HTMLSelectElement.Type">
            <summary>
            The type string for this SELECT group.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HTMLSelectElement.Multiple">
             <summary>
             This Boolean attribute indicates that multiple options can be selected in the list. If it is
             not specified, then only one option can be selected at a time.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/HTML/Element/select
             </url>
        </member>
        <member name="P:CsQuery.Implementation.HTMLSelectElement.SelectedIndex">
             <summary>
             Returns the index of the currently selected item. You may select an item by assigning its
             index to this property. By assigning -1 to this property, all items will be deselected.
             Returns -1 if no items are selected.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/XUL/Property/selectedIndex.
             </url>
        </member>
        <member name="P:CsQuery.Implementation.HTMLSelectElement.SelectedItem">
             <summary>
             Holds the currently selected item. If no item is currently selected, this value will be null.
             You can select an item by setting this value. A select event will be sent to the container
             (i.e. the listbox, richlistbox, etc., not the list item that was selected) when it is changed
             either via this property, the selectedIndex property, or changed by the user.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/XUL/Property/selectedItem
             </url>
        </member>
        <member name="P:CsQuery.Implementation.HTMLSelectElement.Value">
            <summary>
            Get or set the value of the selected item for this Select list. When setting, if the value
            cannot be matched to an option, no index will be selected.
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.NodeList`1">
             <summary>
             An INodeList wrapper for an IList object
             </summary>
            
             <typeparam name="T">
             Generic type parameter.
             </typeparam>
        </member>
        <member name="M:CsQuery.Implementation.NodeList`1.#ctor(System.Collections.Generic.IList{`0})">
             <summary>
             Wraps a list in a NodeList object
             </summary>
            
             <param name="list">
             The list.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.NodeList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Creates a new node list from an enumeration. This will enumerate the sequence at create time
             into a new list.
             </summary>
            
             <param name="sequence">
             The sequence
             </param>
        </member>
        <member name="F:CsQuery.Implementation.NodeList`1.InnerList">
            <summary>
            The inner list object.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.NodeList`1.Item(System.Int32)">
             <summary>
             Return the item at the specified index
             </summary>
            
             <param name="index">
             Zero-based index of the.
             </param>
            
             <returns>
             An item of type T
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.NodeList`1.IndexOf(`0)">
             <summary>
             Get the index of the item in this list
             </summary>
            
             <param name="item">
             The item.
             </param>
            
             <returns>
             The 0-based index, or -1 if it does not exist in the list
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.NodeList`1.Insert(System.Int32,`0)">
             <summary>
             Inserts an item at the specified position in the list
             </summary>
            
             <param name="index">
             Zero-based index of the insertion point
             </param>
             <param name="item">
             The item.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.NodeList`1.RemoveAt(System.Int32)">
             <summary>
             Removes the item at the specified index
             </summary>
            
             <param name="index">
             Zero-based index of the item to remove
             </param>
        </member>
        <member name="M:CsQuery.Implementation.NodeList`1.Add(`0)">
             <summary>
             Adds the item to the end of the list
             </summary>
            
             <param name="item">
             The item to add
             </param>
        </member>
        <member name="M:CsQuery.Implementation.NodeList`1.Clear">
            <summary>
            Clears this object to its blank/initial state.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.NodeList`1.Contains(`0)">
             <summary>
             Query if this object contains the given item.
             </summary>
            
             <param name="item">
             The item.
             </param>
            
             <returns>
             true if the object is in this collection, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.NodeList`1.CopyTo(`0[],System.Int32)">
             <summary>
             Copies the contents of this list to an array
             </summary>
            
             <param name="array">
             The array.
             </param>
             <param name="arrayIndex">
             Zero-based index of the starting point in the array to copy
             </param>
        </member>
        <member name="M:CsQuery.Implementation.NodeList`1.Remove(`0)">
             <summary>
             Removes the given item from the list
             </summary>
            
             <param name="item">
             The item.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.NodeList`1.GetEnumerator">
             <summary>
             Gets the enumerator.
             </summary>
            
             <returns>
             The enumerator.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.NodeList`1.ToList">
             <summary>
             Converts this object to an IList&lt;T&gt;
             </summary>
            
             <returns>
             This object as an IList&lt;T&gt;
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.NodeList`1.Length">
            <summary>
            Gets the number of items in this NodeList.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.NodeList`1.Indexer(System.Int32)">
             <summary>
             Get or set the item at the specified index
             </summary>
            
             <param name="index">
             Zero-based index of the entry to access.
             </param>
            
             <returns>
             The item.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.NodeList`1.Count">
            <summary>
            Gets the number of items in this list
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.NodeList`1.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether this object is read only.
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.HTMLOptionsCollection">
             <summary>
             A collection of HTML options.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/HTMLOptionsCollection
             </url>
        </member>
        <member name="T:CsQuery.IHTMLOptionsCollection">
             <summary>
             Interface to a collection of HTML options.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/HTMLOptionsCollection
             </url>
        </member>
        <member name="M:CsQuery.IHTMLOptionsCollection.Item(System.Int32)">
             <summary>
             Returns the specific node at the given zero-based index (gives null if out of range)
             </summary>
            
             <param name="index">
             The zero-based index of the option element.
             </param>
            
             <returns>
             An HTML Option element.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/HTMLOptionsCollection
             </url>
        </member>
        <member name="M:CsQuery.IHTMLOptionsCollection.NamedItem(System.String)">
             <summary>
             Returns the specific node with the given DOMString (i.e., string) id. Returns null if no such named node exists.
             </summary>
            
             <param name="name">
             The zero-based index of the option element.
             </param>
            
             <returns>
             An HTML Option element.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/HTMLOptionsCollection
             </url>
        </member>
        <member name="P:CsQuery.IHTMLOptionsCollection.Indexer(System.Int32)">
             <summary>
             Returns the specific node at the given zero-based index (gives null if out of range)
             </summary>
            
             <param name="index">
             The zero-based index of the option element.
             </param>
            
             <returns>
             An HTML Option element.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/HTMLOptionsCollection
             </url>
        </member>
        <member name="P:CsQuery.IHTMLOptionsCollection.Indexer(System.String)">
             <summary>
             Returns the specific node with the given DOMString (i.e., string) id. Returns null if no such named node exists.
             </summary>
            
             <param name="name">
             The zero-based index of the option element.
             </param>
            
             <returns>
             An HTML Option element.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/HTMLOptionsCollection
             </url>
        </member>
        <member name="M:CsQuery.Implementation.HTMLOptionsCollection.#ctor(CsQuery.IDomElement)">
             <summary>
             Creates an HTMLOptionsCollection from the children of a Select element.
             </summary>
            
             <exception cref="T:System.ArgumentException">
             Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            
             <param name="parent">
             The parent element for this collection.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.HTMLOptionsCollection.Item(System.Int32)">
             <summary>
             Returns the specific node at the given zero-based index (gives null if out of range)
             </summary>
            
             <param name="index">
             The zero-based index of the option element.
             </param>
            
             <returns>
             An HTML Option element.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/HTMLOptionsCollection
             </url>
        </member>
        <member name="M:CsQuery.Implementation.HTMLOptionsCollection.NamedItem(System.String)">
             <summary>
             Returns the specific node with the given DOMString (i.e., string) id. Returns null if no such
             named node exists.
             </summary>
            
             <exception cref="T:System.NotImplementedException">
             Thrown when the requested operation is unimplemented.
             </exception>
            
             <param name="name">
             The zero-based index of the option element.
             </param>
            
             <returns>
             An HTML Option element, or null if the named element does not exist.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/HTMLOptionsCollection
             </url>
        </member>
        <member name="M:CsQuery.Implementation.HTMLOptionsCollection.GetEnumerator">
             <summary>
             Gets the enumerator.
             </summary>
            
             <returns>
             The enumerator.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.HTMLOptionsCollection.System#Collections#IEnumerable#GetEnumerator">
             <summary>
             Gets the enumerator.
             </summary>
            
             <returns>
             The enumerator.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.HTMLOptionsCollection.Children">
             <summary>
             Enumerates the element children of a node.
             </summary>
            
             <returns>
             An sequence of elements
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.HTMLOptionsCollection.Children(CsQuery.IDomElement)">
             <summary>
             Implementation for Children. The bool part of the tuple indicates if the element inherits a
             "disabled" property.
             </summary>
            
             <param name="parent">
             The parent element for this collection.
             </param>
            
             <returns>
             An enumerator that allows foreach to be used to process children in this collection.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.HTMLOptionsCollection.Parent">
            <summary>
            Gets the parent element for this collection
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.HTMLOptionsCollection.Indexer(System.Int32)">
             <summary>
             Returns the specific node at the given zero-based index (gives null if out of range)
             </summary>
            
             <param name="index">
             The zero-based index of the option element.
             </param>
            
             <returns>
             An HTML Option element.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/HTMLOptionsCollection.
             </url>
        </member>
        <member name="P:CsQuery.Implementation.HTMLOptionsCollection.Indexer(System.String)">
             <summary>
             Returns the specific node at the given zero-based index (gives null if out of range)
             </summary>
            
             <param name="name">
             The name of the option element
             </param>
            
             <returns>
             An HTML Option element.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/HTMLOptionsCollection
             </url>
        </member>
        <member name="P:CsQuery.Implementation.HTMLOptionsCollection.SelectedIndex">
            <summary>
            Logic: if nothing specifically selected, find the first enabled option, otherwise, the first disabled option.
            </summary>
        </member>
        <member name="T:CsQuery.IDomIndex">
            <summary>
            Interface for a DOM index. Defines methods to add and remove items from the index, and query the index.
            </summary>
        </member>
        <member name="M:CsQuery.IDomIndex.AddToIndex(System.String,CsQuery.IDomIndexedNode)">
             <summary>
             Adds an element to the index.
             </summary>
            
             <param name="key">
             The index key. This should be a unique path to the element in the Document tree. The format
             is determined by environmental settings. This is for internal use.
             </param>
             <param name="element">
             The element.
             </param>
        </member>
        <member name="M:CsQuery.IDomIndex.AddToIndex(CsQuery.IDomIndexedNode)">
             <summary>
             Adds an element to the index.
             </summary>
            
             <param name="element">
             The element.
             </param>
        </member>
        <member name="M:CsQuery.IDomIndex.RemoveFromIndex(System.String)">
             <summary>
             Removes an element from the index
             </summary>
            
             <param name="key">
             The index key. This should be a unique path to the element in the Document tree. The format
             is determined by environmental settings. This is for internal use.
             </param>
        </member>
        <member name="M:CsQuery.IDomIndex.RemoveFromIndex(CsQuery.IDomIndexedNode)">
             <summary>
             Removes an element from the index.
             </summary>
            
             <param name="element">
             The element.
             </param>
        </member>
        <member name="M:CsQuery.IDomIndex.QueryIndex(System.String,System.Int32,System.Boolean)">
             <summary>
             Queries the index
             </summary>
            
             <param name="subKey">
             The sub key.
             </param>
             <param name="depth">
             The depth.
             </param>
             <param name="includeDescendants">
             true to include, false to exclude the descendants.
             </param>
            
             <returns>
             An enumerator that allows foreach to be used to process query index in this collection.
             </returns>
        </member>
        <member name="M:CsQuery.IDomIndex.QueryIndex(System.String)">
             <summary>
             Queries the index.
             </summary>
            
             <param name="subKey">
             The sub key.
             </param>
            
             <returns>
             An enumerator that allows foreach to be used to process query index in this collection.
             </returns>
        </member>
        <member name="P:CsQuery.IDomIndex.SelectorXref">
            <summary>
            The primary selection index.
            </summary>
        </member>
        <member name="P:CsQuery.IDomIndex.Data">
            <summary>
            Any user data to be persisted with this DOM.
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.AttributeCollection">
            <summary>
            A collection of attributes.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection.Clear">
            <summary>
            Removes all attributes from this collection.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection.Clone">
             <summary>
             Makes a deep copy of the attribute collection.
             </summary>
            
             <returns>
             A copy of this object.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection.Add(System.String,System.String)">
             <summary>
             Adds a new name/value pair to the collection
             </summary>
            
             <param name="name">
             The name of the attribute.
             </param>
             <param name="value">
             The value.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection.Remove(System.String)">
             <summary>
             Removes the named attribute from the collection.
             </summary>
            
             <param name="name">
             The name to remove.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection.Remove(System.UInt16)">
             <summary>
             Removes an attribute identified by its token ID from the collection
             </summary>
            
             <param name="tokenId">
             The unique token ID for the attribute name.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection.ContainsKey(System.String)">
             <summary>
             Test whether the named attribute exists in the collection.
             </summary>
            
             <param name="key">
             The attribute name.
             </param>
            
             <returns>
             true if it exists, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection.ContainsKey(System.UInt16)">
             <summary>
             Test whether the attribute identified by its unique token ID exists in the collection.
             </summary>
            
             <param name="tokenId">
             The unique token ID for the attribute name.
             </param>
            
             <returns>
             true if it exists, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection.TryGetValue(System.String,System.String@)">
             <summary>
             Try to get a value for the specified attribute name.
             </summary>
            
             <param name="name">
             The key.
             </param>
             <param name="value">
             [out] The value.
             </param>
            
             <returns>
             true if the key was present, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection.TryGetValue(System.UInt16,System.String@)">
             <summary>
             Try to get a value for the specified attribute identified by its unique token ID.
             </summary>
            
             <param name="tokenId">
             The attribute's token ID.
             </param>
             <param name="value">
             [out] The value.
             </param>
            
             <returns>
             true if the key was present, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection.SetBoolean(System.String)">
             <summary>
             Sets a boolean only attribute having no value.
             </summary>
            
             <param name="name">
             The attribute to set
             </param>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection.SetBoolean(System.UInt16)">
             <summary>
             Sets a boolean only attribute having no value.
             </summary>
            
             <param name="tokenId">
             The attribute's unique token ID
             </param>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection.Unset(System.String)">
             <summary>
             Remove an attribute.
             </summary>
            
             <param name="name">
             The attribute name
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection.Unset(System.UInt16)">
             <summary>
             Remove an attribute.
             </summary>
            
             <param name="tokenId">
             The unique token ID for the attribute name.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection.Set(System.String,System.String)">
            <summary>
            Adding an attribute implementation
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection.Set(System.UInt16,System.String)">
            <summary>
            Second to last line of defense -- will call back to owning Element for attempts to set class, style, or ID, which are 
            managed by Element.
            </summary>
            <param name="tokenId"></param>
            <param name="value"></param>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection.SetRaw(System.UInt16,System.String)">
            <summary>
            Used by DomElement to (finally) set the ID value
            </summary>
            <param name="tokenId"></param>
            <param name="value"></param>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection.GetAttributes">
             <summary>
             Enumerates the attributes in this collection as a sequence of KeyValuePairs.
             </summary>
            
             <returns>
             A sequence of KeyValuePair&lt;string,string&gt; objects.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection.GetEnumerator">
             <summary>
             Gets the enumerator for this AttributeCollection
             </summary>
            
             <returns>
             The enumerator.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.AttributeCollection.HasAttributes">
            <summary>
            Test whether there are any attributes in this collection.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.AttributeCollection.Count">
            <summary>
            The number of attributes in this collection
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.AttributeCollection.Item(System.String)">
             <summary>
             Get or set an attribute value by name
             </summary>
            
             <param name="name">
             The name of the attribute.
             </param>
            
             <returns>
             The value.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.AttributeCollection.Keys">
            <summary>
            Get a sequence of all attribute names in this collection.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.AttributeCollection.Values">
            <summary>
            A collection of all the values in this attribute collection
            </summary>
        </member>
        <member name="T:CsQuery.Engine.CharacterEqualityComparer">
            <summary>
            A case-insensitive character equality comparer.
            </summary>
        </member>
        <member name="M:CsQuery.Engine.CharacterEqualityComparer.Create(System.Boolean)">
             <summary>
             Factory that creates an EqualityComparer&lt;char&gt; based on the case sensitivity
             requirements.
             </summary>
            
             <param name="isCaseSensitive">
             true if the EqualityComparer should be case sensitive.
             </param>
            
             <returns>
             An EqualityComparer&lt;char&gt;
             </returns>
        </member>
        <member name="M:CsQuery.Engine.CharacterEqualityComparer.Equals(System.Char,System.Char)">
             <summary>
             Tests if two char objects are considered equal.
             </summary>
            
             <param name="x">
             Character to be compared.
             </param>
             <param name="y">
             Character to be compared.
             </param>
            
             <returns>
             true if the objects are considered equal, false if they are not.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.CharacterEqualityComparer.GetHashCode(System.Char)">
             <summary>
             Calculates the hash code for this object.
             </summary>
            
             <param name="obj">
             The object.
             </param>
            
             <returns>
             The hash code for this object.
             </returns>
        </member>
        <member name="T:CsQuery.Engine.CaseSensitiveCharacterEqualityComparer">
            <summary>
            A case-sensitive character equality comparer.
            </summary>
        </member>
        <member name="M:CsQuery.Engine.CaseSensitiveCharacterEqualityComparer.Equals(System.Char,System.Char)">
             <summary>
             Tests if two char objects are considered equal.
             </summary>
            
             <param name="x">
             Character to be compared.
             </param>
             <param name="y">
             Character to be compared.
             </param>
            
             <returns>
             true if the objects are considered equal, false if they are not.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.CaseSensitiveCharacterEqualityComparer.GetHashCode(System.Char)">
             <summary>
             Calculates the hash code for this object.
             </summary>
            
             <param name="obj">
             The object.
             </param>
            
             <returns>
             The hash code for this object.
             </returns>
        </member>
        <member name="T:CsQuery.Engine.QuotingRule">
            <summary>
            Enumerator of possible quoting rules that determine how parameters for CSS selector functions
            should be parsed.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.QuotingRule.NeverQuoted">
            <summary>
            The parameter value should never be quoted (e.g. is numeric data, or the function simply doesn't expect quotes).
            </summary>
        </member>
        <member name="F:CsQuery.Engine.QuotingRule.AlwaysQuoted">
            <summary>
            The parameter value should always be quoted.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.QuotingRule.OptionallyQuoted">
            <summary>
            The parameter value may be quoted: if the first character is a double- or single-quote, then a matching quote terminates the parameter value..
            </summary>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.RegexExtension">
            <summary>
            Port of James Padolsey's regex jQuery selector: http://james.padolsey.com/javascript/regex-selector-for-jquery/
            </summary>
        </member>
        <member name="T:CsQuery.Engine.PseudoSelectorFilter">
            <summary>
            A base class for filter-type selectors that implements a simple iterator function and calls
            Matches for each element. Classes that depend on the element's position in the filtered list
            cannot use this and should implement IPseudoSelectorFilter directly.
            </summary>
        </member>
        <member name="T:CsQuery.Engine.PseudoSelector">
            <summary>
            Base class for any pseudoselector that implements validation of min/max parameter values, and
            argument validation. When implementing a pseudoselector, you must also implement an interface for the type
            of pseudoselector
            </summary>
        </member>
        <member name="T:CsQuery.Engine.IPseudoSelector">
            <summary>
            General interface for a pseudoselector filter.
            </summary>
        </member>
        <member name="P:CsQuery.Engine.IPseudoSelector.Arguments">
            <summary>
            This method is called before any validations are called against this selector. This gives the
            developer an opportunity to throw errors based on the configuration outside of the validation
            methods.
            </summary>
        </member>
        <member name="P:CsQuery.Engine.IPseudoSelector.MinimumParameterCount">
             <summary>
             The minimum number of parameters that this selector requires. If there are no parameters, return 0
             </summary>
            
             <value>
             An integer
             </value>
        </member>
        <member name="P:CsQuery.Engine.IPseudoSelector.MaximumParameterCount">
             <summary>
             The maximum number of parameters that this selector can accept. If there is no limit, return -1.
             </summary>
            
             <value>
             An integer
             </value>
        </member>
        <member name="P:CsQuery.Engine.IPseudoSelector.Name">
            <summary>
            Gets CSS name of the pseudoselector
            </summary>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelector.ParameterQuoted(System.Int32)">
             <summary>
             A value to determine how to parse the string for a parameter at a specific index.
             </summary>
            
             <param name="index">
             Zero-based index of the parameter.
             </param>
            
             <returns>
             NeverQuoted to treat quotes as any other character; AlwaysQuoted to require that a quote
             character bounds the parameter; or OptionallyQuoted to accept a string that can (but does not
             have to be) quoted. The default abstract implementation returns NeverQuoted.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelector.ParseArgs(System.String)">
             <summary>
             Parse the arguments using the rules returned by the ParameterQuoted method.
             </summary>
            
             <param name="value">
             The arguments
             </param>
            
             <returns>
             An array of strings
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelector.ParseSingleArg(System.String)">
             <summary>
             Parse single argument passed to a pseudoselector
             </summary>
            
             <exception cref="T:System.ArgumentException">
             Thrown when one or more arguments have unsupported or illegal values.
             </exception>
             <exception cref="T:System.NotImplementedException">
             Thrown when the requested operation is unimplemented.
             </exception>
            
             <param name="value">
             The arguments.
             </param>
            
             <returns>
             The parsed string
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelector.ValidateParameters(System.String[])">
             <summary>
             Validates a parameter array against the expected number of parameters.
             </summary>
            
             <exception cref="T:System.ArgumentException">
             Thrown when the wrong number of parameters is passed.
             </exception>
            
             <param name="parameters">
             Criteria (or parameter) data passed with the pseudoselector.
             </param>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelector.ParameterCountMismatchError">
             <summary>
             Gets the string for a parameter count mismatch error.
             </summary>
            
             <returns>
             A string to be used as an exception message.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelector.InvalidArgumentsError">
             <summary>
             Get a string for an error when there are invalid arguments
             </summary>
            
             <returns>
             A string to be used as an exception message.
             </returns>
        </member>
        <member name="P:CsQuery.Engine.PseudoSelector.Parameters">
            <summary>
            Gets or sets criteria (or parameter) data passed with the pseudoselector
            </summary>
        </member>
        <member name="P:CsQuery.Engine.PseudoSelector.Arguments">
             <summary>
             This method is called before any validations are called against this selector. This gives the
             developer an opportunity to throw errors based on the configuration outside of the validation
             methods.
             </summary>
            
             <value>
             The arguments.
             </value>
        </member>
        <member name="P:CsQuery.Engine.PseudoSelector.MinimumParameterCount">
             <summary>
             The minimum number of parameters that this selector requires. If there are no parameters, return 0
             </summary>
            
             <value>
             An integer
             </value>
        </member>
        <member name="P:CsQuery.Engine.PseudoSelector.MaximumParameterCount">
             <summary>
             The maximum number of parameters that this selector can accept. If there is no limit, return -1.
             </summary>
            
             <value>
             An integer
             </value>
        </member>
        <member name="P:CsQuery.Engine.PseudoSelector.Name">
            <summary>
            Return the properly cased name of this selector (the class name in non-camelcase)
            </summary>
        </member>
        <member name="T:CsQuery.Engine.IPseudoSelectorFilter">
            <summary>
            A pseudoselector that filters a list of elements. Most jQuery extensions fall within this
            category.
            </summary>
        </member>
        <member name="M:CsQuery.Engine.IPseudoSelectorFilter.Filter(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Filter only the elements matching this result-list position type selector.
             </summary>
            
             <param name="selection">
             The sequence of elements prior to this filter being applied.
             </param>
            
             <returns>
             A sequence of matching elements.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectorFilter.Matches(CsQuery.IDomObject)">
             <summary>
             Test whether an element matches this selector.
             </summary>
            
             <param name="element">
             The element to test.
             </param>
            
             <returns>
             true if it matches, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectorFilter.Filter(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Basic implementation of ChildMatches, runs the Matches method against each child. This should
             be overridden with something more efficient if possible. For example, selectors that inspect
             the element's index could get their results more easily by picking the correct results from
             the list of children rather than testing each one.
             </summary>
            
             <param name="elements">
             The parent element.
             </param>
            
             <returns>
             A sequence of children that match.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.RegexExtension.ParameterQuoted(System.Int32)">
             <summary>
             Allow but do not require quotes around the parameters for :regex.
             </summary>
            
             <param name="index">
             Zero-based index of the parameter.
             </param>
            
             <returns>
             OptionallyQuoted.
             </returns>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.Contains">
             <summary>
             Matches elements that have children containing the specified text.
             </summary>
            
             <url>
             http://api.jquery.com/contains-selector/
             </url>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.Contains.Filter(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Return elements from the selection that contain the text in the parameter
             </summary>
            
             <param name="selection">
             A sequence of elements
             </param>
            
             <returns>
             The elements from the sequence that contain the text
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.Contains.Matches(CsQuery.IDomObject)">
             <summary>
             Test whether a single element contains the text passed in the selector's parameter
             </summary>
            
             <param name="element">
             The element to test.
             </param>
            
             <returns>
             true if it contains the text, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.Contains.ParameterQuoted(System.Int32)">
             <summary>
             A value to determine how to parse the string for a parameter at a specific index.
             </summary>
            
             <param name="index">
             Zero-based index of the parameter.
             </param>
            
             <returns>
             Always returns OptionallyQuoted
             </returns>
        </member>
        <member name="P:CsQuery.Engine.PseudoClassSelectors.Contains.MaximumParameterCount">
             <summary>
             The maximum number of parameters that this selector can accept (1)
             </summary>
            
             <value>
             An integer.
             </value>
        </member>
        <member name="P:CsQuery.Engine.PseudoClassSelectors.Contains.MinimumParameterCount">
             <summary>
             The minimum number of parameters that this selector requires (1)
             </summary>
            
             <value>
             An integer.
             </value>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.Lang">
            <summary>
            Pseudoclass selector for :lang. This is not currently implemented. The problem with :lang is
            that it is based on an inherited property value. This messes with the index since elements
            will be pre-filtered by an attribute selector. This could be implemented using a pseudoclass
            type construct instead, e.g. as "visible" that traverses through parents, and inherits a
            default document-wide setting.
            </summary>
        </member>
        <member name="T:CsQuery.Engine.PseudoSelectorChild">
            <summary>
            Base class for an Child-type pseudoselector.
            </summary>
        </member>
        <member name="T:CsQuery.Engine.IPseudoSelectorChild">
            <summary>
            A pseudo-selector that depends only on an actual element's properties and/or it's
            relationship to other elements within the DOM. All CSS pseudoselectors fall within this
            category.
            </summary>
        </member>
        <member name="M:CsQuery.Engine.IPseudoSelectorChild.Matches(CsQuery.IDomObject)">
             <summary>
             Test whether this element matches the selector implementation.
             </summary>
            
             <param name="element">
             The object.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.IPseudoSelectorChild.ChildMatches(CsQuery.IDomContainer)">
             <summary>
             Return a sequence of all children matching the selector implementation
             </summary>
            
             <param name="element">
             The parent element.
             </param>
            
             <returns>
             A sequence of children that match
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectorChild.Matches(CsQuery.IDomObject)">
             <summary>
             Test whether an element matches this selector.
             </summary>
            
             <param name="element">
             The element to test.
             </param>
            
             <returns>
             true if it matches, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectorChild.ChildMatches(CsQuery.IDomContainer)">
             <summary>
             Basic implementation of ChildMatches, runs the Matches method against each child. This should
             be overridden with something more efficient if possible. For example, selectors that inspect
             the element's index could get their results more easily by picking the correct results from
             the list of children rather than testing each one.
             
             Also note that the default iterator for ChildMatches only passed element (e.g. non-text node)
             children. If you wanted to design a filter that worked on other node types, you should
             override this to access all children instead of just the elements.
             </summary>
            
             <param name="element">
             The parent element.
             </param>
            
             <returns>
             A sequence of children that match.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.Lang.Matches(CsQuery.IDomObject)">
             <summary>
             Test whether an element matches this selector.
             </summary>
            
             <exception cref="T:System.NotImplementedException">
             Thrown when the requested operation is unimplemented.
             </exception>
            
             <param name="element">
             The element to test.
             </param>
            
             <returns>
             true if it matches, false if not.
             </returns>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.Hidden">
            <summary>
            A pseudoselector that returns elements that are hidden. Visibility is defined by CSS: a
            nonzero opacity, a display that is not "hidden", and the absence of zero-valued width &amp;
            heights. Additionally, input elements of type "hidden" are always considered not visible.
            </summary>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.Hidden.Matches(CsQuery.IDomObject)">
             <summary>
             Test whether an element is hidden.
             </summary>
            
             <param name="element">
             The element to test.
             </param>
            
             <returns>
             true if it matches, false if not.
             </returns>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.Visible">
            <summary>
            A pseudoselector that returns elements that are visible. Visibility is defined by CSS: a
            nonzero opacity, a display that is not "hidden", and the absence of zero-valued width &amp;
            heights. Additionally, input elements of type "hidden" are always considered not visible.
            </summary>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.Visible.Matches(CsQuery.IDomObject)">
             <summary>
             Test whether an element is visible
             </summary>
            
             <param name="element">
             The element to test.
             </param>
            
             <returns>
             true if it matches, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.Visible.IsVisible(CsQuery.IDomObject)">
             <summary>
             Test whether the passed element is visible, based on CSS styles and height/width properties.
             </summary>
            
             <param name="element">
             The element to test.
             </param>
            
             <returns>
             true if visible, false if not.
             </returns>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.LastOfType">
             <summary>
             Matches the last element of the same type within its siblings
             </summary>
            
             <url>
             http://reference.sitepoint.com/css/pseudoclass-lastoftype
             </url>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.LastOfType.Matches(CsQuery.IDomObject)">
             <summary>
             Test whether an element is the last child of its type.
             </summary>
            
             <param name="element">
             The element to test.
             </param>
            
             <returns>
             true if it matches, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.LastOfType.ChildMatches(CsQuery.IDomContainer)">
             <summary>
             Return all child elements of element that are the last child of their type
             </summary>
            
             <param name="element">
             The parent element.
             </param>
            
             <returns>
             A sequence of children that match.
             </returns>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.FirstOfType">
             <summary>
             Matches the first element of the same type within its siblings
             </summary>
            
             <url>
             http://reference.sitepoint.com/css/pseudoclass-firstoftype
             </url>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.FirstOfType.Matches(CsQuery.IDomObject)">
             <summary>
             Test whether an element is the first child of its type
             </summary>
            
             <param name="element">
             The element to test.
             </param>
            
             <returns>
             true if it matches, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.FirstOfType.ChildMatches(CsQuery.IDomContainer)">
             <summary>
             Return all children of the parameter element that are the first child of their type.
             </summary>
            
             <param name="element">
             The parent element.
             </param>
            
             <returns>
             A sequence of children that match.
             </returns>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.OnlyChild">
             <summary>
             Mathches elements that are the the first child of a parent
             </summary>
            
             <url>
             http://reference.sitepoint.com/css/pseudoclass-firstchild
             </url>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.OnlyChild.Matches(CsQuery.IDomObject)">
             <summary>
             Test whether an element is the only child of its parent
             </summary>
            
             <param name="element">
             The element to test.
             </param>
            
             <returns>
             true if it matches, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.OnlyChild.ChildMatches(CsQuery.IDomContainer)">
             <summary>
             Return the only child of the parent element, or nothing if there are zero or more than one
             children.
             </summary>
            
             <param name="element">
             The parent element.
             </param>
            
             <returns>
             A sequence of children that match.
             </returns>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.FirstChild">
             <summary>
             Mathches elements that are the the first child of a parent
             </summary>
            
             <url>
             http://reference.sitepoint.com/css/pseudoclass-firstchild
             </url>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.FirstChild.Matches(CsQuery.IDomObject)">
             <summary>
             Test whether an element is the first child of its parent
             </summary>
            
             <param name="element">
             The element to test.
             </param>
            
             <returns>
             true if it matches, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.FirstChild.ChildMatches(CsQuery.IDomContainer)">
             <summary>
             Return the first child of element
             </summary>
            
             <param name="element">
             The parent element.
             </param>
            
             <returns>
             A sequence of children that match.
             </returns>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.LastChild">
             <summary>
             Mathches elements that are the the last child of a parent
             </summary>
            
             <url>
             http://reference.sitepoint.com/css/pseudoclass-lastchild
             </url>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.LastChild.Matches(CsQuery.IDomObject)">
             <summary>
             Test whether an element is the last child of its parent
             </summary>
            
             <param name="element">
             The element to test.
             </param>
            
             <returns>
             true if it matches, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.LastChild.ChildMatches(CsQuery.IDomContainer)">
             <summary>
             Return the last child of the parent
             </summary>
            
             <param name="element">
             The parent element.
             </param>
            
             <returns>
             A sequence of children that match.
             </returns>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.Not">
             <summary>
             Return elements that don't match a selector.
             </summary>
            
             <url>
             http://reference.sitepoint.com/css/pseudoclass-not
             </url>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.Not.Filter(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Return all elements that do not match the selector passed as a parameter to the :not()
             selector.
             </summary>
            
             <param name="selection">
             The sequence of elements prior to this filter being applied.
             </param>
            
             <returns>
             A sequence of matching elements.
             </returns>
        </member>
        <member name="P:CsQuery.Engine.PseudoClassSelectors.Not.MaximumParameterCount">
             <summary>
             The maximum number of parameters that this selector can accept (1)
             </summary>
            
             <value>
             An integer.
             </value>
        </member>
        <member name="P:CsQuery.Engine.PseudoClassSelectors.Not.MinimumParameterCount">
             <summary>
             The minimum number of parameters that this selector requires (1)
             </summary>
            
             <value>
             An integer.
             </value>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.Has">
            <summary>
            Return only the last element from a selection
            </summary>
        </member>
        <member name="F:CsQuery.Engine.PseudoClassSelectors.Has.ChildSelector">
            <summary>
            The child selector
            </summary>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.Has.Filter(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Return only the elements in the sequence whose children match the ChildSelector
             </summary>
            
             <param name="selection">
             The sequence of elements prior to this filter being applied.
             </param>
            
             <returns>
             A sequence of elements
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.Has.Descendants(CsQuery.IDomObject)">
             <summary>
             Enumerates descendants in this collection.
             </summary>
            
             <param name="parent">
             The parent.
             </param>
            
             <returns>
             An enumerator that allows foreach to be used to process descendants in this collection.
             </returns>
        </member>
        <member name="P:CsQuery.Engine.PseudoClassSelectors.Has.Arguments">
             <summary>
             Arguments for the "has" selector.
             </summary>
            
             <value>
             The arguments.
             </value>
        </member>
        <member name="P:CsQuery.Engine.PseudoClassSelectors.Has.MaximumParameterCount">
             <summary>
             The maximum number of parameters that this selector can accept (1)
             </summary>
            
             <value>
             An integer.
             </value>
        </member>
        <member name="P:CsQuery.Engine.PseudoClassSelectors.Has.MinimumParameterCount">
             <summary>
             The minimum number of parameters that this selector requires (1)
             </summary>
            
             <value>
             An integer.
             </value>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.Last">
            <summary>
            Return only the last element from a selection
            </summary>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.Last.Filter(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Filter for the last element in the selection set
             </summary>
            
             <param name="selection">
             The sequence of elements prior to this filter being applied.
             </param>
            
             <returns>
             The last element in the selection.
             </returns>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.First">
            <summary>
            Return only odd-numbered elements from the selection
            </summary>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.First.Filter(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Filter the sequence, returning only the first element.
             </summary>
            
             <param name="selection">
             A sequence of elements
             </param>
            
             <returns>
             The first element in the sequence, or an empty sequence if the original sequence is empty.
             </returns>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.Even">
            <summary>
            Return only odd-numbered elements from the selection
            </summary>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.Even.Filter(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Filter a sequence of elements, returning only the elements at even-numbered ordinal positions
             </summary>
            
             <param name="selection">
             The sequence to filter
             </param>
            
             <returns>
             A sequence of elements
             </returns>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.Odd">
            <summary>
            Return only odd-numbered elements from the selection
            </summary>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.Odd.Filter(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Filter the sequence of elements for only those in odd-number ordinal indices
             </summary>
            
             <param name="selection">
             The sequence of elements prior to this filter being applied.
             </param>
            
             <returns>
             A sequence of matching elements.
             </returns>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.Indexed">
            <summary>
            Base class for jQuery filters that test whether an element appears at the specified position with the list.
            </summary>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.Indexed.Filter(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Abstract implementation of the Filter method for the Index filter.
             </summary>
            
             <param name="selection">
             The sequence of elements prior to this filter being applied.
             </param>
            
             <returns>
             A sequence of matching elements.
             </returns>
        </member>
        <member name="P:CsQuery.Engine.PseudoClassSelectors.Indexed.Index">
            <summary>
            The zero-based index for which to test.
            </summary>
        </member>
        <member name="P:CsQuery.Engine.PseudoClassSelectors.Indexed.MaximumParameterCount">
             <summary>
             The maximum number of parameters that this selector can accept (1)
             </summary>
            
             <value>
             An integer.
             </value>
        </member>
        <member name="P:CsQuery.Engine.PseudoClassSelectors.Indexed.MinimumParameterCount">
             <summary>
             The minimum number of parameters that this selector requires (1)
             </summary>
            
             <value>
             An integer.
             </value>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.Gt">
            <summary>
             Test whether an element appears after the specified position with the list.
            </summary>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.Gt.Filter(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Filter the sequence to include only those elements with an ordinal index greater than the
             value of the Index property.
             </summary>
            
             <param name="selection">
             The selection.
             </param>
            
             <returns>
             An filtered sequence
             </returns>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.Lt">
            <summary>
            Test whether an element appears before the specified position with the list.
            </summary>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.Lt.Filter(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Filter the sequeence of elements for those with an ordinal index less than the Index value.
             </summary>
            
             <param name="selection">
             The sequence of elements prior to this filter being applied.
             </param>
            
             <returns>
             A sequence of matching elements.
             </returns>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.Eq">
            <summary>
            Test whether an element appears at the specified position with the list.
            </summary>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.Eq.Filter(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Filter a sequence of elements, returning only the element at the specified position
             </summary>
            
             <param name="selection">
             A sequence of elements
             </param>
            
             <returns>
             A sequence containing one or zero elements
             </returns>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.OnlyOfType">
             <summary>
             Mathches elements that are the only sibling of this type.
             </summary>
            
             <url>
             http://reference.sitepoint.com/css/pseudoclass-onlyoftype
             </url>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.OnlyOfType.Matches(CsQuery.IDomObject)">
             <summary>
             Test whether an element is the only element of its type among its siblings.
             </summary>
            
             <param name="element">
             The element to test.
             </param>
            
             <returns>
             true if it matches, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.OnlyOfType.ChildMatches(CsQuery.IDomContainer)">
             <summary>
             Return the children of the parent element that are the only elements of that type among the
             other children.
             </summary>
            
             <param name="element">
             The parent element.
             </param>
            
             <returns>
             A sequence of children that match.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.OnlyOfType.OnlyChildOfAnyType(CsQuery.IDomObject)">
            <summary>
            When there's no type, it must return all children that are the only one of that type
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.Header">
            <summary>
            The jQuery ":header" selector
            </summary>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.Header.Matches(CsQuery.IDomObject)">
             <summary>
             Test whether an element is a header (H1-H6)
             </summary>
            
             <param name="element">
             The element to test.
             </param>
            
             <returns>
             true if it matches, false if not.
             </returns>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.Parent">
            <summary>
            Determines whether the target is a parent.
            </summary>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.Parent.Matches(CsQuery.IDomObject)">
             <summary>
             Test whether an element is a parent; e.g. has children.
             </summary>
            
             <param name="element">
             The element to test.
             </param>
            
             <returns>
             true if it matches, false if not.
             </returns>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.Empty">
            <summary>
            Test whether an element is empty. Elements that contain text nodes with empty or null values
            are considered empty.
            </summary>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.Empty.Matches(CsQuery.IDomObject)">
             <summary>
             Test whether the element is empty
             </summary>
            
             <param name="element">
             The element to test.
             </param>
            
             <returns>
             true if it has no non-whitespace children, false if not
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.Empty.IsEmpty(CsQuery.IDomObject)">
             <summary>
             Test whether an element contains no non-empty children. An element can technically have
             children, but if they are text nodes with empty values, then it's considered empty.
             </summary>
            
             <param name="element">
             The element to test
             </param>
            
             <returns>
             true if an element is empty, false if not.
             </returns>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.NthLastOfType">
             <summary>
             Nth last of type pseudo-class selector.
             </summary>
            
             <url>
             http://reference.sitepoint.com/css/pseudoclass-nthlastoftype
             </url>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.NthChildSelector">
            <summary>
            Base class for all nth-child type pseudoclass selectors
            </summary>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.NthChildSelector.Matches(CsQuery.IDomObject)">
             <summary>
             Test whether this element matches the selector implementation.
             </summary>
            
             <param name="element">
             The object.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.NthChildSelector.ChildMatches(CsQuery.IDomContainer)">
             <summary>
             Return a sequence of all children matching the selector implementation.
             </summary>
            
             <param name="element">
             The parent element.
             </param>
            
             <returns>
             A sequence of children that match.
             </returns>
        </member>
        <member name="P:CsQuery.Engine.PseudoClassSelectors.NthChildSelector.NthC">
             <summary>
             NthChildMatcher object for use by inherited classes
             </summary>
            
             <value>
             An instance of the NthChildMatcher support class
             </value>
        </member>
        <member name="P:CsQuery.Engine.PseudoClassSelectors.NthChildSelector.MinimumParameterCount">
             <summary>
             The minimum number of parameters that this selector requires (1)
             </summary>
            
             <value>
             An integer.
             </value>
        </member>
        <member name="P:CsQuery.Engine.PseudoClassSelectors.NthChildSelector.MaximumParameterCount">
             <summary>
             The maximum number of parameters that this selector can accept (1)
             </summary>
            
             <value>
             An integer.
             </value>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.NthLastOfType.Matches(CsQuery.IDomObject)">
             <summary>
             Tests whether the element is the nth-last-of-type based on the parameter n passed with the selector
             </summary>
            
             <param name="element">
             The element.
             </param>
            
             <returns>
             true if the element matches.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.NthLastOfType.ChildMatches(CsQuery.IDomContainer)">
             <summary>
             Enumerates all the elements that are the nth-last-of-type
             </summary>
            
             <param name="element">
             The parent element.
             </param>
            
             <returns>
             A sequence of matching elements
             </returns>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.NthLastChild">
             <summary>
             Return the nth last child using the formula passed by paremter to calculate N.
             </summary>
            
             <url>
             http://reference.sitepoint.com/css/pseudoclass-nthlastchild
             </url>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.NthLastChild.Matches(CsQuery.IDomObject)">
             <summary>
             Test whether this element is an nth child from the end among its siblings
             </summary>
            
             <param name="element">
             The element to test
             </param>
            
             <returns>
             true if it matches, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.NthLastChild.ChildMatches(CsQuery.IDomContainer)">
             <summary>
             Return a sequence of all children of the element that are nth last children.
             </summary>
            
             <param name="element">
             The parent element.
             </param>
            
             <returns>
             A sequence of children that match.
             </returns>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.NthOfType">
             <summary>
             nth-of-type pseudo class selector. Returns elements that are the nth of their type among
             their siblings.
             </summary>
            
             <url>
             http://reference.sitepoint.com/css/pseudoclass-nthoftype
             </url>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.NthOfType.Matches(CsQuery.IDomObject)">
             <summary>
             Test whether this element is an nth of its type. 
             </summary>
            
             <param name="element">
             The object.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.NthOfType.ChildMatches(CsQuery.IDomContainer)">
             <summary>
             Return a sequence of all children that are the nth element of their type.
             </summary>
            
             <param name="element">
             The parent element.
             </param>
            
             <returns>
             A sequence of children that match.
             </returns>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassSelectors.NthChild">
             <summary>
             Matches elements on the basis of their positions within a parent element’s list of child element
             </summary>
            
             <url>
             http://reference.sitepoint.com/css/pseudoclass-nthchild
             </url>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.NthChild.Matches(CsQuery.IDomObject)">
             <summary>
             Test whether this element is an nth child of its parent where values of n are calculate from
             the formula passed as a parameter to the :nth-child(n) selector.
             </summary>
            
             <param name="element">
             The object.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoClassSelectors.NthChild.ChildMatches(CsQuery.IDomContainer)">
             <summary>
             Return a sequence of all children of the parent element that are nth children
             </summary>
            
             <param name="element">
             The parent element.
             </param>
            
             <returns>
             A sequence of children that match.
             </returns>
        </member>
        <member name="T:CsQuery.EquationParser.AssociationType">
            <summary>
            Values that represent AssociationType; which determines how to group adjacent operands when
            parsing an equation.
            </summary>
        </member>
        <member name="F:CsQuery.EquationParser.AssociationType.Addition">
            <summary>
             Associate with other Addition operands
            </summary>
        </member>
        <member name="F:CsQuery.EquationParser.AssociationType.Multiplicaton">
            <summary>
             associate with other Multiplcation operands
            </summary>
        </member>
        <member name="F:CsQuery.EquationParser.AssociationType.Power">
            <summary>
            never associate, associate only directly adjacent operands.
            </summary>
        </member>
        <member name="F:CsQuery.EquationParser.AssociationType.Function">
            <summary>
            never associate, and use parenthesized operands.
            </summary>
        </member>
        <member name="T:CsQuery.EquationParser.OperationType">
            <summary>
            Values that represent OperationType for an arithmetic operator.
            </summary>
        </member>
        <member name="F:CsQuery.EquationParser.OperationType.Addition">
            <summary>
            Addition or +
            </summary>
        </member>
        <member name="F:CsQuery.EquationParser.OperationType.Subtraction">
            <summary>
            Subtraction or -.
            </summary>
        </member>
        <member name="F:CsQuery.EquationParser.OperationType.Multiplication">
            <summary>
            Multiplication or *.
            </summary>
        </member>
        <member name="F:CsQuery.EquationParser.OperationType.Division">
            <summary>
            Division or /.
            </summary>
        </member>
        <member name="F:CsQuery.EquationParser.OperationType.Modulus">
            <summary>
            Modulus or %.
            </summary>
        </member>
        <member name="F:CsQuery.EquationParser.OperationType.Power">
            <summary>
            Power or ^.
            </summary>
        </member>
        <member name="T:CsQuery.EquationParser.Equations">
            <summary>
            Factory class for creating equation objects.
            </summary>
        </member>
        <member name="M:CsQuery.EquationParser.Equations.CreateEquation``1(System.String)">
             <summary>
             Creates an equation returning a specic type from a string
             </summary>
            
             <typeparam name="T">
             The type of value returned by the equation.
             </typeparam>
             <param name="text">
             The text of the equation.
             </param>
            
             <returns>
             The new equation&lt; t&gt;
             </returns>
        </member>
        <member name="M:CsQuery.EquationParser.Equations.CreateEquation(System.String)">
             <summary>
             Creates a new equation from a string.
             </summary>
            
             <param name="text">
             The text of the equation
             </param>
            
             <returns>
             The new equation.
             </returns>
        </member>
        <member name="M:CsQuery.EquationParser.Equations.CreateEquationOperand(System.String)">
             <summary>
             Create an operand by parsing a string. Like CreateEquation but does not wrap in an Equation
             object.
             </summary>
            
             <param name="text">
             The operand text
             </param>
            
             <returns>
             The new equation operand.
             </returns>
        </member>
        <member name="T:CsQuery.EquationParser.IClause">
            <summary>
            Interface for an equation clause.
            </summary>
        </member>
        <member name="P:CsQuery.EquationParser.IFunction.Name">
            <summary>
            The name of this variable
            </summary>
        </member>
        <member name="T:CsQuery.EquationParser.IEquation">
            <summary>
            Interface for an equation.
            </summary>
        </member>
        <member name="M:CsQuery.EquationParser.IEquation.SetVariable(System.String,System.IConvertible)">
             <summary>
             Sets the value of a named variable.
             </summary>
            
             <param name="name">
             The name.
             </param>
             <param name="value">
             The value.
             </param>
        </member>
        <member name="M:CsQuery.EquationParser.IEquation.SetVariable``1(System.String,``0)">
             <summary>
             Sets the value of a strongly-typed named variable.
             </summary>
            
             <typeparam name="U">
             The type of the variable.
             </typeparam>
             <param name="name">
             The name.
             </param>
             <param name="value">
             The value.
             </param>
        </member>
        <member name="M:CsQuery.EquationParser.IEquation.GetValue(System.IConvertible[])">
             <summary>
             Executes the equation, setting the variables in order they were created with the passed
             values. Any variables that were already set using SetValue will be unaffected; if this method
             is uncertain in a given context, then it should be called with no parameters and all
             variables set with SetValue. If errors occur while parsing the equation, and exception will
             be thrown.
             </summary>
            
             <param name="values">
             A variable-length parameters list containing values.
             </param>
            
             <returns>
             The value.
             </returns>
        </member>
        <member name="M:CsQuery.EquationParser.IEquation.TryGetValue(System.IConvertible@,System.IConvertible[])">
             <summary>
             Execute the equation using the values passed; if any errors occur, return false. 
             </summary>
            
             <param name="result">
             [out] The result.
             </param>
             <param name="values">
             A variable-length parameters list containing values.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.EquationParser.IEquation.TryGetValue(System.IConvertible@)">
             <summary>
             Execute the equation using existing variable data; if any errors occur, return false.
             </summary>
            
             <param name="result">
             [out] The result.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.EquationParser.IEquation.Clone">
             <summary>
             Makes a deep copy of this object.
             </summary>
            
             <returns>
             A copy of this object.
             </returns>
        </member>
        <member name="M:CsQuery.EquationParser.IEquation.Compile">
            <summary>
            Compiles the equation.
            </summary>
        </member>
        <member name="P:CsQuery.EquationParser.IEquation.VariableValues">
            <summary>
            A dictionary of variable names and values.
            </summary>
        </member>
        <member name="P:CsQuery.EquationParser.IEquation.Operand">
            <summary>
            Gets or sets the outermost operand of this equation.
            </summary>
        </member>
        <member name="T:CsQuery.EquationParser.IFunction`1">
            <summary>
            T is the output type of the function.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:CsQuery.EquationParser.Implementation.Equation">
            <summary>
            An equation.
            </summary>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Operand.Clone">
            <summary>
            Abstract hooks for cloning. To allow more flexibility in inheriting part of the process
            (e.g. part of the code to copy the instance may be shared, but not instance-making code)
            it's split into two parts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Operand.IsValidType(System.Type)">
            <summary>
            Since it isn't possible to have compile-time type checking for the generic implementation beyond
            IConvertible, allow implementations to define the types that are valid
            </summary>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Operand.GetValue">
             <summary>
             Get the value of this operand
             </summary>
            
             <returns>
             The value.
             </returns>
        </member>
        <member name="P:CsQuery.EquationParser.Implementation.Operand.IsInteger">
            <summary>
            Indicates that this operand is either an integral type or contains an integral value. 
            That is, non-integral types containing integral values will still report true
            </summary>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Equation.Clone">
             <summary>
             Makes a deep copy of this object.
             </summary>
            
             <returns>
             A copy of this object.
             </returns>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Equation.Compile">
            <summary>
            Compiles the equation.
            </summary>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Equation.TryGetValue(System.IConvertible@)">
             <summary>
             Execute the equation using existing variable data; if any errors occur, return false.
             </summary>
            
             <param name="result">
             [out] The result.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Equation.TryGetValue(System.IConvertible@,System.IConvertible[])">
             <summary>
             Execute the equation using the values passed; if any errors occur, return false.
             </summary>
            
             <param name="result">
             [out] The result.
             </param>
             <param name="values">
             A variable-length parameters list containing values.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Equation.SetVariable(System.String,System.IConvertible)">
             <summary>
             Sets the value used for a variable when the function is next run.
             </summary>
            
             <param name="name">
             The variable name
             </param>
             <param name="value">
             The value
             </param>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Equation.SetVariable(System.Int32,System.IConvertible)">
             <summary>
             Sets the value used for a variable when the function is next run.
             </summary>
            
             <param name="index">
             Zero-based index of the.
             </param>
             <param name="value">
             .
             </param>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Equation.SetVariable``1(System.String,``0)">
             <summary>
             Sets the value of a strongly-typed named variable.
             </summary>
            
             <typeparam name="U">
             The type of the variable.
             </typeparam>
             <param name="name">
             The name.
             </param>
             <param name="value">
             The value.
             </param>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Equation.GetValue">
             <summary>
             Get the value of this operand.
             </summary>
            
             <returns>
             The value.
             </returns>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Equation.GetValue(System.IConvertible[])">
            <summary>
            Set the paramenters in order to the values passed, and returns the result of the equation
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="P:CsQuery.EquationParser.Implementation.Equation.VariableValues">
            <summary>
            The names of the variables in the order added. For functions (where the parameters are passed only by order)
            this is important. Probably could move this to the Function implementation
            but it requires overriding everything, almost easier to keep it here.
            </summary>
        </member>
        <member name="P:CsQuery.EquationParser.Implementation.Equation.Operand">
            <summary>
            The root operand for the equation. The equation must not be changed once set, or variables
            will not be bound.
            </summary>
        </member>
        <member name="P:CsQuery.EquationParser.Implementation.Equation.Variables">
            <summary>
            The values set (on order that each variable appears first in the equation) for each varaiable
            </summary>
        </member>
        <member name="P:CsQuery.EquationParser.Implementation.EquationParserEngine.Error">
            <summary>
            Error (if any) that occurred while parsing
            </summary>
        </member>
        <member name="T:CsQuery.EquationParser.Implementation.Equation`1">
             <summary>
             An equation that returns a particular type.
             </summary>
            
             <typeparam name="T">
             The type of value returned.
             </typeparam>
        </member>
        <member name="T:CsQuery.EquationParser.IEquation`1">
             <summary>
             Interface for a strongly-typed equation.
             </summary>
            
             <typeparam name="T">
             The type of value returned by the equation.
             </typeparam>
        </member>
        <member name="M:CsQuery.EquationParser.IEquation`1.GetValue(System.IConvertible[])">
             <summary>
             Execute the equation and return the result
             </summary>
            
             <param name="values">
             The values of the variables for this equation, in the order the variables were created.
             </param>
            
             <returns>
             The value.
             </returns>
        </member>
        <member name="M:CsQuery.EquationParser.IEquation`1.TryGetValue(`0@)">
             <summary>
             Execute the equation; if an error occurs, return false.
             </summary>
            
             <param name="result">
             [out] The result.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.EquationParser.IEquation`1.TryGetValue(`0@,System.IConvertible[])">
             <summary>
             Execute the equation; if an error occurs, return false.
             </summary>
            
             <param name="result">
             [out] The result.
             </param>
             <param name="values">
             The values of the variables for this equation, in the order the variables were created.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.EquationParser.IEquation`1.Clone">
             <summary>
             Makes a deep copy of this object.
             </summary>
            
             <returns>
             A copy of this object.
             </returns>
        </member>
        <member name="M:CsQuery.EquationParser.IEquation`1.CloneAs``1">
             <summary>
             Clone the equation, changing the output type.
             </summary>
            
             <typeparam name="U">
             Generic type parameter.
             </typeparam>
            
             <returns>
             A clone of the equation that returns type U.
             </returns>
        </member>
        <member name="M:CsQuery.EquationParser.IOperation.ReplaceLastOperand(CsQuery.EquationParser.IOperand)">
            <summary>
            Replaces the last item 
            </summary>
            <param name="operand"></param>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Literal`1.SetConvert(System.IConvertible)">
             <summary>
             This is static so it can be used by the constructors -- sets the value of the strongly typed
             instance.
             </summary>
            
             <param name="value">
             The value to set
             </param>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Operator.GetFunction">
            <summary>
            Return the fuction class for this type of operator
            </summary>
            <returns></returns>
        </member>
        <member name="T:CsQuery.EquationParser.OrderedDictionary`2">
            <summary>
            Default implementation of OrderedDictionary-T,TKey,TValue-
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:CsQuery.EquationParser.OrderedDictionary`3">
            <summary>
            A dictionary that also maintains the order added.
            </summary>
            <typeparam name="T">The concrete type of dictionary to use for the inner dictionary</typeparam>
            <typeparam name="TKey">The key type</typeparam>
            <typeparam name="TValue">The value type</typeparam>
        </member>
        <member name="M:CsQuery.EquationParser.OrderedDictionary`3.IndexOf(`1)">
            <summary>
            This class is optimized for access by numeric index, or accessing an object by key. If there's a frequent 
            need to obtain the numeric index from the key then this should have another dictionary added to xref.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.EquationParser.OrderedDictionary`3.Insert(System.Int32,`2)">
            <summary>
            Insert an item by value only. Dup values are possible this way, it will have a key equal to the string of its index.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="P:CsQuery.EquationParser.OrderedDictionary`3.Item(`1)">
            <summary>
            Setting uses indexOf - not optimized.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.EquationParser.IOrderedDictionary`2">
             <summary>
             An interface representing a dictionary that also has intrinsic element order.
             </summary>
            
             <typeparam name="TKey">
             Type of the key.
             </typeparam>
             <typeparam name="TValue">
             Type of the value.
             </typeparam>
        </member>
        <member name="M:CsQuery.EquationParser.IOrderedDictionary`2.IndexOf(`0)">
             <summary>
             Obtain the zero-based index of the given key.
             </summary>
            
             <param name="key">
             The key.
             </param>
            
             <returns>
             The zero-based index of the key in the ordered dictionary
             </returns>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Utils.IsNumericType(System.Type)">
             <summary>
             Test if the type is a numeric primitive type, e.g. all except string, char &amp; bool.
             </summary>
            
             <param name="type">
             The type to test.
             </param>
            
             <returns>
             true if numeric type, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Utils.IsNumericConvertible(System.Type)">
             <summary>
             Any primitive type that can be converted to a number, e.g. all except string. This just
             returns any primitive type that is not IEnumerable.
             </summary>
            
             <param name="type">
             The type to test.
             </param>
            
             <returns>
             true if numeric convertible, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Utils.IsText(System.Object)">
             <summary>
             Test if the value is a string or char type
             </summary>
            
             <param name="value">
             The value to test
             </param>
            
             <returns>
             true if text or char, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Utils.GetFunction``1(System.String)">
             <summary>
             Factory to return a function object based on a name
             </summary>
            
             <exception cref="T:System.ArgumentException">
             Thrown when the named function is not known.
             </exception>
            
             <typeparam name="T">
             The return type of the function
             </typeparam>
             <param name="functionName">
             Name of the function.
             </param>
            
             <returns>
             The function&lt; t&gt;
             </returns>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Utils.EnsureOperand(System.IConvertible)">
            <summary>
            If the value is an operand, returns it, otherwise creates the right kind of operand
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Utils.GetUnderlyingType(System.Type)">
            <summary>
            Return the proper type for an object (ignoring nullability)
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Utils.IsNullableType(System.Type)">
            <summary>
            Returns true of the type is a generic nullable type OR string
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:CsQuery.EquationParser.IVariable.Name">
            <summary>
            The name of this variable
            </summary>
        </member>
        <member name="F:CsQuery.EquationParser.Implementation.Variable._Value">
            <summary>
            The value has been obtained. When true, the cached value will be used instead of requerying. Clear() resets this.
            </summary>
        </member>
        <member name="M:CsQuery.EquationParser.IVariable`1.Clone">
            <summary>
            Release stored value for this variable, causing it to be re-read from the owner
            </summary>
        </member>
        <member name="T:CsQuery.ExtensionMethods.Xml.CqXmlDocument">
            <summary>
            CqXmlDocument. This is not fully implemented and should not be used.
            </summary>
        </member>
        <member name="T:CsQuery.ExtensionMethods.Xml.CqXmlNode">
            <summary>
            Cq XML node. This is not implemented completely. Not suggested that you use it.
            </summary>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Xml.CqXmlNode.CleanXmlNodeName(System.String)">
             <summary>
             Clean an XML node name. Since the only problematic node names should be like "#text" we just
             look for a # and strip it.
             </summary>
            
             <param name="name">
             The name.
             </param>
            
             <returns>
             A string that's acceptable as an XML node name.
             </returns>
        </member>
        <member name="T:CsQuery.ExtensionMethods.Xml.ExtensionMethods">
            <summary>
            Extension methods for converting to XML
            </summary>
        </member>
        <member name="T:CsQuery.ExtensionMethods.Xml.CqXmlNodeList">
            <summary>
            An adapter to map an INodeList to an XmlNodeList. NOT IMPLEMENTED.
            </summary>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Xml.CqXmlNodeList.#ctor(System.Xml.XmlDocument,CsQuery.INodeList)">
             <summary>
             Constructor.
             </summary>
            
             <param name="xmlDocument">
             The XML document.
             </param>
             <param name="nodeList">
             List of nodes.
             </param>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Xml.CqXmlNodeList.GetEnumerator">
             <summary>
             An enumerator for the node list.
             </summary>
            
             <returns>
             An <see cref="T:System.Collections.IEnumerator" />.
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Xml.CqXmlNodeList.Item(System.Int32)">
             <summary>
             Retrieves a node at the given index.
             </summary>
            
             <param name="index">
             Zero-based index into the list of nodes.
             </param>
            
             <returns>
             The <see cref="T:System.Xml.XmlNode" /> in the collection. If <paramref name="index" /> is
             greater than or equal to the number of nodes in the list, this returns null.
             </returns>
        </member>
        <member name="P:CsQuery.ExtensionMethods.Xml.CqXmlNodeList.Count">
            <summary>
            The number of nodes in this list
            </summary>
        </member>
        <member name="T:HtmlParserSharp.Common.DoctypeExpectation">
            <summary>
            Used for indicating desired behavior with legacy doctypes.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Common.DoctypeExpectation.Html">
            <summary>
            Be a pure HTML5 parser.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Common.DoctypeExpectation.Html401Transitional">
            <summary>
            Require the HTML 4.01 Transitional public id. Turn on HTML4-specific
            additional errors regardless of doctype.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Common.DoctypeExpectation.Html401Strict">
            <summary>
            Require the HTML 4.01 Transitional public id and a system id. Turn on
            HTML4-specific additional errors regardless of doctype.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Common.DoctypeExpectation.Auto">
            <summary>
            Treat the doctype required by HTML 5, doctypes with the HTML 4.01 Strict
            public id and doctypes with the HTML 4.01 Transitional public id and a
            system id as non-errors. Turn on HTML4-specific additional errors if the
            public id is the HTML 4.01 Strict or Transitional public id.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Common.DoctypeExpectation.NoDoctypeErrors">
            <summary>
            Never enable HTML4-specific error checks. Never report any doctype
            condition as an error. (Doctype tokens in wrong places will be
            reported as errors, though.) The application may decide what to log
            in response to calls to  <code>DocumentModeHanler</code>. This mode
            is meant for doing surveys on existing content.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Common.DocumentMode.StandardsMode">
            <summary>
            The Standards Mode
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Common.DocumentMode.AlmostStandardsMode">
            <summary>
            The Limited Quirks Mode aka. The Almost Standards Mode
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Common.DocumentMode.QuirksMode">
             <summary>
             The Quirks Mode
             </summary>
            
        </member>
        <member name="M:HtmlParserSharp.Common.DocumentModeEventArgs.#ctor(HtmlParserSharp.Common.DocumentMode,System.String,System.String,System.Boolean)">
            <summary>
            Receive notification of the document mode.
            </summary>
            <param name="mode">The document mode.</param>
            <param name="publicIdentifier">The public identifier of the doctype or <c>null</c> if unavailable.</param>
            <param name="systemIdentifier">The system identifier of the doctype or <c>null</c> if unavailable.</param>
            <param name="html4SpecificAdditionalErrorChecks"><c>true</c>  if HTML 4-specific checks were enabled,
            <c>false</c> otherwise</param>
        </member>
        <member name="P:HtmlParserSharp.Common.EncodingDetectedEventArgs.AcceptEncoding">
            <summary>
            When true, the client has decided to accept the charset-encoding for the document and the
            current processing must be suspended. (Set true to stop encoding).
            </summary>
        </member>
        <member name="T:HtmlParserSharp.Common.ITokenHandler">
            <summary>
            <code>Tokenizer</code> reports tokens through this interface.
            </summary>
        </member>
        <member name="M:HtmlParserSharp.Common.ITokenHandler.StartTokenization(HtmlParserSharp.Core.Tokenizer)">
            <summary>
            This method is called at the start of tokenization before any other
            methods on this interface are called. Implementations should hold the
            reference to the <code>Tokenizer</code> in order to set the content
            model flag and in order to be able to query for <code>Locator</code> data.
            </summary>
            <param name="self">The Tokenizer.</param>
        </member>
        <member name="M:HtmlParserSharp.Common.ITokenHandler.Doctype(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Receive a doctype token.
            </summary>
            <param name="name">The name.</param>
            <param name="publicIdentifier">The public identifier.</param>
            <param name="systemIdentifier">The system identifier.</param>
            <param name="forceQuirks">Whether the token is correct.</param>
        </member>
        <member name="M:HtmlParserSharp.Common.ITokenHandler.StartTag(HtmlParserSharp.Core.ElementName,HtmlParserSharp.Core.HtmlAttributes,System.Boolean)">
            <summary>
            Receive a start tag token.
            </summary>
            <param name="eltName">The tag name.</param>
            <param name="attributes">The attributes.</param>
            <param name="selfClosing">TODO</param>
        </member>
        <member name="M:HtmlParserSharp.Common.ITokenHandler.EndTag(HtmlParserSharp.Core.ElementName)">
            <summary>
            Receive an end tag token.
            </summary>
            <param name="eltName">The tag name.</param>
        </member>
        <member name="M:HtmlParserSharp.Common.ITokenHandler.Comment(System.Char[],System.Int32,System.Int32)">
            <summary>
            Receive a comment token. The data is junk if the<code>wantsComments()</code>
            returned <code>false</code>.
            </summary>
            <param name="buf">The buffer holding the data.</param>
            <param name="start">The offset into the buffer.</param>
            <param name="length">The number of code units to read.</param>
        </member>
        <member name="M:HtmlParserSharp.Common.ITokenHandler.Characters(System.Char[],System.Int32,System.Int32)">
            <summary>
            Receive character tokens. This method has the same semantics as the SAX
            method of the same name.
            </summary>
            <param name="buf">A buffer holding the data.</param>
            <param name="start">The offset into the buffer.</param>
            <param name="length">The number of code units to read.</param>
        </member>
        <member name="M:HtmlParserSharp.Common.ITokenHandler.ZeroOriginatingReplacementCharacter">
            <summary>
            Reports a U+0000 that's being turned into a U+FFFD.
            </summary>
        </member>
        <member name="M:HtmlParserSharp.Common.ITokenHandler.Eof">
            <summary>
            The end-of-file token.
            </summary>
        </member>
        <member name="M:HtmlParserSharp.Common.ITokenHandler.EndTokenization">
            <summary>
            The perform final cleanup.
            </summary>
        </member>
        <member name="P:HtmlParserSharp.Common.ITokenHandler.WantsComments">
            <summary>
            If this handler implementation cares about comments, return <code>true</code>.
            If not, return <code>false</code>
            </summary>
            <returns>Whether this handler wants comments</returns>
        </member>
        <member name="P:HtmlParserSharp.Common.ITokenHandler.IsCDataSectionAllowed">
            <summary>
            Checks if the CDATA sections are allowed.
            </summary>
            <returns><c>true</c> if CDATA sections are allowed</returns>
        </member>
        <member name="P:HtmlParserSharp.Common.ITokenHandler.AllowSelfClosingTags">
            <summary>
            Gets a value indicating whether self-closing tags should be allowed. When true, any tag may
            close itself. When false, a self-closing tag is treated like an opening-tag only.
            </summary>
        </member>
        <member name="T:HtmlParserSharp.Common.XmlViolationPolicy">
            <summary>
            Policy for XML 1.0 violations.
            </summary>
            
        </member>
        <member name="F:HtmlParserSharp.Common.XmlViolationPolicy.Allow">
            <summary>
            Conform to HTML 5, allow XML 1.0 to be violated.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Common.XmlViolationPolicy.Fatal">
            <summary>
            Halt when something cannot be mapped to XML 1.0.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Common.XmlViolationPolicy.AlterInfoset">
            <summary>
            Be non-conforming and alter the infoset to fit
            XML 1.0 when something would otherwise not be
            mappable to XML 1.0.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.AttributeName.HTML">
            <summary>
            The mode value for HTML.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.AttributeName.MATHML">
            <summary>
            The mode value for MathML.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.AttributeName.SVG">
            <summary>
            The mode value for SVG.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.AttributeName.HTML_LANG">
            <summary>
            The mode value for lang-mapping HTML.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.AttributeName.ALL_NO_NS">
            <summary>
            An array representing no namespace regardless of namespace mode (HTML,
            SVG, MathML, lang-mapping HTML) used.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.AttributeName.XMLNS_NS">
            <summary>
            An array that has no namespace for the HTML mode but the XMLNS namespace
            for the SVG and MathML modes.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.AttributeName.XML_NS">
            <summary>
            An array that has no namespace for the HTML mode but the XML namespace
            for the SVG and MathML modes.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.AttributeName.XLINK_NS">
            <summary>
            An array that has no namespace for the HTML mode but the XLink namespace
            for the SVG and MathML modes.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.AttributeName.LANG_NS">
            <summary>
            An array that has no namespace for the HTML, SVG and MathML modes but has
            the XML namespace for the lang-mapping HTML mode.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.AttributeName.ALL_NO_PREFIX">
            <summary>
            An array for no prefixes in any mode.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.AttributeName.XMLNS_PREFIX">
            <summary>
            An array for no prefixe in the HTML mode and the 
            <code>xmlns</code> prefix in the SVG and MathML modes.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.AttributeName.XLINK_PREFIX">
            <summary>
            An array for no prefixe in the HTML mode and the 
            <code>xlink</code>
            prefix in the SVG and MathML modes.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.AttributeName.XML_PREFIX">
            <summary>
            An array for no prefixe in the HTML mode and the 
            <code>xml</code> prefix in the SVG and MathML modes.
            </summary>
        </member>
        <member name="M:HtmlParserSharp.Core.AttributeName.SVG_DIFFERENT(System.String,System.String)">
            <summary>
            An initialization helper for having a one name in the SVG mode and
            another name in the other modes.
            </summary>
            <param name="name">The name for the non-SVG modes</param>
            <param name="camel">The name for the SVG mode</param>
            <returns>The initialized name array</returns>
        </member>
        <member name="M:HtmlParserSharp.Core.AttributeName.MATH_DIFFERENT(System.String,System.String)">
            <summary>
            An initialization helper for having a one name in the MathML mode and
            another name in the other modes.
            </summary>
            <param name="name">The name for the non-MathML modes</param>
            <param name="camel">The name for the MathML mode</param>
            <returns>The initialized name array</returns>
        </member>
        <member name="M:HtmlParserSharp.Core.AttributeName.COLONIFIED_LOCAL(System.String,System.String)">
            <summary>
            An initialization helper for having a different local name in the HTML
            mode and the SVG and MathML modes.
            </summary>
            <param name="name">The name for the HTML mode</param>
            <param name="suffix">The name for the SVG and MathML modes</param>
            <returns>The initialized name array</returns>
        </member>
        <member name="M:HtmlParserSharp.Core.AttributeName.SAME_LOCAL(System.String)">
            <summary>
            An initialization helper for having the same local name in all modes.
            </summary>
            <param name="name">The name</param>
            <returns>The initialized name array</returns>
        </member>
        <member name="M:HtmlParserSharp.Core.AttributeName.NameByBuffer(System.Char[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns an attribute name by buffer.
            <p/>
            C++ ownership: The return value is either released by the caller if the
            attribute is a duplicate or the ownership is transferred to
            HtmlAttributes and released upon clearing or destroying that object.
            </summary>
            <param name="buf">The buffer</param>
            <param name="offset">ignored</param>
            <param name="length">Length of data</param>
            <param name="checkNcName">Whether to check ncnameness</param>
            <returns>An <code>AttributeName</code> corresponding to the argument data</returns>
        </member>
        <member name="M:HtmlParserSharp.Core.AttributeName.BufToHash(System.Char[],System.Int32)">
            <summary>
            This method has to return a unique integer for each well-known
            lower-cased attribute name.
            </summary>
            <param name="buf">The buffer.</param>
            <param name="len">The length.</param>
            <returns></returns>
        </member>
        <member name="F:HtmlParserSharp.Core.AttributeName.uri">
            <summary>
            The namespaces indexable by mode.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.AttributeName.local">
            <summary>
            The local names indexable by mode.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.AttributeName.prefix">
            <summary>
            The prefixes indexably by mode.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.AttributeName.qName">
            <summary>
            The qnames indexable by mode.
            </summary>
        </member>
        <member name="M:HtmlParserSharp.Core.AttributeName.#ctor(System.String[],System.String[],System.String[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:HtmlParserSharp.Core.AttributeName"/> class (The startup-time constructor). 
            </summary>
            <param name="uri">The namespace.</param>
            <param name="local">The local name.</param>
            <param name="prefix">The prefix.</param>
            <param name="flags">The flags.</param>
        </member>
        <member name="M:HtmlParserSharp.Core.AttributeName.CreateAttributeName(System.String,System.Boolean)">
            <summary>
            Creates an <code>AttributeName</code> for a local name.
            </summary>
            <param name="name">The name.</param>
            <param name="checkNcName">Whether to check ncnameness.</param>
            <returns>An <code>AttributeName</code></returns>
        </member>
        <member name="M:HtmlParserSharp.Core.AttributeName.CloneAttributeName">
             <summary>
             TODO: remove this (?)
             Clones the attribute using an interner. Returns
             <code>this</code> in Java and for non-dynamic instances in C++.
             </summary>
            
             <returns>
             A clone.
             </returns>
        </member>
        <member name="M:HtmlParserSharp.Core.AttributeName.Create(System.String)">
            <summary>
            Creator for use when the XML violation policy requires an attribute name
            to be changed.
            </summary>
            <param name="name">The name.</param>
            <returns>The name of the attribute to create</returns>
        </member>
        <member name="M:HtmlParserSharp.Core.AttributeName.IsNcName(System.Int32)">
            <summary>
            Determines whether this name is an XML 1.0 4th ed. NCName.
            </summary>
            <param name="mode">The SVG/MathML/HTML mode</param>
            <returns>
              <c>true</c> if if this is an NCName in the given mode; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:HtmlParserSharp.Core.AttributeName.D">
            **
        </member>
        <member name="P:HtmlParserSharp.Core.AttributeName.IsXmlns">
            <summary>
            Queries whether this is an <code>xmlns</code> attribute.
            </summary>
            <returns>
              <c>true</c> if this is an <code>xmlns</code> attribute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:HtmlParserSharp.Core.AttributeName.IsCaseFolded">
            <summary>
            Determines whether this attribute has a case-folded value in the HTML4 mode
            of the parser.
            </summary>
            <returns>
              <c>true</c> if the value is case-folded; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:HtmlParserSharp.Core.CoalescingTreeBuilder`1">
            <summary>
            A common superclass for tree builders that coalesce their text nodes.
            </summary>
        </member>
        <member name="T:HtmlParserSharp.Core.ITreeBuilderState`1">
            <summary>
            Interface for exposing the state of the HTML5 tree builder so that the
            interface can be implemented by the tree builder itself and by snapshots.
            </summary>
        </member>
        <member name="P:HtmlParserSharp.Core.ITreeBuilderState`1.Stack">
            <summary>
            Gets the stack.
            </summary>
            <returns>The stack</returns>
        </member>
        <member name="P:HtmlParserSharp.Core.ITreeBuilderState`1.ListOfActiveFormattingElements">
            <summary>
            Gets the list of active formatting elements.
            </summary>
            <returns>The list of active formatting elements.</returns>
        </member>
        <member name="P:HtmlParserSharp.Core.ITreeBuilderState`1.FormPointer">
            <summary>
            Gets the form pointer.
            </summary>
            <returns>The form pointer</returns>
        </member>
        <member name="P:HtmlParserSharp.Core.ITreeBuilderState`1.HeadPointer">
            <summary>
            Gets the head pointer.
            </summary>
            <returns>The head pointer.</returns>
        </member>
        <member name="P:HtmlParserSharp.Core.ITreeBuilderState`1.DeepTreeSurrogateParent">
            <summary>
            Gets the deep tree surrogate parent.
            </summary>
            <returns>The deep tree surrogate parent.</returns>
        </member>
        <member name="P:HtmlParserSharp.Core.ITreeBuilderState`1.Mode">
            <summary>
            Gets the mode.
            </summary>
            <returns>The mode.</returns>
        </member>
        <member name="P:HtmlParserSharp.Core.ITreeBuilderState`1.OriginalMode">
            <summary>
            Gets the original mode.
            </summary>
            <returns>The original mode.</returns>
        </member>
        <member name="P:HtmlParserSharp.Core.ITreeBuilderState`1.IsFramesetOk">
            <summary>
            Determines whether the frameset is OK.
            </summary>
            <returns>
              <c>true</c> if the frameset is OK; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:HtmlParserSharp.Core.ITreeBuilderState`1.IsNeedToDropLF">
            <summary>
            Determines whether we need to drop LF.
            </summary>
            <returns>
              <c>true</c> if we need to drop LF; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:HtmlParserSharp.Core.ITreeBuilderState`1.IsQuirks">
            <summary>
            Determines whether this instance is in quirks mode.
            </summary>
            <returns>
              <c>true</c> if this instance is in quirks mode; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:HtmlParserSharp.Core.TreeBuilder`1.framesetOk">
            <summary>
            Used only when moving back to IN_BODY.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.TreeBuilder`1.deepTreeSurrogateParent">
            Used to work around Gecko limitations. Not used in Java.
        </member>
        <member name="M:HtmlParserSharp.Core.TreeBuilder`1.Fatal">
            <summary>
            Reports an condition that would make the infoset incompatible with XML
            1.0 as fatal.
            </summary>
        </member>
        <member name="M:HtmlParserSharp.Core.TreeBuilder`1.Err(System.String)">
            <summary>
            Reports a Parse Error.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:HtmlParserSharp.Core.TreeBuilder`1.ErrNoCheck(System.String)">
            <summary>
            Reports a Parse Error without checking if an error handler is present.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:HtmlParserSharp.Core.TreeBuilder`1.ErrStrayStartTag(System.String)">
            <summary>
            Reports a stray start tag.
            </summary>
            <param name="name">The name of the stray tag.</param>
        </member>
        <member name="M:HtmlParserSharp.Core.TreeBuilder`1.ErrStrayEndTag(System.String)">
            <summary>
            Reports a stray end tag.
            </summary>
            <param name="name">The name of the stray tag.</param>
        </member>
        <member name="M:HtmlParserSharp.Core.TreeBuilder`1.ErrUnclosedElements(System.Int32,System.String)">
            <summary>
            Reports a state when elements expected to be closed were not.
            </summary>
            <param name="eltPos">The position of the start tag on the stack of the element
            being closed.</param>
            <param name="name">The name of the end tag.</param>
        </member>
        <member name="M:HtmlParserSharp.Core.TreeBuilder`1.ErrUnclosedElementsImplied(System.Int32,System.String)">
            <summary>
            Reports a state when elements expected to be closed ahead of an implied
            end tag but were not.
            </summary>
            <param name="eltPos">The position of the start tag on the stack of the element
            being closed.</param>
            <param name="name">The name of the end tag.</param>
        </member>
        <member name="M:HtmlParserSharp.Core.TreeBuilder`1.ErrUnclosedElementsCell(System.Int32)">
            <summary>
            Reports a state when elements expected to be closed ahead of an implied
            table cell close.
            </summary>
            <param name="eltPos">The position of the start tag on the stack of the element
            being closed.</param>
        </member>
        <member name="M:HtmlParserSharp.Core.TreeBuilder`1.ErrEndWithUnclosedElements(System.String)">
            <summary>
            Reports arriving at/near end of document with unclosed elements remaining.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:HtmlParserSharp.Core.TreeBuilder`1.ReportUnclosedElementNameAndLocation(System.Int32)">
            <summary>
            Reports the name and location of an unclosed element.
            </summary>
            <param name="pos">The position.</param>
        </member>
        <member name="M:HtmlParserSharp.Core.TreeBuilder`1.Warn(System.String)">
            <summary>
            Reports a warning
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:HtmlParserSharp.Core.TreeBuilder`1.Comment(System.Char[],System.Int32,System.Int32)">
            <summary>
            Receive a comment token. The data is junk if the<code>wantsComments()</code>
            returned <code>false</code>.
            </summary>
            <param name="buf">The buffer holding the data.</param>
            <param name="start">The offset into the buffer.</param>
            <param name="length">The number of code units to read.</param>
        </member>
        <member name="M:HtmlParserSharp.Core.TreeBuilder`1.Characters(System.Char[],System.Int32,System.Int32)">
            <summary>
            Receive character tokens. This method has the same semantics as the SAX
            method of the same name.
            </summary>
            <param name="buf">A buffer holding the data.</param>
            <param name="start">The offset into the buffer.</param>
            <param name="length">The number of code units to read.</param>
        </member>
        <member name="M:HtmlParserSharp.Core.TreeBuilder`1.ZeroOriginatingReplacementCharacter">
            <summary>
            Reports a U+0000 that's being turned into a U+FFFD.
            </summary>
        </member>
        <member name="M:HtmlParserSharp.Core.TreeBuilder`1.Eof">
            <summary>
            The end-of-file token.
            </summary>
        </member>
        <member name="M:HtmlParserSharp.Core.TreeBuilder`1.EndTokenization">
            <summary>
            The perform final cleanup.
            </summary>
        </member>
        <member name="M:HtmlParserSharp.Core.TreeBuilder`1.AddAttributesToBody(HtmlParserSharp.Core.HtmlAttributes)">
            <summary>
            Attempt to add attribute to the body element.
            </summary>
            <param name="attributes">The attributes.</param>
            <returns><c>true</c> if the attributes were added</returns>
        </member>
        <member name="M:HtmlParserSharp.Core.TreeBuilder`1.SetFragmentContext(System.String)">
            The argument MUST be an interned string or <code>null</code>.
            
            @param context
        </member>
        <member name="M:HtmlParserSharp.Core.TreeBuilder`1.SetFragmentContext(System.String,System.String,`0,System.Boolean)">
            The argument MUST be an interned string or <code>null</code>.
            
            @param context
        </member>
        <member name="M:HtmlParserSharp.Core.TreeBuilder`1.FlushCharacters">
            <summary>
            Flushes the pending characters. Public for document.write use cases only.
            </summary>
        </member>
        <member name="M:HtmlParserSharp.Core.TreeBuilder`1.NewSnapshot">
            <summary>
            Creates a comparable snapshot of the tree builder state. Snapshot
            creation is only supported immediately after a script end tag has been
            processed. In C++ the caller is responsible for calling
            <code>delete</code> on the returned object.
            </summary>
            <returns>A snapshot</returns>
        </member>
        <member name="P:HtmlParserSharp.Core.TreeBuilder`1.WantsComments">
            <summary>
            If this handler implementation cares about comments, return <code>true</code>.
            If not, return <code>false</code>
            </summary>
            <returns>
            Whether this handler wants comments
            </returns>
        </member>
        <member name="P:HtmlParserSharp.Core.TreeBuilder`1.IsCDataSectionAllowed">
            <summary>
            Checks if the CDATA sections are allowed.
            </summary>
            <returns>
              <c>true</c> if CDATA sections are allowed
            </returns>
        </member>
        <member name="P:HtmlParserSharp.Core.TreeBuilder`1.ListOfActiveFormattingElements">
            <summary>
            Gets the list of active formatting elements.
            </summary>
        </member>
        <member name="P:HtmlParserSharp.Core.TreeBuilder`1.Stack">
            <summary>
            Gets the stack.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.ElementName.GROUP_MASK">
            <summary>
            The mask for extracting the dispatch group.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.ElementName.CUSTOM">
            <summary>
            Indicates that the element is not a pre-interned element. Forbidden
            on preinterned elements.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.ElementName.SPECIAL">
            <summary>
            Indicates that the element is in the "special" category. This bit
            should not be pre-set on MathML or SVG specials--only on HTML specials.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.ElementName.FOSTER_PARENTING">
            <summary>
            The element is foster-parenting. This bit should be pre-set on elements
            that are foster-parenting as HTML.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.ElementName.SCOPING">
            <summary>
            The element is scoping. This bit should be pre-set on elements
            that are scoping as HTML.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.ElementName.SCOPING_AS_SVG">
            <summary>
            The element is scoping as SVG.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.ElementName.SCOPING_AS_MATHML">
            <summary>
            The element is scoping as MathML.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.ElementName.HTML_INTEGRATION_POINT">
            <summary>
            The element is an HTML integration point.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.ElementName.OPTIONAL_END_TAG">
            <summary>
            The element has an optional end tag.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.ElementName.flags">
            <summary>
            The lowest 7 bits are the dispatch group. The high bits are flags.
            </summary>
        </member>
        <member name="M:HtmlParserSharp.Core.ElementName.BufToHash(System.Char[],System.Int32)">
            <summary>
            This method has to return a unique integer for each well-known
            lower-cased element name.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.ElementName.A">
            **
        </member>
        <member name="T:HtmlParserSharp.Core.HtmlAttributes">
            <summary>
            Be careful with this class. QName is the name in from HTML tokenization.
            Otherwise, please refer to the interface doc.
            </summary>
        </member>
        <member name="M:HtmlParserSharp.Core.HtmlAttributes.GetIndex(HtmlParserSharp.Core.AttributeName)">
            <summary>
            Only use with a static argument
            </summary>
        </member>
        <member name="M:HtmlParserSharp.Core.HtmlAttributes.GetValue(HtmlParserSharp.Core.AttributeName)">
            <summary>
            Only use with static argument.
            </summary>
        </member>
        <member name="M:HtmlParserSharp.Core.HtmlAttributes.ClearWithoutReleasingContents">
            <summary>
            This is only used for <code>AttributeName</code> ownership transfer
            in the isindex case to avoid freeing custom names twice in C++.
            </summary>
        </member>
        <member name="T:HtmlParserSharp.Core.ILocator">
            <summary>
            Interface for getting the current line and column
            (Corresponds to the SAX Locator interface).
            This is implemented by Locator and Tokenizer.
            </summary>
        </member>
        <member name="T:HtmlParserSharp.Core.Portability">
            <summary>
            Class for C++ portability.
            TODO: Remove this
            </summary>
        </member>
        <member name="M:HtmlParserSharp.Core.Portability.NewLocalNameFromBuffer(System.Char[],System.Int32,System.Int32)">
            <summary>
            Allocates a new local name object. In C++, the refcount must be set up in such a way that
            calling <code>releaseLocal</code> on the return value balances the refcount set by this method.
            </summary>
        </member>
        <member name="M:HtmlParserSharp.Core.StackNode`1.#ctor(System.Int32,System.String,System.String,`0,System.String,HtmlParserSharp.Core.HtmlAttributes,HtmlParserSharp.Core.TaintableLocator)">
            <summary>
            Constructor for copying. This doesn't take another <code>StackNode</code>
            because in C++ the caller is reponsible for reobtaining the local names
            from another interner.
            </summary>
        </member>
        <member name="M:HtmlParserSharp.Core.StackNode`1.#ctor(HtmlParserSharp.Core.ElementName,`0,HtmlParserSharp.Core.TaintableLocator)">
            <summary>
            Short hand for well-known HTML elements.
            </summary>
        </member>
        <member name="M:HtmlParserSharp.Core.StackNode`1.#ctor(HtmlParserSharp.Core.ElementName,`0,HtmlParserSharp.Core.HtmlAttributes,HtmlParserSharp.Core.TaintableLocator)">
            <summary>
            Constructor for HTML formatting elements.
            </summary>
        </member>
        <member name="M:HtmlParserSharp.Core.StackNode`1.#ctor(HtmlParserSharp.Core.ElementName,`0,System.String,HtmlParserSharp.Core.TaintableLocator)">
            <summary>
            The common-case HTML constructor.
            </summary>
        </member>
        <member name="M:HtmlParserSharp.Core.StackNode`1.#ctor(HtmlParserSharp.Core.ElementName,System.String,`0,HtmlParserSharp.Core.TaintableLocator)">
            <summary>
            Constructor for SVG elements. Note that the order of the arguments is
            what distinguishes this from the HTML constructor. This is ugly, but
            AFAICT the least disruptive way to make this work with Java's generics
            and without unnecessary branches. :-(
            </summary>
        </member>
        <member name="M:HtmlParserSharp.Core.StackNode`1.#ctor(HtmlParserSharp.Core.ElementName,`0,System.String,System.Boolean,HtmlParserSharp.Core.TaintableLocator)">
            <summary>
            Constructor for MathML.
            </summary>
        </member>
        <member name="M:HtmlParserSharp.Core.StackNode`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:HtmlParserSharp.Core.StateSnapshot`1.Stack">
            <summary>
            Gets the stack.
            </summary>
        </member>
        <member name="P:HtmlParserSharp.Core.StateSnapshot`1.ListOfActiveFormattingElements">
            <summary>
            Gets the list of active formatting elements.
            </summary>
        </member>
        <member name="P:HtmlParserSharp.Core.StateSnapshot`1.Mode">
            <summary>
            Gets the mode.
            </summary>
        </member>
        <member name="P:HtmlParserSharp.Core.StateSnapshot`1.OriginalMode">
            <summary>
            Gets the original mode.
            </summary>
        </member>
        <member name="P:HtmlParserSharp.Core.StateSnapshot`1.IsFramesetOk">
            <summary>
            Gets a value indicating whether this instance is frameset ok.
            </summary>
            <value>
            	<c>true</c> if this instance is frameset ok; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:HtmlParserSharp.Core.StateSnapshot`1.IsNeedToDropLF">
            <summary>
            Gets a value indicating whether this instance is need to drop LF.
            </summary>
            <value>
            	<c>true</c> if this instance is need to drop LF; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:HtmlParserSharp.Core.StateSnapshot`1.IsQuirks">
            <summary>
            Gets a value indicating whether this instance is quirks.
            </summary>
            <value>
              <c>true</c> if this instance is quirks; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:HtmlParserSharp.Core.Tokenizer">
            <summary>
            An implementation of
            http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html
            This class implements the <code>Locator</code> interface. This is not an
            incidental implementation detail: Users of this class are encouraged to make
            use of the <code>Locator</code> nature.
            By default, the tokenizer may report data that XML 1.0 bans. The tokenizer
            can be configured to treat these conditions as fatal or to coerce the infoset
            to something that XML 1.0 allows.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.LEAD_OFFSET">
            <summary>
            Magic value for UTF-16 operations.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.BUFFER_GROW_BY">
            <summary>
            Buffer growth parameter.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.LT_GT">
            <summary>
            UTF-16 code unit array containing less than and greater than for emitting
            those characters on certain parse errors.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.LT_SOLIDUS">
            <summary>
            UTF-16 code unit array containing less than and solidus for emitting
            those characters on certain parse errors.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.RSQB_RSQB">
            <summary>
            UTF-16 code unit array containing ]] for emitting those characters on
            state transitions.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.REPLACEMENT_CHARACTER">
            <summary>
            Array version of U+FFFD.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.SPACE">
            <summary>
            Array version of space.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.LF">
            <summary>
            Array version of line feed.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.CDATA_LSQB">
            <summary>
            "CDATA[" as <code>char[]</code>
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.OCTYPE">
            <summary>
            "octype" as <code>char[]</code>
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.UBLIC">
            <summary>
            "ublic" as <code>char[]</code>
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.YSTEM">
            <summary>
            "ystem" as  <code>char[]</code>
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.lastCR">
            Whether the previous char read was CR.
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.strBuf">
            Buffer for short identifiers.
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.strBufLen">
            Number of significant <code>char</code>s in <code>strBuf</code>.
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.longStrBuf">
            Buffer for long strings.
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.longStrBufLen">
            Number of significant <code>char</code>s in <code>longStrBuf</code>.
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.bmpChar">
            Buffer for expanding NCRs falling into the Basic Multilingual Plane.
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.astralChar">
            Buffer for expanding astral NCRs.
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.endTagExpectation">
            The element whose end tag closes the current CDATA or RCDATA element.
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.endTag">
            <code>true</code> if tokenizing an end tag
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.tagName">
            The current tag token name.
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.attributeName">
            The current attribute name.
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.wantsComments">
            Whether comment tokens are emitted.
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.html4">
            <code>true</code> when HTML4-specific additional errors are requested.
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.metaBoundaryPassed">
            Whether the stream is past the first 512 bytes.
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.doctypeName">
            The name of the current doctype token.
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.publicIdentifier">
            The public id of the current doctype token.
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.systemIdentifier">
            The system id of the current doctype token.
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.attributes">
            The attribute holder.
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.contentSpacePolicy">
            The policy for vertical tab and form feed.
        </member>
        <member name="F:HtmlParserSharp.Core.Tokenizer.commentPolicy">
            The policy for comments.
        </member>
        <member name="M:HtmlParserSharp.Core.Tokenizer.#ctor(HtmlParserSharp.Common.ITokenHandler)">
            The constructor.
            
            @param tokenHandler
                       the handler for receiving tokens
        </member>
        <member name="M:HtmlParserSharp.Core.Tokenizer.SetStateAndEndTagExpectation(System.Int32,System.String)">
            Sets the tokenizer state and the associated element name. This should 
            only ever used to put the tokenizer into one of the states that have
            a special end tag expectation.
            
            @param specialTokenizerState
                       the tokenizer state to set
            @param endTagExpectation
                       the expected end tag for transitioning back to normal
        </member>
        <member name="M:HtmlParserSharp.Core.Tokenizer.SetStateAndEndTagExpectation(System.Int32,HtmlParserSharp.Core.ElementName)">
            Sets the tokenizer state and the associated element name. This should 
            only ever used to put the tokenizer into one of the states that have
            a special end tag expectation.
            
            @param specialTokenizerState
                       the tokenizer state to set
            @param endTagExpectation
                       the expected end tag for transitioning back to normal
        </member>
        <member name="M:HtmlParserSharp.Core.Tokenizer.AppendStrBuf(System.Char)">
            Appends to the smaller buffer.
            
            @param c
                       the UTF-16 code unit to append
        </member>
        <member name="M:HtmlParserSharp.Core.Tokenizer.StrBufToDoctypeName">
            Returns the short buffer as a local name. The return value is released in
            emitDoctypeToken().
            
            @return the smaller buffer as local name
        </member>
        <member name="M:HtmlParserSharp.Core.Tokenizer.EmitStrBuf">
            Emits the smaller buffer as character tokens.
            
            @throws SAXException
                        if the token handler threw
        </member>
        <member name="M:HtmlParserSharp.Core.Tokenizer.AppendLongStrBuf(System.Char)">
            Appends to the larger buffer.
            
            @param c
                       the UTF-16 code unit to append
        </member>
        <member name="M:HtmlParserSharp.Core.Tokenizer.AppendStrBufToLongStrBuf">
            Append the contents of the smaller buffer to the larger one.
        </member>
        <!-- Badly formed XML comment ignored for member "M:HtmlParserSharp.Core.Tokenizer.LongStrBufToString" -->
        <member name="M:HtmlParserSharp.Core.Tokenizer.EmitComment(System.Int32,System.Int32)">
            <summary>
            Emits the current comment token.
            </summary>
            <param name="provisionalHyphens">The provisional hyphens.</param>
            <param name="pos">The position.</param>
        </member>
        <member name="M:HtmlParserSharp.Core.Tokenizer.FlushChars(System.Char[],System.Int32)">
            <summary>
            Flushes coalesced character tokens.
            </summary>
            <param name="buf">The buffer.</param>
            <param name="pos">The position.</param>
        </member>
        <member name="M:HtmlParserSharp.Core.Tokenizer.Fatal(System.String)">
            Reports an condition that would make the infoset incompatible with XML
            1.0 as fatal.
            
            @param message
                       the message
            @throws SAXException
            @throws SAXParseException
        </member>
        <member name="M:HtmlParserSharp.Core.Tokenizer.Err(System.String)">
            Reports a Parse Error.
            
            @param message
                       the message
            @throws SAXException
        </member>
        <member name="M:HtmlParserSharp.Core.Tokenizer.Warn(System.String)">
            Reports a warning
            
            @param message
                       the message
            @throws SAXException
        </member>
        <member name="M:HtmlParserSharp.Core.Tokenizer.ResetAttributes">
            
        </member>
        <member name="M:HtmlParserSharp.Core.Tokenizer.EmitOrAppendTwo(System.Char[],System.Int32)">
            @param val
            @throws SAXException
        </member>
        <member name="M:HtmlParserSharp.Core.Tokenizer.SetTransitionBaseOffset(System.Int32)">
            <summary>
            Sets an offset to be added to the position reported to
            <code>TransitionHandler</code>.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="P:HtmlParserSharp.Core.Tokenizer.IsMappingLangToXmlLang">
            Returns the mappingLangToXmlLang.
            
            @return the mappingLangToXmlLang
        </member>
        <member name="P:HtmlParserSharp.Core.Tokenizer.CommentPolicy">
            Sets the commentPolicy.
            
            @param commentPolicy
                       the commentPolicy to set
        </member>
        <member name="P:HtmlParserSharp.Core.Tokenizer.ContentNonXmlCharPolicy">
            Sets the contentNonXmlCharPolicy.
            
            @param contentNonXmlCharPolicy
                       the contentNonXmlCharPolicy to set
        </member>
        <member name="P:HtmlParserSharp.Core.Tokenizer.ContentSpacePolicy">
            Sets the contentSpacePolicy.
            
            @param contentSpacePolicy
                       the contentSpacePolicy to set
        </member>
        <member name="P:HtmlParserSharp.Core.Tokenizer.XmlnsPolicy">
            Sets the xmlnsPolicy.
            
            @param xmlnsPolicy
                       the xmlnsPolicy to set
        </member>
        <member name="P:HtmlParserSharp.Core.Tokenizer.Html4ModeCompatibleWithXhtml1Schemata">
            Sets the html4ModeCompatibleWithXhtml1Schemata.
            
            @param html4ModeCompatibleWithXhtml1Schemata
                       the html4ModeCompatibleWithXhtml1Schemata to set
        </member>
        <member name="P:HtmlParserSharp.Core.Tokenizer.LineNumber">
            @see org.xml.sax.Locator#getLineNumber()
        </member>
        <member name="P:HtmlParserSharp.Core.Tokenizer.ColumnNumber">
            @see org.xml.sax.Locator#getColumnNumber()
        </member>
        <member name="P:HtmlParserSharp.Core.Tokenizer.IsAlreadyComplainedAboutNonAscii">
            Returns the alreadyComplainedAboutNonAscii.
            
            @return the alreadyComplainedAboutNonAscii
        </member>
        <member name="P:HtmlParserSharp.Core.Tokenizer.IsNextCharOnNewLine">
            Returns the nextCharOnNewLine.
            
            @return the nextCharOnNewLine
        </member>
        <member name="P:HtmlParserSharp.Core.Tokenizer.Line">
            Returns the line.
            
            @return the line
        </member>
        <member name="P:HtmlParserSharp.Core.Tokenizer.Col">
            Returns the col.
            
            @return the col
        </member>
        <member name="P:HtmlParserSharp.Core.Tokenizer.IsSuspended">
            <summary>
            Gets a value indicating whether the parsing has been suspended.
            </summary>
        </member>
        <member name="T:HtmlParserSharp.Core.TreeBuilderConstants">
            <summary>
            Moved the constants (and pseude-enums) out of the TreeBuilder class.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.Core.TreeBuilderConstants.REPLACEMENT_CHARACTER">
            <summary>
            Array version of U+FFFD.
            </summary>
        </member>
        <member name="T:HtmlParserSharp.Core.UTF16Buffer">
            <summary>
            An UTF-16 buffer that knows the start and end indeces of its unconsumed
            content.
            </summary>
        </member>
        <member name="M:HtmlParserSharp.Core.UTF16Buffer.#ctor(System.Char[],System.Int32,System.Int32)">
            <summary>
            Constructor for wrapping an existing UTF-16 code unit array.
            </summary>
            <param name="buffer">The backing buffer.</param>
            <param name="start">The index of the first character to consume.</param>
            <param name="end">The index immediately after the last character to consume.</param>
        </member>
        <member name="M:HtmlParserSharp.Core.UTF16Buffer.Adjust(System.Boolean)">
            <summary>
            Adjusts the start index to skip over the first character if it is a line
            feed and the previous character was a carriage return.
            </summary>
            <param name="lastWasCR">Whether the previous character was a carriage return.</param>
        </member>
        <member name="P:HtmlParserSharp.Core.UTF16Buffer.Buffer">
            <summary>
            Gets the backing store of the buffer. May be larger than the logical content
            of this <code>UTF16Buffer</code>.
            </summary>
        </member>
        <member name="P:HtmlParserSharp.Core.UTF16Buffer.Start">
            <summary>
            Gets or sets the index of the first unconsumed character in the backing buffer.
            </summary>
        </member>
        <member name="P:HtmlParserSharp.Core.UTF16Buffer.End">
            <summary>
            Gets or sets the index of the slot immediately after the last character in the backing
            buffer that is part of the logical content of this <code>UTF16Buffer</code>.
            </summary>
        </member>
        <member name="P:HtmlParserSharp.Core.UTF16Buffer.HasMore">
            <summary>
            Determines whether this instance has data left.
            </summary>
            <returns>
              <c>true</c> if there's data left; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:HtmlParserSharp.XmlTreeBuilder">
            <summary>
            The tree builder glue for building a tree through the public DOM APIs.
            </summary>
        </member>
        <member name="F:HtmlParserSharp.XmlTreeBuilder.document">
            <summary>
            The current doc.
            </summary>
        </member>
        <member name="M:HtmlParserSharp.XmlTreeBuilder.getDocumentFragment">
            <summary>
            Return the document fragment.
            </summary>
            <returns>The document fragment</returns>
        </member>
        <member name="P:HtmlParserSharp.XmlTreeBuilder.Document">
            <summary>
            Returns the document.
            </summary>
            <returns>The document</returns>
        </member>
        <member name="T:CsQuery.HtmlParsingOptions">
            <summary>
            The options used when parsing strings of HTML
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParsingOptions.None">
            <summary>
            No options applied.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParsingOptions.Default">
            <summary>
            Default options (from Config.HtmlParsingOptions) are applied.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParsingOptions.AllowSelfClosingTags">
            <summary>
            Tags may be self-closing.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParsingOptions.IgnoreComments">
            <summary>
            Comments are ignored entirely.
            </summary>
        </member>
        <member name="T:CsQuery.HtmlParser.CsQueryTreeBuilder">
            <summary>
            The tree builder glue for building a tree through the public DOM APIs.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.CsQueryTreeBuilder.document">
            <summary>
            The current doc.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.CsQueryTreeBuilder.isFragment">
            <summary>
            This is a fragment
            </summary>
        </member>
        <member name="M:CsQuery.HtmlParser.CsQueryTreeBuilder.AddAttributesToElement(CsQuery.Implementation.DomObject,HtmlParserSharp.Core.HtmlAttributes)">
             <summary>
             Adds the attributes passed by parameter to the element.
             </summary>
            
             <param name="element">
             The element.
             </param>
             <param name="attributes">
             The attributes.
             </param>
        </member>
        <member name="M:CsQuery.HtmlParser.CsQueryTreeBuilder.AppendCharacters(CsQuery.Implementation.DomObject,System.String)">
             <summary>
             Appends text a node.
             </summary>
            
             <param name="parent">
             The parent.
             </param>
             <param name="text">
             The text.
             </param>
        </member>
        <member name="M:CsQuery.HtmlParser.CsQueryTreeBuilder.AppendChildrenToNewParent(CsQuery.Implementation.DomObject,CsQuery.Implementation.DomObject)">
             <summary>
             Move elements from one parent to another
             </summary>
            
             <param name="oldParent">
             The old parent.
             </param>
             <param name="newParent">
             The new parent.
             </param>
        </member>
        <member name="M:CsQuery.HtmlParser.CsQueryTreeBuilder.AppendDoctypeToDocument(System.String,System.String,System.String)">
             <summary>
             Appends a doctype node to the document.
             </summary>
            
             <param name="name">
             The name.
             </param>
             <param name="publicIdentifier">
             DocType public identifier
             </param>
             <param name="systemIdentifier">
             DocType system identifier.
             </param>
        </member>
        <member name="M:CsQuery.HtmlParser.CsQueryTreeBuilder.AppendComment(CsQuery.Implementation.DomObject,System.String)">
             <summary>
             Appends a comment node
             </summary>
            
             <param name="parent">
             The parent.
             </param>
             <param name="comment">
             The comment.
             </param>
        </member>
        <member name="M:CsQuery.HtmlParser.CsQueryTreeBuilder.AppendCommentToDocument(System.String)">
             <summary>
             Appends a comment to document root.
             </summary>
            
             <param name="comment">
             The comment.
             </param>
        </member>
        <member name="M:CsQuery.HtmlParser.CsQueryTreeBuilder.CreateElement(System.String,System.String,HtmlParserSharp.Core.HtmlAttributes)">
             <summary>
             Create a new element.
             </summary>
            
             <param name="ns">
             The namespace.
             </param>
             <param name="name">
             The node name.
             </param>
             <param name="attributes">
             The attributes.
             </param>
            
             <returns>
             The new element.
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.CsQueryTreeBuilder.CreateHtmlElementSetAsRoot(HtmlParserSharp.Core.HtmlAttributes)">
             <summary>
             Creates the root HTML element.
             </summary>
            
             <param name="attributes">
             The attributes.
             </param>
            
             <returns>
             The new HTML element.
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.CsQueryTreeBuilder.AppendElement(CsQuery.Implementation.DomObject,CsQuery.Implementation.DomObject)">
             <summary>
             Appends an element as a child of another element.
             </summary>
            
             <param name="child">
             The child.
             </param>
             <param name="newParent">
             The parent.
             </param>
        </member>
        <member name="M:CsQuery.HtmlParser.CsQueryTreeBuilder.HasChildren(CsQuery.Implementation.DomObject)">
             <summary>
             Test whether the element has any children.
             </summary>
            
             <param name="element">
             The element.
             </param>
            
             <returns>
             true if it has children, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.CsQueryTreeBuilder.CreateElement(System.String,System.String,HtmlParserSharp.Core.HtmlAttributes,CsQuery.Implementation.DomObject)">
             <summary>
             Create a new element.
             </summary>
            
             <param name="ns">
             The namespace.
             </param>
             <param name="name">
             The node name.
             </param>
             <param name="attributes">
             The attributes.
             </param>
             <param name="form">
             The form.
             </param>
            
             <returns>
             The new element.
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.CsQueryTreeBuilder.Start(System.Boolean)">
             <summary>
             Run when the parsing process begins. Any config properties should be set here
             </summary>
            
             <param name="fragment">
             This is a fragment.
             </param>
        </member>
        <member name="M:CsQuery.HtmlParser.CsQueryTreeBuilder.ReceiveDocumentMode(HtmlParserSharp.Common.DocumentMode,System.String,System.String,System.Boolean)">
             <summary>
             Run when the document mode is set.
             </summary>
            
             <param name="mode">
             The mode.
             </param>
             <param name="publicIdentifier">
             DocType public identifier.
             </param>
             <param name="systemIdentifier">
             DocType system identifier.
             </param>
             <param name="html4SpecificAddcionalErrorChecks">
             true to HTML 4 specific addcional error checks.
             </param>
        </member>
        <member name="M:CsQuery.HtmlParser.CsQueryTreeBuilder.InsertFosterParentedCharacters(System.String,CsQuery.Implementation.DomObject,CsQuery.Implementation.DomObject)">
             <summary>
             Inserts foster parented characters.
             </summary>
            
             <param name="text">
             The text.
             </param>
             <param name="table">
             The table.
             </param>
             <param name="stackParent">
             The stack parent.
             </param>
        </member>
        <member name="M:CsQuery.HtmlParser.CsQueryTreeBuilder.InsertFosterParentedChild(CsQuery.Implementation.DomObject,CsQuery.Implementation.DomObject,CsQuery.Implementation.DomObject)">
             <summary>
             Inserts a foster parented child.
             </summary>
            
             <param name="child">
             The child.
             </param>
             <param name="table">
             The table.
             </param>
             <param name="stackParent">
             The stack parent.
             </param>
        </member>
        <member name="M:CsQuery.HtmlParser.CsQueryTreeBuilder.DetachFromParent(CsQuery.Implementation.DomObject)">
             <summary>
             Detach an element from its parent.
             </summary>
            
             <param name="element">
             The element.
             </param>
        </member>
        <member name="M:CsQuery.HtmlParser.CsQueryTreeBuilder.AttributeName(System.String,System.String)">
             <summary>
             Combine a local name &amp; uri into a single attribute name/.
             </summary>
            
             <param name="localName">
             Name of the local.
             </param>
             <param name="uri">
             URI of the document.
             </param>
            
             <returns>
             The attribute name.
             </returns>
        </member>
        <member name="P:CsQuery.HtmlParser.CsQueryTreeBuilder.Document">
             <summary>
             Returns the document.
             </summary>
            
             <value>
             The document.
             </value>
        </member>
        <member name="T:CsQuery.HtmlParser.ElementFactory">
            <summary>
            Element factory to build a CsQuery DOM using HtmlParserSharp.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.ElementFactory.tokenizerBlockSize">
            <summary>
            Size of the blocks to read from the input stream (char[] = 2x bytes)
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.ElementFactory.preprocessorBlockSize">
            <summary>
            Size of the preprocessor block; the maximum number of bytes in which the character set
            encoding can be changed. This must be at least as large (IN BYTES!) as the tokenizer block or the
            tokenizer won't quit before moving outside the preprocessor block.
            </summary>
        </member>
        <member name="M:CsQuery.HtmlParser.ElementFactory.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:CsQuery.HtmlParser.ElementFactory.Create(System.IO.Stream,System.Text.Encoding,CsQuery.HtmlParsingMode,CsQuery.HtmlParsingOptions,CsQuery.DocType)">
             <summary>
             Creates a new document from a Stream of HTML using the options passed.
             </summary>
            
             <param name="html">
             The HTML input.
             </param>
             <param name="streamEncoding">
             The character set encoding used by the stream. If null, the BOM will be inspected, and it
             will default to UTF8 if no encoding can be identified.
             </param>
             <param name="parsingMode">
             (optional) the parsing mode.
             </param>
             <param name="parsingOptions">
             (optional) options for controlling the parsing.
             </param>
             <param name="docType">
             (optional) type of the document.
             </param>
            
             <returns>
             A new document.
             </returns>
        </member>
        <member name="F:CsQuery.HtmlParser.ElementFactory.charSetEncoding">
            <summary>
            The character set encoding that's currently active.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.ElementFactory.reEncode">
            <summary>
            This flag can be set during parsing if the character set encoding found in a meta tag is
            different than the stream's current encoding.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.ElementFactory.activeStream">
            <summary>
            The active stream.
            </summary>
        </member>
        <member name="M:CsQuery.HtmlParser.ElementFactory.Parse(System.IO.Stream,System.Text.Encoding)">
             <summary>
             Given a TextReader, create a new IDomDocument from the input.
             </summary>
            
             <exception cref="T:System.IO.InvalidDataException">
             Thrown when an invalid data error condition occurs.
             </exception>
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="html">
             The HTML input.
             </param>
             <param name="encoding">
             The encoding.
             </param>
            
             <returns>
             A populated IDomDocument.
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.ElementFactory.GetContext(System.String)">
             <summary>
             Gets a default context for a tag
             </summary>
            
             <param name="tag">
             The tag.
             </param>
            
             <returns>
             The context.
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.ElementFactory.GetContextFromStream(System.IO.TextReader,System.String@)">
             <summary>
             Gets a context by inspecting the beginning of a stream. Will restore the stream to its
             unaltered state.
             </summary>
            
             <param name="reader">
             The HTML input.
             </param>
             <param name="context">
             [out] The context (e.g. the valid parent of the first tag name found).
             </param>
            
             <returns>
             The a new TextReader which is a clone of the original.
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.ElementFactory.tokenizer_EncodingDeclared(System.Object,HtmlParserSharp.Common.EncodingDetectedEventArgs)">
             <summary>
             Event is called by the tokenizer when a content-encoding meta tag is found. We should just always return true.
             </summary>
            
             <param name="sender">
             The tokenizer
             </param>
             <param name="e">
             Encoding detected event information.
             </param>
        </member>
        <member name="M:CsQuery.HtmlParser.ElementFactory.ConfigureDefaultContextMap">
            <summary>
            Configure default context: creates a default context for arbitrary fragments so they are valid no matter what, 
            so that true fragments can be created without concern for the context
            </summary>
        </member>
        <member name="P:CsQuery.HtmlParser.ElementFactory.HtmlParsingMode">
            <summary>
            Gets or sets the HTML parsing mode.
            </summary>
        </member>
        <member name="P:CsQuery.HtmlParser.ElementFactory.HtmlParsingOptions">
            <summary>
            Gets or sets the HTML parsing mode.
            </summary>
        </member>
        <member name="P:CsQuery.HtmlParser.ElementFactory.DocType">
            <summary>
            Gets or sets the type of the document.
            </summary>
        </member>
        <member name="P:CsQuery.HtmlParser.ElementFactory.FragmentContext">
            <summary>
            Gets or sets a context for the fragment, e.g. a tag name
            </summary>
        </member>
        <member name="T:CsQuery.HtmlParsingMode">
            <summary>
            The methodology applied when parsing strings of HTML
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParsingMode.Auto">
            <summary>
            Automatically detect the document type. When no DocType node is provided, will default to FragmentWithSelfClosingTags.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParsingMode.Fragment">
            <summary>
            A fragment whose context is determined by the first tag.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParsingMode.Content">
            <summary>
            A content block, assumed to be in BODY context.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParsingMode.Document">
            <summary>
            A complete document; the HTML and BODY tag constructs will be addded if missing..
            </summary>
        </member>
        <member name="T:CsQuery.HtmlParser.HtmlStyles">
            <summary>
            A dictionary of valid styles, based on a Visual Studio format XML schema. 
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlStyles.StyleDefs">
            <summary>
            Dictionary mapping style names to CssStyle style definitions
            </summary>
        </member>
        <member name="T:CsQuery.HtmlParser.TokenProperties">
            <summary>
            Bitfield of flags for specifying properties that may be tested on HTML tokens using a bitmap.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.TokenProperties.BlockElement">
            <summary>
            the element is an HTML block-level element
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.TokenProperties.BooleanProperty">
            <summary>
            the attribute is a boolean property e.g. 'checked'
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.TokenProperties.AutoOpenOrClose">
            <summary>
            the tag is automatically closing, e.g. 'p'.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.TokenProperties.ChildrenNotAllowed">
            <summary>
            the tag may not have children
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.TokenProperties.HtmlChildrenNotAllowed">
            <summary>
            the tag may not have HTML children (but could possibly have children)
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.TokenProperties.ParagraphCloser">
            <summary>
            this tag causes an open p tag to close
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.TokenProperties.MetaDataTags">
            <summary>
            The tag may appear in HEAD
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.TokenProperties.CaseInsensitiveValues">
            <summary>
            election of attribute values is not case sensitive
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.TokenProperties.HasValue">
            <summary>
            Has a VALUE property
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.TokenProperties.FormInputControl">
            <summary>
            Element is a form input control
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.CombinedStream">
            <summary>
            Creates a single virtual stream out of multiple input streams.
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.BaseStream">
            <summary>
            Base stream implementation
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.BaseStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.BaseStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.BaseStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.BaseStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.BaseStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.BaseStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.BaseStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.BaseStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.BaseStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.BaseStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.BaseStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.BaseStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.CombinedStream.#ctor(System.IO.Stream[])">
             <summary>
             Creates a single virtual stream out of multiple input streams.
             </summary>
            
             <param name="streams">
             The streams.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.CombinedStream.#ctor(System.Collections.Generic.IEnumerable{System.IO.Stream})">
             <summary>
             Creates a single virtual stream out of multiple input streams.
             </summary>
            
             <param name="streams">
             The streams.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.CombinedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary> Reads from the next stream available </summary>
        </member>
        <member name="M:CsQuery.Implementation.CombinedStream.Dispose(System.Boolean)">
            <summary> Disposes of all remaining streams. </summary>
        </member>
        <member name="P:CsQuery.Implementation.CombinedStream.CanRead">
            <summary>
            Gets a value indicating whether we can read.
            </summary>
        </member>
        <member name="T:HttpWebAdapters.IHttpWebRequest">
            <summary>
            Interface for an HttpWebRequest object.
            </summary>
        </member>
        <member name="M:HttpWebAdapters.IHttpWebRequest.GetResponse">
             <summary>
             Gets the response for the HttpWebRequest.
             </summary>
            
             <returns>
             The response.
             </returns>
        </member>
        <member name="M:HttpWebAdapters.IHttpWebRequest.GetRequestStream">
             <summary>
             Gets a <see cref="T:System.IO.Stream"></see> object to use to write request data.
             </summary>
            
             <returns>
             A <see cref="T:System.IO.Stream"></see> to use to write request data.
             </returns>
            
             <exception cref="T:System.InvalidOperationException">The <see cref="M:HttpWebAdapters.IHttpWebRequest.GetRequestStream"></see> method is called more than once.-or- <see cref="P:HttpWebAdapters.IHttpWebRequest.TransferEncoding"></see> is set to a value and <see cref="P:HttpWebAdapters.IHttpWebRequest.SendChunked"></see> is false. </exception>
             <exception cref="T:System.ObjectDisposedException">In a .NET Compact Framework application, a request stream with zero content length was not obtained and closed correctly. For more information about handling zero content length requests, see Network Programming in the .NET Compact Framework.</exception>
             <exception cref="T:System.Net.WebException"><see cref="M:HttpWebAdapters.IHttpWebRequest.Abort"></see> was previously called.-or- The time-out period for the request expired.-or- An error occurred while processing the request. </exception>
             <exception cref="T:System.NotSupportedException">The request cache validator indicated that the response for this request can be served from the cache; however, requests that write data must not use the cache. This exception can occur if you are using a custom cache validator that is incorrectly implemented. </exception>
             <exception cref="T:System.Net.ProtocolViolationException">The <see cref="P:HttpWebAdapters.IHttpWebRequest.Method"></see> property is GET or HEAD.-or- <see cref="P:HttpWebAdapters.IHttpWebRequest.KeepAlive"></see> is true, <see cref="P:HttpWebAdapters.IHttpWebRequest.AllowWriteStreamBuffering"></see> is false, <see cref="P:HttpWebAdapters.IHttpWebRequest.ContentLength"></see> is -1, <see cref="P:HttpWebAdapters.IHttpWebRequest.SendChunked"></see> is false, and <see cref="P:HttpWebAdapters.IHttpWebRequest.Method"></see> is POST or PUT. </exception>
        </member>
        <member name="M:HttpWebAdapters.IHttpWebRequest.Abort">
            <summary>
            Cancels a request to an Internet resource.
            </summary>
        </member>
        <member name="M:HttpWebAdapters.IHttpWebRequest.AddRange(System.Int32,System.Int32)">
             <summary>
             Adds a byte range header to the request for a specified range.
             </summary>
            
             <param name="to">The position at which to stop sending data. </param>
             <param name="from">The position at which to start sending data. </param>
             <exception cref="T:System.ArgumentException">rangeSpecifier is invalid. </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">from is greater than to-or- from or to is less than 0. </exception>
             <exception cref="T:System.InvalidOperationException">The range header could not be added. </exception>
        </member>
        <member name="M:HttpWebAdapters.IHttpWebRequest.AddRange(System.Int32)">
             <summary>
             Adds a byte range header to a request for a specific range from the beginning or end of the requested data.
             </summary>
            
             <param name="range">The starting or ending point of the range. </param>
             <exception cref="T:System.ArgumentException">rangeSpecifier is invalid. </exception>
             <exception cref="T:System.InvalidOperationException">The range header could not be added. </exception>
        </member>
        <member name="M:HttpWebAdapters.IHttpWebRequest.AddRange(System.String,System.Int32,System.Int32)">
             <summary>
             Adds a range header to a request for a specified range.
             </summary>
            
             <param name="from">The position at which to start sending data. </param>
             <param name="to">The position at which to stop sending data. </param>
             <param name="rangeSpecifier">The description of the range. </param>
             <exception cref="T:System.ArgumentException">rangeSpecifier is invalid. </exception>
             <exception cref="T:System.ArgumentNullException">rangeSpecifier is null. </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">from is greater than to-or- from or to is less than 0. </exception>
             <exception cref="T:System.InvalidOperationException">The range header could not be added. </exception>
        </member>
        <member name="M:HttpWebAdapters.IHttpWebRequest.AddRange(System.String,System.Int32)">
             <summary>
             Adds a range header to a request for a specific range from the beginning or end of the requested data.
             </summary>
            
             <param name="range">The starting or ending point of the range. </param>
             <param name="rangeSpecifier">The description of the range. </param>
             <exception cref="T:System.ArgumentException">rangeSpecifier is invalid. </exception>
             <exception cref="T:System.ArgumentNullException">rangeSpecifier is null. </exception>
             <exception cref="T:System.InvalidOperationException">The range header could not be added. </exception>
        </member>
        <member name="M:HttpWebAdapters.IHttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
             <summary>
             Begins an asynchronous request for an Internet resource.
             </summary>
            
             <param name="callback">
             The callback.
             </param>
             <param name="state">
             The state.
             </param>
            
             <returns>
             An System.IAsyncResult that references the asynchronous request.
             </returns>
        </member>
        <member name="M:HttpWebAdapters.IHttpWebRequest.EndGetResponse(System.IAsyncResult)">
             <summary>
             Ends an asynchronous request for an Internet resource.
             </summary>
            
             <param name="result">
             The result.
             </param>
            
             <returns>
             Returns a System.Net.WebResponse.
             </returns>
        </member>
        <member name="M:HttpWebAdapters.IHttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
             <summary>
             Provides an asynchronous version of the System.Net.WebRequest.GetRequestStream() method.
             </summary>
            
             <param name="callback">
             The callback.
             </param>
             <param name="state">
             The state.
             </param>
            
             <returns>
             An System.IAsyncResult that references the asynchronous request.
             </returns>
        </member>
        <member name="M:HttpWebAdapters.IHttpWebRequest.EndGetRequestStream(System.IAsyncResult)">
             <summary>
             returns a System.IO.Stream for writing data to the Internet resource.
             </summary>
            
             <param name="result">
             The result.
             </param>
            
             <returns>
             A System.IO.Stream to write data to.
             </returns>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.Method">
            <summary>
            Gets or sets the HTTP method.
            </summary>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.AllowAutoRedirect">
             <summary>
             Gets or sets a value that indicates whether the request should follow redirection responses.
             </summary>
            
             <returns>
             true if the request should automatically follow redirection responses from the Internet resource; otherwise, false. The default value is true.
             </returns>
            
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.AllowWriteStreamBuffering">
             <summary>
             Gets or sets a value that indicates whether to buffer the data sent to the Internet resource.
             </summary>
            
             <returns>
             true to enable buffering of the data sent to the Internet resource; false to disable buffering. The default is true.
             </returns>
            
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.HaveResponse">
             <summary>
             Gets a value that indicates whether a response has been received from an Internet resource.
             </summary>
            
             <returns>
             true if a response has been received; otherwise, false.
             </returns>
            
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.KeepAlive">
             <summary>
             Gets or sets a value that indicates whether to make a persistent connection to the Internet resource.
             </summary>
            
             <returns>
            true if the request to the Internet resource should contain a Connection HTTP header with the value Keep-alive; otherwise, false. The default is true.
             </returns>
            
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.Pipelined">
             <summary>
            Gets or sets a value that indicates whether to pipeline the request to the Internet resource.
             </summary>
            
             <returns>
            true if the request should be pipelined; otherwise, false. The default is true.
             </returns>
            
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.PreAuthenticate">
             <summary>
            Gets or sets a value that indicates whether to send an authenticate header with the request.
             </summary>
            
             <returns>
            true to send a WWW-authenticate HTTP header with requests after authentication has taken place; otherwise, false. The default is false.
             </returns>
            
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.UnsafeAuthenticatedConnectionSharing">
             <summary>
            Gets or sets a value that indicates whether to allow high-speed NTLM-authenticated connection sharing.
             </summary>
            
             <returns>
            true to keep the authenticated connection open; otherwise, false.
             </returns>
             <PermissionSet><IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.SendChunked">
             <summary>
            Gets or sets a value that indicates whether to send data in segments to the Internet resource.
             </summary>
            
             <returns>
            true to send data to the Internet resource in segments; otherwise, false. The default value is false.
             </returns>
            
             <exception cref="T:System.InvalidOperationException">The request has been started by calling the <see cref="M:System.Net.HttpWebRequest.GetRequestStream"></see>, <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)"></see>, <see cref="M:System.Net.HttpWebRequest.GetResponse"></see>, or <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"></see> method. </exception>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.AutomaticDecompression">
             <summary>
            Gets or sets the type of decompression that is used.
             </summary>
            
             <returns>
            A T:System.Net.DecompressionMethods object that indicates the type of decompression that is used. 
             </returns>
            
             <exception cref="T:System.InvalidOperationException">The object's current state does not allow this property to be set.</exception>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.MaximumResponseHeadersLength">
             <summary>
            Gets or sets the maximum allowed length of the response headers.
             </summary>
            
             <returns>
            The length, in kilobytes (1024 bytes), of the response headers.
             </returns>
            
             <exception cref="T:System.InvalidOperationException">The property is set after the request has already been submitted. </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">The value is less than 0 and is not equal to -1. </exception>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.ClientCertificates">
             <summary>
            Gets or sets the collection of security certificates that are associated with this request.
             </summary>
            
             <returns>
            The <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see> that contains the security certificates associated with this request.
             </returns>
            
             <exception cref="T:System.ArgumentNullException">The value specified for a set operation is null. </exception>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.CookieContainer">
             <summary>
            Gets or sets the cookies associated with the request.
             </summary>
            
             <returns>
            A <see cref="T:System.Net.CookieContainer"></see> that contains the cookies associated with this request.
             </returns>
            
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.RequestUri">
             <summary>
            Gets the original Uniform Resource Identifier (URI) of the request.
             </summary>
            
             <returns>
            A <see cref="T:System.Uri"></see> that contains the URI of the Internet resource passed to the <see cref="M:System.Net.WebRequest.Create(System.String)"></see> method.
             </returns>
            
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.ContentLength">
             <summary>
            Gets or sets the Content-length HTTP header.
             </summary>
            
             <returns>
            The number of bytes of data to send to the Internet resource. The default is -1, which indicates the property has not been set and that there is no request data to send.
             </returns>
            
             <exception cref="T:System.ArgumentOutOfRangeException">The new <see cref="P:System.Net.HttpWebRequest.ContentLength"></see> value is less than 0. </exception>
             <exception cref="T:System.InvalidOperationException">The request has been started by calling the <see cref="M:System.Net.HttpWebRequest.GetRequestStream"></see>, <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)"></see>, <see cref="M:System.Net.HttpWebRequest.GetResponse"></see>, or <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"></see> method. </exception>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.Timeout">
             <summary>
            Gets or sets the time-out value for the <see cref="M:System.Net.HttpWebRequest.GetResponse"></see> and <see cref="M:System.Net.HttpWebRequest.GetRequestStream"></see> methods.
             </summary>
            
             <returns>
            The number of milliseconds to wait before the request times out. The default is 100,000 milliseconds (100 seconds).
             </returns>
            
             <exception cref="T:System.ArgumentOutOfRangeException">The value specified is less than zero and is not <see cref="F:System.Threading.Timeout.Infinite"></see>.</exception>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.ReadWriteTimeout">
             <summary>
            Gets or sets a time-out when writing to or reading from a stream.
             </summary>
            
             <returns>
            The number of milliseconds before the writing or reading times out. The default value is 300,000 milliseconds (5 minutes).
             </returns>
            
             <exception cref="T:System.ArgumentOutOfRangeException">The value specified for a set operation is less than or equal to zero and is not equal to <see cref="F:System.Threading.Timeout.Infinite"></see></exception>
             <exception cref="T:System.InvalidOperationException">The request has already been sent. </exception>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.Address">
             <summary>
            Gets the Uniform Resource Identifier (URI) of the Internet resource that actually responds to the request.
             </summary>
            
             <returns>
            A <see cref="T:System.Uri"></see> that identifies the Internet resource that actually responds to the request. The default is the URI used by the <see cref="M:System.Net.WebRequest.Create(System.String)"></see> method to initialize the request.
             </returns>
            
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.ServicePoint">
             <summary>
            Gets the service point to use for the request.
             </summary>
            
             <returns>
            A <see cref="T:System.Net.ServicePoint"></see> that represents the network connection to the Internet resource.
             </returns>
             <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.MaximumAutomaticRedirections">
             <summary>
            Gets or sets the maximum number of redirects that the request follows.
             </summary>
            
             <returns>
            The maximum number of redirection responses that the request follows. The default value is 50.
             </returns>
            
             <exception cref="T:System.ArgumentException">The value is set to 0 or less. </exception>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.Credentials">
             <summary>
            Gets or sets authentication information for the request.
             </summary>
            
             <returns>
            An <see cref="T:System.Net.ICredentials"></see> that contains the authentication credentials associated with the request. The default is null.
             </returns>
             <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.UseDefaultCredentials">
             <summary>
            Gets or sets a <see cref="T:System.Boolean"></see> value that controls whether default credentials are sent with requests.
             </summary>
            
             <returns>
            true if the default credentials are used; otherwise false. The default value is false.
             </returns>
            
             <exception cref="T:System.InvalidOperationException">You attempted to set this property after the request was sent.</exception><PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="USERNAME" /></PermissionSet>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.ConnectionGroupName">
             <summary>
            Gets or sets the name of the connection group for the request.
             </summary>
            
             <returns>
            The name of the connection group for this request. The default value is null.
             </returns>
            
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.Headers">
             <summary>
            Specifies a collection of the name/value pairs that make up the HTTP headers.
             </summary>
            
             <returns>
            A <see cref="T:System.Net.WebHeaderCollection"></see> that contains the name/value pairs that make up the headers for the HTTP request.
             </returns>
            
             <exception cref="T:System.InvalidOperationException">The request has been started by calling the <see cref="M:System.Net.HttpWebRequest.GetRequestStream"></see>, <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)"></see>, <see cref="M:System.Net.HttpWebRequest.GetResponse"></see>, or <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"></see> method. </exception><PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.Proxy">
             <summary>
            Gets or sets proxy information for the request.
             </summary>
            
             <returns>
            The <see cref="T:System.Net.IWebProxy"></see> object to use to proxy the request. The default value is set by calling the <see cref="P:System.Net.GlobalProxySelection.Select"></see> property.
             </returns>
            
             <exception cref="T:System.Security.SecurityException">The caller does not have permission for the requested operation. </exception>
             <exception cref="T:System.ArgumentNullException"><see cref="P:System.Net.HttpWebRequest.Proxy"></see> is set to null. </exception>
             <exception cref="T:System.InvalidOperationException">The request has been started by calling <see cref="M:System.Net.HttpWebRequest.GetRequestStream"></see>, <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)"></see>, <see cref="M:System.Net.HttpWebRequest.GetResponse"></see>, or <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"></see>. </exception><PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.ProtocolVersion">
             <summary>
            Gets or sets the version of HTTP to use for the request.
             </summary>
            
             <returns>
            The HTTP version to use for the request. The default is <see cref="F:System.Net.HttpVersion.Version11"></see>.
             </returns>
            
             <exception cref="T:System.ArgumentException">The HTTP version is set to a value other than 1.0 or 1.1. </exception>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.ContentType">
             <summary>
            Gets or sets the value of the Content-type HTTP header.
             </summary>
            
             <returns>
            The value of the Content-type HTTP header. The default value is null.
             </returns>
            
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.MediaType">
             <summary>
            Gets or sets the media type of the request.
             </summary>
            
             <returns>
            The media type of the request. The default value is null.
             </returns>
            
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.TransferEncoding">
             <summary>
            Gets or sets the value of the Transfer-encoding HTTP header.
             </summary>
            
             <returns>
            The value of the Transfer-encoding HTTP header. The default value is null.
             </returns>
            
             <exception cref="T:System.InvalidOperationException"><see cref="P:System.Net.HttpWebRequest.TransferEncoding"></see> is set when <see cref="P:System.Net.HttpWebRequest.SendChunked"></see> is false. </exception>
             <exception cref="T:System.ArgumentException"><see cref="P:System.Net.HttpWebRequest.TransferEncoding"></see> is set to the value "Chunked". </exception>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.Connection">
             <summary>
            Gets or sets the value of the Connection HTTP header.
             </summary>
            
             <returns>
            The value of the Connection HTTP header. The default value is null.
             </returns>
            
             <exception cref="T:System.ArgumentException">The value of <see cref="P:System.Net.HttpWebRequest.Connection"></see> is set to Keep-alive or Close. </exception>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.Accept">
             <summary>
            Gets or sets the value of the Accept HTTP header.
             </summary>
            
             <returns>
            The value of the Accept HTTP header. The default value is null.
             </returns>
            
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.Referer">
             <summary>
            Gets or sets the value of the Referer HTTP header.
             </summary>
            
             <returns>
            The value of the Referer HTTP header. The default value is null.
             </returns>
            
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.UserAgent">
             <summary>
            Gets or sets the value of the User-agent HTTP header.
             </summary>
            
             <returns>
            The value of the User-agent HTTP header. The default value is null.The value for this property is stored in <see cref="T:System.Net.WebHeaderCollection"></see>. If WebHeaderCollection is set, the property value is lost.
             </returns>
            
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.Expect">
             <summary>
            Gets or sets the value of the Expect HTTP header.
             </summary>
            
             <returns>
            The contents of the Expect HTTP header. The default value is null.The value for this property is stored in <see cref="T:System.Net.WebHeaderCollection"></see>. If WebHeaderCollection is set, the property value is lost.
             </returns>
            
             <exception cref="T:System.ArgumentException">Expect is set to a string that contains "100-continue" as a substring. </exception>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebRequest.IfModifiedSince">
             <summary>
            Gets or sets the value of the If-Modified-Since HTTP header.
             </summary>
            
             <returns>
            A <see cref="T:System.DateTime"></see> that contains the contents of the If-Modified-Since HTTP header. The default value is the current date and time.
             </returns>
             <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="T:HttpWebAdapters.IHttpWebRequestFactory">
            <summary>
            Interface for an object that creates HttpWebRequest objects.
            </summary>
        </member>
        <member name="M:HttpWebAdapters.IHttpWebRequestFactory.Create(System.Uri)">
             <summary>
             Creates a concrete HttpWebRequest
             </summary>
            
             <param name="url">
             URL of the document.
             </param>
            
             <returns>
             A new HttpWebRequest
             </returns>
        </member>
        <member name="T:HttpWebAdapters.IHttpWebResponse">
            <summary>
            Interface for an HTTP web response.
            </summary>
        </member>
        <member name="M:HttpWebAdapters.IHttpWebResponse.GetResponseHeader(System.String)">
             <summary>
            Gets the contents of a header that was returned with the response.
             </summary>
            
             <returns>
            The contents of the specified header.
             </returns>
            
             <param name="headerName">The header value to return. </param>
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
        </member>
        <member name="M:HttpWebAdapters.IHttpWebResponse.Close">
             <summary>
            When overridden by a descendant class, closes the response stream.
             </summary>
            
             <exception cref="T:System.NotSupportedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception><PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="M:HttpWebAdapters.IHttpWebResponse.GetResponseStream">
             <summary>
            When overridden in a descendant class, returns the data stream from the Internet resource.
             </summary>
            
             <returns>
            An instance of the <see cref="T:System.IO.Stream"></see> class for reading data from the Internet resource.
             </returns>
            
             <exception cref="T:System.NotSupportedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception><PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebResponse.Cookies">
             <summary>
            Gets or sets the cookies that are associated with this response.
             </summary>
            
             <returns>
            A <see cref="T:System.Net.CookieCollection"></see> that contains the cookies that are associated with this response.
             </returns>
            
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebResponse.ContentEncoding">
             <summary>
            Gets the method that is used to encode the body of the response.
             </summary>
            
             <returns>
            A string that describes the method that is used to encode the body of the response.
             </returns>
            
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebResponse.CharacterSet">
             <summary>
            Gets the character set of the response.
             </summary>
            
             <returns>
            A string that contains the character set of the response.
             </returns>
            
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception><PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" /></PermissionSet>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebResponse.Server">
             <summary>
            Gets the name of the server that sent the response.
             </summary>
            
             <returns>
            A string that contains the name of the server that sent the response.
             </returns>
            
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebResponse.LastModified">
             <summary>
            Gets the last date and time that the contents of the response were modified.
             </summary>
            
             <returns>
            A <see cref="T:System.DateTime"></see> that contains the date and time that the contents of the response were modified.
             </returns>
            
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception><PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebResponse.StatusCode">
             <summary>
            Gets the status of the response.
             </summary>
            
             <returns>
            One of the <see cref="T:System.Net.HttpStatusCode"></see> values.
             </returns>
            
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebResponse.StatusDescription">
             <summary>
            Gets the status description returned with the response.
             </summary>
            
             <returns>
            A string that describes the status of the response.
             </returns>
            
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebResponse.ProtocolVersion">
             <summary>
            Gets the version of the HTTP protocol that is used in the response.
             </summary>
            
             <returns>
            A <see cref="T:System.Version"></see> that contains the HTTP protocol version of the response.
             </returns>
            
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebResponse.Method">
             <summary>
            Gets the method that is used to return the response.
             </summary>
            
             <returns>
            A string that contains the HTTP method that is used to return the response.
             </returns>
            
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebResponse.IsFromCache">
             <summary>
            Gets a <see cref="T:System.Boolean"></see> value that indicates whether this response was obtained from the cache.
             </summary>
            
             <returns>
            true if the response was taken from the cache; otherwise, false.
             </returns>
            
        </member>
        <member name="P:HttpWebAdapters.IHttpWebResponse.IsMutuallyAuthenticated">
             <summary>
            Gets a <see cref="T:System.Boolean"></see> value that indicates whether mutual authentication occurred.
             </summary>
            
             <returns>
            true if both client and server were authenticated; otherwise, false.
             </returns>
            
        </member>
        <member name="P:HttpWebAdapters.IHttpWebResponse.ContentLength">
             <summary>
            When overridden in a descendant class, gets or sets the content length of data being received.
             </summary>
            
             <returns>
            The number of bytes returned from the Internet resource.
             </returns>
            
             <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception><PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebResponse.ContentType">
             <summary>
            When overridden in a derived class, gets or sets the content type of the data being received.
             </summary>
            
             <returns>
            A string that contains the content type of the response.
             </returns>
            
             <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception><PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebResponse.ResponseUri">
             <summary>
            When overridden in a derived class, gets the URI of the Internet resource that actually responded to the request.
             </summary>
            
             <returns>
            An instance of the <see cref="T:System.Uri"></see> class that contains the URI of the Internet resource that actually responded to the request.
             </returns>
            
             <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception><PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="P:HttpWebAdapters.IHttpWebResponse.Headers">
             <summary>
            When overridden in a derived class, gets a collection of header name-value pairs associated with this request.
             </summary>
            
             <returns>
            An instance of the <see cref="T:System.Net.WebHeaderCollection"></see> class that contains header values associated with this response.
             </returns>
            
             <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception><PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="T:HttpWebAdapters.BasicAuthHttpWebRequestFactory">
            <summary>
            Creates a web request that does basic auth
            </summary>
        </member>
        <member name="M:HttpWebAdapters.BasicAuthHttpWebRequestFactory.#ctor(System.String,System.String)">
             <summary>
             Creates a web request that does basic auth.
             </summary>
            
             <param name="username">
             HTTP username.
             </param>
             <param name="password">
             HTTP password.
             </param>
        </member>
        <member name="M:HttpWebAdapters.BasicAuthHttpWebRequestFactory.Create(System.String)">
             <summary>
             Creates a web request for a url
             </summary>
            
             <param name="url">
             URL of the document.
             </param>
            
             <returns>
             A new IHttpWebRequest
             </returns>
        </member>
        <member name="M:HttpWebAdapters.BasicAuthHttpWebRequestFactory.Create(System.Uri)">
             <summary>
             Creates a concrete HttpWebRequest for a URI
             </summary>
            
             <param name="url">
             URI of the document.
             </param>
            
             <returns>
             A new IHttpWebRequest.
             </returns>
        </member>
        <member name="T:HttpWebAdapters.Adapters.HttpWebRequestAdapter">
            <summary>
            HTTP web request adapter.
            </summary>
        </member>
        <member name="M:HttpWebAdapters.Adapters.HttpWebRequestAdapter.#ctor(System.Net.HttpWebRequest)">
             <summary>
             Creates an HttpWebRequestAdapter from a .NET HttpWebRequest
             </summary>
            
             <param name="request">
             The HttpWebRequestAdapter.
             </param>
        </member>
        <member name="M:HttpWebAdapters.Adapters.HttpWebRequestAdapter.GetResponse">
             <summary>
             Gets the response for the HttpWebRequest.
             </summary>
            
             <returns>
             The response.
             </returns>
        </member>
        <member name="M:HttpWebAdapters.Adapters.HttpWebRequestAdapter.BeginGetResponse(System.AsyncCallback,System.Object)">
             <summary>
             Begins an asynchronous request for an Internet resource.
             </summary>
            
             <param name="callback">
             The callback.
             </param>
             <param name="state">
             The state.
             </param>
            
             <returns>
             An System.IAsyncResult that references the asynchronous request.
             </returns>
        </member>
        <member name="M:HttpWebAdapters.Adapters.HttpWebRequestAdapter.EndGetResponse(System.IAsyncResult)">
             <summary>
             Ends an asynchronous request for an Internet resource.
             </summary>
            
             <param name="result">
             The result.
             </param>
            
             <returns>
             Returns a System.Net.WebResponse.
             </returns>
        </member>
        <member name="M:HttpWebAdapters.Adapters.HttpWebRequestAdapter.BeginGetRequestStream(System.AsyncCallback,System.Object)">
             <summary>
             Provides an asynchronous version of the System.Net.WebRequest.GetRequestStream() method.
             </summary>
            
             <param name="callback">
             The callback.
             </param>
             <param name="state">
             The state.
             </param>
            
             <returns>
             An System.IAsyncResult that references the asynchronous request.
             </returns>
        </member>
        <member name="M:HttpWebAdapters.Adapters.HttpWebRequestAdapter.EndGetRequestStream(System.IAsyncResult)">
             <summary>
             returns a System.IO.Stream for writing data to the Internet resource.
             </summary>
            
             <param name="result">
             The result.
             </param>
            
             <returns>
             A System.IO.Stream to write data to.
             </returns>
        </member>
        <member name="M:HttpWebAdapters.Adapters.HttpWebRequestAdapter.GetRequestStream">
            <summary>
            Gets a <see cref="T:System.IO.Stream"></see> object to use to write request data.
            </summary>
            
            <returns>
            A <see cref="T:System.IO.Stream"></see> to use to write request data.
            </returns>
            
            <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Net.HttpWebRequest.GetRequestStream"></see> method is called more than once.-or- <see cref="P:System.Net.HttpWebRequest.TransferEncoding"></see> is set to a value and <see cref="P:System.Net.HttpWebRequest.SendChunked"></see> is false. </exception>
            <exception cref="T:System.ObjectDisposedException">In a .NET Compact Framework application, a request stream with zero content length was not obtained and closed correctly. For more information about handling zero content length requests, see Network Programming in the .NET Compact Framework.</exception>
            <exception cref="T:System.Net.WebException"><see cref="M:System.Net.HttpWebRequest.Abort"></see> was previously called.-or- The time-out period for the request expired.-or- An error occurred while processing the request. </exception>
            <exception cref="T:System.NotSupportedException">The request cache validator indicated that the response for this request can be served from the cache; however, requests that write data must not use the cache. This exception can occur if you are using a custom cache validator that is incorrectly implemented. </exception>
            <exception cref="T:System.Net.ProtocolViolationException">The <see cref="P:System.Net.HttpWebRequest.Method"></see> property is GET or HEAD.-or- <see cref="P:System.Net.HttpWebRequest.KeepAlive"></see> is true, <see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering"></see> is false, <see cref="P:System.Net.HttpWebRequest.ContentLength"></see> is -1, <see cref="P:System.Net.HttpWebRequest.SendChunked"></see> is false, and <see cref="P:System.Net.HttpWebRequest.Method"></see> is POST or PUT. </exception><PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Net.DnsPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:HttpWebAdapters.Adapters.HttpWebRequestAdapter.Abort">
            <summary>
            Cancels a request to an Internet resource.
            </summary>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="M:HttpWebAdapters.Adapters.HttpWebRequestAdapter.AddRange(System.Int32,System.Int32)">
            <summary>
            Adds a byte range header to the request for a specified range.
            </summary>
            
            <param name="to">The position at which to stop sending data. </param>
            <param name="from">The position at which to start sending data. </param>
            <exception cref="T:System.ArgumentException">rangeSpecifier is invalid. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">from is greater than to-or- from or to is less than 0. </exception>
            <exception cref="T:System.InvalidOperationException">The range header could not be added. </exception>
        </member>
        <member name="M:HttpWebAdapters.Adapters.HttpWebRequestAdapter.AddRange(System.Int32)">
            <summary>
            Adds a byte range header to a request for a specific range from the beginning or end of the requested data.
            </summary>
            
            <param name="range">The starting or ending point of the range. </param>
            <exception cref="T:System.ArgumentException">rangeSpecifier is invalid. </exception>
            <exception cref="T:System.InvalidOperationException">The range header could not be added. </exception>
        </member>
        <member name="M:HttpWebAdapters.Adapters.HttpWebRequestAdapter.AddRange(System.String,System.Int32,System.Int32)">
            <summary>
            Adds a range header to a request for a specified range.
            </summary>
            
            <param name="from">The position at which to start sending data. </param>
            <param name="to">The position at which to stop sending data. </param>
            <param name="rangeSpecifier">The description of the range. </param>
            <exception cref="T:System.ArgumentException">rangeSpecifier is invalid. </exception>
            <exception cref="T:System.ArgumentNullException">rangeSpecifier is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">from is greater than to-or- from or to is less than 0. </exception>
            <exception cref="T:System.InvalidOperationException">The range header could not be added. </exception>
        </member>
        <member name="M:HttpWebAdapters.Adapters.HttpWebRequestAdapter.AddRange(System.String,System.Int32)">
            <summary>
            Adds a range header to a request for a specific range from the beginning or end of the requested data.
            </summary>
            
            <param name="range">The starting or ending point of the range. </param>
            <param name="rangeSpecifier">The description of the range. </param>
            <exception cref="T:System.ArgumentException">rangeSpecifier is invalid. </exception>
            <exception cref="T:System.ArgumentNullException">rangeSpecifier is null. </exception>
            <exception cref="T:System.InvalidOperationException">The range header could not be added. </exception>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.Method">
            <summary>
            Gets or sets the HTTP method.
            </summary>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.AllowAutoRedirect">
            <summary>
            Gets or sets a value that indicates whether the request should follow redirection responses.
            </summary>
            
            <returns>
            true if the request should automatically follow redirection responses from the Internet resource; otherwise, false. The default value is true.
            </returns>
            
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.AllowWriteStreamBuffering">
            <summary>
            Gets or sets a value that indicates whether to buffer the data sent to the Internet resource.
            </summary>
            
            <returns>
            true to enable buffering of the data sent to the Internet resource; false to disable buffering. The default is true.
            </returns>
            
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.HaveResponse">
            <summary>
            Gets a value that indicates whether a response has been received from an Internet resource.
            </summary>
            
            <returns>
            true if a response has been received; otherwise, false.
            </returns>
            
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.KeepAlive">
            <summary>
            Gets or sets a value that indicates whether to make a persistent connection to the Internet resource.
            </summary>
            
            <returns>
            true if the request to the Internet resource should contain a Connection HTTP header with the value Keep-alive; otherwise, false. The default is true.
            </returns>
            
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.Pipelined">
            <summary>
            Gets or sets a value that indicates whether to pipeline the request to the Internet resource.
            </summary>
            
            <returns>
            true if the request should be pipelined; otherwise, false. The default is true.
            </returns>
            
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.PreAuthenticate">
            <summary>
            Gets or sets a value that indicates whether to send an authenticate header with the request.
            </summary>
            
            <returns>
            true to send a WWW-authenticate HTTP header with requests after authentication has taken place; otherwise, false. The default is false.
            </returns>
            
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.UnsafeAuthenticatedConnectionSharing">
            <summary>
            Gets or sets a value that indicates whether to allow high-speed NTLM-authenticated connection sharing.
            </summary>
            
            <returns>
            true to keep the authenticated connection open; otherwise, false.
            </returns>
            <PermissionSet><IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.SendChunked">
            <summary>
            Gets or sets a value that indicates whether to send data in segments to the Internet resource.
            </summary>
            
            <returns>
            true to send data to the Internet resource in segments; otherwise, false. The default value is false.
            </returns>
            
            <exception cref="T:System.InvalidOperationException">The request has been started by calling the <see cref="M:System.Net.HttpWebRequest.GetRequestStream"></see>, <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)"></see>, <see cref="M:System.Net.HttpWebRequest.GetResponse"></see>, or <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"></see> method. </exception>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.AutomaticDecompression">
            <summary>
            Gets or sets the type of decompression that is used.
            </summary>
            
            <returns>
            A T:System.Net.DecompressionMethods object that indicates the type of decompression that is used. 
            </returns>
            
            <exception cref="T:System.InvalidOperationException">The object's current state does not allow this property to be set.</exception>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.MaximumResponseHeadersLength">
            <summary>
            Gets or sets the maximum allowed length of the response headers.
            </summary>
            
            <returns>
            The length, in kilobytes (1024 bytes), of the response headers.
            </returns>
            
            <exception cref="T:System.InvalidOperationException">The property is set after the request has already been submitted. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value is less than 0 and is not equal to -1. </exception>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.ClientCertificates">
            <summary>
            Gets or sets the collection of security certificates that are associated with this request.
            </summary>
            
            <returns>
            The <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see> that contains the security certificates associated with this request.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">The value specified for a set operation is null. </exception>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.CookieContainer">
            <summary>
            Gets or sets the cookies associated with the request.
            </summary>
            
            <returns>
            A <see cref="T:System.Net.CookieContainer"></see> that contains the cookies associated with this request.
            </returns>
            
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.RequestUri">
            <summary>
            Gets the original Uniform Resource Identifier (URI) of the request.
            </summary>
            
            <returns>
            A <see cref="T:System.Uri"></see> that contains the URI of the Internet resource passed to the <see cref="M:System.Net.WebRequest.Create(System.String)"></see> method.
            </returns>
            
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.ContentLength">
            <summary>
            Gets or sets the Content-length HTTP header.
            </summary>
            
            <returns>
            The number of bytes of data to send to the Internet resource. The default is -1, which indicates the property has not been set and that there is no request data to send.
            </returns>
            
            <exception cref="T:System.ArgumentOutOfRangeException">The new <see cref="P:System.Net.HttpWebRequest.ContentLength"></see> value is less than 0. </exception>
            <exception cref="T:System.InvalidOperationException">The request has been started by calling the <see cref="M:System.Net.HttpWebRequest.GetRequestStream"></see>, <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)"></see>, <see cref="M:System.Net.HttpWebRequest.GetResponse"></see>, or <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"></see> method. </exception>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.Timeout">
            <summary>
            Gets or sets the time-out value for the <see cref="M:System.Net.HttpWebRequest.GetResponse"></see> and <see cref="M:System.Net.HttpWebRequest.GetRequestStream"></see> methods.
            </summary>
            
            <returns>
            The number of milliseconds to wait before the request times out. The default is 100,000 milliseconds (100 seconds).
            </returns>
            
            <exception cref="T:System.ArgumentOutOfRangeException">The value specified is less than zero and is not <see cref="F:System.Threading.Timeout.Infinite"></see>.</exception>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.ReadWriteTimeout">
            <summary>
            Gets or sets a time-out when writing to or reading from a stream.
            </summary>
            
            <returns>
            The number of milliseconds before the writing or reading times out. The default value is 300,000 milliseconds (5 minutes).
            </returns>
            
            <exception cref="T:System.ArgumentOutOfRangeException">The value specified for a set operation is less than or equal to zero and is not equal to <see cref="F:System.Threading.Timeout.Infinite"></see></exception>
            <exception cref="T:System.InvalidOperationException">The request has already been sent. </exception>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.Address">
            <summary>
            Gets the Uniform Resource Identifier (URI) of the Internet resource that actually responds to the request.
            </summary>
            
            <returns>
            A <see cref="T:System.Uri"></see> that identifies the Internet resource that actually responds to the request. The default is the URI used by the <see cref="M:System.Net.WebRequest.Create(System.String)"></see> method to initialize the request.
            </returns>
            
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.ServicePoint">
            <summary>
            Gets the service point to use for the request.
            </summary>
            
            <returns>
            A <see cref="T:System.Net.ServicePoint"></see> that represents the network connection to the Internet resource.
            </returns>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.MaximumAutomaticRedirections">
            <summary>
            Gets or sets the maximum number of redirects that the request follows.
            </summary>
            
            <returns>
            The maximum number of redirection responses that the request follows. The default value is 50.
            </returns>
            
            <exception cref="T:System.ArgumentException">The value is set to 0 or less. </exception>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.Credentials">
            <summary>
            Gets or sets authentication information for the request.
            </summary>
            
            <returns>
            An <see cref="T:System.Net.ICredentials"></see> that contains the authentication credentials associated with the request. The default is null.
            </returns>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.UseDefaultCredentials">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"></see> value that controls whether default credentials are sent with requests.
            </summary>
            
            <returns>
            true if the default credentials are used; otherwise false. The default value is false.
            </returns>
            
            <exception cref="T:System.InvalidOperationException">You attempted to set this property after the request was sent.</exception><PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="USERNAME" /></PermissionSet>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.ConnectionGroupName">
            <summary>
            Gets or sets the name of the connection group for the request.
            </summary>
            
            <returns>
            The name of the connection group for this request. The default value is null.
            </returns>
            
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.Headers">
            <summary>
            Specifies a collection of the name/value pairs that make up the HTTP headers.
            </summary>
            
            <returns>
            A <see cref="T:System.Net.WebHeaderCollection"></see> that contains the name/value pairs that make up the headers for the HTTP request.
            </returns>
            
            <exception cref="T:System.InvalidOperationException">The request has been started by calling the <see cref="M:System.Net.HttpWebRequest.GetRequestStream"></see>, <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)"></see>, <see cref="M:System.Net.HttpWebRequest.GetResponse"></see>, or <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"></see> method. </exception><PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.Proxy">
            <summary>
            Gets or sets proxy information for the request.
            </summary>
            
            <returns>
            The <see cref="T:System.Net.IWebProxy"></see> object to use to proxy the request. The default value is set by calling the <see cref="P:System.Net.GlobalProxySelection.Select"></see> property.
            </returns>
            
            <exception cref="T:System.Security.SecurityException">The caller does not have permission for the requested operation. </exception>
            <exception cref="T:System.ArgumentNullException"><see cref="P:System.Net.HttpWebRequest.Proxy"></see> is set to null. </exception>
            <exception cref="T:System.InvalidOperationException">The request has been started by calling <see cref="M:System.Net.HttpWebRequest.GetRequestStream"></see>, <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)"></see>, <see cref="M:System.Net.HttpWebRequest.GetResponse"></see>, or <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"></see>. </exception><PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.ProtocolVersion">
            <summary>
            Gets or sets the version of HTTP to use for the request.
            </summary>
            
            <returns>
            The HTTP version to use for the request. The default is <see cref="F:System.Net.HttpVersion.Version11"></see>.
            </returns>
            
            <exception cref="T:System.ArgumentException">The HTTP version is set to a value other than 1.0 or 1.1. </exception>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.ContentType">
            <summary>
            Gets or sets the value of the Content-type HTTP header.
            </summary>
            
            <returns>
            The value of the Content-type HTTP header. The default value is null.
            </returns>
            
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.MediaType">
            <summary>
            Gets or sets the media type of the request.
            </summary>
            
            <returns>
            The media type of the request. The default value is null.
            </returns>
            
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.TransferEncoding">
            <summary>
            Gets or sets the value of the Transfer-encoding HTTP header.
            </summary>
            
            <returns>
            The value of the Transfer-encoding HTTP header. The default value is null.
            </returns>
            
            <exception cref="T:System.InvalidOperationException"><see cref="P:System.Net.HttpWebRequest.TransferEncoding"></see> is set when <see cref="P:System.Net.HttpWebRequest.SendChunked"></see> is false. </exception>
            <exception cref="T:System.ArgumentException"><see cref="P:System.Net.HttpWebRequest.TransferEncoding"></see> is set to the value "Chunked". </exception>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.Connection">
            <summary>
            Gets or sets the value of the Connection HTTP header.
            </summary>
            
            <returns>
            The value of the Connection HTTP header. The default value is null.
            </returns>
            
            <exception cref="T:System.ArgumentException">The value of <see cref="P:System.Net.HttpWebRequest.Connection"></see> is set to Keep-alive or Close. </exception>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.Accept">
            <summary>
            Gets or sets the value of the Accept HTTP header.
            </summary>
            
            <returns>
            The value of the Accept HTTP header. The default value is null.
            </returns>
            
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.Referer">
            <summary>
            Gets or sets the value of the Referer HTTP header.
            </summary>
            
            <returns>
            The value of the Referer HTTP header. The default value is null.
            </returns>
            
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.UserAgent">
            <summary>
            Gets or sets the value of the User-agent HTTP header.
            </summary>
            
            <returns>
            The value of the User-agent HTTP header. The default value is null.The value for this property is stored in <see cref="T:System.Net.WebHeaderCollection"></see>. If WebHeaderCollection is set, the property value is lost.
            </returns>
            
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.Expect">
            <summary>
            Gets or sets the value of the Expect HTTP header.
            </summary>
            
            <returns>
            The contents of the Expect HTTP header. The default value is null.The value for this property is stored in <see cref="T:System.Net.WebHeaderCollection"></see>. If WebHeaderCollection is set, the property value is lost.
            </returns>
            
            <exception cref="T:System.ArgumentException">Expect is set to a string that contains "100-continue" as a substring. </exception>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.IfModifiedSince">
            <summary>
            Gets or sets the value of the If-Modified-Since HTTP header.
            </summary>
            
            <returns>
            A <see cref="T:System.DateTime"></see> that contains the contents of the If-Modified-Since HTTP header. The default value is the current date and time.
            </returns>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="T:HttpWebAdapters.HttpWebRequestFactory">
            <summary>
            Defaut HTTP web request factory; creates instances of .NET framework classes.
            </summary>
        </member>
        <member name="M:HttpWebAdapters.HttpWebRequestFactory.Create(System.String)">
             <summary>
             Creates an HttpWebRequestAdapter wrapping a .NET framework HttpWebRequest object.
             </summary>
            
             <param name="url">
             URL of the document.
             </param>
            
             <returns>
             A new HttpWebRequestAdapter
             </returns>
        </member>
        <member name="M:HttpWebAdapters.HttpWebRequestFactory.Create(System.Uri)">
             <summary>
             Creates an HttpWebRequestAdapter wrapping a .NET framework HttpWebRequest object.
             </summary>
            
             <param name="url">
             URL of the document.
             </param>
            
             <returns>
             A new HttpWebRequestAdapter
             </returns>
        </member>
        <member name="T:HttpWebAdapters.HttpWebRequestMethod">
            <summary>
            An HTTP web request method (GET or POST).
            </summary>
        </member>
        <member name="F:HttpWebAdapters.HttpWebRequestMethod.GET">
            <summary>
            The GET method
            </summary>
        </member>
        <member name="F:HttpWebAdapters.HttpWebRequestMethod.POST">
            <summary>
            The POST method
            </summary>
        </member>
        <member name="M:HttpWebAdapters.HttpWebRequestMethod.ToString">
             <summary>
             Returns a string that represents the current object.
             </summary>
            
             <returns>
             A string representation of the web method.
             </returns>
        </member>
        <member name="M:HttpWebAdapters.HttpWebRequestMethod.Parse(System.String)">
             <summary>
             Creates a new HttpWebRequestMethod from a string
             </summary>
            
             <param name="s">
             The string.
             </param>
            
             <returns>
             A new HttpWebRequestMethod
             </returns>
        </member>
        <member name="T:HttpWebAdapters.Adapters.HttpWebResponseAdapter">
            <summary>
            HTTP web response adapter
            </summary>
        </member>
        <member name="M:HttpWebAdapters.Adapters.HttpWebResponseAdapter.#ctor(System.Net.WebResponse)">
             <summary>
             Create a new HttpWebResponseAdapter from a .NET WebResponse
             </summary>
            
             <param name="response">
             The HttpWebResponseAdapter.
             </param>
        </member>
        <member name="M:HttpWebAdapters.Adapters.HttpWebResponseAdapter.GetResponseHeader(System.String)">
             <summary>
            Gets the contents of a header that was returned with the response.
             </summary>
            
             <returns>
            The contents of the specified header.
             </returns>
            
             <param name="headerName">The header value to return. </param>
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
        </member>
        <member name="M:HttpWebAdapters.Adapters.HttpWebResponseAdapter.Close">
             <summary>
            When overridden by a descendant class, closes the response stream.
             </summary>
            
             <exception cref="T:System.NotSupportedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception><PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="M:HttpWebAdapters.Adapters.HttpWebResponseAdapter.GetResponseStream">
             <summary>
            When overridden in a descendant class, returns the data stream from the Internet resource.
             </summary>
            
             <returns>
            An instance of the <see cref="T:System.IO.Stream"></see> class for reading data from the Internet resource.
             </returns>
            
             <exception cref="T:System.NotSupportedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception><PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="M:HttpWebAdapters.Adapters.HttpWebResponseAdapter.Dispose">
             <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
             </summary>
             <filterpriority>2</filterpriority>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.Cookies">
             <summary>
            Gets or sets the cookies that are associated with this response.
             </summary>
            
             <returns>
            A <see cref="T:System.Net.CookieCollection"></see> that contains the cookies that are associated with this response.
             </returns>
            
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.ContentEncoding">
             <summary>
            Gets the method that is used to encode the body of the response.
             </summary>
            
             <returns>
            A string that describes the method that is used to encode the body of the response.
             </returns>
            
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.CharacterSet">
             <summary>
            Gets the character set of the response.
             </summary>
            
             <returns>
            A string that contains the character set of the response.
             </returns>
            
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception><PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" /></PermissionSet>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.Server">
             <summary>
            Gets the name of the server that sent the response.
             </summary>
            
             <returns>
            A string that contains the name of the server that sent the response.
             </returns>
            
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.LastModified">
             <summary>
            Gets the last date and time that the contents of the response were modified.
             </summary>
            
             <returns>
            A <see cref="T:System.DateTime"></see> that contains the date and time that the contents of the response were modified.
             </returns>
            
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception><PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.StatusCode">
             <summary>
            Gets the status of the response.
             </summary>
            
             <returns>
            One of the <see cref="T:System.Net.HttpStatusCode"></see> values.
             </returns>
            
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.StatusDescription">
             <summary>
            Gets the status description returned with the response.
             </summary>
            
             <returns>
            A string that describes the status of the response.
             </returns>
            
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.ProtocolVersion">
             <summary>
            Gets the version of the HTTP protocol that is used in the response.
             </summary>
            
             <returns>
            A <see cref="T:System.Version"></see> that contains the HTTP protocol version of the response.
             </returns>
            
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.Method">
             <summary>
            Gets the method that is used to return the response.
             </summary>
            
             <returns>
            A string that contains the HTTP method that is used to return the response.
             </returns>
            
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.IsFromCache">
             <summary>
            Gets a <see cref="T:System.Boolean"></see> value that indicates whether this response was obtained from the cache.
             </summary>
            
             <returns>
            true if the response was taken from the cache; otherwise, false.
             </returns>
            
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.IsMutuallyAuthenticated">
             <summary>
            Gets a <see cref="T:System.Boolean"></see> value that indicates whether mutual authentication occurred.
             </summary>
            
             <returns>
            true if both client and server were authenticated; otherwise, false.
             </returns>
            
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.ContentLength">
             <summary>
            When overridden in a descendant class, gets or sets the content length of data being received.
             </summary>
            
             <returns>
            The number of bytes returned from the Internet resource.
             </returns>
            
             <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception><PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.ContentType">
             <summary>
            When overridden in a derived class, gets or sets the content type of the data being received.
             </summary>
            
             <returns>
            A string that contains the content type of the response.
             </returns>
            
             <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception><PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.ResponseUri">
             <summary>
            When overridden in a derived class, gets the URI of the Internet resource that actually responded to the request.
             </summary>
            
             <returns>
            An instance of the <see cref="T:System.Uri"></see> class that contains the URI of the Internet resource that actually responded to the request.
             </returns>
            
             <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception><PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.Headers">
             <summary>
            When overridden in a derived class, gets a collection of header name-value pairs associated with this request.
             </summary>
            
             <returns>
            An instance of the <see cref="T:System.Net.WebHeaderCollection"></see> class that contains header values associated with this response.
             </returns>
            
             <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception><PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="T:HttpWebAdapters.WebResponseStub">
            <summary>
            A basic implementation for a WebResponse
            </summary>
        </member>
        <member name="M:HttpWebAdapters.WebResponseStub.GetResponseHeader(System.String)">
             <summary>
            Gets the contents of a header that was returned with the response.
             </summary>
            
             <returns>
            The contents of the specified header.
             </returns>
            
             <param name="headerName">The header value to return. </param>
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
        </member>
        <member name="P:HttpWebAdapters.WebResponseStub.Cookies">
             <summary>
            Gets or sets the cookies that are associated with this response.
             </summary>
            
             <returns>
            A <see cref="T:System.Net.CookieCollection"></see> that contains the cookies that are associated with this response.
             </returns>
            
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
        </member>
        <member name="P:HttpWebAdapters.WebResponseStub.ContentEncoding">
             <summary>
            Gets the method that is used to encode the body of the response.
             </summary>
            
             <returns>
            A string that describes the method that is used to encode the body of the response.
             </returns>
            
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
        </member>
        <member name="P:HttpWebAdapters.WebResponseStub.CharacterSet">
             <summary>
            Gets the character set of the response.
             </summary>
            
             <returns>
            A string that contains the character set of the response.
             </returns>
            
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception><PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" /></PermissionSet>
        </member>
        <member name="P:HttpWebAdapters.WebResponseStub.Server">
             <summary>
            Gets the name of the server that sent the response.
             </summary>
            
             <returns>
            A string that contains the name of the server that sent the response.
             </returns>
            
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
        </member>
        <member name="P:HttpWebAdapters.WebResponseStub.LastModified">
             <summary>
            Gets the last date and time that the contents of the response were modified.
             </summary>
            
             <returns>
            A <see cref="T:System.DateTime"></see> that contains the date and time that the contents of the response were modified.
             </returns>
            
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception><PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="P:HttpWebAdapters.WebResponseStub.StatusCode">
             <summary>
            Gets the status of the response.
             </summary>
            
             <returns>
            One of the <see cref="T:System.Net.HttpStatusCode"></see> values.
             </returns>
            
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
        </member>
        <member name="P:HttpWebAdapters.WebResponseStub.StatusDescription">
             <summary>
            Gets the status description returned with the response.
             </summary>
            
             <returns>
            A string that describes the status of the response.
             </returns>
            
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
        </member>
        <member name="P:HttpWebAdapters.WebResponseStub.ProtocolVersion">
             <summary>
            Gets the version of the HTTP protocol that is used in the response.
             </summary>
            
             <returns>
            A <see cref="T:System.Version"></see> that contains the HTTP protocol version of the response.
             </returns>
            
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
        </member>
        <member name="P:HttpWebAdapters.WebResponseStub.Method">
             <summary>
            Gets the method that is used to return the response.
             </summary>
            
             <returns>
            A string that contains the HTTP method that is used to return the response.
             </returns>
            
             <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
        </member>
        <member name="T:CsQuery.Implementation.CombinedTextReader">
            <summary>
            Creates a virtual TextReader from several other streams.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.CombinedTextReader.#ctor(System.IO.TextReader[])">
             <summary>
             Create a new virtual TextReader by combining, in sequence, the streams provided as parameters to the constructor
             </summary>
            
             <param name="readers">
             A variable-length parameters list containing readers.
             </param>
        </member>
        <member name="F:CsQuery.Implementation.CombinedTextReader.Readers">
            <summary>
            The readers.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.CombinedTextReader.Close">
            <summary>
            Closes the <see cref="T:System.IO.TextReader" /> and releases any system resources associated
            with the TextReader.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.CombinedTextReader.Dispose(System.Boolean)">
             <summary>
             Releases the unmanaged resources used by the <see cref="T:System.IO.TextReader" /> and
             optionally releases the managed resources.
             </summary>
            
             <param name="disposing">
             true to release both managed and unmanaged resources; false to release only unmanaged
             resources.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.CombinedTextReader.Peek">
             <summary>
             Reads the next character without changing the state of the reader or the character source.
             Returns the next available character without actually reading it from the input stream.
             </summary>
            
             <returns>
             An integer representing the next character to be read, or -1 if no more characters are
             available or the stream does not support seeking.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.CombinedTextReader.Read">
             <summary>
             Reads the next character from the input stream and advances the character position by one
             character.
             </summary>
            
             <returns>
             The next character from the input stream, or -1 if no more characters are available. The
             default implementation returns -1.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.CombinedTextReader.Read(System.Char[],System.Int32,System.Int32)">
             <summary>
             Reads a maximum of <paramref name="count" /> characters from the current stream and writes
             the data to <paramref name="buffer" />, beginning at <paramref name="index" />.
             </summary>
            
             <param name="buffer">
             When this method returns, contains the specified character array with the values between
             <paramref name="index" /> and (<paramref name="index" /> + <paramref name="count" /> - 1)
             replaced by the characters read from the current source.
             </param>
             <param name="index">
             The position in <paramref name="buffer" /> at which to begin writing.
             </param>
             <param name="count">
             The maximum number of characters to read. If the end of the stream is reached before
             <paramref name="count" /> of characters is read into <paramref name="buffer" />, the current
             method returns.
             </param>
            
             <returns>
             The number of characters that have been read. The number will be less than or equal to
             <paramref name="count" />, depending on whether the data is available within the stream. This
             method returns zero if called when no more characters are left to read.
             </returns>
            
             ### <exception cref="T:System.ArgumentNullException">
             <paramref name="buffer" /> is null.
             </exception>
             ### <exception cref="T:System.ArgumentException">
             The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.
             </exception>
             ### <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="index" /> or <paramref name="count" /> is negative.
             </exception>
             ### <exception cref="T:System.ObjectDisposedException">
             The <see cref="T:System.IO.TextReader" /> is closed.
             </exception>
             ### <exception cref="T:System.IO.IOException">
             An I/O error occurs.
             </exception>
        </member>
        <member name="M:CsQuery.Implementation.CombinedTextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
             <summary>
             Reads a maximum of <paramref name="count" /> characters from the current stream, and writes
             the data to <paramref name="buffer" />, beginning at <paramref name="index" />.
             </summary>
            
             <param name="buffer">
             When this method returns, this parameter contains the specified character array with the
             values between <paramref name="index" /> and (<paramref name="index" /> +
             <paramref name="count" /> -1) replaced by the characters read from the current source.
             </param>
             <param name="index">
             The position in <paramref name="buffer" /> at which to begin writing.
             </param>
             <param name="count">
             The maximum number of characters to read.
             </param>
            
             <returns>
             The position of the underlying stream is advanced by the number of characters that were read
             into <paramref name="buffer" />.The number of characters that have been read. The number will
             be less than or equal to <paramref name="count" />, depending on whether all input characters
             have been read.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.CombinedTextReader.ReadLine">
             <summary>
             Reads a line of characters from the current stream and returns the data as a string. Note:
             this method will not combine data from two boundary streams into a single line; the end of a
             stream is always the end of a line. This could result in stream corruption (e.g. the addition
             of newlines between streams) when using this method.
             </summary>
            
             <returns>
             The next line from the input stream, or null if all characters have been read.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.CombinedTextReader.ReadToEnd">
             <summary>
             Reads all characters from the current position to the end of the TextReader and returns them
             as one string.
             </summary>
            
             <returns>
             A string containing all characters from the current position to the end of the TextReader.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.CombinedTextReader.CreateObjRef(System.Type)">
             <summary>
             Creates object reference. (Overridden because it's implemented by the base class and we want
             to be sure that anything trying to use this will fail).
             </summary>
            
             <exception cref="T:System.NotImplementedException">
             Thrown when the requested operation is unimplemented.
             </exception>
            
             <param name="requestedType">
             Type of the requested.
             </param>
            
             <returns>
             Always fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.CombinedTextReader.InitializeLifetimeService">
             <summary>
             Initializes the lifetime service. (Overridden because it's implemented by the base class and we want
             to be sure that anything trying to use this will fail).
             </summary>
            
             <exception cref="T:System.NotImplementedException">
             Thrown when the requested operation is unimplemented.
             </exception>
            
             <returns>
             Always fails
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.CombinedTextReader.NextReader">
             <summary>
             Advance to the next reader
             </summary>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.CombinedTextReader.GetHashCode">
             <summary>
             Returns a hash code for this object.
             </summary>
            
             <returns>
             The hash code for this object.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.CombinedTextReader.Equals(System.Object)">
             <summary>
             Tests if this object is considered equal to another.
             </summary>
            
             <param name="obj">
             The object to compare to this object.
             </param>
            
             <returns>
             true if the objects are considered equal, false if they are not.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.CombinedTextReader.Current">
            <summary>
            Gets the current stream
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.TrueStringComparer">
            <summary>
            A string comparer that is not concerned with anything other than the raw value of the characters. No encoding, no culture.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.TrueStringComparer.Compare(System.String,System.String)">
             <summary>
             Compares two string objects to determine their relative ordering.
             </summary>
            
             <param name="x">
             String to be compared.
             </param>
             <param name="y">
             String to be compared.
             </param>
            
             <returns>
             Negative if 'x' is less than 'y', 0 if they are equal, or positive if it is greater.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.TrueStringComparer.CompareEqualLength(System.String,System.String)">
             <summary>
             Marginally faster when just testing equality than using Compare
             </summary>
            
             <param name="x">
             String to be compared.
             </param>
             <param name="y">
             String to be compared.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.TrueStringComparer.Equals(System.String,System.String)">
             <summary>
             Tests if two string objects are considered equal.
             </summary>
            
             <param name="x">
             String to be compared.
             </param>
             <param name="y">
             String to be compared.
             </param>
            
             <returns>
             true if the objects are considered equal, false if they are not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.TrueStringComparer.GetHashCode(System.String)">
             <summary>
             Calculates the hash code for this object.
             </summary>
            
             <param name="obj">
             The object.
             </param>
            
             <returns>
             The hash code for this object.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.TrueStringComparer.Comparer">
            <summary>
            Gets an instance of TrueStringComparer
            </summary>
        </member>
        <member name="T:CsQuery.Output.HtmlEncoderFull">
            <summary>
            Full HTML encoder. All entities with known HTML codes are parsed; everything above 160
            becomes an HTML numeric-coded entity.
            </summary>
        </member>
        <member name="T:CsQuery.Output.HtmlEncoderBasic">
            <summary>
            Standard HTML encoder. This parses less-than, greater-than, ampersand, double-qoute, and non-
            breaking space into HTML entities, plus all characters above ascii 160 into ther HTML numeric-
            coded equivalent.
            </summary>
        </member>
        <member name="T:CsQuery.Output.HtmlEncoderBase">
            <summary>
            Abstract base class for custom HTML encoder implementations
            </summary>
        </member>
        <member name="T:CsQuery.Output.IHtmlEncoder">
            <summary>
            Interface for HTML encoder/decoder
            </summary>
        </member>
        <member name="M:CsQuery.Output.IHtmlEncoder.Encode(System.String,System.IO.TextWriter)">
             <summary>
             Encodes text as HTML, writing the processed output to the TextWriter.
             </summary>
            
             <param name="text">
             The text to be encoded.
             </param>
             <param name="output">
             The target for the ouput
             </param>
        </member>
        <member name="M:CsQuery.Output.HtmlEncoderBase.TryEncode(System.Char,System.String@)">
             <summary>
             Determines of a character must be encoded; if so, encodes it as the output parameter and
             returns true; if not, returns false.
             </summary>
            
             <param name="c">
             The text string to encode.
             </param>
             <param name="encoded">
             [out] The encoded string.
             </param>
            
             <returns>
             True if the character was encoded.
             </returns>
        </member>
        <member name="M:CsQuery.Output.HtmlEncoderBase.TryEncodeAstralPlane(System.Int32,System.String@)">
             <summary>
             Determines of a character must be encoded (for unicode chars using astral planes); if so,
             encodes it as the output parameter and returns true; if not, returns false. This method will
             be passed the integral representation of the mult-byte unicode character. If the method
             returns false, then the character will be output as the orginal two-byte sequence.
             </summary>
            
             <param name="c">
             The text string to encode.
             </param>
             <param name="encoded">
             [out] The encoded string.
             </param>
            
             <returns>
             True if the character was encoded.
             </returns>
        </member>
        <member name="M:CsQuery.Output.HtmlEncoderBase.Encode(System.String,System.IO.TextWriter)">
             <summary>
             Encodes text as HTML, writing the processed output to the TextWriter.
             </summary>
            
             <param name="html">
             The text to be encoded.
             </param>
             <param name="output">
             The target for the ouput.
             </param>
        </member>
        <member name="M:CsQuery.Output.HtmlEncoderBasic.TryEncode(System.Char,System.String@)">
             <summary>
             Determines of a character must be encoded; if so, encodes it as the output parameter and
             returns true; if not, returns false.
             </summary>
            
             <param name="c">
             The text string to encode.
             </param>
             <param name="encoded">
             [out] The encoded string.
             </param>
            
             <returns>
             True if the character was encoded.
             </returns>
        </member>
        <member name="M:CsQuery.Output.HtmlEncoderBasic.TryEncodeAstralPlane(System.Int32,System.String@)">
             <summary>
             Determines of a character must be encoded (for unicode chars using astral planes); if so,
             encodes it as the output parameter and returns true; if not, returns false. This method will
             be passed the integral representation of the mult-byte unicode character. If the method
             returns false, then the character will be output as the orginal two-byte sequence.
             </summary>
            
             <param name="c">
             The text string to encode.
             </param>
             <param name="encoded">
             [out] The encoded string.
             </param>
            
             <returns>
             True if the character was encoded.
             </returns>
        </member>
        <member name="M:CsQuery.Output.HtmlEncoderBasic.EncodeNumeric(System.Int32)">
             <summary>
             Encodes an integer as an HTML numeric coded entity e.g. &amp;#nnn;
             </summary>
            
             <param name="value">
             The value.
             </param>
            
             <returns>
             An HTML string.
             </returns>
        </member>
        <member name="M:CsQuery.Output.HtmlEncoderFull.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CsQuery.Output.HtmlEncoderFull.TryEncode(System.Char,System.String@)">
             <summary>
             Determines of a character must be encoded; if so, encodes it as the output parameter and
             returns true; if not, returns false.
             </summary>
            
             <param name="c">
             The text string to encode.
             </param>
             <param name="encoded">
             [out] The encoded string.
             </param>
            
             <returns>
             True if the character was encoded.
             </returns>
        </member>
        <member name="T:CsQuery.Output.HtmlEncoderMinimumNbsp">
            <summary>
            Minimum HTML encoder (including nonbreaking space). This only parses the absolute minimum
            required for correct interpretation (less-than, greater-than, ampersand), plus non-breaking
            space. Everthing else is passed through.
            </summary>
        </member>
        <member name="T:CsQuery.Output.HtmlEncoderMinimum">
            <summary>
            Minimum HTML encoder. This only parses the absolute minimum required for correct
            interpretation (less-than, greater-than, ampersand). Everthing else is passed through.
            </summary>
        </member>
        <member name="M:CsQuery.Output.HtmlEncoderMinimum.TryEncode(System.Char,System.String@)">
             <summary>
             Determines of a character must be encoded; if so, encodes it as the output parameter and
             returns true; if not, returns false.
             </summary>
            
             <param name="c">
             The text string to encode.
             </param>
             <param name="encoded">
             [out] The encoded string.
             </param>
            
             <returns>
             True if the character was encoded.
             </returns>
        </member>
        <member name="M:CsQuery.Output.HtmlEncoderMinimum.TryEncodeAstralPlane(System.Int32,System.String@)">
             <summary>
             Overrides default astral plane encoding, causing unicode characters to never be HTML encoded.
             </summary>
            
             <param name="c">
             The text string to encode.
             </param>
             <param name="encoded">
             [out] Null always (never encodes)
             </param>
            
             <returns>
             False always (never encodes)
             </returns>
        </member>
        <member name="M:CsQuery.Output.HtmlEncoderMinimumNbsp.TryEncode(System.Char,System.String@)">
             <summary>
             Determines of a character must be encoded; if so, encodes it as the output parameter and
             returns true; if not, returns false.
             </summary>
            
             <param name="c">
             The text string to encode.
             </param>
             <param name="encoded">
             [out] The encoded string.
             </param>
            
             <returns>
             True if the character was encoded.
             </returns>
        </member>
        <member name="T:CsQuery.HtmlEncoders">
            <summary>
            Factory for HTML encoders included with CsQuery
            </summary>
        </member>
        <member name="F:CsQuery.HtmlEncoders.Basic">
            <summary>
            The standard HTML encoder; encodes most entities, and any characters that are above ascii 160.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlEncoders.Minimum">
            <summary>
            The minimum HTML encoder; only encodes left-caret, right-caret, and ampersand. All other
            characters are passed through.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlEncoders.MinimumNbsp">
            <summary>
            The same as the minimum HTML encoder, but also encodes nonbreaking space (ascii 160 becomes
            &amp;nbsp;).
            </summary>
        </member>
        <member name="F:CsQuery.HtmlEncoders.None">
            <summary>
            No HTML encoding -- all characters are passed through. Will likely produce invalid HTML.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlEncoders.Full">
            <summary>
            Full HTML encoding -- all entities mapped to their named (not numeric) entities when
            available.
            </summary>
        </member>
        <member name="P:CsQuery.HtmlEncoders.Default">
            <summary>
            The default HTML encoder
            </summary>
        </member>
        <member name="T:CsQuery.Output.HtmlEncoderNone">
            <summary>
            Minimum HTML encoder. This only parses the absolute minimum required for correct
            interpretation (less-than, greater-than, ampersand). Everthing else is passed through.
            </summary>
        </member>
        <member name="M:CsQuery.Output.HtmlEncoderNone.Encode(System.String,System.IO.TextWriter)">
             <summary>
             Encodes text as HTML, writing the processed output to the TextWriter.
             </summary>
            
             <param name="text">
             The text to be encoded.
             </param>
             <param name="output">
             The target for the ouput.
             </param>
        </member>
        <member name="T:CsQuery.Output.FormatDefault">
            <summary>
            Default output formatter.
            </summary>
        </member>
        <member name="T:CsQuery.Output.IOutputFormatter">
            <summary>
            Interface for an OutputFormatter. This is an object that renders a CsQuery tree to a TextWriter
            </summary>
        </member>
        <member name="M:CsQuery.Output.IOutputFormatter.Render(CsQuery.IDomObject,System.IO.TextWriter)">
             <summary>
             Renders this object to the passed TextWriter
             </summary>
            
             <param name="node">
             The node.
             </param>
             <param name="writer">
             The writer.
             </param>
        </member>
        <member name="M:CsQuery.Output.IOutputFormatter.Render(CsQuery.IDomObject)">
             <summary>
             Renders this object and returns the output as a string
             </summary>
            
             <param name="node">
             The node.
             </param>
            
             <returns>
             A string of HTML
             </returns>
        </member>
        <member name="M:CsQuery.Output.FormatDefault.#ctor(CsQuery.DomRenderingOptions,CsQuery.Output.IHtmlEncoder)">
             <summary>
             Abstract base class constructor.
             </summary>
            
             <param name="options">
             Options for controlling the operation.
             </param>
             <param name="encoder">
             The encoder.
             </param>
        </member>
        <member name="M:CsQuery.Output.FormatDefault.#ctor">
            <summary>
            Creates the default OutputFormatter using default DomRenderingOption values and default HtmlEncoder
            </summary>
        </member>
        <member name="M:CsQuery.Output.FormatDefault.Render(CsQuery.IDomObject,System.IO.TextWriter)">
             <summary>
             Renders the object to the textwriter.
             </summary>
            
             <exception cref="T:System.NotImplementedException">
             Thrown when the requested operation is unimplemented.
             </exception>
            
             <param name="node">
             The node.
             </param>
             <param name="writer">
             The writer to which output is written.
             </param>
        </member>
        <member name="M:CsQuery.Output.FormatDefault.Render(CsQuery.IDomObject)">
             <summary>
             Renders the object to a string.
             </summary>
            
             <param name="node">
             The node.
             </param>
            
             <returns>
             A string.
             </returns>
        </member>
        <member name="M:CsQuery.Output.FormatDefault.RenderElement(CsQuery.IDomObject,System.IO.TextWriter,System.Boolean)">
             <summary>
             Gets the HTML representation of this element and its children.
             </summary>
            
             <param name="element">
             The element to render.
             </param>
             <param name="writer">
             The writer to which output is written.
             </param>
             <param name="includeChildren">
             true to include, false to exclude the children.
             </param>
        </member>
        <member name="M:CsQuery.Output.FormatDefault.RenderChildren(CsQuery.IDomObject,System.IO.TextWriter)">
             <summary>
             Renders the children of this element.
             </summary>
            
             <param name="element">
             The element to render.
             </param>
             <param name="writer">
             The writer to which output is written.
             </param>
        </member>
        <member name="M:CsQuery.Output.FormatDefault.RenderElementInternal(CsQuery.IDomObject,System.IO.TextWriter,System.Boolean)">
             <summary>
             Gets the HTML representation of this element and its children. (This is the implementation -
             it will not flush the stack)
             </summary>
            
             <param name="element">
             The element to render.
             </param>
             <param name="writer">
             The writer to which output is written.
             </param>
             <param name="includeChildren">
             true to include, false to exclude the children.
             </param>
        </member>
        <member name="M:CsQuery.Output.FormatDefault.EndElement(CsQuery.IDomObject)">
             <summary>
             Adds the element close tag to the output stack.
             </summary>
            
             <param name="element">
             The element.
             </param>
        </member>
        <member name="M:CsQuery.Output.FormatDefault.RenderStack(System.IO.TextWriter)">
             <summary>
             Process the output stack.
             </summary>
            
             <exception cref="T:System.NotImplementedException">
             Thrown when the requested operation is unimplemented.
             </exception>
        </member>
        <member name="M:CsQuery.Output.FormatDefault.RenderElements(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},System.IO.TextWriter)">
             <summary>
             Renders a sequence of elements.
             </summary>
            
             <param name="elements">
             The elements.
             </param>
             <param name="writer">
             The writer to which output is written.
             </param>
        </member>
        <member name="M:CsQuery.Output.FormatDefault.RenderElementCloseTag(CsQuery.IDomObject,System.IO.TextWriter)">
             <summary>
             Renders the element close tag.
             </summary>
            
             <param name="element">
             The element.
             </param>
             <param name="writer">
             The writer to which output is written.
             </param>
        </member>
        <member name="M:CsQuery.Output.FormatDefault.ParseChildren(CsQuery.IDomObject)">
             <summary>
             Renders all the children of the passed node.
             </summary>
            
             <param name="element">
             The element.
             </param>
        </member>
        <member name="M:CsQuery.Output.FormatDefault.RenderTextNode(CsQuery.IDomObject,System.IO.TextWriter,System.Boolean)">
             <summary>
             Renders the text node.
             </summary>
            
             <param name="textNode">
             The text node.
             </param>
             <param name="writer">
             The writer to which output is written.
             </param>
             <param name="raw">
             true to raw.
             </param>
        </member>
        <member name="M:CsQuery.Output.FormatDefault.RenderCdataNode(CsQuery.IDomObject,System.IO.TextWriter)">
             <summary>
             Renders a CDATA node.
             </summary>
            
             <param name="element">
             The element to render
             </param>
             <param name="writer">
             The writer to which output is written.
             </param>
        </member>
        <member name="M:CsQuery.Output.FormatDefault.RenderCommentNode(CsQuery.IDomObject,System.IO.TextWriter)">
             <summary>
             Renders the comment node.
             </summary>
            
             <param name="element">
             The element to render
             </param>
             <param name="writer">
             The writer to which output is written.
             </param>
        </member>
        <member name="M:CsQuery.Output.FormatDefault.RenderDocTypeNode(CsQuery.IDomObject,System.IO.TextWriter)">
             <summary>
             Renders the document type node.
             </summary>
            
             <param name="element">
             The element to render
             </param>
             <param name="writer">
             The writer to which output is written.
             </param>
        </member>
        <member name="M:CsQuery.Output.FormatDefault.RenderAttribute(System.IO.TextWriter,System.String,System.String,System.Boolean)">
             <summary>
             Render an attribute.
             </summary>
            
             <param name="writer">
             The writer to which output is written.
             </param>
             <param name="name">
             The name of the attribute.
             </param>
             <param name="value">
             The attribute value.
             </param>
             <param name="quoteAll">
             true to require quotes around the attribute value, false to use quotes only if needed.
             </param>
        </member>
        <member name="M:CsQuery.Output.FormatDefault.MergeDefaultOptions">
            <summary>
            Merge options with defaults when needed.
            </summary>
        </member>
        <member name="P:CsQuery.Output.FormatDefault.OutputStack">
            <summary>
            Stack of the output tree
            </summary>
        </member>
        <member name="T:CsQuery.Output.FormatDefault.NodeStackElement">
            <summary>
            An element that captures the state of a element on the output stack.
            </summary>
        </member>
        <member name="M:CsQuery.Output.FormatDefault.NodeStackElement.#ctor(CsQuery.IDomObject,System.Boolean,System.Boolean)">
             <summary>
             Constructor.
             </summary>
            
             <param name="element">
             The element.
             </param>
             <param name="isRaw">
             true if this object is raw.
             </param>
             <param name="isClose">
             true if this object is close.
             </param>
        </member>
        <member name="F:CsQuery.Output.FormatDefault.NodeStackElement.Element">
            <summary>
            The element.
            </summary>
        </member>
        <member name="F:CsQuery.Output.FormatDefault.NodeStackElement.IsRaw">
            <summary>
            The text node should be output as raw (un-encoded) text.
            </summary>
        </member>
        <member name="F:CsQuery.Output.FormatDefault.NodeStackElement.IsClose">
            <summary>
            The is a closing tag only.
            </summary>
        </member>
        <member name="T:CsQuery.OutputFormatters">
            <summary>
            Factory for OuputFormatters included with CsQuery.
            </summary>
        </member>
        <member name="M:CsQuery.OutputFormatters.Create(CsQuery.DomRenderingOptions,CsQuery.Output.IHtmlEncoder)">
             <summary>
             Creates an instance of the default OutputFormatter using the options passed.
             </summary>
            
             <param name="options">
             (optional) options for controlling the operation.
             </param>
             <param name="encoder">
             (optional) the encoder.
             </param>
            
             <returns>
             An OutputFormatter.
             </returns>
        </member>
        <member name="M:CsQuery.OutputFormatters.Create(CsQuery.DomRenderingOptions)">
             <summary>
             Creates an instance of the default OutputFormatter using the options passed and the default encoder.
             </summary>
            
             <param name="options">
             (optional) options for controlling the operation.
             </param>
            
             <returns>
             An OutputFormatter.
             </returns>
        </member>
        <member name="M:CsQuery.OutputFormatters.Create(CsQuery.Output.IHtmlEncoder)">
             <summary>
             Creates an instance of the default OutputFormatter using the default options and the encoder
             passed.
             </summary>
            
             <param name="encoder">
             (optional) the encoder.
             </param>
            
             <returns>
             An OutputFormatter.
             </returns>
        </member>
        <member name="M:CsQuery.OutputFormatters.MergeOptions(CsQuery.DomRenderingOptions@)">
             <summary>
             Merge options with defaults when needed
             </summary>
            
             <param name="options">
             (optional) options for controlling the operation.
             </param>
        </member>
        <member name="P:CsQuery.OutputFormatters.Default">
            <summary>
            Gets an instance of the default OuputFormatter configured with the default HTML encoder and options
            </summary>
        </member>
        <member name="P:CsQuery.OutputFormatters.HtmlEncodingNone">
            <summary>
            Gets an instance of the default OuputFormatter configured with no HTML encoding
            </summary>
        </member>
        <member name="P:CsQuery.OutputFormatters.HtmlEncodingBasic">
            <summary>
            Gets an instance of the default OuputFormatter configured with basic encoding
            </summary>
        </member>
        <member name="P:CsQuery.OutputFormatters.HtmlEncodingFull">
            <summary>
            Gets an instance of the default OuputFormatter configured for full HTML encoding
            </summary>
        </member>
        <member name="P:CsQuery.OutputFormatters.HtmlEncodingMinimum">
            <summary>
            Gets an instance of the default OutputFormatter, using the minimum HTML encoding scheme.
            </summary>
        </member>
        <member name="P:CsQuery.OutputFormatters.HtmlEncodingMinimumNbsp">
            <summary>
            Gets an instance of the default OutputFormatter, using the minimum HTML + NBSP encoding scheme.
            </summary>
        </member>
        <member name="P:CsQuery.OutputFormatters.PlainText">
            <summary>
            An OutputFormatter that returns a basic ASCII version of the HTML document.
            </summary>
        </member>
        <member name="T:CsQuery.Promises.Timeout`1">
            <summary>
            A promise that resolves or fails after a certain amount of time
            </summary>
        </member>
        <member name="T:CsQuery.Promises.IPromise`1">
             <summary>
             Interface for a promise that accepts a strongly-typed parameter.
             </summary>
            
             <typeparam name="T">
             The type of data accepted by the resolution parameter.
             </typeparam>
        </member>
        <member name="T:CsQuery.Promises.IPromise">
            <summary>
            A promise is an object exposing "Then" which will be called on the resoluton of a particular process.
            </summary>
        </member>
        <member name="M:CsQuery.Promises.IPromise.Then(System.Delegate,System.Delegate)">
             <summary>
             Chains delegates that will be executed on success or failure of a promise.
             </summary>
            
             <param name="success">
             The delegate to call upon successful resolution of the promise.
             </param>
             <param name="failure">
             (optional) The delegate to call upon unsuccessful resolution of the promise.
             </param>
            
             <returns>
             A new promise which will resolve when this promise has resolved.
             </returns>
        </member>
        <member name="M:CsQuery.Promises.IPromise.Then(System.Action,System.Action)">
             <summary>
             Chains delegates that will be executed on success or failure of a promise.
             </summary>
            
             <param name="success">
             The delegate to call upon successful resolution of the promise.
             </param>
             <param name="failure">
             (optional) The delegate to call upon unsuccessful resolution of the promise.
             </param>
            
             <returns>
             A new promise which will be chained to this promise.
             </returns>
        </member>
        <member name="M:CsQuery.Promises.IPromise.Then(System.Func{CsQuery.Promises.IPromise},System.Func{CsQuery.Promises.IPromise})">
             <summary>
             Chains delegates that will be executed on success or failure of a promise.
             </summary>
            
             <param name="success">
             The delegate to call upon successful resolution of the promise.
             </param>
             <param name="failure">
             (optional) The delegate to call upon unsuccessful resolution of the promise.
             </param>
            
             <returns>
             A new promise which will be chained to this promise.
             </returns>
        </member>
        <member name="M:CsQuery.Promises.IPromise.Then(CsQuery.Promises.PromiseAction{System.Object},CsQuery.Promises.PromiseAction{System.Object})">
             <summary>
             Chains delegates that will be executed on success or failure of a promise.
             </summary>
            
             <param name="success">
             The delegate to call upon successful resolution of the promise.
             </param>
             <param name="failure">
             (optional) The delegate to call upon unsuccessful resolution of the promise.
             </param>
            
             <returns>
             A new promise which will resolve when this promise has resolved.
             </returns>
        </member>
        <member name="M:CsQuery.Promises.IPromise.Then(CsQuery.Promises.PromiseFunction{System.Object},CsQuery.Promises.PromiseFunction{System.Object})">
             <summary>
             Chains delegates that will be executed on success or failure of a promise.
             </summary>
            
             <param name="success">
             The delegate to call upon successful resolution of the promise.
             </param>
             <param name="failure">
             (optional) The delegate to call upon unsuccessful resolution of the promise.
             </param>
            
             <returns>
             A new promise which will resolve when this promise has resolved.
             </returns>
        </member>
        <member name="M:CsQuery.Promises.IPromise`1.Then(CsQuery.Promises.PromiseAction{`0},CsQuery.Promises.PromiseAction{`0})">
             <summary>
             Chains delegates that will be executed on success or failure of a promise
             </summary>
            
             <param name="success">
             The success delegate.
             </param>
             <param name="failure">
             (optional) the failure delegate.
             </param>
            
             <returns>
             A promise
             </returns>
        </member>
        <member name="M:CsQuery.Promises.IPromise`1.Then(CsQuery.Promises.PromiseFunction{`0},CsQuery.Promises.PromiseFunction{`0})">
             <summary>
             Chains delegates that will be executed on success or failure of a promise.
             </summary>
            
             <param name="success">
             The success delegate.
             </param>
             <param name="failure">
             (optional) the failure delegate.
             </param>
            
             <returns>
             A promise.
             </returns>
        </member>
        <member name="M:CsQuery.Promises.Timeout`1.#ctor(System.Int32)">
             <summary>
             Create a new Timeout that rejects after the specified time.
             </summary>
            
             <param name="timeoutMilliseconds">
             The timeout in milliseconds.
             </param>
        </member>
        <member name="M:CsQuery.Promises.Timeout`1.#ctor(System.Int32,`0)">
             <summary>
             Create a new Timeout that rejects with the provided parameter value after the specified time.
             </summary>
            
             <param name="timeoutMilliseconds">
             The timeout in milliseconds.
             </param>
             <param name="parameterValue">
             The parameter value.
             </param>
        </member>
        <member name="M:CsQuery.Promises.Timeout`1.#ctor(System.Int32,System.Boolean)">
             <summary>
             Create a new Timeout that resolves or rejects with the provided parameter value after the specified time.
             </summary>
            
             <param name="timeoutMilliseconds">
             The timeout in milliseconds.
             </param>
             <param name="resolveOnTimeout">
             true to resolve the promise on the timeout, false to reject it.
             </param>
        </member>
        <member name="M:CsQuery.Promises.Timeout`1.#ctor(System.Int32,`0,System.Boolean)">
             <summary>
             Create a new Timeout that resolves or rejects with the provided parameter value after the specified time.
             </summary>
            
             <param name="timeoutMilliseconds">
             The timeout in milliseconds.
             </param>
             <param name="parameterValue">
             The parameter value.
             </param>
             <param name="resolveOnTimeout">
             true to resolve the promise on the timeout, false to reject it.
             </param>
        </member>
        <member name="M:CsQuery.Promises.Timeout`1.Stop(System.Boolean)">
             <summary>
             Stops the timer with the specified resolution.
             </summary>
            
             <param name="resolve">
             True to resolve the promise, false to reject it.
             </param>
        </member>
        <member name="M:CsQuery.Promises.Timeout`1.Stop">
            <summary>
            Stops the timer with it's default resolution
            </summary>
        </member>
        <member name="M:CsQuery.Promises.Timeout`1.Timer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
             <summary>
             Event handler called when the specified time has elapsed.
             </summary>
            
             <param name="sender">
             The timer object.
             </param>
             <param name="e">
             Elapsed event information.
             </param>
        </member>
        <member name="M:CsQuery.Promises.Timeout`1.CompletePromise(System.Boolean)">
            <summary>
            Completes the promise promise using the specified resolution
            </summary>
        </member>
        <member name="M:CsQuery.Promises.Timeout`1.Then(CsQuery.Promises.PromiseAction{`0},CsQuery.Promises.PromiseAction{`0})">
             <summary>
             Chains delegates that will be executed on success or failure of a promise.
             </summary>
            
             <param name="success">
             The delegate to call upon successful resolution of the promise.
             </param>
             <param name="failure">
             (optional) The delegate to call upon unsuccessful resolution of the promise.
             </param>
            
             <returns>
             A new promise which will resolve when this promise has resolved.
             </returns>
        </member>
        <member name="M:CsQuery.Promises.Timeout`1.Then(CsQuery.Promises.PromiseFunction{`0},CsQuery.Promises.PromiseFunction{`0})">
             <summary>
             Chains delegates that will be executed on success or failure of a promise.
             </summary>
            
             <param name="success">
             The delegate to call upon successful resolution of the promise.
             </param>
             <param name="failure">
             (optional) The delegate to call upon unsuccessful resolution of the promise.
             </param>
            
             <returns>
             A new promise which will resolve when this promise has resolved.
             </returns>
        </member>
        <member name="M:CsQuery.Promises.Timeout`1.Then(System.Delegate,System.Delegate)">
             <summary>
             Chains delegates that will be executed on success or failure of a promise.
             </summary>
            
             <param name="success">
             The delegate to call upon successful resolution of the promise.
             </param>
             <param name="failure">
             (optional) The delegate to call upon unsuccessful resolution of the promise.
             </param>
            
             <returns>
             A new promise which will resolve when this promise has resolved.
             </returns>
        </member>
        <member name="M:CsQuery.Promises.Timeout`1.Then(System.Action,System.Action)">
             <summary>
             Chains delegates that will be executed on success or failure of a promise.
             </summary>
            
             <param name="success">
             The delegate to call upon successful resolution of the promise.
             </param>
             <param name="failure">
             (optional) The delegate to call upon unsuccessful resolution of the promise.
             </param>
            
             <returns>
             A new promise which will resolve when this promise has resolved.
             </returns>
        </member>
        <member name="M:CsQuery.Promises.Timeout`1.Then(System.Func{CsQuery.Promises.IPromise},System.Func{CsQuery.Promises.IPromise})">
             <summary>
             Chains delegates that will be executed on success or failure of a promise.
             </summary>
            
             <param name="success">
             The delegate to call upon successful resolution of the promise.
             </param>
             <param name="failure">
             (optional) The delegate to call upon unsuccessful resolution of the promise.
             </param>
            
             <returns>
             A new promise which will resolve when this promise has resolved.
             </returns>
        </member>
        <member name="M:CsQuery.Promises.Timeout`1.CsQuery#Promises#IPromise#Then(CsQuery.Promises.PromiseAction{System.Object},CsQuery.Promises.PromiseAction{System.Object})">
             <summary>
             Chains delegates that will be executed on success or failure of a promise.
             </summary>
            
             <param name="success">
             The delegate to call upon successful resolution of the promise.
             </param>
             <param name="failure">
             (optional) The delegate to call upon unsuccessful resolution of the promise.
             </param>
            
             <returns>
             A new promise which will resolve when this promise has resolved.
             </returns>
        </member>
        <member name="M:CsQuery.Promises.Timeout`1.CsQuery#Promises#IPromise#Then(CsQuery.Promises.PromiseFunction{System.Object},CsQuery.Promises.PromiseFunction{System.Object})">
             <summary>
             Chains delegates that will be executed on success or failure of a promise.
             </summary>
            
             <param name="success">
             The delegate to call upon successful resolution of the promise.
             </param>
             <param name="failure">
             (optional) The delegate to call upon unsuccessful resolution of the promise.
             </param>
            
             <returns>
             A new promise which will resolve when this promise has resolved.
             </returns>
        </member>
        <member name="T:CsQuery.Promises.Timeout">
            <summary>
            A promise that resolves or fails after a certain amount of time
            </summary>
        </member>
        <member name="M:CsQuery.Promises.Timeout.#ctor(System.Int32)">
             <summary>
             Create a new Timeout that rejects after the specified time.
             </summary>
            
             <param name="timeoutMilliseconds">
             The timeout in milliseconds.
             </param>
        </member>
        <member name="M:CsQuery.Promises.Timeout.#ctor(System.Int32,System.Object)">
             <summary>
             Create a new Timeout that rejects with the provided parameter value after the specified time.
             </summary>
            
             <param name="timeoutMilliseconds">
             The timeout in milliseconds.
             </param>
             <param name="parameterValue">
             The parameter value.
             </param>
        </member>
        <member name="M:CsQuery.Promises.Timeout.#ctor(System.Int32,System.Boolean)">
             <summary>
             Create a new Timeout that resolves or rejects with the provided parameter value after the specified time.
             </summary>
            
             <param name="timeoutMilliseconds">
             The timeout in milliseconds.
             </param>
             <param name="succeedOnTimeout">
             true to resolve the promise on the timeout, false to reject it.
             </param>
        </member>
        <member name="M:CsQuery.Promises.Timeout.#ctor(System.Int32,System.Object,System.Boolean)">
             <summary>
             Create a new Timeout that resolves or rejects with the provided parameter value after the specified time.
             </summary>
            
             <param name="timeoutMilliseconds">
             The timeout in milliseconds.
             </param>
             <param name="parameterValue">
             The parameter value.
             </param>
             <param name="succeedOnTimeout">
             true to resolve the promise on the timeout, false to reject it.
             </param>
        </member>
        <member name="T:CsQuery.StringScanner.CharacterData">
            <summary>
            A static class to provide attribute information about characters, e.g. determining whether or
            not it belongs to a number of predefined classes. This creates an array of every possible
            character with a uint that is a bitmap (of up to 32 possible values)
            This permits very fast access to this information since it only needs to be looked up via an
            index. Uses an array of 65536 uints = 256K of memory.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.CharacterData.#cctor">
            <summary>
            Configuration of the xref of character info. This sets bitflags in the "characterFlags" array
            for every unicode value that defines its attributes. This creates a lookup table allowing
            very rapid access to metadata about a single character, useful during string-parsing and
            scanning.
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.CharacterData.charsHtmlSpaceArray">
            <summary>
            An array of all HTML "space" characters.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.CharacterData.CreateCharacterInfo">
             <summary>
             Creates a new instance of the CharacterInfo class
             </summary>
            
             <returns>
             The new character information.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.CharacterData.CreateCharacterInfo(System.Char)">
             <summary>
             Creates a new instance of the CharacterInfo class.
             </summary>
            
             <param name="character">
             The character to bind to the new instance.
             </param>
            
             <returns>
             A new CharacterInfo instance.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.CharacterData.CreateStringInfo">
             <summary>
             Creates a new StringInfo instance
             </summary>
            
             <returns>
             The new StringInfo instance
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.CharacterData.CreateStringInfo(System.String)">
             <summary>
             Creates a new StringInfo instance bound to a string
             </summary>
            
             <param name="text">
             The string to bind.
             </param>
            
             <returns>
             The new StringInfo instance.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.CharacterData.IsType(System.Char,CsQuery.StringScanner.CharacterType)">
             <summary>
             Test whether a character matches a set of flags defined by the paramter
             </summary>
            
             <param name="character">
             The character to test
             </param>
             <param name="type">
             The type to which to compare the character
             </param>
            
             <returns>
             true if the character matches the flags in the test type, false if not
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.CharacterData.GetType(System.Char)">
             <summary>
             Gets a type with all flags set for the types implemented by this character
             </summary>
            
             <param name="character">
             The character to test
             </param>
            
             <returns>
             The type.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.CharacterData.Closer(System.Char)">
             <summary>
             Return the closing character for a set of known opening enclosing characters (including
             single and double quotes)
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the character is not a known opening bound
             </exception>
            
             <param name="character">
             The opening bound character
             </param>
            
             <returns>
             The closing bound character
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.CharacterData.MatchingBound(System.Char)">
             <summary>
             Return the matching bound for known opening and closing bound characters (same as Closer, but
             accepts closing tags and returns openers)
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="character">
             The opening bound character
             </param>
            
             <returns>
             The matching close character
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.CharacterData.SetAlphaISO10646(System.UInt32)">
             <summary>
             Sets the bits for ISO 10646.
             </summary>
            
             <param name="hsb">
             the target
             </param>
        </member>
        <member name="M:CsQuery.StringScanner.CharacterData.SetHtmlIdNameExceptStart(System.UInt32)">
            <summary>
            Matches anything but the first character for a valid ID or name value. The first character is just alpha.
            </summary>
            <param name="hsb"></param>
        </member>
        <member name="M:CsQuery.StringScanner.CharacterData.SetHtmlTagSelectorStart(System.UInt32)">
            <summary>
            We omit ":" as a valid name start character because it makes pseudoselectors impossible to parse.
            </summary>
            <param name="hsb"></param>
        </member>
        <member name="M:CsQuery.StringScanner.CharacterData.SetHtmlTagSelectorExceptStart(System.UInt32)">
            <summary>
            Similar to above, we omit "." as a valid in-name char because it breaks chained CSS selectors.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.CharacterData.SetHtmlTagNameStart(System.UInt32)">
            <summary>
            Add the : back in when actually parsing html
            </summary>
            <param name="hsb"></param>
        </member>
        <member name="M:CsQuery.StringScanner.CharacterData.SetHtmlTagNameExceptStart(System.UInt32)">
            <summary>
            Add the . back in when actually parsing html
            </summary>
            <param name="hsb"></param>
        </member>
        <member name="T:CsQuery.StringScanner.CharacterType">
            <summary>
            Bitfield of flags for specifying characteristics of a single character
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.CharacterType.Whitespace">
            <summary>
            Whitespace
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.CharacterType.Alpha">
            <summary>
            Alpha charactersonly
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.CharacterType.Number">
            <summary>
            Numeric characters only
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.CharacterType.NumberPart">
            <summary>
            Numbers plus non-numeric characters that can be part of a number
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.CharacterType.Lower">
            <summary>
            Lowercase only
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.CharacterType.Upper">
            <summary>
            Uppercase only.
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.CharacterType.Operator">
            <summary>
            A mathematical operator; something that can be part of a math formiul;a.
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.CharacterType.Enclosing">
            <summary>
            A character that has a mate, such as ( or ].
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.CharacterType.Quote">
            <summary>
            A single or double quote.
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.CharacterType.Escape">
            <summary>
            Backslash.
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.CharacterType.Separator">
            <summary>
            Comma, space or pipe.
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.CharacterType.AlphaISO10646">
            <summary>
            ISO10646 character set
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.CharacterType.HtmlTagSelectorStart">
            <summary>
            Something that can be the first character of an HTML tag selector (not tag name).
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.CharacterType.HtmlTagSelectorExceptStart">
            <summary>
            Something that can be anthing other than the 1st character of an HTML tag selector.
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.CharacterType.HtmlTagOpenerEnd">
            <summary>
            A character that marks the end of an HTML tag opener (e.g. the end of the entire tag, or
            the beginning of the attribute section)
            </summary>
            
        </member>
        <member name="F:CsQuery.StringScanner.CharacterType.HtmlTagAny">
            <summary>
            &lt;, &gt;, or / -- any character that's part of the construct of an html tag; 
            finding one of these while seeking attribute names means the tag was closed.
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.CharacterType.HtmlTagNameStart">
            <summary>
            Something that can be the first character of a legal HTML tag name.
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.CharacterType.HtmlTagNameExceptStart">
            <summary>
            Something that can be anything other than the 1st character of a legal  HTML tag name.
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.CharacterType.HtmlIDNameExceptStart">
            <summary>
            Something that can be the first character of a legal HTML ID value.
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.CharacterType.HtmlIDNameSelectorExceptStart">
            <summary>
            .
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.CharacterType.HtmlSpace">
            <summary>
            An HTML "space" is actually different from "white space" which is defined in the HTML5 spec
            as UNICODE whitespace and is a lot of characters. But we are generally only concerned with
            "space" characters which delimit parts of tags and so on.
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.CharacterType.HtmlMustBeEncoded">
            <summary>
            A character that must be HTML encoded to create valid HTML
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.CharacterType.HtmlAttributeValueTerminator">
            <summary>
            A character that will terminate an unquoted HTML attribute value.
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.CharacterType.Hexadecimal">
            <summary>
            Part of a hex string
            </summary>
        </member>
        <member name="T:CsQuery.StringScanner.ExtensionMethods.ExtensionMethods">
            <summary>
            Extension methods used by CsQuery but not specialized enough to be considered useful for clients; therefore
            in a separate namespace.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.ExtensionMethods.ExtensionMethods.SubstringBetween(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the text between startIndex and endIndex (exclusive of endIndex)
            </summary>
            <param name="text"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.StringScanner.ExtensionMethods.ExtensionMethods.SubstringBetween(System.Char[],System.Int32,System.Int32)">
             <summary>
             Returns the text between startIndex and endIndex (exclusive of endIndex)
             </summary>
            
             <param name="text">
             The source text
             </param>
             <param name="startIndex">
             The start index
             </param>
             <param name="endIndex">
             The end index
             </param>
            
             <returns>
             The substring, or an empty string if the range was not within the string.
             </returns>
        </member>
        <member name="T:CsQuery.StringScanner.ICharacterInfo">
            <summary>
            An interface that describes characterstics of a single character.
            </summary>
        </member>
        <member name="T:CsQuery.StringScanner.IValueInfo`1">
             <summary>
             Interface for a strongly typed IValueInfo
             </summary>
            
             <typeparam name="T">
             The type of value
             </typeparam>
        </member>
        <member name="T:CsQuery.StringScanner.IValueInfo">
            <summary>
            Interface for characterstics of a value, either a single character or a string.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.IValueInfo.Alpha">
            <summary>
            The value is alphabetic
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.IValueInfo.Numeric">
            <summary>
            The value is numeric.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.IValueInfo.NumericExtended">
            <summary>
            The value is numeric, or characters that can be parts of numbers (+,-,.)
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.IValueInfo.Lower">
             <summary>
            The value is all lowercase
             </summary>
        </member>
        <member name="P:CsQuery.StringScanner.IValueInfo.Upper">
            <summary>
            Gets a value indicating whether the cvale upper.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.IValueInfo.Whitespace">
            <summary>
            The value is whitespace.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.IValueInfo.Alphanumeric">
            <summary>
            The value is alphanumeric.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.IValueInfo.Operator">
            <summary>
            The value is a math operator
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.IValueInfo.AlphaISO10646">
            <summary>
            Indicates that a character is alphabetic-like character defined as a-z, A-Z, hyphen,
            underscore, and ISO 10646 code U+00A1 and higher. (per characters allowed in CSS identifiers)
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.IValueInfo.Target">
            <summary>
            The bound character or string for this instance. This is the character against which all
            tests are performed.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.IValueInfo`1.Target">
            <summary>
            The target of the tests.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.ICharacterInfo.Parenthesis">
            <summary>
            The character is an opening or closing parenthesis.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.ICharacterInfo.Enclosing">
            <summary>
            The character is an enclosing type such as a parenthesis or curly brace (anything which has a
            matching close that's not the same as the opening; this specifically excludes single and
            double-quote characters).
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.ICharacterInfo.Bound">
            <summary>
            Gets a value indicating whether the character is any bounding type (includes all Enclosing types, plus quotes).
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.ICharacterInfo.Quote">
            <summary>
            Gets a value indicating whether the character is a quote.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.ICharacterInfo.Separator">
            <summary>
            Gets a value indicating whether the character is a separator (a space, or pipe)
            </summary>
        </member>
        <member name="T:CsQuery.StringScanner.IExpectPattern">
            <summary>
            An interface for pattern matching.
            
            Something implementing this interface will be used as follows:
            
            First, Initialize is called, passing in the source and the starting index where scanning
            should begin.
            
            The Validate function then scans the string, and returns true if a valid match is found, and
            false if not.
            
            The Result property should be populated by the function with the matching string, and the
            EndIndex property should be populated with the last position scanned (one after the last
            valid character that was returned). If no valid string was matched, EndIndex should equal the
            original StartIndex.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.IExpectPattern.Initialize(System.Int32,System.Char[])">
             <summary>
             Initializes the pattern
             </summary>
            
             <param name="startIndex">
             The start index.
             </param>
             <param name="source">
             Source for the.
             </param>
        </member>
        <member name="M:CsQuery.StringScanner.IExpectPattern.Validate">
             <summary>
             Validate the string and try to match something.
             </summary>
            
             <returns>
             true if a matching string was found, false if not.
             </returns>
        </member>
        <member name="P:CsQuery.StringScanner.IExpectPattern.Result">
             <summary>
             When a valid string was found, the string.
             </summary>
            
             <value>
             A string.
             </value>
        </member>
        <member name="P:CsQuery.StringScanner.IExpectPattern.EndIndex">
             <summary>
             Gets zero-based index of the ending postion. This is one position after the last matching
             character.
             </summary>
            
             <value>
             The end index.
             </value>
        </member>
        <member name="T:CsQuery.StringScanner.Implementation.CharacterInfo">
            <summary>
            A class that provides methods with metadata about a character.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.CharacterInfo.#ctor">
            <summary>
            Create a new unbound CharacterInfo class
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.CharacterInfo.#ctor(System.Char)">
             <summary>
             Create a new CharacterInfo class bound to a character.
             </summary>
            
             <param name="character">
             The character.
             </param>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.CharacterInfo.op_Implicit(System.Char)~CsQuery.StringScanner.Implementation.CharacterInfo">
             <summary>
             CharacterInfo casting operator: creates a new instance from a single character
             </summary>
            
             <param name="character">
             The character to bind to the new CharacterInfo class
             </param>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.CharacterInfo.Create(System.Char)">
             <summary>
             Creates a new CharacterInfo instance from a character
             </summary>
            
             <param name="character">
             The character to bind to this instance.
             </param>
            
             <returns>
             A new CharacterInfo object
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.CharacterInfo.ToString">
             <summary>
             Returns a string that is the current target
             </summary>
            
             <returns>
             The current target as a string
             </returns>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.CharacterInfo.Target">
            <summary>
            Gets or sets bound character for this instance. This is the character against which all tests
            are performed.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.CharacterInfo.Type">
            <summary>
            Flags indicating the use of this character.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.CharacterInfo.Alpha">
            <summary>
            Gets a value indicating whether the character is alphabetic, e.g. a-z, A-Z
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.CharacterInfo.Numeric">
            <summary>
            Gets a value indicating whether the bound character is numeric only, e.g. 0-9
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.CharacterInfo.NumericExtended">
            <summary>
            Test whether the character is numeric or part of a complete number, e.g. also includes '+', '-
            ' and '.'.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.CharacterInfo.Lower">
            <summary>
            Test whether the character is lower-case
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.CharacterInfo.Upper">
            <summary>
            Test whether the character is upper-case
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.CharacterInfo.Whitespace">
            <summary>
            Test whether the character is whitespace. This is really HTML5 "space" and not ANSI
            whitespace which. HTML5 space is much more restrictive; this is generally used to test
            whether a character delimits an entity during HTML/CSS/HTML-related parsing.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.CharacterInfo.Alphanumeric">
            <summary>
            The value is alphanumeric.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.CharacterInfo.Operator">
            <summary>
            The value is a math operator.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.CharacterInfo.Bound">
            <summary>
            Enclosing, plus double and single quotes
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.CharacterInfo.Enclosing">
            <summary>
            Tests whether the character is an enclosing/bounding type, one of:
            ()[]{}&lt;&gt;`´“”«».
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.CharacterInfo.Quote">
            <summary>
            Tests whether the bound character is a single- or double-quote
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.CharacterInfo.Parenthesis">
            <summary>
            Tests whether the bound character is an opening or closing parenthesis.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.CharacterInfo.Separator">
            <summary>
            Gets a value indicating whether the character is a separator (a space, or pipe)
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.CharacterInfo.AlphaISO10646">
            <summary>
            Indicates that a character is alphabetic-like character defined as a-z, A-Z, hyphen,
            underscore, and ISO 10646 code U+00A1 and higher. (per characters allowed in CSS identifiers)
            </summary>
        </member>
        <member name="T:CsQuery.StringScanner.Implementation.ExpectPattern">
            <summary>
            Abstract base class for IExpectPattern. This implements some helper functions that are commonly used by patterns.
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.Implementation.ExpectPattern.info">
            <summary>
            ICharacterInfo wrapper arond the current character. This class provides methods to test a
            character for certain properties.
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.Implementation.ExpectPattern.Source">
            <summary>
            The source string being scanned
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.Implementation.ExpectPattern.StartIndex">
            <summary>
            The starting index within the source string
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.Implementation.ExpectPattern.Length">
            <summary>
            The total length of the source string
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.ExpectPattern.Initialize(System.Int32,System.Char[])">
             <summary>
             Initializes the pattern. This is called before any scanning begins.
             </summary>
            
             <param name="startIndex">
             The index within the source string to begin scanning.
             </param>
             <param name="sourceText">
             The source string.
             </param>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.ExpectPattern.Validate">
             <summary>
             Run the validation against the passed string
             </summary>
            
             <returns>
             Returns true if the pattern defined by this class is successfully matched, and false if not.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.ExpectPattern.MatchSubstring(System.Int32,System.String)">
             <summary>
             Test if a string matches a substring in the source
             </summary>
            
             <param name="startIndex">
             The index within the source string to begin scanning.
             </param>
             <param name="substring">
             The substring to match
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.ExpectPattern.GetOuput(System.Int32,System.Int32,System.Boolean)">
             <summary>
             Copy the source to an output string between startIndex and endIndex (exclusive), optionally
             unescaping part of it.
             </summary>
            
             <param name="startIndex">
             The starting index to begin copying.
             </param>
             <param name="endIndex">
             The ending index
             </param>
             <param name="honorQuotes">
             true to honor quotes within the output string, false to treat them as any other characer.
             </param>
            
             <returns>
             The ouput.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.ExpectPattern.GetOuput(System.Int32,System.Int32,System.Boolean,System.Boolean)">
             <summary>
             Copy the source to an output string between startIndex and endIndex (exclusive), optionally
             unescaping part of it.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="startIndex">
             The starting index to begin copying.
             </param>
             <param name="endIndex">
             The ending index.
             </param>
             <param name="honorQuotes">
             true to honor quotes within the output string, false to treat them as any other characer.
             </param>
             <param name="stripQuotes">
             true to strip quotes.
             </param>
            
             <returns>
             The ouput.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.ExpectPattern.TryParseEscapeChar(System.Char,System.Char@)">
             <summary>
             Try parse escape character.
             </summary>
            
             <param name="character">
             The character.
             </param>
             <param name="newValue">
             [out] The new value.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.ExpectPattern.EndIndex">
             <summary>
             Gets or sets zero-based index of the ending postion. This is one position after the last
             matching character.
             </summary>
            
             <value>
             The end index.
             </value>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.ExpectPattern.Result">
             <summary>
             When a valid string was found, the string.
             </summary>
            
             <value>
             A string.
             </value>
        </member>
        <member name="T:CsQuery.StringScanner.Implementation.StringInfo">
            <summary>
            A StringInfo object: provides methods to test a string for certain properties.
            </summary>
        </member>
        <member name="T:CsQuery.StringScanner.IStringInfo">
            <summary>
            Interface that describes characterstics of a string
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.IStringInfo.HtmlAttributeName">
            <summary>
            The string is a valid HTML attribute name
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.IStringInfo.HasAlpha">
            <summary>
            The string contains alpha characters.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringInfo.#ctor(System.String)">
             <summary>
             Constructor using the string passed
             </summary>
            
             <param name="text">
             The target of the new StringInfo object.
             </param>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringInfo.op_Implicit(System.String)~CsQuery.StringScanner.Implementation.StringInfo">
             <summary>
             Create a new StringInfo for the string passed
             </summary>
            
             <param name="text">
             The target of the new StringInfo object.
             </param>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringInfo.Create(System.String)">
             <summary>
             Creates a new StringInfo for the string passed
             </summary>
            
             <param name="text">
             The target of the new StringInfo object
             </param>
            
             <returns>
             A new StringInfo object
             </returns>
        </member>
        <member name="F:CsQuery.StringScanner.Implementation.StringInfo.charInfo">
            <summary>
            Information describing the character.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringInfo.CheckFor(System.Func{CsQuery.StringScanner.Implementation.CharacterInfo,System.Boolean})">
             <summary>
             Tests each character in the current target against a function
             </summary>
            
             <param name="function">
             The function.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="F:CsQuery.StringScanner.Implementation.StringInfo.isAlpha">
            <summary>
            Test whether a character is alphabetic
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.Implementation.StringInfo.isOperator">
            <summary>
            Test whether a character is an operator
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.Implementation.StringInfo.isAlphaISO10646">
            <summary>
            The is alpha ISO 10646.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringInfo.ToString">
             <summary>
             Returns the target of this StringInfo object
             </summary>
            
             <returns>
             A string 
             </returns>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringInfo.Target">
            <summary>
            The string which is being tested
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringInfo.Alpha">
            <summary>
            The value is alphabetic.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringInfo.Numeric">
            <summary>
            The value is numeric.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringInfo.NumericExtended">
            <summary>
            The value is numeric, or characters that can be parts of numbers (+,-,.)
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringInfo.Lower">
            <summary>
            The value is all lowercase.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringInfo.Upper">
            <summary>
            Gets a value indicating whether the cvale upper.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringInfo.Whitespace">
            <summary>
            The value is whitespace.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringInfo.Alphanumeric">
            <summary>
            The value is alphanumeric.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringInfo.Operator">
            <summary>
            The value is a math operator.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringInfo.HasAlpha">
            <summary>
            The string contains alpha characters.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringInfo.HtmlAttributeName">
            <summary>
            The string is a valid HTML attribute name.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringInfo.AlphaISO10646">
            <summary>
            Indicates that a character is alphabetic-like character defined as a-z, A-Z, hyphen,
            underscore, and ISO 10646 code U+00A1 and higher. (per characters allowed in CSS identifiers)
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringInfo.Exists">
            <summary>
            Gets a value indicating whether the target is non-null and non-empty.
            </summary>
        </member>
        <member name="T:CsQuery.StringScanner.Implementation.StringScannerEngine">
            <summary>
            String scanner engine. A lexical scanner to match complex patterns.
            </summary>
        </member>
        <member name="T:CsQuery.StringScanner.IStringScanner">
            <summary>
            Interface defining a StringScanner - a lexical scanner
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.IStringScanner.Peek">
             <summary>
             Returns the character after the current character
             </summary>
            
             <returns>
             A character
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.IStringScanner.AllowQuoting">
             <summary>
             Causes the next action to permit quoting -- if the first character is a quote character, stop
             characters between there and the next matching quote character will be ignored.
             </summary>
            
             <returns>
             true if the next value is quoted, false if not
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.IStringScanner.SkipWhitespace">
            <summary>
            If the pointer is current on whitespace, advance to the next non-whitespace character. If the
            pointer is not on whitespace, do nothing.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.IStringScanner.NextNonWhitespace">
            <summary>
            Advance the pointer to the next character that is not whitespace. This differes from
            SkipShitespace in that this always advances the pointer.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.IStringScanner.Next">
             <summary>
             Advance the pointer by one character.
             </summary>
            
             <returns>
             true if the pointer can be advanced again, false if it is after the last position.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.IStringScanner.Previous">
             <summary>
             Move the pointer back one position.
             </summary>
            
             <returns>
             true if the pointer can be moved back again, false if it is at the origin.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.IStringScanner.Move(System.Int32)">
             <summary>
             Moves the pointer by a specific number of characters, forward or reverse.
             </summary>
            
             <param name="count">
             A positive or negative integer.
             </param>
            
             <returns>
             true if the pointer is not at the origin or after the end of the string, false otherwise.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.IStringScanner.Undo">
            <summary>
            Undo the last operation
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.IStringScanner.End">
            <summary>
            Moves the pointer past the last character postion.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.IStringScanner.AssertFinished(System.String)">
             <summary>
             Throw an error if the current scanner is not finished.
             </summary>
            
             <param name="errorMessage">
             (optional) message describing the error.
             </param>
        </member>
        <member name="M:CsQuery.StringScanner.IStringScanner.AssertNotFinished(System.String)">
             <summary>
             Throw an error if the current scanner is finished.
             </summary>
            
             <param name="errorMessage">
             (optional) message describing the error.
             </param>
        </member>
        <member name="M:CsQuery.StringScanner.IStringScanner.Reset">
            <summary>
            Resets the pointer to the origin and clear any state information about the scanner. This sets
            the internal state as if it had just been created.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.IStringScanner.Matches(System.String)">
             <summary>
             Test that the text starting at the current position matches the passed text.
             </summary>
            
             <param name="text">
             The text to match
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.IStringScanner.MatchesAny(System.Collections.Generic.IEnumerable{System.String})">
             <summary>
             Test that the text starting at the current position is any of the strings passed.
             </summary>
            
             <param name="text">
             A sequence of strings to match
             </param>
            
             <returns>
             true if one of, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.IStringScanner.Seek(System.Char,System.Boolean)">
             <summary>
             Seeks until a specific character is found. The Match string becomes everything from the
             current position, through the position before the matched character. If the scanner is
             already at the end, an exception is thrown.
             </summary>
            
             <param name="character">
             The character to seek.
             </param>
             <param name="orEnd">
             When true, the end of the string is a valid match. When false, the end of the string will
             cause an exception.
             </param>
            
             <returns>
             The current string scanner.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.IStringScanner.ToNewScanner">
             <summary>
             Creates a new scanner from the current match.
             </summary>
            
             <returns>
             A new IStringScanner
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.IStringScanner.ToNewScanner(System.String)">
             <summary>
             Creates a new scanner from the current match.
             </summary>
            
             <param name="template">
             The template.
             </param>
            
             <returns>
             A new IStringScanner.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.IStringScanner.Expect(System.String)">
             <summary>
             Assert that the text matches the string starting at the current position. The pointer is
             advanced to the first position beyond the matching text. If it does not, an ArgumentException
             is thrown.
             </summary>
            
             <param name="text">
             The text to match.
             </param>
            
             <returns>
             The current StringScanner.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.IStringScanner.Expect(CsQuery.StringScanner.IExpectPattern)">
             <summary>
             Assert that the text matches the pattern defined by an IExpectPattern object. The pointer is
             advanced until the pattern stops matching. If it does not, an ArgumentException is thrown.
             </summary>
            
             <param name="pattern">
             A pattern specifying the.
             </param>
            
             <returns>
             The current StringScanner.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.IStringScanner.Expect(System.Func{System.Int32,System.Char,System.Boolean})">
             <summary>
             Assert that at least one character starting at the current position validates using a
             function delegate. The pointer advances until the delegate returns false. If it does not, an
             ArgumentException is thrown.
             </summary>
            
             <param name="validate">
             The validate.
             </param>
            
             <returns>
             The current StringScanner.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.IStringScanner.ExpectChar(System.Char)">
             <summary>
             Assert that the current character matches the character passed. The pointer is advanced by
             one position. If it does not, an ArgumentException is thrown.
             </summary>
            
             <param name="character">
             The character to seek.
             </param>
            
             <returns>
             .
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.IStringScanner.ExpectChar(System.Collections.Generic.IEnumerable{System.Char})">
             <summary>
             Assert that the current character matches any of the characters passed. The pointer is
             advanced by one position. If it does not, an ArgumentException is thrown.
             </summary>
            
             <param name="characters">
             The characters to match
             </param>
            
             <returns>
             The current string scanner.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.IStringScanner.ExpectNumber(System.Boolean)">
             <summary>
             Assert that there is a pattern that matches a number starting at the current position. The
             pointer is advanced to the position after the end of the number. If it does not, an
             ArgumentException is thrown.
             </summary>
            
             <param name="requireWhitespaceTerminator">
             (optional) Indicates if whitespace is the only valid terminator. If true, an
             ArgumentException will be thrown if the first character that terminates the number is not
             whitespace. If false, any character that is invalid as part of a number will stop matching
             with no error.
             </param>
            
             <returns>
             The current string scanner.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.IStringScanner.ExpectAlpha">
             <summary>
             Assert that the current pattern is alphabetic until the next whitespace.
             </summary>
            
             <returns>
             The current string scanner.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.IStringScanner.ExpectBoundedBy(System.String,System.String,System.Boolean)">
             <summary>
             Asser that the current pattern is bounded by the start and end characters passed
             </summary>
            
             <param name="start">
             The start bound character
             </param>
             <param name="end">
             The end bound character
             </param>
             <param name="allowQuoting">
             (optional) True if the contents of the bounds can be quoted
             </param>
            
             <returns>
             The current string scanner
             </returns>
        </member>
        <member name="P:CsQuery.StringScanner.IStringScanner.Text">
            <summary>
            Gets or sets the text that the scanner acts upon
            </summary>
            <seealso cref="P:CsQuery.StringScanner.IStringScanner.Chars"/>
        </member>
        <member name="P:CsQuery.StringScanner.IStringScanner.Chars">
             <summary>
             Gets or sets the text that this scanner acts upon.
             </summary>
            
             <seealso cref="P:CsQuery.StringScanner.IStringScanner.Text"/>
        </member>
        <member name="P:CsQuery.StringScanner.IStringScanner.IgnoreWhitespace">
            <summary>
            Gets or sets a value indicating whether the scanner should ignore whitespace. When true, it
            is skipped automatically.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.IStringScanner.Length">
            <summary>
            Gets the length of the text bound to this scanner.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.IStringScanner.Index">
            <summary>
            Gets or sets the current zero-based position of the scanner.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.IStringScanner.LastIndex">
            <summary>
            Gets the zero-based index of the scanner before the last operation.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.IStringScanner.Current">
            <summary>
            Gets the current character.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.IStringScanner.CurrentOrEmpty">
            <summary>
            Gets the next character, or an empty string if the pointer is at the end of the string.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.IStringScanner.Match">
            <summary>
            Gets the current match string (usually, the text between the prior pointer position and the
            current pointer position, possibly excluding whitespace. This depends on the last operation).
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.IStringScanner.LastMatch">
            <summary>
            Gets the match prior to the curren one.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.IStringScanner.Finished">
            <summary>
            Gets a value indicating whether the pointer is after the end of the string.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.IStringScanner.AtEnd">
            <summary>
            Gets a value indicating whether at the last character of the string.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.IStringScanner.Success">
            <summary>
            Gets a value indicating whether the last operation succeeded. Since failure throws an error,
            this is generally useful only if errors are trapped.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.IStringScanner.LastError">
            <summary>
            Gets the error message when the prior operation failed.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.IStringScanner.Info">
            <summary>
            CharacterInfo object bound to the character at the current index.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.#ctor">
            <summary>
            Create a new StringScannerEngine with no configuration
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.#ctor(System.String)">
             <summary>
             Create a new StringScannerEngine for a string
             </summary>
            
             <param name="text">
             The string to scan
             </param>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.op_Implicit(System.String)~CsQuery.StringScanner.Implementation.StringScannerEngine">
             <summary>
             Create a new StringScannerEngine for a string
             </summary>
            
             <param name="text">
             The string to scan.
             </param>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.Init">
            <summary>
            Common configuration tasks for all constructors.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.AllowQuoting">
            <summary>
            Causes the next action to permit quoting -- if the first character is a quote character, stop characters between there
            and the next matching quote character will be ignored.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.ToNewScanner">
            <summary>
            Creates a new stringscanner instance from the current match
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.ToNewScanner(System.String)">
             <summary>
             Creates a new StringScanner instance from a string that is formatted using the current match
             as the single format argument.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the prior operation failed.
             </exception>
            
             <param name="template">
             The string to use as a template
             </param>
            
             <returns>
             A new StringScanner
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.Matches(System.String)">
             <summary>
             Test that the text starting at the current position matches the passed text.
             </summary>
            
             <param name="text">
             The text to match
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.MatchesAny(System.Collections.Generic.IEnumerable{System.String})">
             <summary>
             Test that the text starting at the current position is any of the strings passed.
             </summary>
            
             <param name="text">
             A sequence of strings to match
             </param>
            
             <returns>
             true if one of, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.Seek(System.Char,System.Boolean)">
             <summary>
             Seeks until a specific character is found. The Match string becomes everything from the
             current position, through the position before the matched character. If the scanner is
             already at the end, an exception is thrown.
             </summary>
            
             <param name="character">
             The character to seek.
             </param>
             <param name="orEnd">
             When true, the end of the string is a valid match. When false, the end of the string will
             cause an exception.
             </param>
            
             <returns>
             The current string scanner.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.SkipWhitespace">
            <summary>
            If the current character is whitespace, advances to the next non whitespace. Otherwise, nothing happens.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.NextNonWhitespace">
            <summary>
            Advances to the next non-whitespace character
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.Next">
            <summary>
            Moves pointer forward one character, or to the position after the next match.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.Undo">
            <summary>
            Returns to the state before the last Expect. This is not affected by manual Next/Prev operations
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.End">
            <summary>
            Moves the pointer past the last character postion.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.ExpectChar(System.Char)">
            <summary>
            If current character (or next non-whitespace character) is not the expected value, then an error is thrown
            </summary>
            <param name="character"></param>
            <returns></returns>
            
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.ExpectChar(System.Collections.Generic.IEnumerable{System.Char})">
            If one of the current characters (or next non-whitespace character) is not the expected value, then an error is thrown
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.ExpectNumber(System.Boolean)">
             <summary>
             Starting with the current character, treats text as a number, seeking until the next
             character that would terminate a valid number.
             </summary>
            
             <param name="requireWhitespaceTerminator">
             (optional) the require whitespace terminator.
             </param>
            
             <returns>
             .
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.ExpectAlpha">
            <summary>
            Starting with the current character, seeks until a non-alpha character is found
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.Expect(CsQuery.StringScanner.IExpectPattern)">
             <summary>
             Continue seeking as long as the delegate returns true.
             </summary>
            
             <param name="pattern">
             A class specifying the pattern to match.
             </param>
            
             <returns>
             The string scanner.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.Expect(System.Func{System.Int32,System.Char,System.Boolean})">
             <summary>
             Continue seeking as long as the delegate returns True.
             </summary>
            
             <param name="validate">
             A pattern matching function
             </param>
            
             <returns>
             This IStringScanner instance
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.GetBoundedBy(System.String,System.String,System.Boolean)">
             <summary>
             Expects a string bounded by the character at the current postion. If the current character is
             a bounding character, then the pattern will match until the matching closing bound character
             is found, e.g. () [] {} &lt;&gt;. For non-bounding characters, the pattern will match until
             the same character is found again.
             </summary>
            
             <param name="start">
             The position to start scanning.
             </param>
             <param name="end">
             The last position.
             </param>
             <param name="allowQuoting">
             (optional) the allow quoting.
             </param>
            
             <returns>
             The bounded by.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.GetBoundedBy(System.Char,System.Boolean)">
             <summary>
             The single character bound will be matched with a closing char for () [] {} &lt;&gt; or the
             same char for anything else.
             </summary>
            
             <param name="bound">
             .
             </param>
             <param name="allowQuoting">
             (optional) the allow quoting.
             </param>
            
             <returns>
             The bounded by.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.ExpectBoundedBy(System.Char,System.Boolean)">
             <summary>
             Require that the text starting at the current position matches a pattern which is bounded by
             a specific character, with the inner value opotionally quoted with a quote character ' or ".
             </summary>
            
             <param name="bound">
             The bounding character.
             </param>
             <param name="allowQuoting">
             (optional) the allow quoting.
             </param>
            
             <returns>
             The current string scanner.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.CachePos">
             <summary>
             Cache the last pos before an attempted operation,.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when there is already something cached.
             </exception>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.NewPos(System.Int32)">
            <summary>
            Sets the current position, updates the last pos from cache, and clears any current match. If the cached position is the same
            as the current position, nothing is done.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.RestorePos">
            <summary>
            Restores position from cache
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringScannerEngine.QuotingActive">
            <summary>
            When true, the next seek should honor quotes
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringScannerEngine.Text">
             <summary>
             Gets or sets the text that the scanner acts upon.
             </summary>
            
             <seealso cref="P:CsQuery.StringScanner.Implementation.StringScannerEngine.Chars"/>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringScannerEngine.Length">
            <summary>
            Gets or sets the length of the text bound to this scanner.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringScannerEngine.Index">
            <summary>
            Gets or sets the current zero-based position of the scanner.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringScannerEngine.Current">
            <summary>
            Return the character at the current scanning position without advancing the pointer. Throw an error
            if the pointer is at the end of the string.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringScannerEngine.CurrentOrEmpty">
            <summary>
            Return the character at the current scanning position without advancing the pointer. If the pointer is
            at the end of the string, return an empty string.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringScannerEngine.Match">
            <summary>
            The string or character that has been matched.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringScannerEngine.LastMatch">
            <summary>
            The string or character matched prior to last operation
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringScannerEngine.Finished">
            <summary>
            The current position is after the last character
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringScannerEngine.AtEnd">
            <summary>
            The current position is on the last character
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringScannerEngine.Info">
            <summary>
            The character at the current position is alphabetic
            </summary>
        </member>
        <member name="T:CsQuery.StringScanner.MatchFunctions">
            <summary>
            Match functions. These are used with StringScanner to parse out expected strings. A basic
            match function accepts an int and a char, and is eand returns true as long as the character
            is valid for that position in the string. Many patterns have different valid first characters
            versus later characters. The function will be called beginning with index zero, and continue
            to be called until it returns false, indicating that the end of a pattern that matches that
            concept has been reached.
            
            More complex patterns require a memory of the previous state, for example, to know whether
            quoting is in effect. the IExpectPattern interface describes a class to match more complex
            patterns.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.MatchFunctions.Alpha(System.Int32,System.Char)">
             <summary>
             Return true while the string is alphabetic, e.g. contains only letters.
             </summary>
            
             <param name="index">
             Zero-based index of the current position in the string.
             </param>
             <param name="character">
             The character at the current position.
             </param>
            
             <returns>
             True if the current character is valid for this pattern, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.MatchFunctions.Number(System.Boolean)">
             <summary>
             Returns a pattern that matches numbers.
             </summary>
            
             <param name="requireWhitespaceTerminator">
             (optional) when true, only whitespace can terminate this number. When false, any non-numeric character will succesfully terminate the pattern.
             </param>
            
             <returns>
             The total number of ber.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.MatchFunctions.HTMLAttribute">
             <summary>
             Gets an expect pattern for a string that's an HTML attribuye name
             </summary>
            
             <returns>
             An expect pattern
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.MatchFunctions.HTMLTagSelectorName">
             <summary>
             Gets an expect pattern for a string that's a valid  HTML tag selector.
             </summary>
            
             <returns>
             An expect pattern
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.MatchFunctions.BoundedBy(System.String,System.String,System.Boolean)">
             <summary>
             Gets an expect pattern for a string that's bounded by the provided values.
             </summary>
            
             <param name="boundStart">
             (optional) the bound start.
             </param>
             <param name="boundEnd">
             (optional) the bound end.
             </param>
             <param name="honorInnerQuotes">
             (optional) the honor inner quotes.
             </param>
            
             <returns>
             An expect pattern
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.MatchFunctions.NonWhitespace(System.Int32,System.Char)">
             <summary>
             Test whether the character is whitespace.
             </summary>
            
             <param name="index">
             Zero-based index of the current position in the string. Not used for this test.
             </param>
             <param name="character">
             The character at the current position.
             </param>
            
             <returns>
             true if it is whitespace, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.MatchFunctions.QuoteChar(System.Int32,System.Char)">
             <summary>
             Test whether the character is a quote character.
             </summary>
            
             <param name="index">
             Zero-based index of the current position in the string.
             </param>
             <param name="character">
             The character at the current position.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.MatchFunctions.BoundChar(System.Int32,System.Char)">
             <summary>
             Test whether the character is a bound character.
             </summary>
            
             <param name="index">
             Zero-based index of the current position in the string.
             </param>
             <param name="character">
             The character at the current position.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.MatchFunctions.Quoted">
             <summary>
             Gets an expect patter for a quoted string.
             </summary>
            
             <returns>
             An expect pattern
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.MatchFunctions.PseudoSelector(System.Int32,System.Char)">
             <summary>
             A matching function that validates 
             </summary>
            
             <param name="index">
             Zero-based index of the.
             </param>
             <param name="character">
             The character.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.MatchFunctions.OptionallyQuoted(System.String)">
             <summary>
             Returns a pattern matching a string that is optionally quoted. If terminators are passed, any
             character in that string will terminate seeking.
             </summary>
            
             <param name="terminators">
             (optional) the terminators.
             </param>
            
             <returns>
             An expect pattern
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.MatchFunctions.Operator(System.Int32,System.Char)">
             <summary>
             Test whether the character is an operator.
             </summary>
            
             <param name="index">
             Zero-based index of this character's position. Not used for this test.
             </param>
             <param name="character">
             The character.
             </param>
            
             <returns>
             true if it is an operator, false if it fails.
             </returns>
        </member>
        <member name="P:CsQuery.StringScanner.MatchFunctions.BoundedWithQuotedContent">
            <summary>
            Gets an expect pattern for a string that's bounded by known bounding characters, and has
            quoted content.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.MatchFunctions.CssClassName">
             <summary>
             Matches a valid CSS class: http://www.w3.org/TR/CSS21/syndata.html#characters Does not
             currently deal with escaping though.
             </summary>
            
             <value>
             The name of the CSS class.
             </value>
        </member>
        <member name="T:CsQuery.StringScanner.Patterns.Bounded">
            <summary>
            Matches anything that is bounded by accepted bounding characters
            </summary>
        </member>
        <member name="T:CsQuery.StringScanner.Patterns.HTMLTagSelectorName">
            <summary>
            A pattern that matches a valid HTML tag selector.
            </summary>
        </member>
        <member name="T:CsQuery.StringScanner.Patterns.EscapedString">
            <summary>
            Match a string pattern against a particular character validation function, but allow the backslash to escape 
            any character.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Patterns.EscapedString.#ctor">
            <summary>
            Default constructor -- simply parses escapes until the end of the string
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Patterns.HTMLTagSelectorName.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Patterns.HTMLTagSelectorName.IsValidTagName(System.Int32,System.Char)">
            <summary>
            Match a pattern for am attribute name selector
            </summary>
            <param name="index"></param>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.StringScanner.Patterns.HTMLAttributeName">
            <summary>
            A pattern that matches a valid HTML attribute name.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Patterns.HTMLAttributeName.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Patterns.HTMLAttributeName.IsValidAttributeName(System.Int32,System.Char)">
            <summary>
            Match a pattern for am attribute name selector
            </summary>
            <param name="index"></param>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.StringScanner.Patterns.CssClassName">
            <summary>
            A pattern that matches a valid CSS class name
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Patterns.CssClassName.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Patterns.CssClassName.IsValidClassName(System.Int32,System.Char)">
            <summary>
            Match a pattern for a CSS class name selector
            TODO - doesn't validate hyphen-digit combo.
            </summary>
            <param name="index"></param>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.StringScanner.Patterns.HtmlID">
            <summary>
            ID and NAME tokens must begin with a letter ([A-Za-z]) and may be followed by any number of letters, 
            digits ([0-9]), hyphens ("-"), underscores ("_"), colons (":"), and periods (".").
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Patterns.HtmlID.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Patterns.HtmlID.IsValidID(System.Int32,System.Char)">
             <summary>
             Match a pattern for a valid HTML ID.
             </summary>
            
             <param name="index">
             .
             </param>
             <param name="character">
             .
             </param>
            
             <returns>
             true if valid identifier, false if not.
             </returns>
        </member>
        <member name="T:CsQuery.StringScanner.Patterns.Number">
            <summary>
            A pattern that matches a number
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Patterns.Number.Initialize(System.Int32,System.Char[])">
             <summary>
             Initializes the pattern. This is called before any scanning begins.
             </summary>
            
             <param name="startIndex">
             The index within the source string to begin scanning.
             </param>
             <param name="sourceText">
             The source string.
             </param>
        </member>
        <member name="M:CsQuery.StringScanner.Patterns.Number.Validate">
             <summary>
             Run the validation against the passed string.
             </summary>
            
             <returns>
             Returns true if the pattern defined by this class is successfully matched, and false if not.
             </returns>
        </member>
        <member name="F:CsQuery.StringScanner.Patterns.Number.failed">
            <summary>
            Internal flag that validation has failed
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.Patterns.Number.decimalYet">
            <summary>
            Internal flag indicating that a decimal point has appeared already and another would indicate
            failure or termination.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Patterns.Number.Expect(System.Int32@,System.Char)">
             <summary>
             Assert that the character at the current position matches the pattern
             </summary>
            
             <param name="index">
             [in,out] Zero-based index of the position
             </param>
             <param name="current">
             The current character
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="P:CsQuery.StringScanner.Patterns.Number.RequireWhitespaceTerminator">
            <summary>
            Normally true, indicates that only legal whitespace can successfully terminate the number;
            other non-numeric characters will cause failure. If false, any non-numeric character will
            terminate successfuly.
            </summary>
        </member>
        <member name="T:CsQuery.StringScanner.Patterns.OptionallyQuoted">
            <summary>
            Match an attribute value that is optionally quoted with a quote character ' or ".
            </summary>
        </member>
        <member name="T:CsQuery.StringScanner.Patterns.Quoted">
            <summary>
            A pattern that expects a quoted string. Allows any characters inside the quoted text,
            including backslashed escape characters, and terminates upon a matching closing quote.
            </summary>
        </member>
        <member name="F:CsQuery.StringScanner.Patterns.Quoted.quoteChar">
            <summary>
            The quote character that was used to open the string.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Patterns.Quoted.Validate">
             <summary>
             Run the validation against the passed string.
             </summary>
            
             <returns>
             Returns true if the pattern defined by this class is successfully matched, and false if not.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.Patterns.Quoted.FinishValidate">
             <summary>
             Finishes a validation
             </summary>
            
             <returns>
             true if the string matched the pattern defined by this instance, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.Patterns.Quoted.Expect(System.Int32@,System.Char)">
             <summary>
             Assert that the current character matches the pattern defined by this object.
             </summary>
            
             <param name="index">
              Zero-based index of the current position.
             </param>
             <param name="current">
             The current character.
             </param>
            
             <returns>
             true if the pattern matches at this position, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.Patterns.OptionallyQuoted.#ctor">
            <summary>
            Create in instance of the pattern matcher using default terminators
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Patterns.OptionallyQuoted.#ctor(System.Collections.Generic.IEnumerable{System.Char})">
             <summary>
             Create in instance of the pattern matcher using any character in the string as a terminator.
             A closing quote (when the string is quoted) is always a terminator.
             </summary>
            
             <param name="terminators">
             A string containing characters, each of which will terminate seeking (when not inside a quote
             block)
             </param>
        </member>
        <member name="M:CsQuery.StringScanner.Patterns.OptionallyQuoted.Initialize(System.Int32,System.Char[])">
             <summary>
             Initializes this object from a character array.
             </summary>
            
             <param name="startIndex">
             The start index.
             </param>
             <param name="sourceText">
             Source text.
             </param>
        </member>
        <member name="M:CsQuery.StringScanner.Patterns.OptionallyQuoted.Validate">
             <summary>
             Run the validation against the passed string.
             </summary>
            
             <returns>
             Returns true if the pattern defined by this class is successfully matched, and false if not.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.Patterns.OptionallyQuoted.FinishValidate">
             <summary>
             Finishes a validation.
             </summary>
            
             <returns>
             true if the string matched the pattern defined by this instance, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.Patterns.OptionallyQuoted.Expect(System.Int32@,System.Char)">
             <summary>
             Override the default Expect for a quoted string to also terminate upon finding one of the
             terminators (if not quoted).
             </summary>
            
             <param name="index">
             The current index.
             </param>
             <param name="current">
             The current character.
             </param>
            
             <returns>
             true to continue seeking.
             </returns>
        </member>
        <member name="P:CsQuery.StringScanner.Patterns.OptionallyQuoted.Terminators">
            <summary>
            When unquoted, this will terminate the string.
            </summary>
        </member>
        <member name="T:CsQuery.StringScanner.Scanner">
            <summary>
            Factory for StringScanner objects
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Scanner.Create(System.String)">
             <summary>
             Creates a new StringScanner from a string.
             </summary>
            
             <param name="text">
             The text.
             </param>
            
             <returns>
             A new StringScsanner.
             </returns>
        </member>
        <member name="T:CsQuery.Engine.AttributeSelectors">
            <summary>
            Helper methods to perform matching against attribute-type selectors
            </summary>
        </member>
        <member name="M:CsQuery.Engine.AttributeSelectors.Matches(CsQuery.IDomElement,CsQuery.Engine.SelectorClause)">
             <summary>
             Test whether a single element matches a specific attribute selector.
             </summary>
            
             <param name="element">
             The element to test.
             </param>
             <param name="selector">
             The selector.
             </param>
            
             <returns>
             true if the element matches, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.AttributeSelectors.ContainsWord(System.String,System.String,System.StringComparer)">
             <summary>
             Test whether a sentence contains a word.
             </summary>
            
             <param name="sentence">
             The sentence.
             </param>
             <param name="word">
             The word.
             </param>
             <param name="comparer">
             The comparer.
             </param>
            
             <returns>
             true if it contains the word, false if not.
             </returns>
        </member>
        <member name="T:CsQuery.Engine.PseudoSelectors">
            <summary>
            Factory class for PseudoSelectors: provides an API for managing selectors.
            </summary>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.#ctor">
             <summary>
             Default constructor/.
             </summary>
            
             <exception cref="T:System.Exception">
             Throws an exception if an instance has already been assigned to the static Items property.
             This class should instantiate itself as a singleton.
             </exception>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.GetInstance(System.String)">
             <summary>
             Gets an instance of a named pseudoselector
             </summary>
            
             <exception cref="T:System.ArgumentException">
             Thrown when the pseudoselector does not exist
             </exception>
            
             <param name="name">
             The name of the pseudoselector
             </param>
            
             <returns>
             A new instance
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.GetRegisteredType(System.String)">
             <summary>
             Gets a registered pseudoclass filter type. If the name is not registered, an exception is
             thrown.
             </summary>
            
             <param name="name">
             The name of the pseudoselector.
             </param>
            
             <returns>
             The registered type.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.TryGetRegisteredType(System.String,System.Type@)">
             <summary>
             Try to get the type of a registered pseudoclass filter.
             </summary>
            
             <param name="name">
             The name of the pseudoselector.
             </param>
             <param name="type">
             The type.
             </param>
            
             <returns>
             true if it the named filter was found, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.TryGetInstance(System.String,CsQuery.Engine.IPseudoSelector@)">
             <summary>
             Try to gets an instance of a named pseudoclass filter.
             </summary>
            
             <param name="name">
             The name of the pseudoselector.
             </param>
             <param name="instance">
             [out] The new instance.
             </param>
            
             <returns>
             true if succesful, false if a pseudoselector of that name doesn't exist.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.Register(System.String,System.Type)">
             <summary>
             Registers a new PseudoSelector type by name.
             </summary>
            
             <param name="name">
             The name of the pseudoselector.
             </param>
             <param name="type">
             The type.
             </param>
            
             <exception cref="T:System.ArgumentException">
             Throws an exception when the type does not inherit IPseudoSelector.
             </exception>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.Register(System.Reflection.Assembly)">
             <summary>
             Registers all classes implementing IPseudoSelector in the namespace CsQuery.Extensions in the
             passed assembly. If no assembly is provided, then inspects the calling assembly instead.
             </summary>
            
             <remarks>
             This method is called when the LookForExtensions startup option is set. (This is the default
             setting).
             </remarks>
            
             <param name="assembly">
             The assembly to search.
             </param>
            
             <returns>
             The number of extensions added
             </returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.Unregister(System.String)">
             <summary>
             Unregisters the names pseudoclass filter.
             </summary>
            
             <param name="name">
             The name of the pseudoselector.
             </param>
        </member>
        <member name="P:CsQuery.Engine.PseudoSelectors.Items">
            <summary>
            Static instance of the PseudoSelectors singleton.
            </summary>
        </member>
        <member name="T:CsQuery.Engine.SelectorType">
            <summary>
            Bitfield of flags for specifying the SelectorType.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.SelectorType.All">
            <summary>
            Return all elements.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.SelectorType.Tag">
            <summary>
            Return only a specific tag/node name.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.SelectorType.ID">
            <summary>
            Return a specific ID.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.SelectorType.Class">
            <summary>
            Return elements containing a specific class.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.SelectorType.AttributeValue">
            <summary>
            Return elements matching an attribute type selector
            </summary>
        </member>
        <member name="F:CsQuery.Engine.SelectorType.PseudoClass">
            <summary>
            Return elements matching a pseudoclass filter selector.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.SelectorType.Elements">
            <summary>
            Return specific elements
            </summary>
        </member>
        <member name="F:CsQuery.Engine.SelectorType.HTML">
            <summary>
            Generate HTML.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.SelectorType.None">
            <summary>
            Return nothing.
            </summary>
        </member>
        <member name="T:CsQuery.Engine.AttributeSelectorType">
            <summary>
            Values that represent the type of attribute selector
            </summary>
        </member>
        <member name="F:CsQuery.Engine.AttributeSelectorType.Exists">
            <summary>
            The attribute exists.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.AttributeSelectorType.Equals">
            <summary>
            The attribute's value matches a specific value.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.AttributeSelectorType.StartsWith">
            <summary>
            The attribute's value starts with a specific value.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.AttributeSelectorType.Contains">
            <summary>
            The attribute's value contains a specified substring.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.AttributeSelectorType.NotExists">
            <summary>
            The attribute does not exist.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.AttributeSelectorType.ContainsWord">
            <summary>
            The attribute contains a complete word (e.g. a subtring bounded by whitespace).
            </summary>
        </member>
        <member name="F:CsQuery.Engine.AttributeSelectorType.EndsWith">
            <summary>
            The attribute ends with a specified substring.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.AttributeSelectorType.NotEquals">
            <summary>
            The attribute does not equal a string.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.AttributeSelectorType.StartsWithOrHyphen">
            <summary>
            The attribute value, or the part of the value before a hyphen (if present), matches a value
            </summary>
        </member>
        <member name="T:CsQuery.Engine.CombinatorType">
            <summary>
            Values that represent CombinatorType. This is a bit of a misnomer because Combinator is used
            in CSS selector-speak to refer to how one subpart of a selector relates to another.
            Unfortunately, I use it to refer to how one *group* of a selector relates to another. This is
            an internal concept, mostly, and is required to link subparts of a selector together.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.CombinatorType.Grouped">
            <summary>
             The results of this selector clause are grouped with the results of the prior, e.g. an "or" condition
            </summary>
        </member>
        <member name="F:CsQuery.Engine.CombinatorType.Chained">
            <summary>
            The selector clause is applied to the results of the prior one.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.CombinatorType.Root">
            <summary>
            The selector clause is applied to the root of this selector.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.CombinatorType.Context">
            <summary>
            The selector clause is applied to context.
            </summary>
        </member>
        <member name="T:CsQuery.Engine.TraversalType">
            <summary>
            Values that represent TraversalType. This is essentially what CSS calls "combinator" and
            defines the traversal mechanism used from one selector subpart to the next.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.TraversalType.All">
            <summary>
            Traverse the context itself and its descendants
            </summary>
        </member>
        <member name="F:CsQuery.Engine.TraversalType.Filter">
            <summary>
            The operand matches a subset of the prior selection.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.TraversalType.Descendent">
            <summary>
            The operand matches only descendants of the prior selection.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.TraversalType.Child">
            <summary>
            The operand matches only direct children of the prior selection.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.TraversalType.Adjacent">
            <summary>
            The operand matches only the element immediately following (adjacent to) the prior selection.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.TraversalType.Sibling">
            <summary>
            The operand matches all siblings of the prior selection.
            </summary>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassType">
            <summary>
            Position-type selectors match one or more element children of another element. The selection engine can either access all 
            matching children, or test a particular element for matching a selector
            </summary>
        </member>
        <member name="F:CsQuery.Engine.PseudoClassType.All">
            <summary>
            Matches everything (no filter)
            </summary>
        </member>
        <member name="F:CsQuery.Engine.PseudoClassType.Even">
            <summary>
            Filter for elements at even-numbered ordinal indices.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.PseudoClassType.Odd">
            <summary>
            Filter for elements at odd-numbered ordinal indices.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.PseudoClassType.First">
            <summary>
            Filter for only the first element in the selection.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.PseudoClassType.Last">
            <summary>
            Filter for only the last element in the selection.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.PseudoClassType.IndexEquals">
            <summary>
            Filter for a specific ordinal index in the sequence.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.PseudoClassType.IndexLessThan">
            <summary>
            Filter for elements appearing before a specific ordinal index.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.PseudoClassType.IndexGreaterThan">
            <summary>
            Filter for elements appearing after a specific ordinal index.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.PseudoClassType.Parent">
            <summary>
            Filter for elements that are parents.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.PseudoClassType.Visible">
            <summary>
            Filter for elements that are visible.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.PseudoClassType.Hidden">
            <summary>
            Filter for elements that are not visible (including type=hidden).
            </summary>
        </member>
        <member name="F:CsQuery.Engine.PseudoClassType.Header">
            <summary>
            Filter for header (H1-H6) tags.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.PseudoClassType.Has">
            <summary>
            Filter for elements that contain elements matching another selector.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.PseudoClassType.Not">
            <summary>
            Filter for elements that don't contain elements matching another selector.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.PseudoClassType.FirstChild">
            <summary>
            Elements that are first children.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.PseudoClassType.LastChild">
            <summary>
            Elements that are last children.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.PseudoClassType.NthChild">
            <summary>
            Elements that are nth children.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.PseudoClassType.FirstOfType">
            <summary>
            Elements that are the first child of their node type.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.PseudoClassType.LastOfType">
            <summary>
            Elements that are the last child of their node type.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.PseudoClassType.NthOfType">
            <summary>
            Elements that are the nth child of their node type.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.PseudoClassType.NthLastChild">
            <summary>
            Elements that are the nth to last child.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.PseudoClassType.NthLastOfType">
            <summary>
            Elements that are the nth to last child of their node type
            </summary>
        </member>
        <member name="F:CsQuery.Engine.PseudoClassType.OnlyChild">
            <summary>
            Elements that are only children.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.PseudoClassType.OnlyOfType">
            <summary>
            Elements that are the only children of their type.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.PseudoClassType.Empty">
            <summary>
            Elements that have no element or non-whitespace children.
            </summary>
        </member>
        <member name="T:CsQuery.Engine.SelectorParser">
            <summary>
            A class to parse a CSS selector string into a sequence of Selector objects
            </summary>
        </member>
        <member name="M:CsQuery.Engine.SelectorParser.Parse(System.String)">
            <summary>
            Parse the string, and return a sequence of Selector objects
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.SelectorParser.AddPseudoSelector(System.String)">
             <summary>
             Adds a named pseudo selector from the pseudoselector library.
             </summary>
            
             <param name="key">
             The pseudoselector name
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.SelectorParser.expectsOptionallyQuotedValue">
            <summary>
            A pattern for the operand of an attribute selector
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.SelectorParser.StartNewSelector(CsQuery.Engine.SelectorType)">
             <summary>
             Start a new chained filter selector of the specified type.
             </summary>
            
             <param name="selectorType">
             The selector type to start.
             </param>
        </member>
        <member name="M:CsQuery.Engine.SelectorParser.StartNewSelector(CsQuery.Engine.CombinatorType,CsQuery.Engine.TraversalType)">
            <summary>
            Start a new selector that does not yet have a type specified
            </summary>
            <param name="combinatorType"></param>
            <param name="traversalType"></param>
        </member>
        <member name="M:CsQuery.Engine.SelectorParser.StartNewSelector(CsQuery.Engine.TraversalType)">
            <summary>
            Start a new chained selector that does not yet have a type specified
            </summary>
            <param name="traversalType"></param>
        </member>
        <member name="M:CsQuery.Engine.SelectorParser.StartNewSelector(CsQuery.Engine.SelectorType,CsQuery.Engine.CombinatorType,CsQuery.Engine.TraversalType)">
            <summary>
            Close the currently active selector. If it's partial (e.g. a descendant/child marker) then merge its into into the 
            new selector created.
            </summary>
            <param name="selectorType"></param>
            <param name="combinatorType"></param>
            <param name="traversalType"></param>
        </member>
        <member name="M:CsQuery.Engine.SelectorParser.FinishSelector">
            <summary>
            Finishes any open selector and clears the current selector
            </summary>
        </member>
        <member name="M:CsQuery.Engine.SelectorParser.ClearCurrent">
            <summary>
            Clear the currently open selector
            </summary>
        </member>
        <member name="M:CsQuery.Engine.SelectorParser.IsHtml(System.String)">
            <summary>
            Return true of the text appears to be HTML (e.g. starts with a caret)
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="P:CsQuery.Engine.SelectorParser.Current">
            <summary>
            The currently active selector clause in the selector construction process. If none is active,
            a new one is started.
            </summary>
        </member>
        <member name="T:CsQuery.ExtensionMethods.Forms.ExtensionMethods">
            <summary>
            Extension methods for use in form manipulation
            </summary>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.FormValue(CsQuery.CQ,System.String)">
             <summary>
             Get the value for a particular form element identified by "#ID" or "name". This method will
             create a selector that identifies any input, select, button or textarea element by name
             attribute (if not passed an ID selector)
             </summary>
            
             <param name="obj">
             The CsQuery object to which this applies.
             </param>
             <param name="name">
             The name of the input element.
             </param>
            
             <returns>
             A string that represents the form field value.
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.FormValue``1(CsQuery.CQ,System.String)">
             <summary>
             Get the value for a particular form element identified by "#ID" or "name".
             </summary>
            
             <typeparam name="T">
             The type to cast the value to
             </typeparam>
             <param name="context">
             The context in which to find the element
             </param>
             <param name="name">
             The name of the form element
             </param>
            
             <returns>
             A value of type T
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.FormElement(CsQuery.CQ,System.String)">
             <summary>
             Return an element identified by "#id" or "name". (Special case selector to simplify accessing
             form elements).
             </summary>
            
             <exception cref="T:System.ArgumentException">
             Thrown if the name was invalid
             </exception>
            
             <param name="context">
             The context in which to find the element
             </param>
             <param name="name">
             The name of the form element
             </param>
            
             <returns>
             A CQ object with the form element.
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.RestorePost(CsQuery.CQ)">
             <summary>
             (BETA) Update form values from the HTTP post data in the current HttpContext.
             </summary>
            
             <param name="context">
             The context in which to find process form elements
             </param>
            
             <returns>
             The context
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.RestorePost(CsQuery.CQ,System.Collections.Specialized.NameValueCollection)">
             <summary>
             (Beta) Update form values from the data in collection provided.
             </summary>
            
             <param name="selection">
             The selections set to update form values within; only child elements of elements in the
             selection set will be processed.
             </param>
             <param name="postData">
             Information describing the post.
             </param>
            
             <returns>
             A CQ object with all form elements searched.
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.RestorePost(CsQuery.CQ,System.Web.HttpContext)">
             <summary>
             (Alpha) Update form values from the data in httpContext.Request.Form.
             </summary>
            
             <param name="selection">
             The selections set to update form values within; only child elements of elements in the
             selection set will be processed.
             </param>
             <param name="httpContext">
             The HttpContext from which to obtain post data
             </param>
            
             <returns>
             A CQ object with all form elements searched.
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.RestoreData(CsQuery.IDomElement,CsQuery.CQ,System.String)">
             <summary>
             Restore "value" to a single element.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="element">
             The element to restore a value to
             </param>
             <param name="csQueryContext">
             The context to which this element belongs
             </param>
             <param name="value">
             The value to restore
             </param>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.CreateDropDown(CsQuery.CQ,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String)">
             <summary>
             Build a dropdown list for each element in the selection set using name/value pairs from data.
             Note tha the "key" becomes the "value" on the element, and the "value" becomes the text
             assocaited with it.
             </summary>
            
             <param name="selection">
             The target on which to create the dropdown list
             </param>
             <param name="data">
             The data source for the dropdown list
             </param>
             <param name="zeroText">
             If non-null, the text for any zero value will be this instead of the enum's description.
             </param>
            
             <returns>
             The current CQ object
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.CreateDropDownFromEnum``1(CsQuery.CQ,System.String,System.Boolean)">
             <summary>
             Create a list from an enum's values &amp; descriptions.
             </summary>
            
             <exception cref="T:System.ArgumentException">
             Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            
             <typeparam name="T">
             Generic type parameter.
             </typeparam>
             <param name="selection">
             The select element on which to create the list
             </param>
             <param name="zeroText">
             If non-null, the text for any zero value will be this instead of the enum's description.
             </param>
             <param name="format">
             When true, will attempt to format camelcased values.
             </param>
            
             <returns>
             The new drop down from enum&lt; t&gt;
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.ToggleDisabled(CsQuery.CQ,System.Boolean)">
            <summary>
            Adds or removes the "enabled" property based on the parameter value
            </summary>
            <param name="selection"></param>
            <param name="addRemoveSwitch"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.Utility.FastActivator">
             <summary>
             Replacement for Activator.CreateInstance that caches the constructor fucnction, providing a
             significant performance improvement over Activator.CreateInstance. Calling with a value type
             will be deferred to Activator.CreateInstance.
             </summary>
             
            
             <url>
             http://mironabramson.com/blog/post/2008/08/Fast-version-of-the-ActivatorCreateInstance-method-using-IL.aspx
             </url>
        </member>
        <member name="M:CsQuery.Utility.FastActivator.CreateInstance``1">
             <summary>
             Create a new instance of type T
             </summary>
            
             <typeparam name="T">
             The type of object to create
             </typeparam>
            
             <returns>
             A new instance of type T
             </returns>
        </member>
        <member name="M:CsQuery.Utility.FastActivator.CreateInstance(System.Type)">
             <summary>
             Creates an instance.
             </summary>
            
             <param name="type">
             The Type to process.
             </param>
            
             <returns>
             The new instance.
             </returns>
        </member>
        <member name="T:CsQuery.Utility.Types">
            <summary>
            A set of helper methods for analyzing types.
            </summary>
        </member>
        <member name="M:CsQuery.Utility.Types.IsAnonymousType(System.Type)">
             <summary>
             Determine if the type is an anonymous type.
             </summary>
            
             <param name="type">
             A type/
             </param>
            
             <returns>
             true if anonymous type, false if not.
             </returns>
             <url>http://stackoverflow.com/questions/2483023/how-to-test-if-a-type-is-anonymous.</url>
        </member>
        <member name="T:CsQuery.Web.RequestState">
            <summary>
            Values that represent the current CsqWebRequest state. 
            NOT YET IMPLEMENTED
            </summary>
        </member>
        <member name="F:CsQuery.Web.RequestState.Idle">
            <summary>
            The request is idle.
            </summary>
        </member>
        <member name="F:CsQuery.Web.RequestState.Active">
            <summary>
            The request is in progress.
            </summary>
        </member>
        <member name="F:CsQuery.Web.RequestState.Fail">
            <summary>
            The request failed.
            </summary>
        </member>
        <member name="F:CsQuery.Web.RequestState.PartialSuccess">
            <summary>
            The request .
            </summary>
        </member>
        <member name="F:CsQuery.Web.RequestState.Success">
            <summary>
            The request finished successfully.
            </summary>
        </member>
        <member name="T:CsQuery.Web.ICsqWebRequestMetadata">
            <summary>
            Data about a web request.
            </summary>
        </member>
        <member name="P:CsQuery.Web.ICsqWebRequestMetadata.Timeout">
            <summary>
            The time, in milliseconds, after which to abort an incompete request.
            </summary>
        </member>
        <member name="P:CsQuery.Web.ICsqWebRequestMetadata.UserAgent">
            <summary>
            The UserAgent string to present to the remote server.
            </summary>
        </member>
        <member name="T:CsQuery.Web.WebForms">
            <summary>
            Utility class for integrating CsQuery with ASP.NET Webforms.
            </summary>
        </member>
        <member name="M:CsQuery.Web.WebForms.CreateFromRender(System.Web.UI.Page,System.Action{System.Web.UI.HtmlTextWriter},System.Web.UI.HtmlTextWriter)">
             <summary>
             Creates a new CsQueryHttpContext object bound to an ASP.NET WebForms page.
             </summary>
            
             <param name="page">
             The current System.Web.UI.Page.
             </param>
             <param name="renderMethod">
             The delegate to the base render method.
             </param>
             <param name="writer">
             The HtmlTextWriter to output the final stream (the parameter passed to the Render method)
             </param>
            
             <returns>
             A context which can be used to complete the Render after any manipulation with CsQuery.
             </returns>
        </member>
        <member name="M:CsQuery.Web.WebForms.CreateFromRender(System.Web.UI.Page,System.Action{System.Web.UI.HtmlTextWriter},System.Web.UI.HtmlTextWriter,System.Web.HttpContext)">
             <summary>
             Creates a new CSQuery object from a Page.Render method. The base Render method of a page
             should be overridden, and this called from inside it to configure the CsQUery.
             </summary>
            
             <param name="page">
             The current System.Web.UI.Page.
             </param>
             <param name="renderMethod">
             The delegate to the base render method.
             </param>
             <param name="writer">
             The HtmlTextWriter to output the final stream (the parameter passed to the Render method)
             </param>
             <param name="context">
             The context.
             </param>
            
             <returns>
             A context which can be used to complete the Render after any manipulation with CsQuery.
             </returns>
        </member>
        <member name="T:CsQuery.Output.FormatPlainText">
            <summary>
            A formatter that converts a DOM to a basic plain-text version.
            </summary>
        </member>
        <member name="M:CsQuery.Output.FormatPlainText.Render(CsQuery.IDomObject,System.IO.TextWriter)">
             <summary>
             Renders this object to the passed TextWriter.
             </summary>
            
             <param name="node">
             The node.
             </param>
             <param name="writer">
             The writer.
             </param>
        </member>
        <member name="M:CsQuery.Output.FormatPlainText.Render(CsQuery.IDomObject)">
             <summary>
             Renders this object and returns the output as a string.
             </summary>
            
             <param name="node">
             The node.
             </param>
            
             <returns>
             A string of HTML.
             </returns>
        </member>
        <member name="M:CsQuery.Output.FormatPlainText.AddContents(System.Text.StringBuilder,CsQuery.IDomObject,System.Boolean)">
             <summary>
             Adds the contents to 'node' to the StringBuilder.
             </summary>
            
             <param name="sb">
             The StringBuilder.
             </param>
             <param name="node">
             The node.
             </param>
             <param name="skipWhitespace">
             true to skip any leading whitespace for this node.
             </param>
        </member>
        <member name="M:CsQuery.Output.FormatPlainText.ToStandardLineEndings(System.String)">
             <summary>
             Converts the newline characters in a string to standard system line endings
             </summary>
            
             <param name="text">
             The text.
             </param>
            
             <returns>
             The converted string
             </returns>
        </member>
        <member name="M:CsQuery.Output.FormatPlainText.RemoveTrailingWhitespace(System.Text.StringBuilder)">
             <summary>
             Removes trailing whitespace in this StringBuilder
             </summary>
            
             <param name="sb">
             The StringBuilder.
             </param>
        </member>
        <member name="M:CsQuery.Output.FormatPlainText.CleanFragment(System.String)">
             <summary>
             Clean a string fragment for output as text
             </summary>
            
             <param name="text">
             The text.
             </param>
            
             <returns>
             The clean text
             </returns>
        </member>
        <member name="T:CsQuery.Promises.WhenAll">
            <summary>
            A promise that resolves when one or more other promises have all resolved
            </summary>
        </member>
        <member name="M:CsQuery.Promises.WhenAll.#ctor(CsQuery.Promises.IPromise[])">
             <summary>
             Constructor
             </summary>
            
             <param name="promises">
             A variable-length parameters list containing promises that must all resolve
             </param>
        </member>
        <member name="M:CsQuery.Promises.WhenAll.#ctor(System.Int32,CsQuery.Promises.IPromise[])">
             <summary>
             Constructor to create a promise that resolves when one or more other promises have all
             resolved or a timeout elapses.
             </summary>
            
             <param name="timeoutMilliseconds">
             The timeout in milliseconds.
             </param>
             <param name="promises">
             A variable-length parameters list containing promises that must all resolve.
             </param>
        </member>
        <member name="F:CsQuery.Promises.WhenAll.Success">
            <summary>
            When false, means one or more of the promises was rejected, and the All will be rejected.
            </summary>
        </member>
        <member name="M:CsQuery.Promises.WhenAll.Then(System.Delegate,System.Delegate)">
             <summary>
             Chains delegates that will be executed on success or failure of a promise.
             </summary>
            
             <param name="success">
             The delegate to call upon successful resolution of the promise.
             </param>
             <param name="failure">
             (optional) The delegate to call upon unsuccessful resolution of the promise.
             </param>
            
             <returns>
             A new promise which will resolve when this promise has resolved.
             </returns>
        </member>
        <member name="M:CsQuery.Promises.WhenAll.Then(System.Action,System.Action)">
             <summary>
             Chains delegates that will be executed on success or failure of a promise.
             </summary>
            
             <param name="success">
             The delegate to call upon successful resolution of the promise.
             </param>
             <param name="failure">
             (optional) The delegate to call upon unsuccessful resolution of the promise.
             </param>
            
             <returns>
             A new promise which will be chained to this promise.
             </returns>
        </member>
        <member name="M:CsQuery.Promises.WhenAll.Then(CsQuery.Promises.PromiseAction{System.Object},CsQuery.Promises.PromiseAction{System.Object})">
             <summary>
             Chains delegates that will be executed on success or failure of a promise.
             </summary>
            
             <param name="success">
             The delegate to call upon successful resolution of the promise.
             </param>
             <param name="failure">
             (optional) The delegate to call upon unsuccessful resolution of the promise.
             </param>
            
             <returns>
             A new promise which will resolve when this promise has resolved.
             </returns>
        </member>
        <member name="M:CsQuery.Promises.WhenAll.Then(System.Func{CsQuery.Promises.IPromise},System.Func{CsQuery.Promises.IPromise})">
             <summary>
             Chains delegates that will be executed on success or failure of a promise.
             </summary>
            
             <param name="success">
             The delegate to call upon successful resolution of the promise.
             </param>
             <param name="failure">
             (optional) The delegate to call upon unsuccessful resolution of the promise.
             </param>
            
             <returns>
             A new promise which will be chained to this promise.
             </returns>
        </member>
        <member name="M:CsQuery.Promises.WhenAll.Then(CsQuery.Promises.PromiseFunction{System.Object},CsQuery.Promises.PromiseFunction{System.Object})">
             <summary>
             Chains delegates that will be executed on success or failure of a promise.
             </summary>
            
             <param name="success">
             The delegate to call upon successful resolution of the promise.
             </param>
             <param name="failure">
             (optional) The delegate to call upon unsuccessful resolution of the promise.
             </param>
            
             <returns>
             A new promise which will resolve when this promise has resolved.
             </returns>
        </member>
        <member name="M:CsQuery.Promises.WhenAll.PromiseResolve">
            <summary>
            Called when a client promise is resolved.
            </summary>
        </member>
        <member name="M:CsQuery.Promises.WhenAll.PromiseReject">
            <summary>
            Called when a client promise is rejected.
            </summary>
        </member>
        <member name="T:CsQuery.When">
            <summary>
            A static provider for methods that produce Promise-related objects
            </summary>
        </member>
        <member name="M:CsQuery.When.Deferred">
             <summary>
             Returns a new Deferred object, an object containing a promise and resolver methods.
             </summary>
            
             <returns>
             A new Deferred object.
             </returns>
        </member>
        <member name="M:CsQuery.When.Deferred``1">
             <summary>
             Returns a new Deferred object, an object containing a promise and resolver methods.
             </summary>
            
             <typeparam name="T">
             Generic type parameter determining the type of parameter that will be passed to the resolvers
             </typeparam>
            
             <returns>
             A new Deferred object
             </returns>
        </member>
        <member name="M:CsQuery.When.All(CsQuery.Promises.IPromise[])">
             <summary>
             Returns a new promise that resolves when all of the promises passed by parameter have resolved
             </summary>
            
             <param name="promises">
             One or more IPromise objects
             </param>
            
             <returns>
             A new IPromise object
             </returns>
        </member>
        <member name="M:CsQuery.When.All(System.Int32,CsQuery.Promises.IPromise[])">
             <summary>
             Returns a new promise that resolves when all of the promises passed by parameter have
             resolved, or when the time has elapsed
             </summary>
            
             <param name="timeoutMilliseconds">
             The timeout in milliseconds.
             </param>
             <param name="promises">
             One or more IPromise objects.
             </param>
            
             <returns>
             A new IPromise object.
             </returns>
        </member>
        <member name="M:CsQuery.When.Timeout(System.Int32)">
             <summary>
             Return a promise that fails after the specified time. This is like Timer, but fails rather
             than succeeds after the time has elapsed.
             </summary>
            
             <param name="timeoutMilliseconds">
             The timeout in milliseconds.
             </param>
            
             <returns>
             A promise.
             </returns>
        </member>
        <member name="M:CsQuery.When.Timer(System.Int32)">
             <summary>
             Return a promise that resolves successfully after the specified time. 
             </summary>
            
             <param name="timerMilliseconds">
             The timeout in milliseconds.
             </param>
            
             <returns>
             A promise.
             </returns>
        </member>
        <member name="P:CsQuery.When.Debug">
            <summary>
            Gets or sets a value indicating whether objects in the Promises library should be created in
            debug mode. This affects Deferred.FailOnResolutionExceptions.
            </summary>
        </member>
        <member name="T:CsQuery.Promises.Deferred`1">
             <summary>
             A strongly-typed deferred object
             </summary>
            
             <typeparam name="T">
             Generic type parameter.
             </typeparam>
        </member>
        <member name="T:CsQuery.Promises.Deferred">
            <summary>
            A Deferred object. Deferred objects implement the IPromise interface, and have methods for
            resolving or rejecting the promise.
            </summary>
        </member>
        <member name="M:CsQuery.Promises.Deferred.#ctor">
            <summary>
            Default constuctor for a Deferred object.
            </summary>
        </member>
        <member name="F:CsQuery.Promises.Deferred.NextDeferred">
            <summary>
            The next deferred objected in the chain; resolved or rejected when any bound delegate is
            resolved or rejected./.
            </summary>
        </member>
        <member name="F:CsQuery.Promises.Deferred.Resolved">
            <summary>
            Indicates whether this object has been resolved yet. A null value means unresolved; true or
            false indicate success or failure.
            </summary>
        </member>
        <member name="F:CsQuery.Promises.Deferred.Parameter">
            <summary>
            The parameter that was passed with a resolution or rejection.
            </summary>
        </member>
        <member name="M:CsQuery.Promises.Deferred.Resolve(System.Object)">
             <summary>
             Resolves the promise.
             </summary>
            
             <param name="parm">
             (optional) a value passed to the promise delegate
             </param>
        </member>
        <member name="M:CsQuery.Promises.Deferred.Reject(System.Object)">
             <summary>
             Rejects the promise
             </summary>
            
             <param name="parm">
             (optional) a value passed to the promise delegate.
             </param>
        </member>
        <member name="M:CsQuery.Promises.Deferred.Then(System.Delegate,System.Delegate)">
             <summary>
             Chains a delegate to be invoked upon resolution or failure of the Deferred promise object.
             </summary>
            
             <param name="success">
             The delegate to call upon successful resolution of the promise.
             </param>
             <param name="failure">
             (optional) The delegate to call upon unsuccessful resolution of the promise.
             </param>
            
             <returns>
             A new promise which will resolve when this promise has resolved.
             </returns>
        </member>
        <member name="M:CsQuery.Promises.Deferred.Then(CsQuery.Promises.PromiseAction{System.Object},CsQuery.Promises.PromiseAction{System.Object})">
             <summary>
             Chains delegates that will be executed on success or failure of a promise.
             </summary>
            
             <param name="success">
             The delegate to call upon successful resolution of the promise.
             </param>
             <param name="failure">
             (optional) The delegate to call upon unsuccessful resolution of the promise.
             </param>
            
             <returns>
             A new promise which will resolve when this promise has resolved.
             </returns>
        </member>
        <member name="M:CsQuery.Promises.Deferred.Then(CsQuery.Promises.PromiseFunction{System.Object},CsQuery.Promises.PromiseFunction{System.Object})">
             <summary>
             Chains delegates that will be executed on success or failure of a promise.
             </summary>
            
             <param name="success">
             The delegate to call upon successful resolution of the promise.
             </param>
             <param name="failure">
             (optional) The delegate to call upon unsuccessful resolution of the promise.
             </param>
            
             <returns>
             A new promise which will resolve when this promise has resolved.
             </returns>
        </member>
        <member name="M:CsQuery.Promises.Deferred.Then(System.Action,System.Action)">
             <summary>
             Chains delegates that will be executed on success or failure of a promise.
             </summary>
            
             <param name="success">
             The delegate to call upon successful resolution of the promise.
             </param>
             <param name="failure">
             (optional) The delegate to call upon unsuccessful resolution of the promise.
             </param>
            
             <returns>
             A new promise which will be chained to this promise.
             </returns>
        </member>
        <member name="M:CsQuery.Promises.Deferred.Then(System.Func{CsQuery.Promises.IPromise},System.Func{CsQuery.Promises.IPromise})">
             <summary>
             Chains delegates that will be executed on success or failure of a promise.
             </summary>
            
             <param name="success">
             The delegate to call upon successful resolution of the promise.
             </param>
             <param name="failure">
             (optional) The delegate to call upon unsuccessful resolution of the promise.
             </param>
            
             <returns>
             A new promise which will be chained to this promise.
             </returns>
        </member>
        <member name="M:CsQuery.Promises.Deferred.GetParameters(System.Boolean)">
             <summary>
             Gets the parameters that should be invoked on the success/fail delegate.
             </summary>
            
             <param name="useParms">
             When true, the target delegate has parameters and this should return a non-null result.
             </param>
            
             <returns>
             The parameters.
             </returns>
        </member>
        <member name="M:CsQuery.Promises.Deferred.ResolveImpl">
            <summary>
            Implementation of the Resolve function.
            </summary>
        </member>
        <member name="M:CsQuery.Promises.Deferred.RejectImpl">
            <summary>
            Implementation of the Reject function
            </summary>
        </member>
        <member name="P:CsQuery.Promises.Deferred.Success">
            <summary>
            The success delegate
            </summary>
        </member>
        <member name="P:CsQuery.Promises.Deferred.Failure">
            <summary>
            The failure delegate
            </summary>
        </member>
        <member name="P:CsQuery.Promises.Deferred.FailOnResolutionExceptions">
            <summary>
            When false (default), errors thrown during promise resoluton will be turned into a rejected
            promise. If this is true, no error handling will occur, meaning that errors could bubble, or
            in the event that a promise was resolved by an asynchronous event, be unhandled. Typically,
            you would only want this to be false when debugging, as it could result in unhandled
            exceptions.
            </summary>
        </member>
        <member name="M:CsQuery.Promises.Deferred`1.Then(CsQuery.Promises.PromiseAction{`0},CsQuery.Promises.PromiseAction{`0})">
             <summary>
             Bind delegates to the success or failure of a promise
             </summary>
            
             <param name="success">
             The success delegate
             </param>
             <param name="failure">
             (optional) the failure delegate
             </param>
            
             <returns>
             A new promise that resolves when the current promise resolves.
             </returns>
        </member>
        <member name="M:CsQuery.Promises.Deferred`1.Then(CsQuery.Promises.PromiseFunction{`0},CsQuery.Promises.PromiseFunction{`0})">
             <summary>
             Bind delegates to the success or failure of a promise
             </summary>
            
             <param name="success">
             The success delegate
             </param>
             <param name="failure">
             (optional) the failure delegate
             </param>
            
             <returns>
             A new promise that resolves when the current promise resolves.
             </returns>
        </member>
        <member name="T:CsQuery.Promises.PromiseAction`1">
             <summary>
             An action accepting a single parameter that runs on a promise resolution.
             </summary>
            
             <typeparam name="T">
             The type of the parameter
             </typeparam>
             <param name="parameter">
             The parameter.
             </param>
        </member>
        <member name="T:CsQuery.Promises.PromiseFunction`1">
             <summary>
             An action accepting a single parameter that runs on a promise resolution, and returns another
             promise.
             </summary>
            
             <typeparam name="T">
             The type of the parameter
             </typeparam>
             <param name="parameter">
             The parameter.
             </param>
            
             <returns>
             A new promise that can be chained.
             </returns>
        </member>
        <member name="T:CsQuery.Utility.Browser">
            <summary>
            Provides information about the web browser used to access the current page (from HttpContext)
            </summary>
        </member>
        <member name="M:CsQuery.Utility.Browser.#ctor(System.Web.HttpContext)">
             <summary>
             Create a new instance from an HttpContext
             </summary>
            
             <param name="context">
             The context.
             </param>
        </member>
        <member name="P:CsQuery.Utility.Browser.MSIE">
            <summary>
            When true, indicates that the browser is Microsoft Internet Explorer of any version.
            </summary>
        </member>
        <member name="P:CsQuery.Utility.Browser.Chrome">
            <summary>
            When true, indicates that the browser is Google Chrome of any version.
            </summary>
        </member>
        <member name="P:CsQuery.Utility.Browser.Version">
            <summary>
            Gets the complete version number of the browser
            </summary>
        </member>
        <member name="P:CsQuery.Utility.Browser.VersionMajor">
            <summary>
            Gets the major version number of the browsers.
            </summary>
        </member>
        <member name="T:CsQuery.Utility.IJsonSerializer">
            <summary>
            Interface fora  JSON serializer.
            </summary>
        </member>
        <member name="M:CsQuery.Utility.IJsonSerializer.Serialize(System.Object)">
             <summary>
             Serializes an object to JSON
             </summary>
            
             <param name="value">
             The object to serialize
             </param>
            
             <returns>
             A JSON string
             </returns>
        </member>
        <member name="M:CsQuery.Utility.IJsonSerializer.Deserialize(System.String,System.Type)">
             <summary>
             Deserializes a string of JSON to a CLR object
             </summary>
            
             <param name="json">
             The JSON.
             </param>
             <param name="type">
             The type of object to create
             </param>
            
             <returns>
             An object
             </returns>
        </member>
        <member name="M:CsQuery.Utility.IJsonSerializer.Deserialize``1(System.String)">
             <summary>
             Deserializes a string of JSON to a strongly-typed object
             </summary>
            
             <typeparam name="T">
             The type of object
             </typeparam>
             <param name="json">
             The JSON.
             </param>
            
             <returns>
             A new object of type T
             </returns>
        </member>
        <member name="T:CsQuery.Utility.JsonSerializer">
            <summary>
            TODO: This class needs some help. While not thrilled about the idea of writing another JSON
            serializer, CsQuery does some unique handling for serialization &amp;  deserialization, e.g.
            mapping sub-objects to expando objects.
            
            We can do a post-op parsing from any other JSON serializer (such as we are doing now) but
            this doubles the overhead required. Look at a customized implementation from Newtonsoft,
            though any customization makes it difficult to use a simple strategy for drop-in replacement
            of the serializer. Perhaps implement an interface for a serializer wrapper class that lets us
            pass any generic serializer that performs needed post-op substitutions as part of the base
            library, with an optimized native implementation?
            </summary>
        </member>
        <member name="F:CsQuery.Utility.JsonSerializer._Serializer">
            <summary>
             The real serializer implementation. We need to set up a DI contiainer to manage this (see todo above)
            </summary>
        </member>
        <member name="M:CsQuery.Utility.JsonSerializer.Serialize(System.Object)">
             <summary>
             Serializes an object to JSON
             </summary>
            
             <param name="value">
             The object to serialize
             </param>
            
             <returns>
             A JSON string
             </returns>
        </member>
        <member name="M:CsQuery.Utility.JsonSerializer.Deserialize(System.String,System.Type)">
             <summary>
             Deserializes a JSON string to an object of the specified type
             </summary>
            
             <param name="value">
             The JSON string
             </param>
             <param name="type">
             The type of object to create
             </param>
            
             <returns>
             A new object of the specified type
             </returns>
        </member>
        <member name="M:CsQuery.Utility.JsonSerializer.Deserialize``1(System.String)">
             <summary>
             Deserializes a JSON string to an object of type T.
             </summary>
            
             <typeparam name="T">
             Generic type parameter defining the type of object to return.
             </typeparam>
             <param name="value">
             The value.
             </param>
            
             <returns>
             A new object of type T.
             </returns>
        </member>
        <member name="M:CsQuery.Utility.JsonSerializer.IsDictionary(System.Object)">
             <summary>
             Test if value implements IDictionary&lt;,&gt;
             </summary>
            
             <param name="value">
             The value.
             </param>
            
             <returns>
             true if a dictionary, false if not.
             </returns>
        </member>
        <member name="T:CsQuery.Implementation.SelectionSetComparer">
            <summary>
            A comparer to ensure that items are returned from a selection set in DOM order, e.g. by comparing their
            internal paths.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.SelectionSetComparer.#ctor(CsQuery.Implementation.SelectionSetOrder)">
             <summary>
             Constructor.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="order">
             The order used to compare two items. This must be Ascending or Descending
             </param>
        </member>
        <member name="M:CsQuery.Implementation.SelectionSetComparer.Compare(CsQuery.IDomObject,CsQuery.IDomObject)">
             <summary>
             Compares two IDomObject objects to determine their relative ordering.
             </summary>
            
             <param name="x">
             I dom object to be compared.
             </param>
             <param name="y">
             I dom object to be compared.
             </param>
            
             <returns>
             Negative if 'x' is less than 'y', 0 if they are equal, or positive if it is greater.
             </returns>
        </member>
        <member name="T:CsQuery.Web.AsyncWebRequestManager">
            <summary>
            A controller for creating and managing asynchronous web requests
            </summary>
        </member>
        <member name="M:CsQuery.Web.AsyncWebRequestManager.StartAsyncWebRequest(System.String,System.Action{CsQuery.Web.ICsqWebResponse},System.Action{CsQuery.Web.ICsqWebResponse},CsQuery.Web.ServerConfig)">
             <summary>
             Start an async request, and return a unique ID that identifies it.
             </summary>
            
             <param name="url">
             The URL of the remote server.
             </param>
             <param name="success">
             A delegate to invoke upon successful completion of the request.
             </param>
             <param name="fail">
             A delegate to invoke when a request fails.
             </param>
             <param name="options">
             Options to be used when creating this request. If not provided, the default options will be
             used.
             </param>
            
             <returns>
             A unique identifier that can be used to track this request when it resolves.
             </returns>
        </member>
        <member name="M:CsQuery.Web.AsyncWebRequestManager.StartAsyncWebRequest(CsQuery.Web.ICsqWebRequest,System.Action{CsQuery.Web.ICsqWebResponse},System.Action{CsQuery.Web.ICsqWebResponse})">
             <summary>
             Start an async request from an ICsqWebRequest object
             </summary>
            
             <param name="request">
             The URL of the remote server.
             </param>
             <param name="success">
             A delegate to invoke upon successful completion of the request.
             </param>
             <param name="fail">
             A delegate to invoke when a request fails.
             </param>
        </member>
        <member name="M:CsQuery.Web.AsyncWebRequestManager.StartAsyncWebRequest(System.String,System.Action{CsQuery.Web.ICsqWebResponse},System.Action{CsQuery.Web.ICsqWebResponse},System.Int32,CsQuery.Web.ServerConfig)">
             <summary>
             Start an async request identified by a user-supplied ID.
             </summary>
            
             <param name="url">
             The URL of the remote server.
             </param>
             <param name="success">
             A delegate to invoke upon successful completion of the request.
             </param>
             <param name="fail">
             A delegate to invoke when a request fails.
             </param>
             <param name="id">
             The identifier.
             </param>
             <param name="options">
             Options to be used when creating this request. If not provided, the default options will be
             used.
             </param>
        </member>
        <member name="M:CsQuery.Web.AsyncWebRequestManager.WaitForAsyncEvents(System.Int32)">
             <summary>
             Waits until all async events have completed. Use for testing primarily as a web app should
             not stop normally.
             </summary>
            
             <param name="millisecondsTimeout">
             The maximum number of milliseconds to wait.
             </param>
            
             <returns>
             true if all events were cleared in the allotted time, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Web.AsyncWebRequestManager.CancelAsyncEvents">
            <summary>
            Cancel all outstanding async events.
            </summary>
        </member>
        <member name="M:CsQuery.Web.AsyncWebRequestManager.GetAsyncRequestID">
             <summary>
             Gets the asynchronous request identifier.
             </summary>
            
             <returns>
             The asynchronous request identifier.
             </returns>
        </member>
        <member name="T:CsQuery.Web.ICsqWebResponse">
            <summary>
            Interface for a CsQuery async web response.
            </summary>
        </member>
        <member name="T:CsQuery.Web.ICsqWebRequest">
            <summary>
            Interface representing a CsQuery web request.
            </summary>
        </member>
        <member name="P:CsQuery.Web.ICsqWebRequest.Url">
            <summary>
            The url to load.
            </summary>
        </member>
        <member name="P:CsQuery.Web.ICsqWebRequest.Dom">
            <summary>
            The CQ object representing the contents of the URL.
            </summary>
        </member>
        <member name="P:CsQuery.Web.ICsqWebRequest.Complete">
            <summary>
            Returns true when this request has finished processing.
            </summary>
        </member>
        <member name="P:CsQuery.Web.ICsqWebRequest.Id">
            <summary>
            An ID that uniquely identifies this request; will be returned with the response for
            asynchronous requests.
            </summary>
        </member>
        <member name="P:CsQuery.Web.ICsqWebResponse.Html">
            <summary>
            The HTML returned by the response
            </summary>
        </member>
        <member name="P:CsQuery.Web.ICsqWebResponse.Started">
            <summary>
            Gets the time the request began
            </summary>
        </member>
        <member name="P:CsQuery.Web.ICsqWebResponse.Finished">
            <summary>
            Gets the time the request finished.
            </summary>
        </member>
        <member name="P:CsQuery.Web.ICsqWebResponse.Success">
            <summary>
            Gets a value indicating whether the request completed successfully.
            </summary>
        </member>
        <member name="P:CsQuery.Web.ICsqWebResponse.HttpStatus">
            <summary>
            The HTTP status code for the response.
            </summary>
        </member>
        <member name="P:CsQuery.Web.ICsqWebResponse.HttpStatusDescription">
            <summary>
            The HTTP status description for the response.
            </summary>
        </member>
        <member name="P:CsQuery.Web.ICsqWebResponse.Error">
            <summary>
            Text of any error that occurred
            </summary>
        </member>
        <member name="P:CsQuery.Web.ICsqWebResponse.WebException">
            <summary>
            If the request resulted in an exception, the exception.
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.IRangeSortedDictionary`1">
            <summary>
            A sorted dictionary that allows lookup by range.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.IRangeSortedDictionary`1.GetRangeKeys(System.String)">
            <summary>
            Return all keys starting with subKey
            </summary>
            <param name="subKey">The substring to match</param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Implementation.IRangeSortedDictionary`1.GetRange(System.String)">
            <summary>
            Return all values having keys beginning with subKey
            </summary>
            <param name="subKey"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.Engine.SelectorClause">
            <summary>
            A CSS selector parsed into it's component parts
            </summary>
        </member>
        <member name="M:CsQuery.Engine.SelectorClause.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CsQuery.Engine.SelectorClause.Initialize">
            <summary>
            Initializes this object to its default state
            </summary>
        </member>
        <member name="M:CsQuery.Engine.SelectorClause.Clear">
            <summary>
            Clears this object to its blank/initial state.
            </summary>
        </member>
        <member name="M:CsQuery.Engine.SelectorClause.Clone">
             <summary>
             Makes a deep copy of this Selector.
             </summary>
            
             <returns>
             A copy of this object.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.SelectorClause.GetHashCode">
             <summary>
             Serves as a hash function for a particular type.
             </summary>
            
             <returns>
             A hash code for the current <see cref="T:System.Object" />.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.SelectorClause.Equals(System.Object)">
             <summary>
             Determines whether the specified <see cref="T:System.Object" /> is equal to the current
             <see cref="T:System.Object" />.
             </summary>
            
             <param name="obj">
             The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.
             </param>
            
             <returns>
             true if the specified <see cref="T:System.Object" /> is equal to the current
             <see cref="T:System.Object" />; otherwise, false.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.SelectorClause.GetHash(System.Object)">
             <summary>
             Gets a hash.
             </summary>
            
             <param name="obj">
             The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.
             </param>
            
             <returns>
             The hash.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.SelectorClause.ToString">
             <summary>
             Returns a string representation of the parsed selector. This may not exactly match the input
             selector as it is regenerated.
             </summary>
            
             <returns>
             A CSS selector string.
             </returns>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.SelectorType">
            <summary>
            The type of the selector clause.
            </summary>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.CombinatorType">
            <summary>
            The CombinatorType for this selector clause; this determines what set of elements it is applied to.
            </summary>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.TraversalType">
            <summary>
            The TraversalType for this clause; this determines the depth of children to test for certain selector types.
            </summary>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.AttributeSelectorType">
            <summary>
            The AttributeSelectorType determines how values are matched for attribute selectors.
            </summary>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.PseudoSelector">
             <summary>
             When this is a pseudoselector, the implementation.
             </summary>
            
             <value>
             The pseudo selector.
             </value>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.Tag">
            <summary>
            Selection tag name
            </summary>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.Criteria">
            <summary>
            This is really "parameters" and is used differently by different selectors. It's the criteria for attribute selectors;
            the node type for -of-type selectors, the equation for nth-child. For nth-of-type, its "type|equation"
            </summary>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.PositionIndex">
            <summary>
            Gets or sets zero-based index of the position.
            </summary>
            <summary>
            For Position selectors, the position. Negative numbers start from the end.
            </summary>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.ChildDepth">
            <summary>
            For Child selectors, the depth of the child.
            </summary>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.AttributeName">
            <summary>
            For attribute selectors, gets or sets the name of the attribute to match 
            </summary>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.AttributeValue">
            <summary>
            For AttributeValue selectors, the value to match
            </summary>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.AttributeNameTokenID">
            <summary>
            Gets or sets the identifier of the attribute name token.
            </summary>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.AttributeValueStringComparison">
            <summary>
            Returns a string comparer based on the case-sensitivity characteristics of the attribute being tested
            </summary>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.AttributeValueStringComparer">
            <summary>
            Returns a string comparer based on the case-sensitivity characteristics of the attribute being tested
            </summary>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.Class">
            <summary>
            For Class selectors, the class name to match
            </summary>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.ID">
            <summary>
            For ID selectors, the ID to match
            </summary>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.Html">
            <summary>
            The HTML to create, for HTML "selectors"
            </summary>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.SelectElements">
            <summary>
            The list of elements that should be matched, for elements selectors.
            </summary>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.IsDomPositionPseudoSelector">
            <summary>
            Gets a value indicating whether this object is a selector that is based on the element's
            position in the DOM, versus the element's position in the result set.
            </summary>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.IsResultListPosition">
            <summary>
            Indicates that a position type selector refers to the result list, not the DOM position.
            </summary>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.IsFunction">
            <summary>
            Gets a value indicating whether this selector accepts parameters.
            </summary>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.IsNew">
            <summary>
            Gets a value indicating whether this Selector is new (unconfigured).
            </summary>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.IsComplete">
            <summary>
            Gets a value indicating whether this object is completely configured.
            </summary>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.NoIndex">
            <summary>
            When true do not attempt to use the index to obtain a result from this selector. Used for
            automatically generated filters.
            </summary>
        </member>
        <member name="T:CsQuery.CSSStyleType">
            <summary>
            Values that represent data types of CSS Styles.
            </summary>
        </member>
        <member name="F:CsQuery.CSSStyleType.Unit">
            <summary>
            A unit 
            </summary>
        </member>
        <member name="F:CsQuery.CSSStyleType.Option">
            <summary>
            An option
            </summary>
        </member>
        <member name="F:CsQuery.CSSStyleType.UnitOption">
            <summary>
            A unit and an option.
            </summary>
        </member>
        <member name="F:CsQuery.CSSStyleType.Composite">
            <summary>
            A complex style definition.
            </summary>
        </member>
        <member name="F:CsQuery.CSSStyleType.Color">
            <summary>
            A named color
            </summary>
        </member>
        <member name="F:CsQuery.CSSStyleType.Font">
            <summary>
            A font name.
            </summary>
        </member>
        <member name="F:CsQuery.CSSStyleType.Url">
            <summary>
            A url.
            </summary>
        </member>
        <member name="F:CsQuery.CSSStyleType.String">
            <summary>
            A string of text.
            </summary>
        </member>
        <member name="T:CsQuery.DocType">
            <summary>
            Values that represent the HTML document type.
            </summary>
        </member>
        <member name="F:CsQuery.DocType.Default">
            <summary>
            Use the default doc type (from CsQuery.Config.DocType).
            </summary>
        </member>
        <member name="F:CsQuery.DocType.HTML5">
            <summary>
            HTML5
            </summary>
        </member>
        <member name="F:CsQuery.DocType.HTML4">
            <summary>
            HTML 4 Transitional
            </summary>
        </member>
        <member name="F:CsQuery.DocType.XHTML">
            <summary>
            XHTML -- all tags will be explicitly closed.
            </summary>
        </member>
        <member name="F:CsQuery.DocType.Unknown">
            <summary>
            An unsupported document type.
            </summary>
        </member>
        <member name="F:CsQuery.DocType.HTML4Strict">
            <summary>
            HTML 4 Strict
            </summary>
        </member>
        <member name="T:CsQuery.DomRenderingOptions">
            <summary>
            Flags specifying how the document should be rendered
            </summary>
        </member>
        <member name="F:CsQuery.DomRenderingOptions.None">
            <summary>
            No option flags. This is not the same as "default", but rather explicitly uses "false" values for all flags.
            </summary>
        </member>
        <member name="F:CsQuery.DomRenderingOptions.Default">
            <summary>
            Render with default options as determined by CsQuery.Config.DomRenderingOptions
            </summary>
        </member>
        <member name="F:CsQuery.DomRenderingOptions.RemoveMismatchedCloseTags">
            <summary>
            This option only appies to the old HTML parser. It is obsolete, has no effect, and will be
            removed in a future version of CsQuery.
            </summary>
        </member>
        <member name="F:CsQuery.DomRenderingOptions.RemoveComments">
            <summary>
            Remove comments from the output
            </summary>
        </member>
        <member name="F:CsQuery.DomRenderingOptions.QuoteAllAttributes">
            <summary>
            Add quotes around each attribute value, whether or not they are needed. The alternative is to only 
            use quotes when they are necesssary to delimit the value (e.g. because it includes spaces or other quote characters)
            </summary>
        </member>
        <member name="T:CsQuery.NodeType">
            <summary>
            Values that represent NodeType.
            </summary>
        </member>
        <member name="F:CsQuery.NodeType.ELEMENT_NODE">
            <summary>
            An element node.
            </summary>
        </member>
        <member name="F:CsQuery.NodeType.TEXT_NODE">
            <summary>
            A text node.
            </summary>
        </member>
        <member name="F:CsQuery.NodeType.CDATA_SECTION_NODE">
            <summary>
            A CDATA node.
            </summary>
        </member>
        <member name="F:CsQuery.NodeType.COMMENT_NODE">
            <summary>
            A comment node.
            </summary>
        </member>
        <member name="F:CsQuery.NodeType.DOCUMENT_NODE">
            <summary>
            A document node.
            </summary>
        </member>
        <member name="F:CsQuery.NodeType.DOCUMENT_TYPE_NODE">
            <summary>
            The DOCTYPE node.
            </summary>
        </member>
        <member name="F:CsQuery.NodeType.DOCUMENT_FRAGMENT_NODE">
            <summary>
            A document fragment node.
            </summary>
        </member>
        <member name="T:CsQuery.ICSSStyle">
            <summary>
            A single CSS style definition.
            </summary>
        </member>
        <member name="P:CsQuery.ICSSStyle.Name">
            <summary>
            The name of the style
            </summary>
        </member>
        <member name="P:CsQuery.ICSSStyle.Type">
            <summary>
            The type of data contained by this style.
            </summary>
        </member>
        <member name="P:CsQuery.ICSSStyle.Format">
            <summary>
            Gets or sets a format required by this style
            </summary>
        </member>
        <member name="P:CsQuery.ICSSStyle.Options">
            <summary>
            The acceptable options for Option-type styles
            </summary>
        </member>
        <member name="P:CsQuery.ICSSStyle.Description">
            <summary>
            A description of this style.
            </summary>
        </member>
        <member name="T:CsQuery.ICSSStyleDeclaration">
            <summary>
            Interface defining the style declaration for a DOM element.
            </summary>
        </member>
        <member name="M:CsQuery.ICSSStyleDeclaration.HasStyle(System.String)">
             <summary>
             Test whether a named style is defined on an element.
             </summary>
            
             <param name="styleName">
             The name of the style.
             </param>
            
             <returns>
             true if the style is explicitly defined on this element, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.ICSSStyleDeclaration.SetStyles(System.String)">
             <summary>
             Sets one or more styles on the element.
             </summary>
            
             <param name="styles">
             The semicolon-separated style definitions.
             </param>
        </member>
        <member name="M:CsQuery.ICSSStyleDeclaration.SetStyles(System.String,System.Boolean)">
             <summary>
             Sets one or more styles on the element.
             </summary>
            
             <param name="styles">
             The semicolon-separated style definitions.
             </param>
             <param name="strict">
             When true, the styles will be validated for correct sytax, and an error thrown if they fail.
             </param>
        </member>
        <member name="M:CsQuery.ICSSStyleDeclaration.SetStyle(System.String,System.String)">
             <summary>
             Sets a style identified by name to a value.
             </summary>
            
             <param name="name">
             The name.
             </param>
             <param name="value">
             The value.
             </param>
        </member>
        <member name="M:CsQuery.ICSSStyleDeclaration.SetStyle(System.String,System.String,System.Boolean)">
             <summary>
             Sets a style identified by name to a value.
             </summary>
            
             <param name="name">
             The name.
             </param>
             <param name="value">
             The value.
             </param>
             <param name="strict">
             When true, the styles will be validated for correct sytax, and an error thrown if they fail.
             </param>
        </member>
        <member name="M:CsQuery.ICSSStyleDeclaration.GetStyle(System.String)">
             <summary>
             Gets a named style.
             </summary>
            
             <param name="name">
             The name.
             </param>
            
             <returns>
             The style.
             </returns>
        </member>
        <member name="M:CsQuery.ICSSStyleDeclaration.RemoveStyle(System.String)">
             <summary>
             Removes the style from the style descriptor for this element.
             </summary>
            
             <param name="name">
             The name.
             </param>
            
             <returns>
             true if it succeeds, false if it fails. this can only fail if the style was not present.
             </returns>
        </member>
        <member name="P:CsQuery.ICSSStyleDeclaration.Length">
            <summary>
            The number of properties that have been explicitly set in this declaration block.
            </summary>
        </member>
        <member name="P:CsQuery.ICSSStyleDeclaration.CssText">
            <summary>
            The parsable textual representation of the declaration block (excluding the surrounding curly
            braces). Setting this attribute will result in the parsing of the new value and resetting of
            all the properties in the declaration block including the removal or addition of properties.
            </summary>
        </member>
        <member name="P:CsQuery.ICSSStyleDeclaration.ParentRule">
            <summary>
            The CSS rule that contains this declaration block or null if this CSSStyleDeclaration is not
            attached to a CSSRule.
            </summary>
        </member>
        <member name="E:CsQuery.ICSSStyleDeclaration.OnHasStylesChanged">
            <summary>
            Event raised when the HasStyles attribute changes
            </summary>
        </member>
        <member name="T:CsQuery.IDomCData">
            <summary>
            A marker interface for CDATA elements.
            </summary>
        </member>
        <member name="T:CsQuery.IDomSpecialElement">
            <summary>
            Interface for an IDomSpecialElement; and element whose data is contained as non-structured
            data in the tag itself.
            </summary>
        </member>
        <member name="P:CsQuery.IDomSpecialElement.NonAttributeData">
            <summary>
            Gets or sets the non-structured data in the tag
            </summary>
        </member>
        <member name="T:CsQuery.IDomComment">
            <summary>
            An interface for HTML Comment elements.
            </summary>
        </member>
        <member name="P:CsQuery.IDomComment.IsQuoted">
            <summary>
            Gets or sets a value indicating whether this object is quoted.
            </summary>
        </member>
        <member name="T:CsQuery.IDomDocument">
            <summary>
            An interface to a DOM Document, the high-level representation of an HTML document. This is
            analagous to the web browser "document" object.
            </summary>
        </member>
        <member name="M:CsQuery.IDomDocument.GetElementById(System.String)">
             <summary>
             Returns a reference to the element by its ID.
             </summary>
            
             <param name="id">
             The identifier.
             </param>
            
             <returns>
             The element by identifier.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/document.getElementById
             </url>
        </member>
        <member name="M:CsQuery.IDomDocument.GetElementById``1(System.String)">
             <summary>
             Gets an element by identifier, and return a strongly-typed interface
             </summary>
            
             <typeparam name="T">
             Generic type parameter.
             </typeparam>
             <param name="id">
             The identifier.
             </param>
            
             <returns>
             The element by id&lt; t&gt;
             </returns>
        </member>
        <member name="M:CsQuery.IDomDocument.CreateElement(System.String)">
             <summary>
             Creates the specified HTML element.
             </summary>
            
             <param name="nodeName">
             Name of the node.
             </param>
            
             <returns>
             The new element.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/document.createElement
             </url>
        </member>
        <member name="M:CsQuery.IDomDocument.CreateTextNode(System.String)">
             <summary>
             Creates a new Text node.
             </summary>
            
             <param name="text">
             The text.
             </param>
            
             <returns>
             The new text node.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/document.createTextNode
             </url>
        </member>
        <member name="M:CsQuery.IDomDocument.CreateComment(System.String)">
             <summary>
             Creates a new comment.
             </summary>
            
             <param name="comment">
             The comment.
             </param>
            
             <returns>
             The new comment.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/document.createComment
             </url>
        </member>
        <member name="M:CsQuery.IDomDocument.CreateDocumentType(System.String,System.String,System.String)">
             <summary>
             Creates a document type node.
             </summary>
            
             <param name="type">
             The type.
             </param>
             <param name="publicIdentifier">
             The public type identifier.
             </param>
             <param name="systemIdentifier">
             The system type identifier.
             </param>
            
             <returns>
             The new document type.
             </returns>
        </member>
        <member name="M:CsQuery.IDomDocument.QuerySelector(System.String)">
             <summary>
             Returns the first element within the document (using depth-first pre-order traversal of the
             document's nodes) that matches the specified group of selectors.
             </summary>
            
             <param name="selector">
             The selector.
             </param>
            
             <returns>
             An element, the first that matches the selector.
             </returns>
            
             <url>
             https://developer.mozilla.org/En/DOM/Document.querySelector
             </url>
        </member>
        <member name="M:CsQuery.IDomDocument.QuerySelectorAll(System.String)">
             <summary>
             Returns a list of the elements within the document (using depth-first pre-order traversal of
             the document's nodes) that match the specified group of selectors.
             </summary>
            
             <param name="selector">
             The selector.
             </param>
            
             <returns>
             A sequence of elements matching the selector.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/Document.querySelectorAll
             </url>
        </member>
        <member name="M:CsQuery.IDomDocument.GetElementsByTagName(System.String)">
             <summary>
             Returns a list of elements with the given tag name. The subtree underneath the specified
             element is searched, excluding the element itself.
             </summary>
            
             <remarks>
             Unlike the browser DOM version, this list is not live; it will represent the selection at the
             time the query was run.
             </remarks>
            
             <param name="tagName">
             Name of the tag.
             </param>
            
             <returns>
             The element by tag name.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.getElementsByTagName
             </url>
        </member>
        <member name="M:CsQuery.IDomDocument.CreateNew``1">
             <summary>
             Creates an IDomDocument that is derived from this one. The new type can also be a derived
             type, such as IDomFragment. The new object will inherit DomRenderingOptions from this one.
             </summary>
            
             <typeparam name="T">
             The type of object to create that is IDomDocument
             </typeparam>
            
             <returns>
             A new, empty concrete class that is represented by the interface T, configured with the same
             options as the current object.
             </returns>
        </member>
        <member name="M:CsQuery.IDomDocument.CreateNew">
             <summary>
             Creates an IDomDocument that is derived from this one. The new type can also be a derived
             type, such as IDomFragment. The new object will inherit DomRenderingOptions from this one.
             </summary>
            
             <returns>
             The new Document.
             </returns>
        </member>
        <member name="P:CsQuery.IDomDocument.DocumentIndex">
            <summary>
            An interface to the internal indexing methods. You generally should not use this.
            </summary>
        </member>
        <member name="P:CsQuery.IDomDocument.DocTypeNode">
            <summary>
            Gets the document type node for this document, or null if none exists.
            </summary>
        </member>
        <member name="P:CsQuery.IDomDocument.DocType">
            <summary>
            Returns the document type of this document. If no DOCTYPE node exists, this will return the default
            document type defined through the CsQuery.Options variable.
            </summary>
        </member>
        <member name="P:CsQuery.IDomDocument.StyleSheets">
            <summary>
            Gets the style sheets for this document. (This feature is not implemented completely).
            </summary>
        </member>
        <member name="P:CsQuery.IDomDocument.Body">
            <summary>
            Return the body element for this Document.
            </summary>
        </member>
        <member name="T:CsQuery.IDomDocumentType">
            <summary>
            DOCTYPE node
            </summary>
        </member>
        <member name="P:CsQuery.IDomDocumentType.DocType">
            <summary>
            Gets the type of the document.
            </summary>
        </member>
        <member name="T:CsQuery.IDomFragment">
            <summary>
            Interface for a fragment. This is content that does not represent a complete HTML document.
            </summary>
        </member>
        <member name="T:CsQuery.IDomInnerText">
            <summary>
            Special element for the text contents of SCRIPT &amp; TEXTAREA objects.
            </summary>
        </member>
        <member name="T:CsQuery.IDomText">
            <summary>
            Defines an interface for elements whose defintion (not innerhtml) contain non-tag or attribute formed data
            </summary>
        </member>
        <member name="T:CsQuery.IDomInvalidElement">
            <summary>
            An element that will be rendered as text because it was determined to be a mismatched tag
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.CssStyle">
            <summary>
            A single CSS style definition.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.CssStyle.Name">
            <summary>
            The name of the style.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.CssStyle.Type">
            <summary>
            The type of data contained by this style.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.CssStyle.Format">
            <summary>
            Gets or sets a format required by this style.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.CssStyle.Description">
            <summary>
            A description of this style.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.CssStyle.Options">
            <summary>
            The acceptable options for Option-type styles.
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.DomFragment">
            <summary>
            An incomplete document fragment
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.DomDocument">
            <summary>
            Special node type to represent the DOM.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.Create">
             <summary>
             Creates a new, empty DomDocument
             </summary>
            
             <returns>
             A new DomDocument
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.Create(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},CsQuery.HtmlParsingMode,CsQuery.DocType)">
             <summary>
             Creates a new DomDocument (or derived object) using the options specified.
             </summary>
            
             <param name="elements">
             The elements that are the source for the new document.
             </param>
             <param name="parsingMode">
             (optional) the parsing mode.
             </param>
             <param name="docType">
             The DocType for this document.
             </param>
            
             <returns>
             A new IDomDocument object
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.Create(System.String,CsQuery.HtmlParsingMode,CsQuery.HtmlParsingOptions,CsQuery.DocType)">
             <summary>
             Creates a new DomDocument (or derived) object
             </summary>
            
             <param name="html">
             The HTML source for the document
             </param>
             <param name="parsingMode">
             (optional) the parsing mode.
             </param>
             <param name="parsingOptions">
             (optional) options for controlling the parsing.
             </param>
             <param name="docType">
             The DocType for this document.
             </param>
            
             <returns>
             A new IDomDocument object
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.Create(System.IO.Stream,System.Text.Encoding,CsQuery.HtmlParsingMode,CsQuery.HtmlParsingOptions,CsQuery.DocType)">
             <summary>
             Creates a new DomDocument (or derived) object.
             </summary>
            
             <param name="html">
             The HTML source for the document.
             </param>
             <param name="encoding">
             (optional) the character set encoding.
             </param>
             <param name="parsingMode">
             (optional) the HTML parsing mode.
             </param>
             <param name="parsingOptions">
             (optional) options for controlling the parsing.
             </param>
             <param name="docType">
             The DocType for this document.
             </param>
            
             <returns>
             A new IDomDocument object.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.#ctor">
            <summary>
            Create a new, empty DOM document
            </summary>
            
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.Populate(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Populates this instance with the sequence of elements
             </summary>
            
             <param name="elements">
             The elements that are the source for the new document.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.Clear">
            <summary>
            Clears this object to its blank/initial state.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.AddToIndex(CsQuery.IDomIndexedNode)">
            <summary>
            Add an element to the index using the default keys for this element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.AddToIndex(System.String,CsQuery.IDomIndexedNode)">
            <summary>
            Add an element to the index using a specified index key
            </summary>
            <param name="key"></param>
            <param name="element"></param>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.RemoveFromIndex(CsQuery.IDomIndexedNode)">
            <summary>
            Remove an element from the index
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.RemoveFromIndex(System.String)">
            <summary>
            Remove an element from the index using its key
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.QueryIndex(System.String,System.Int32,System.Boolean)">
            <summary>
            Query the document's index for a subkey up to a specific depth, optionally including descendants that match the selector
            </summary>
            <param name="subKey"></param>
            <param name="depth">The zero-based depth to which searches should be limited</param>
            <param name="includeDescendants"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.QueryIndex(System.String)">
            <summary>
            Query the document's index for a subkey
            </summary>
            <param name="subKey"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.GetElementById(System.String)">
             <summary>
             Returns a reference to the element by its ID.
             </summary>
            
             <param name="id">
             The identifier.
             </param>
            
             <returns>
             The element by identifier.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/document.getElementById
             </url>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.GetElementById``1(System.String)">
             <summary>
             Gets an element by identifier, and return a strongly-typed interface.
             </summary>
            
             <typeparam name="T">
             Generic type parameter.
             </typeparam>
             <param name="id">
             The identifier.
             </param>
            
             <returns>
             The element by id&lt; t&gt;
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.GetElementByTagName(System.String)">
             <summary>
             Gets element by tag name.
             </summary>
            
             <param name="tagName">
             Name of the tag.
             </param>
            
             <returns>
             The element by tag name.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.GetElementsByTagName(System.String)">
             <summary>
             Returns a list of elements with the given tag name. The subtree underneath the specified
             element is searched, excluding the element itself.
             </summary>
            
             <param name="tagName">
             Name of the tag.
             </param>
            
             <returns>
             The element by tag name.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.getElementsByTagName
             </url>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.QuerySelector(System.String)">
             <summary>
             Returns the first element within the document (using depth-first pre-order traversal of the
             document's nodes) that matches the specified group of selectors.
             </summary>
            
             <param name="selector">
             The selector.
             </param>
            
             <returns>
             An element, the first that matches the selector.
             </returns>
            
             <url>
             https://developer.mozilla.org/En/DOM/Document.querySelector
             </url>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.QuerySelectorAll(System.String)">
             <summary>
             Returns a list of the elements within the document (using depth-first pre-order traversal of
             the document's nodes) that match the specified group of selectors.
             </summary>
            
             <param name="selector">
             The selector.
             </param>
            
             <returns>
             A sequence of elements matching the selector.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/Document.querySelectorAll
             </url>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.CreateElement(System.String)">
             <summary>
             Creates a new Element node.
             </summary>
            
             <param name="nodeName">
             Name of the node.
             </param>
            
             <returns>
             The new element.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/document.createElement
             </url>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.CreateTextNode(System.String)">
             <summary>
             Creates a new Text node.
             </summary>
            
             <param name="text">
             The text.
             </param>
            
             <returns>
             The new text node.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/document.createTextNode
             </url>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.CreateComment(System.String)">
             <summary>
             Creates a new comment node.
             </summary>
            
             <param name="comment">
             The comment.
             </param>
            
             <returns>
             The new comment.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/document.createComment
             </url>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.CreateDocumentType(System.String,System.String,System.String)">
             <summary>
             Creates the document type node. 
             </summary>
            
             <param name="type">
             The type.
             </param>
             <param name="publicIdentifier">
             Public identifier
             </param>
             <param name="systemIdentifier">
             System identifier
             </param>
            
             <returns>
             The new document type.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.CreateDocumentType(CsQuery.DocType)">
             <summary>
             Creates the document type node.
             </summary>
            
             <param name="docType">
             The DocType for this document.
             </param>
            
             <returns>
             The new document type.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.Clone">
             <summary>
             Makes a deep copy of this object.
             </summary>
            
             <returns>
             A copy of this object.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.CloneChildren">
             <summary>
             Clones the child elements of this document
             </summary>
            
             <returns>
             A sequence of cloned elements
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.ToString">
             <summary>
             Convert this object into a string representation; provides summary information about the
             document.
             </summary>
            
             <returns>
             This object as a string.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.OnlyElements(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Return a sequence of elements that excludes non-Element (e.g. Text) nodes
             </summary>
            
             <param name="objectList">
             The input sequence
             </param>
            
             <returns>
             A sequence of elements
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.CreateNew``1">
             <summary>
             Creates an IDomDocument that is derived from this one. The new type can also be a derived
             type, such as IDomFragment. The new object will inherit DomRenderingOptions from this one.
             </summary>
            
             <typeparam name="T">
             The type of object to create that is IDomDocument.
             </typeparam>
            
             <returns>
             A new, empty concrete class that is represented by the interface T, configured with the same
             options as the current object.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.CreateNew">
             <summary>
             Creates an IDomDocument that is derived from this one. The new type can also be a derived
             type, such as IDomFragment. The new object will inherit DomRenderingOptions from this one.
             </summary>
            
             <returns>
             A new, empty concrete class that is represented by the interface T, configured with the same
             options as the current object.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.CreateNew``1(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Creates an IDomDocument that is derived from this one. The new type can also be a derived
             type, such as IDomFragment. The new object will inherit DomRenderingOptions from this one.
             </summary>
            
             <exception cref="T:System.ArgumentException">
             Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            
             <typeparam name="T">
             The type of object to create that is IDomDocument.
             </typeparam>
             <param name="elements">
             The elements that are the source for the new document.
             </param>
            
             <returns>
             A new, empty concrete class that is represented by the interface T, configured with the same
             options as the current object.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.DomDocument.StyleSheets">
            <summary>
            Gets the style sheets for this document. (This feature is not implemented completely).
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomDocument.DocumentIndex">
            <summary>
            Exposes the Document as an IDomIndex object
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomDocument.SelectorXref">
            <summary>
            The index
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomDocument.ParentNode">
            <summary>
            The direct parent of this node.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomDocument.Path">
            <summary>
            The full path to this node. For Document nodes, this is always empty.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomDocument.Depth">
            <summary>
            The depth in the node tree at which this node occurs. This is always 0 for the DomDocument.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomDocument.DomRenderingOptions">
            <summary>
            Deprecated: DomRenderingOptions are no longer bound to a particular Document instance. Pass
            options to the Render() method, or create an IOutputFormatter instance using options, instead.
            This method will be removed in a future release.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomDocument.Document">
            <summary>
            The DOM for this object. For Document objects, this returns the same object.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomDocument.NodeType">
            <summary>
            Gets the type of the node. For Document objects, this is always NodeType.DOCUMENT_NODE
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomDocument.DocTypeNode">
            <summary>
            Gets the DOCUMENT_TYPE node for this document, or null if none exists.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomDocument.DocType">
            <summary>
            Gets the DocType for this document. 
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomDocument.InnerHtmlAllowed">
            <summary>
            Gets a value indicating whether HTML is allowed as a child of this element. For Document
            nodes, this is always true.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomDocument.Data">
            <summary>
            Any user data to be persisted with this DOM.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomDocument.Body">
            <summary>
            Return the body element for this Document.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomDocument.IsIndexed">
            <summary>
            Gets a value indicating whether this object type should be indexed.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomDocument.IsFragment">
            <summary>
            The element is not associated with an IDomDocument.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomDocument.IsDisconnected">
            <summary>
            Gets a value indicating whether this object belongs to a Document or not.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomFragment.Create(System.String,System.String,CsQuery.DocType)">
             <summary>
             Creates a new fragment in a given context.
             </summary>
            
             <param name="html">
             The elements.
             </param>
             <param name="context">
             (optional) the context. If omitted, will be automatically determined.
             </param>
             <param name="docType">
             (optional) type of the document.
             </param>
            
             <returns>
             A new fragment.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomFragment.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomFragment.CreateNew">
             <summary>
             Creates a new instance of a DomFragment.
             </summary>
            
             <returns>
             The new new.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.DomFragment.NodeType">
            <summary>
            Gets the type of the node. For DomFragment objects, this is always NodeType.DOCUMENT_FRAGMENT_NODE.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomFragment.IsIndexed">
            <summary>
            Gets a value indicating whether this object is indexed. 
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomFragment.IsFragment">
            <summary>
            Gets a value indicating whether this object is fragment. For DomFragment objects, this is
            true.
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.DomCData">
            <summary>
            A CDATA node
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomCData.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomCData.#ctor(System.String)">
             <summary>
             Constructor that populates the node with the passed value.
             </summary>
            
             <param name="value">
             The contents of the CDATA node
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomCData.Clone">
             <summary>
             Makes a deep copy of this object.
             </summary>
            
             <returns>
             A copy of this object.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.DomCData.NodeValue">
            <summary>
            Gets or sets the node value. For CDATA nodes, this is the content.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomCData.NodeType">
            <summary>
            Gets the type of the node. For CDATA nodes, this is NodeType.CDATA_SECTION_NODE.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomCData.NonAttributeData">
            <summary>
            Gets or sets the non-attribute data in the tag. For CDATA nodes, this is the same as the
            content of the node..
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomCData.InnerHtmlAllowed">
            <summary>
            Gets a value indicating whether HTML is allowed as a child of this element. For CDATA nodes,
            this is always false.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomCData.HasChildren">
            <summary>
            Gets a value indicating whether this object has children. For CDATA nodes, this is always
            false.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomCData.Text">
            <summary>
            Gets or sets the text of the CDATA element.
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.DomComment">
            <summary>
            A comment node
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomComment.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomComment.#ctor(System.String)">
             <summary>
             Constructor for a comment containing the specified text.
             </summary>
            
             <param name="text">
             The text.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomComment.Clone">
             <summary>
             Makes a deep copy of this object.
             </summary>
            
             <returns>
             A copy of this object.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.DomComment.NodeType">
             <summary>
             Gets the type of the node (COMMENT_NODE)
             </summary>
            
             <value>
             The type of the node.
             </value>
        </member>
        <member name="P:CsQuery.Implementation.DomComment.NodeName">
             <summary>
             The node (tag) name, in upper case. For a 
             </summary>
            
             <value>
             The name of the node.
             </value>
        </member>
        <member name="P:CsQuery.Implementation.DomComment.IsQuoted">
             <summary>
             Gets or sets a value indicating whether this object is quoted.
             </summary>
            
             <remarks>
             TODO: Remove this. This has to do with GetTagOpener etc.
             </remarks>
            
             <value>
             true if this object is quoted, false if not.
             </value>
        </member>
        <member name="P:CsQuery.Implementation.DomComment.InnerHtmlAllowed">
             <summary>
             Gets a value indicating whether HTML is allowed as a child of this element (false)
             </summary>
            
             <value>
             true if inner HTML allowed, false if not.
             </value>
        </member>
        <member name="P:CsQuery.Implementation.DomComment.HasChildren">
             <summary>
             Gets a value indicating whether this object has children (false)
             </summary>
            
             <value>
             true if this object has children, false if not.
             </value>
        </member>
        <member name="P:CsQuery.Implementation.DomComment.NonAttributeData">
            <summary>
            Gets or sets the non-attribute data in the tag. For comments, this is the same as the text of
            the comment. Null values will be converted to an empty string.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomComment.NodeValue">
            <summary>
            Gets or sets the node value. For CDATA nodes, this is the content.
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.DomDocumentType">
            <summary>
            A special type for the DOCTYPE node
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomDocumentType.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomDocumentType.#ctor(CsQuery.DocType)">
             <summary>
             Constructor to create based on one of several common predefined types.
             </summary>
            
             <param name="docType">
             Type of the document.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomDocumentType.#ctor(System.String,System.String,System.String)">
             <summary>
             Constructor to create a specific document type node
             </summary>
            
             <param name="type">
             The type.
             </param>
             <param name="publicIdentifier">
             Identifier for the public.
             </param>
             <param name="systemIdentifier">
             Identifier for the system.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomDocumentType.SetDocType(CsQuery.DocType)">
            <summary>
            Sets document type data values from a doc type
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomDocumentType.Clone">
             <summary>
             Makes a deep copy of this object.
             </summary>
            
             <returns>
             A copy of this object.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.DomDocumentType.NodeType">
            <summary>
            Gets the type of the node.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomDocumentType.NodeName">
            <summary>
            The node (tag) name, in upper case. For DOC_TYPE nodes, this is always "DOCTYPE".
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomDocumentType.DocType">
            <summary>
            Gets or sets the type of the document.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomDocumentType.NonAttributeData">
            <summary>
            Gets or sets the information describing the content found in the tag that is not in standard
            attribute format.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomDocumentType.InnerHtmlAllowed">
            <summary>
            Gets a value indicating whether HTML is allowed as a child of this element. It is possible
            for this value to be false but InnerTextAllowed to be true for elements which can have inner
            content, but no child HTML markup, such as &lt;textarea&gt; and &lt;script&gt;
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomDocumentType.HasChildren">
            <summary>
            Gets a value indicating whether this object has children.
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.CSSStyleDeclaration">
            <summary>
            CSS style declaration.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.#ctor">
            <summary>
            Create a new CSSStyleDeclaration object with no styles.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.#ctor(System.String)">
             <summary>
             Create a new CSSStyleDeclaration object for the text.
             </summary>
            
             <param name="cssText">
             The parsable textual representation of the declaration block (excluding the surrounding curly
             braces). Setting this attribute will result in the parsing of the new value and resetting of
             all the properties in the declaration block including the removal or addition of properties.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.#ctor(System.String,System.Boolean)">
             <summary>
             Create a new CSSStyleDeclaration object for the text.
             </summary>
            
             <param name="cssText">
             The parsable textual representation of the declaration block (excluding the surrounding curly
             braces). Setting this attribute will result in the parsing of the new value and resetting of
             all the properties in the declaration block including the removal or addition of properties.
             </param>
             <param name="validate">
             When true, validate against CSS3 rules.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.#ctor(CsQuery.ICSSRule)">
             <summary>
             Create a new CSSStyleDeclaration object thatis a child of another rule.
             </summary>
            
             <param name="parentRule">
             The parent rule.
             </param>
        </member>
        <member name="F:CsQuery.Implementation.CSSStyleDeclaration._Styles">
            <summary>
            Warning: Do not attempt to access _Styles directly from this class or any subclass to determine whether or 
            not there are styles, since it also depends on QuickSetStyles. Use HasStyles method instead.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.Clone">
             <summary>
             Create a clone of this CSSStyleDeclaration object bound to the owner passed.
             </summary>
            
             <returns>
             CSSStyleDeclaration.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.SetStyles(System.String)">
             <summary>
             Sets all the styles from a single CSS style string. Any existing styles will be erased.
             Styles will be validated and an error thrown if an invalid style is attempted.
             </summary>
            
             <param name="styles">
             A legal HTML style string.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.SetStyles(System.String,System.Boolean)">
             <summary>
             Sets all the styles from a single CSS style string. Any existing styles will be erased. This
             method is used by DomElementFactory (not in strict mode).
             </summary>
            
             <param name="styles">
             A legal HTML style string.
             </param>
             <param name="strict">
             When true, the styles will be validated and an error thrown if any are not valid.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.AddStyles(System.String,System.Boolean)">
             <summary>
             Add one or more styles to this element. Unlike SetStyle, existing styles are not affected,
             except for existing styles of the same name.
             </summary>
            
             <param name="styles">
             The CSS style string
             </param>
             <param name="strict">
             When true, the styles will be validated as CSS3 before adding.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.Remove(System.String)">
            <summary>
            Remove a single named style
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.RemoveStyle(System.String)">
             <summary>
             Removes the style from the style descriptor for this element.
             </summary>
            
             <param name="name">
             The name.
             </param>
            
             <returns>
             true if it succeeds, false if it fails. this can only fail if the style was not present.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.Add(System.String,System.String)">
            <summary>
            Add a single style
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.Clear">
            <summary>
            Remove all styles
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.HasStyle(System.String)">
            <summary>
            Returns true if the named style is defined
            </summary>
            <param name="styleName"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.SetRaw(System.String,System.String)">
            <summary>
            Sets style setting with no parsing
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.TryGetValue(System.String,System.String@)">
             <summary>
             Try to get the value of the named style.
             </summary>
            
             <param name="name">
             The name of the style
             </param>
             <param name="value">
             [out] The value.
             </param>
            
             <returns>
             true if the named style is defined, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.GetStyle(System.String)">
             <summary>
             Gets a style by name
             </summary>
            
             <param name="name">
             The style name
             </param>
            
             <returns>
             The style, or null if it is not defined.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.SetStyle(System.String,System.String)">
             <summary>
             Sets a named style, validating its format.
             </summary>
            
             <param name="name">
             The style name
             </param>
             <param name="value">
             The style value
             </param>
            
             <exception cref="T:System.ArgumentException">
             Thrown if the style name and value are not valid CSS
             </exception>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.SetStyle(System.String,System.String,System.Boolean)">
             <summary>
             Sets a named style, validating its format.
             </summary>
            
             <exception cref="T:System.ArgumentException">
             Thrown if the style name and value are not valid CSS
             </exception>
            
             <param name="name">
             The style name.
             </param>
             <param name="value">
             The style value.
             </param>
             <param name="strict">
             When true, the styles will be validated and an error thrown if any are not valid.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.NumberPart(System.String)">
             <summary>
             Returns the numeric value only of a style, ignoring units
             </summary>
            
             <param name="style">
             The style.
             </param>
            
             <returns>
             A double, or null if the style did not exist or did not contain a numeric value.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.ToString">
             <summary>
             Return the formatted string representation of this style, as HTML.
             </summary>
            
             <returns>
             A string.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.GetEnumerator">
             <summary>
             Return an enumerator that exposes each style name/value pair
             </summary>
            
             <returns>
             The enumerator.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.OptionList(CsQuery.Implementation.CssStyle)">
             <summary>
             Returns the options for this style as a comma-separated list
             </summary>
            
             <param name="style">
             The style.
             </param>
            
             <returns>
             A comma-separated string
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.ValidateUnitString(System.String,System.String)">
             <summary>
             Cleans/validates a CSS units string, or throws an error if not possible.
             </summary>
            
             <exception cref="T:System.ArgumentException">
             Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            
             <param name="name">
             The style name.
             </param>
             <param name="value">
             The value to validate
             </param>
            
             <returns>
             A parsed string of the value
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleDeclaration.Styles">
            <summary>
            Inner dictionary of the styles.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleDeclaration.QuickSetValue">
            <summary>
            For fast DOM creation - since styles are not indexed or validated.
            If they are ever accessed by style name, they will be parsed on demand.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleDeclaration.ParentRule">
            <summary>
            The CSS rule that contains this declaration block or null if this CSSStyleDeclaration is not
            attached to a CSSRule.
            </summary>
        </member>
        <member name="E:CsQuery.Implementation.CSSStyleDeclaration.OnHasStylesChanged">
            <summary>
            Event queue for all listeners interested in OnHasStylesChanged events.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleDeclaration.Length">
            <summary>
            The number of properties that have been explicitly set in this declaration block.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleDeclaration.CssText">
            <summary>
            The parsable textual representation of the declaration block (excluding the surrounding curly
            braces). Setting this attribute will result in the parsing of the new value and resetting of
            all the properties in the declaration block including the removal or addition of properties.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleDeclaration.HasStyles">
            <summary>
            True if there is at least one style.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleDeclaration.Count">
            <summary>
            Gets the number of styles in this collection.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleDeclaration.IsReadOnly">
            <summary>
            Gets a value indicating whether this object is read only. For CSSStyleDeclarations, this is
            always false.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleDeclaration.Keys">
            <summary>
            Gets the style name (keys) for all the styles in this collection
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleDeclaration.Values">
             <summary>
            Gets the style name values for all the styles in this collection
             </summary>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleDeclaration.Item(System.String)">
            <summary>
            Get or set the named style
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleDeclaration.Item(System.String,System.Boolean)">
             <summary>
             Get or set the named style, optionally enabling strict mode.
             </summary>
            
             <param name="name">
             The named style
             </param>
             <param name="strict">
             When true, validate for CSS3
             </param>
            
             <returns>
             The indexed item.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleDeclaration.Height">
            <summary>
            Gets or sets the CSS height.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleDeclaration.Width">
            <summary>
            Gets or sets the CSS width.
            </summary>
        </member>
        <member name="T:CsQuery.HtmlParser.HtmlData">
            <summary>
            Reference data about HTML tags and attributes;
            methods to test tokens for certain properties;
            and the tokenizer.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.pathIdLength">
            <summary>
            Length of each node's path ID (in characters), sets a limit on the number of child nodes before a reindex
            is required. For most cases, a small number will yield better performance. In production we probably can get
            away with just 1 (meaning a char=65k possible values). 
            
            NOTE: At present PathID has been optimized as a ushort data type. You CANNOT just change this.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.indexSeparator">
            <summary>
            The character used to separate the unique part of an index entry from its path. When debugging
            it is useful to have a printable character. Otherwise we want something that is guaranteed to be
            a unique stop character.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagActionNothing">
            <summary>
            Special token meaning "do nothing"
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagActionClose">
            <summary>
            Special token meaning "close the parent tag before opening the next one"
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.ClassAttrId">
            <summary>
            Identifier for the Class attribute.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.ValueAttrId">
            <summary>
            Identifier for the Value attribute.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.IDAttrId">
            <summary>
            Identifier for the ID attribute.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.SelectedAttrId">
            <summary>
            Identifier for the selected attribute.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.ReadonlyAttrId">
            <summary>
            Identifier for the readonly attribute.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.CheckedAttrId">
            <summary>
            Identifier for the checked attribute.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagINPUT">
            <summary>
            The INPUT tag.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagSELECT">
            <summary>
            The SELECT tag.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagOPTION">
            <summary>
            The OPTION tag.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagP">
            <summary>
            The P tag.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagTR">
            <summary>
            The TR tag.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagTD">
            <summary>
            The TD tag.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagTH">
            <summary>
            The TH tag.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagHEAD">
            <summary>
            The HEAD tag.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagBODY">
            <summary>
            The BODY tag.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagDT">
            <summary>
            The DT tag
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagCOLGROUP">
            <summary>
            The COLGROUP tag.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagDD">
            <summary>
            The DD tag
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagLI">
            <summary>
            The LI tag
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagDL">
            <summary>
            The DL tag
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagTABLE">
            <summary>
            The TABLE tag.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagOPTGROUP">
            <summary>
            The OPTGROUP tag.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagUL">
            <summary>
            The UL tag.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagOL">
            <summary>
            The OL tag.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagTBODY">
            <summary>
            The TBODY tag
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagTFOOT">
            <summary>
            The TFOOT tag.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagTHEAD">
            <summary>
            The THEAD tag.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagRT">
            <summary>
            The RT tag.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagRP">
            <summary>
            The RP tag.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagSCRIPT">
            <summary>
            The SCRIPT tag.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagTEXTAREA">
            <summary>
            The TEXTAREA tag.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagSTYLE">
            <summary>
            The STYLE tag.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagCOL">
            <summary>
            The COL tag.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagHTML">
            <summary>
            The HTML tag.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagBUTTON">
            <summary>
            The BUTTON tag.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.attrMULTIPLE">
            <summary>
            The BUTTON tag.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagA">
            <summary>
            the A tag
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagSPAN">
            <summary>
            the SPAN tag
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagFORM">
            <summary>
            the SPAN tag
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.attrREQUIRED">
            <summary>
            The REQUIRED attribute.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.attrAUTOFOCUS">
            <summary>
            The REQUIRED attribute.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.attrTYPE">
            <summary>
            The TYPE attribute.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagPROGRESS">
            <summary>
            The PROGRESS element
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagLABEL">
            <summary>
            The LABEL element
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.attrDISABLED">
            <summary>
            The DISABLED attribute
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagMETER">
            <summary>
            The METER element
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagIMG">
            <summary>
            The IMG element
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagLINK">
            <summary>
            The IMG element
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.maxHardcodedTokenId">
            <summary>
            should match final tag above; for self-checking.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.Debug">
            <summary>
            Indicates whether this has been compiled in debug mode. When true, DOM index paths will be
            stored internally in extended human-readable format.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.NumberChars">
            <summary>
            Things that can be in a CSS number
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.Units">
            <summary>
            The units that are allowable unit strings in a CSS style..
            </summary>
            <url>
            http://www.w3.org/TR/css3-values/#relative-lengths
            </url>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.nextID">
            <summary>
            Fields used internally
            </summary>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.HtmlChildrenNotAllowed(System.UInt16)">
             <summary>
             This type does not allow HTML children. Some of these types may allow text but not HTML.
             </summary>
            
             <param name="nodeId">
             The token ID
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.HtmlChildrenNotAllowed(System.String)">
             <summary>
             This type does not allow HTML children. Some of these types may allow text but not HTML.
             </summary>
            
             <param name="nodeName">
             The node name to test.
             </param>
            
             <returns>
             true if HTML nodes are not allowed as childredn, false if they are.
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.ChildrenAllowed(System.UInt16)">
             <summary>
             Test whether this element may have children.
             </summary>
            
             <param name="tokenId">
             The token ID.
             </param>
            
             <returns>
             When false, this element type may never have children.
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.ChildrenAllowed(System.String)">
             <summary>
             Test whether this element can have children.
             </summary>
            
             <param name="nodeName">
             The node name to test.
             </param>
            
             <returns>
             When false, this element type may never have children.
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.IsBlock(System.UInt16)">
             <summary>
             Test whether the node is a block-type element.
             </summary>
            
             <param name="tokenId">
             The token ID of the node
             </param>
            
             <returns>
             true if the token ID represents a block type element, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.IsBlock(System.String)">
             <summary>
             Test whether the node is a block-type element
             </summary>
            
             <param name="nodeName">
             The node name to test.
             </param>
            
             <returns>
             true if a block type, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.IsBoolean(System.UInt16)">
             <summary>
             Test whether the attribute is a boolean type.
             </summary>
            
             <param name="tokenId">
             The token ID
             </param>
            
             <returns>
             true if boolean, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.IsBoolean(System.String)">
             <summary>
             Test whether the attribute is a boolean type.
             </summary>
            
             <param name="propertyName">
             The attribute or property name
             </param>
            
             <returns>
             true if boolean, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.IsCaseInsensitiveValues(System.String)">
             <summary>
             Test whether an attribute has case-insensitive values (for selection purposes)
             </summary>
            
             <param name="attributeName">
             Name of the attribute.
             </param>
            
             <returns>
             true if the values are case insensitive, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.IsCaseInsensitiveValues(System.UInt16)">
             <summary>
             Test whether an attribute has case-insensitive values (for selection purposes)
             </summary>
            
             <param name="attributeToken">
             Token ID of the attribute.
             </param>
            
             <returns>
             true if the values are case insensitive, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.HasValueProperty(System.String)">
             <summary>
             Test if a node type has a VALUE property.
             </summary>
            
             <param name="nodeName">
             The node name token.
             </param>
            
             <returns>
             true if it has a VALUE property, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.HasValueProperty(System.UInt16)">
             <summary>
             Test if a node type has a VALUE property.
             </summary>
            
             <param name="nodeNameToken">
             Token ID of the node name.
             </param>
            
             <returns>
             true if it has a VALUE property, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.IsFormInputControl(System.String)">
             <summary>
             Test if the node name is a form input control.
             </summary>
            
             <param name="nodeName">
             The node name to test.
             </param>
            
             <returns>
             true if a form input control, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.IsFormInputControl(System.UInt16)">
             <summary>
             Test if the node name is a form input control
             </summary>
            
             <param name="nodeNameToken">
             The node name token.
             </param>
            
             <returns>
             true if a form input control, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.Tokenize(System.String)">
             <summary>
             Return a token for a name
             </summary>
            
             <param name="name">
             The name to tokenize.
             </param>
            
             <returns>
             The token
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.TokenizeCaseSensitive(System.String)">
             <summary>
             Return a token for a name, adding to the index if it doesn't exist. When indexing tags and
             attributes, TokenID(tokenName) should be used.
             </summary>
            
             <param name="name">
             The name to tokenize
             </param>
            
             <returns>
             A token representation of the string
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.TokenizeImpl(System.String)">
             <summary>
             Return a token ID for a name, adding to the index if it doesn't exist. When indexing tags and
             attributes, ignoreCase should be used.
             </summary>
            
             <param name="tokenName">
             The token name
             </param>
            
             <returns>
             A token
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.TokenName(System.UInt16)">
             <summary>
             Return a token name for an ID.
             </summary>
            
             <param name="tokenId">
             The token ID
             </param>
            
             <returns>
             The string, or an empty string if the token ID was not found
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.BaseXXEncode(System.Int32)">
             <summary>
             Encode to base XX (defined in constants)
             </summary>
            
             <exception cref="T:System.OverflowException">
             Thrown when an arithmetic overflow occurs.
             </exception>
            
             <param name="number">
             The number to baseXX encode
             </param>
            
             <returns>
             A baseXX encoded string 
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.AttributeEncode(System.String,System.Boolean,System.String@)">
             <summary>
             HtmlEncode a string, except for double-quotes, so it can be enclosed in single-quotes.
             </summary>
            
             <param name="text">
             The text to encode
             </param>
             <param name="alwaysQuote">
             When true, the attribute value will be quoted even if quotes are not required by the value.
             </param>
             <param name="quoteChar">
             [out] The quote character.
             </param>
            
             <returns>
             The encoded string
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.HtmlDecode(System.String)">
             <summary>
             Decode HTML-encoded text.
             </summary>
            
             <param name="html">
             The HTML.
             </param>
            
             <returns>
             Decoded html.
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.SpecialTagAction(System.String,System.String,System.Boolean)">
             <summary>
             For testing only - the production code never uses this version.
             </summary>
            
             <param name="tag">
             .
             </param>
             <param name="newTag">
             .
             </param>
             <param name="isDocument">
             .
             </param>
            
             <returns>
             .
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.SpecialTagActionForDocument(System.UInt16,System.UInt16)">
             <summary>
             Determine a course of action given a new tag, its parent, and whether or not to treat this as
             a document. Return 1 to close, 0 to do nothing, or an ID to generate.
             </summary>
            
             <param name="parentTagId">
             The parent tag ID
             </param>
             <param name="newTagId">
             The new tag ID found
             </param>
            
             <returns>
             A tokenId representing an action or a new tag to generate
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.SpecialTagAction(System.UInt16,System.UInt16)">
             <summary>
             Return the type of action that should be performed given a tag, and a new tag found as a
             child of that tag.
             </summary>
            
             <remarks>
             Some tags have inner HTML but are often not closed properly. There are two possible
             situations. A tag may not have a nested instance of itself, and therefore any recurrence of
             that tag implies the previous one is closed. Other tag closings are simply optional, but are
             not repeater tags (e.g. body, html). These should be handled automatically by the logic that
             bubbles any closing tag to its parent if it doesn't match the current tag. The exception is
             &lt;head&gt; which technically does not require a close, but we would not expect to find
             another close tag Complete list of optional closing tags: HTML, HEAD, BODY, P, DT, DD, LI,
             OPTION, THEAD, TH, TBODY, TR, TD, TFOOT, COLGROUP
             
              body, html will be closed automatically at the end of parsing and are also not required.
             </remarks>
            
             <param name="parentTagId">
             The parent tag's token.
             </param>
             <param name="newTagId">
             The new child tag's token.
             </param>
            
             <returns>
             A tag action code indicating that nothing special should happen or the parent tag should be
             closed; or alternatively the token for a tag that should be generated in place before the new
             tag is opened.
             </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.setBit(System.Collections.Generic.IEnumerable{System.String},CsQuery.HtmlParser.TokenProperties)">
             <summary>
             For each value in "tokens" (ignoring case) sets the specified bit in the reference table.
             </summary>
            
             <param name="tokens">
             A sequence of tokens
             </param>
             <param name="bit">
             The bitflag to set
             </param>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.setBit(System.Collections.Generic.IEnumerable{System.UInt16},CsQuery.HtmlParser.TokenProperties)">
             <summary>
             For each value in "tokens" sets the specified bit in the reference table.
             </summary>
            
             <param name="tokens">
             The sequence of tokens
             </param>
             <param name="bit">
             The bitflag to set
             </param>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.setBit(System.UInt16,CsQuery.HtmlParser.TokenProperties)">
             <summary>
             Set the specified bit in the reference table for "token".
             </summary>
            
             <param name="token">
             The token
             </param>
             <param name="bit">
             The bit to set
             </param>
        </member>
        <member name="P:CsQuery.HtmlParser.HtmlData.Keys">
            <summary>
            A list of all keys (tokens) created.
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.DomText">
            <summary>
            Used for literal text (not part of a tag)
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomText.#ctor">
            <summary>
            Create a new empty Text node
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomText.#ctor(System.String)">
             <summary>
             Create a new Text node containing the text passed
             </summary>
            
             <param name="nodeValue">
             The text value of this Text node.
             </param>
        </member>
        <member name="F:CsQuery.Implementation.DomText._NodeValue">
            <summary>
            The inner node value; the text.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomText.Clone">
             <summary>
             Makes a clone of this TextNode
             </summary>
            
             <returns>
             A copy of this object.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomText.ToString">
             <summary>
             Return the value of this text node
             </summary>
            
             <returns>
             This object as a string.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.DomText.NodeName">
            <summary>
            The node (tag) name, in upper case. For Text nodes, this is always "#text".
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomText.NodeType">
            <summary>
            Gets the type of the node. For Text nodes, this is always NodeType.TEXT_NODE
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomText.NodeValue">
            <summary>
            Gets or sets the text value of this Text node. Null values will be converted to an empty string.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomText.InnerHtmlAllowed">
            <summary>
            Gets a value indicating whether HTML is allowed as a child of this element. For Text nodes,
            this is always false.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomText.HasChildren">
            <summary>
            For Text nodes, this is always false
            </summary>
        </member>
        <member name="T:CsQuery.INodeList">
            <summary>
            Interface for node list, a read/write collection of nodes.
            </summary>
        </member>
        <member name="M:CsQuery.INodeList.Item(System.Int32)">
             <summary>
             Get the item at the specified index
             </summary>
            
             <param name="index">
             Zero-based index of the item
             </param>
            
             <returns>
             An item
             </returns>
        </member>
        <member name="P:CsQuery.INodeList.Length">
            <summary>
            The number of nodes in this INodeList
            </summary>
        </member>
        <member name="T:CsQuery.Engine.MatchElement">
            <summary>
             Wrapper class used by the engine to store info on the selector stack.
            </summary>
        </member>
        <member name="T:CsQuery.Engine.NthChildMatcher">
            <summary>
            Figure out if an index matches an Nth Child, or return a list of all matching elements from a list.
            </summary>
        </member>
        <member name="M:CsQuery.Engine.NthChildMatcher.IsNthChildOfType(CsQuery.IDomElement,System.String,System.Boolean)">
             <summary>
             Test if an element is the nth-child matching the output of a formula
             </summary>
            
             <param name="element">
             The element to test
             </param>
             <param name="formula">
             The formula.
             </param>
             <param name="fromLast">
             Count from the last element instead of the first.
             </param>
            
             <returns>
             true if nth child of type implementation, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.NthChildMatcher.IsNthChild(CsQuery.IDomElement,System.String,System.Boolean)">
             <summary>
             Test if an element is the nth-child matching the output of a formula
             </summary>
            
             <param name="element">
             The element to test
             </param>
             <param name="formula">
             The formula.
             </param>
             <param name="fromLast">
             Count from the last element instead of the first.
             </param>
            
             <returns>
             true if nth child, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.NthChildMatcher.NthChildsOfType(CsQuery.IDomContainer,System.String,System.Boolean)">
             <summary>
             Enumerates nth children of the same type as the parent.
             </summary>
            
             <remarks>
             This could be implemented more efficiently, but it's a bit complicated because we need to keep track of n 
             for each type of element		 
             </remarks>
             <param name="element">
             The parent element.
             </param>
             <param name="formula">
             The formula for determining n.
             </param>
             <param name="fromLast">
             Count from the last element instead of the first.
             </param>
            
             <returns>
             A sequence of matching elements
             </returns>
        </member>
        <member name="M:CsQuery.Engine.NthChildMatcher.NthChilds(CsQuery.IDomContainer,System.String,System.Boolean)">
             <summary>
             Enumerates nth children in this collection.
             </summary>
            
             <param name="element">
             The parent element.
             </param>
             <param name="formula">
             The formula for determining n.
             </param>
             <param name="fromLast">
             When true, count from the last element instead of the first.
             </param>
            
             <returns>
             An enumerator that allows foreach to be used to process nth childs in this collection.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.NthChildMatcher.IndexOf(CsQuery.IDomElement,System.Boolean,System.Boolean)">
             <summary>
             Return the index of obj within its siblings, including only elements with the same node name.
             </summary>
            
             <param name="obj">
             The object to seek
             </param>
             <param name="onlyOfSameType">
             true to only objects of the same NodeName should be considered
             </param>
             <param name="fromLast">
             Count from the last element instead of the first.
             </param>
            
             <returns>
             The zero-based index of obj within its siblings (or its siblings of the same type)
             </returns>
        </member>
        <member name="M:CsQuery.Engine.NthChildMatcher.IndexMatches(System.Int32,System.String,System.Boolean)">
             <summary>
             Return true if the index matches the formula provided.
             </summary>
            
             <param name="index">
             The index to test
             </param>
             <param name="formula">
             The formula
             </param>
             <param name="fromLast">
             Count from the last element instead of the first.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.NthChildMatcher.IndexMatches(System.Int32,System.String)">
             <summary>
             Return true if the index matches the formula provided.
             </summary>
            
             <param name="index">
             The index to test.
             </param>
             <param name="formula">
             The formula.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.NthChildMatcher.GetMatchingChildren(CsQuery.IDomContainer,System.String,System.String,System.Boolean)">
             <summary>
             Return each child that matches an index returned by the forumla
             </summary>
            
             <param name="obj">
             The parent object.
             </param>
             <param name="formula">
             The formula for determining n.
             </param>
             <param name="onlyNodeName">
             The type of node to match.
             </param>
             <param name="fromLast">
             Count from the last element instead of the first.
             </param>
            
             <returns>
             An enumerator that allows foreach to be used to process get matching children in this
             collection.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.NthChildMatcher.GetMatchingChildren(CsQuery.IDomContainer,System.String)">
             <summary>
             Return each child that matches an index returned by the forumla.
             </summary>
            
             <param name="obj">
             The parent object.
             </param>
             <param name="formula">
             The formula for determining n.
             </param>
            
             <returns>
             An enumerator that allows foreach to be used to process get matching children in this
             collection.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.NthChildMatcher.GetMatchingChildren(CsQuery.IDomContainer)">
             <summary>
             Return each child that matches an index returned by the forumla.
             </summary>
            
             <param name="obj">
             The parent object.
             </param>
            
             <returns>
             Sequence of matching children.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.NthChildMatcher.GetEffectiveChild(CsQuery.INodeList,System.Int32,System.Boolean)">
             <summary>
             Return the correct child from a list based on an index, and the fromLast setting. That is, if fromLast is
             true, just return the child at "index." If not, return the child starting from the end at "index"
             </summary>
            
             <param name="nodeList">
             The container to obtain children from
             </param>
             <param name="index">
             The index
             </param>
             <param name="fromLast">
             Count from the last element instead of the first.
             </param>
            
             <returns>
             The effective child.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.NthChildMatcher.GetEffectiveIndex(CsQuery.INodeList,System.Int32,System.Boolean)">
             <summary>
             Gets the true index based on an effective index. (Misnomer, consider changing, should be
             GetActualIndex)
             </summary>
            
             <param name="nodeList">
             The container to obtain children from
             </param>
             <param name="index">
             The index
             </param>
             <param name="fromLast">
             Count from the last element instead of the first.
             </param>
            
             <returns>
             The actual index.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.NthChildMatcher.GetEffectiveChild(CsQuery.INodeList,System.Int32)">
            <summary>
            Return the correct child from a list based on an index, and the current "FromLast" setting
            </summary>
            <param name="nodeList"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.NthChildMatcher.ParseEquation(System.String)">
            <summary>
            Parse the equation text into in IEquation, or obtain from the cache if available
            </summary>
            <param name="equationText"></param>
        </member>
        <member name="M:CsQuery.Engine.NthChildMatcher.CheckForSimpleNumber(System.String)">
            <summary>
            Check if it was just a number passed (not an equation) and assign the correct delegates to matching
            </summary>
            <param name="equation"></param>
        </member>
        <member name="M:CsQuery.Engine.NthChildMatcher.GetEquation(System.String)">
            <summary>
            Returns a parsed equation from a string, validating that it appears to be a legitimate nth-child equation
            </summary>
            <param name="equationText"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.NthChildMatcher.CheckForEvenOdd(System.String)">
             <summary>
             Replaces _Text with the correct equation for "even" and "odd".
             </summary>
            
             <param name="equation">
             The equation
             </param>
            
             <returns>
             The new equation
             </returns>
        </member>
        <member name="M:CsQuery.Engine.NthChildMatcher.IndexMatchesNumber(System.Int32)">
             <summary>
             Test whether an index matches a hard index passed by the formula. (This is one of two
             implementations used via delegate)
             </summary>
            
             <param name="index">
             The index to test.
             </param>
            
             <returns>
             true if it matches, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.NthChildMatcher.IndexMatchesFormula(System.Int32)">
             <summary>
             Test whether an index matches the calculated (or cached) value of a formula. (This is one of
             two implementations used via delegate)
             </summary>
            
             <param name="index">
             .
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.NthChildMatcher.GetMatchingChildrenNumber(CsQuery.IDomElement)">
             <summary>
             Enumerates each child that matches a hard number passed as a formula (one of two
             implementations used via delegate)
             </summary>
            
             <param name="element">
             The parent element.
             </param>
            
             <returns>
             An sequence of the single matching child, or an empty sequence if none match.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.NthChildMatcher.GetMatchingChildrenFormula(CsQuery.IDomElement)">
             <summary>
             Enumerates the child elements that match a formula (one of two implementations used via
             delegate)
             </summary>
            
             <param name="element">
             The parent element.
             </param>
            
             <returns>
             A sequence of matching children.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.NthChildMatcher.UpdateCacheInfo(System.Int32)">
             <summary>
             Get the next matching index using the equation and add it to our cached list of equation
             results.
             </summary>
            
             <param name="lastIndex">
             The last index used
             </param>
        </member>
        <member name="P:CsQuery.Engine.NthChildMatcher.IsJustNumber">
            <summary>
            When true, the current equation is just a number, and the MatchOnlyIndex value should be used directly
            </summary>
        </member>
        <member name="P:CsQuery.Engine.NthChildMatcher.OnlyNodeName">
            <summary>
            Only nodes with this name will be included in the count to determine if an index matches the equation
            </summary>
        </member>
        <member name="P:CsQuery.Engine.NthChildMatcher.Text">
            <summary>
            The formula for this nth child selector
            </summary>
        </member>
        <member name="T:CsQuery.Engine.NthChildMatcher.CacheInfo">
            <summary>
            A structure to keep information about what has been calculated so far for a given equation string.
            NthChild is expensive so we cache a list of matching element IDs for a given equation along with the 
            last index this list represents and the iteration. The next time it's called we can either reference
            the list of matches so far, or update it only from the point where we stopped last time.
            </summary>
        </member>
        <member name="M:CsQuery.Engine.NthChildMatcher.CacheInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.NthChildMatcher.CacheInfo.Equation">
            <summary>
            The equation.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.NthChildMatcher.CacheInfo.MatchingIndices">
            <summary>
            The indices which match the equation. This may be incomplete, as it may only have been calculated up to the number
            of children present in the prior use. <seealso cref="F:CsQuery.Engine.NthChildMatcher.CacheInfo.MaxIndex"/>
            </summary>
        </member>
        <member name="F:CsQuery.Engine.NthChildMatcher.CacheInfo.NextIterator">
            <summary>
            The next iterator value, used to resume calculations where it was left off.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.NthChildMatcher.CacheInfo.MaxIndex">
            <summary>
            The maximum target index value calculated so far
            </summary>
        </member>
        <member name="M:CsQuery.Engine.SelectorEngine.Select(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Select implementation. The public method automatically remaps a selector with the knowledge
             that the context is external (and not part of a chain)
             </summary>
            
             <exception cref="T:System.ArgumentNullException">
             Thrown when one or more required arguments are null.
             </exception>
            
             <param name="context">
             The context in which the selector applies. If null, the selector is run against the entire
             Document. If not, the selector is run against this sequence of elements.
             </param>
            
             <returns>
             A list of elements. This method returns a list (rather than a sequence) because the sequence
             must be enumerated to ensure that end-users don't cause the selector to be rerun repeatedly,
             and that the values are not mutable (e.g. if the underlying source changes).
             </returns>
        </member>
        <member name="M:CsQuery.Engine.SelectorEngine.GetSelectionSource(CsQuery.Engine.SelectorClause,System.Collections.Generic.IEnumerable{CsQuery.IDomObject},System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Get the sequence that is the source for the current clause, based on the selector, prior
             results, and context.
             </summary>
            
             <remarks>
             Notes from refactoring this on 10/14/2012: At issue is selectors like ":not(.sel1 .sel2,
             :first) where the subselector has filters that apply to just the context, versus selectors
             like ":has(.sel1 .sel2, :first) where the subselector needs to apply to the results of a
             selection against the DOM
             
             case1: $('.sel','.context-sel') means that ".sel" is actually applied against .context-sel.
             it's like .find.
             
             totally different from a subselector -- but the subselector still needs a context to apply
             filters, even though the selectors theselves are run against the whole doc.
             
             so we need to set up selectors before running against the context so each subselector is IDd
             as either "context" or "root" in addition to its traversal type to eliminate ambiguity of
             intent. a subselector for :not should have "root+descendant" for the first part and
             "context+filter" for the 2nd. For regular context type filters, it should be
             "context+descendant" (same as find). FOr complex context/find filters chained with a comma,
             the stuff after the comma should also be in context though jquery seems inconsistent with
             this.
             
             This code here should then use the new info to select the correct sleection source. Think we
             should be rid of traversaltype.subselect. Think traversaltype.all should really mean "include
             the context items" instead of "Descendant" as it does now.
             </remarks>
            
             <param name="clause">
             The current selector clause.
             </param>
             <param name="context">
             The context passed initially to this Select operation.
             </param>
             <param name="lastResult">
             The result of the prior clause. Can be null.
             </param>
            
             <returns>
             The sequence that should source the current clause's context.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.SelectorEngine.GetMatches(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},CsQuery.Engine.SelectorClause)">
             <summary>
             Return all elements matching a selector, within a list of elements. This function will
             traverse children, but it is expected that the source list at the current depth (e.g. from an
             Adjacent or Sibling selector) is already processed.
             </summary>
            
             <param name="list">
             The sequence of elements to filter.
             </param>
             <param name="selector">
             The selector.
             </param>
            
             <returns>
             The sequence of elements matching the selector.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.SelectorEngine.Matches(CsQuery.Engine.SelectorClause,CsQuery.IDomElement,System.Int32)">
            <summary>
            Return true if an object matches a specific selector. If the selector has a desecendant or child traversal type, it must also
            match the specificed depth.
            </summary>
            <param name="selector">The jQuery/CSS selector</param>
            <param name="obj">The target object</param>
            <param name="depth">The depth at which the target must appear for descendant or child selectors</param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.SelectorEngine.GetResultPositionMatches(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},CsQuery.Engine.SelectorClause)">
             <summary>
             Return all position-type matches. These are selectors that are keyed to the position within
             the selection set itself.
             </summary>
            
             <param name="list">
             The list of elements to filter
             </param>
             <param name="selector">
             The selector
             </param>
            
             <returns>
             A sequence of elements matching the filter
             </returns>
        </member>
        <member name="M:CsQuery.Engine.SelectorEngine.GetPseudoClassMatches(CsQuery.IDomElement,CsQuery.Engine.SelectorClause)">
            <summary>
            Return all child elements matching a DOM-position type selector
            </summary>
            <param name="elm"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.SelectorEngine.MatchesPseudoClass(CsQuery.IDomElement,CsQuery.Engine.SelectorClause)">
             <summary>
             Return true if an element matches a specific filter.
             </summary>
            
             <param name="element">
             The element to test
             </param>
             <param name="selector">
             A selector clause
             </param>
            
             <returns>
             true if matches pseudo class, false if not.matches the selector, false if not
             </returns>
        </member>
        <member name="M:CsQuery.Engine.SelectorEngine.GetAdjacentOrSiblings(CsQuery.Engine.TraversalType,System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Map a list to its siblings or adjacent elements if needed. Ignore other traversal types.
            </summary>
            <param name="traversalType"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.SelectorEngine.GetAllChildOrDescendants(CsQuery.Engine.TraversalType,System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Map a list to its children or descendants, if needed.
            </summary>
            <param name="traversalType"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.SelectorEngine.GetChildElements(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Return all children of each element in the list
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.SelectorEngine.GetDescendantElements(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Return all descendants of each element in the list
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="P:CsQuery.Engine.SelectorEngine.Selector">
            <summary>
            The current selection list being acted on
            </summary>
        </member>
        <member name="P:CsQuery.Engine.SelectorEngine.Document">
            <summary>
            The Document bound to this engine instance
            </summary>
        </member>
        <member name="T:CsQuery.ExtensionMethods.Internal.ExtensionMethods">
            <summary>
            Extension methods used by CsQuery but not specialized enough to be considered useful for clients; therefore
            in a separate namespace.
            </summary>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.IsOneOf(System.Enum,System.Enum[])">
             <summary>
             Returns true if the enum is any of the parameters in question.
             </summary>
            
             <param name="theEnum">
             The enum object
             </param>
             <param name="values">
             The values to test for
             </param>
            
             <returns>
             true if one of, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.IsOneOf(System.String,System.String[])">
             <summary>
             Returns true if the string "match" is any of the parameters in question.
             </summary>
            
             <param name="match">
             The match to act on.
             </param>
             <param name="values">
             The values to test for.
             </param>
            
             <returns>
             true if one of, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.IsOneOf(System.String,System.Boolean,System.String[])">
             <summary>
             Returns true if the enum is any of the parameters in question.
             </summary>
            
             <param name="match">
             The match to act on.
             </param>
             <param name="matchCase">
             (optional) the match case.
             </param>
             <param name="values">
             The values to test for.
             </param>
            
             <returns>
             true if one of, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.GetValue(System.Enum)">
             <summary>
             Return the integer value for an enum.
             </summary>
            
             <param name="value">
             The enum value
             </param>
            
             <returns>
             An integer.
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.GetValueAsString(System.Enum)">
            <summary>
            Return the integer value cast as a string for an enum
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
             <summary>
             Add all the items in a sequence to a collection.
             </summary>
            
             <typeparam name="T">
             The type of the collections.
             </typeparam>
             <param name="target">
             The target collection
             </param>
             <param name="elements">
             The elements to add
             </param>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return true of a given collection is null or has no values
            </summary>
            <typeparam name="T"></typeparam>
            <param name="baseList"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.TryGetFirst``1(System.Collections.Generic.IEnumerable{``0},``0@)">
            <summary>
            Try to get the first element of a sequence. If the sequence is null or has no elements, return false.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="baseList"></param>
            <param name="firstElement"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.SingleOrDefaultAlways``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return a single element or the default value; does not fail on >1 value but also returns the default.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.AsString(System.Char[])">
            <summary>
             Converts a character array to a string.
             </summary>
            
             <param name="text">
             The character array
             </param>
            
             <returns>
             A string of the sequence of characters
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.OccurrencesOf(System.String,System.Char)">
             <summary>
             Return the number of occurrences of "find" in "text"
             </summary>
            
             <param name="text">
             The text to search
             </param>
             <param name="find">
             The text to find.
             </param>
            
             <returns>
             An integer
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.ListAdd(System.String,System.String,System.String)">
            <summary>
            Given a string that repesents a list demarcated by separator, add a new value to it
            </summary>
            <param name="list"></param>
            <param name="value"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.ListRemove(System.String,System.String,System.String)">
            <summary>
            Given a string that is a list demarcated by separator, remove a value from it
            </summary>
            <param name="list"></param>
            <param name="value"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.SubstringBetween(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the text between startIndex and endIndex (exclusive of endIndex)
            </summary>
            <param name="text"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.RemoveWhitespace(System.String)">
            <summary>
            Remove all whitespace from a string
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.BeforeLast(System.String,System.String)">
             <summary>
             Returns the part of the string before the last occurence of the operand.
             </summary>
            
             <param name="text">
             The text on which to perate
             </param>
             <param name="find">
             The text to find.
             </param>
            
             <returns>
             The portion of the text before the beginning of the last occurence of "find"
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.After(System.String,System.String)">
             <summary>
             Returns the string after the end of the first occurrence of "find".
             </summary>
            
             <param name="text">
             The text to search within
             </param>
             <param name="find">
             The text to find.
             </param>
            
             <returns>
             The portion of the text after the first occurence of "find"
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.AfterLast(System.String,System.String)">
            <summary>
            Return the part of the string that is after the last occurrence of the operand
            </summary>
            <param name="text">The source string</param>
            <param name="find">The text to find</param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.Before(System.String,System.String)">
            <summary>
            Return the part of a string that is before the first occurrence of the operand
            </summary>
            <param name="text">The source string</param>
            <param name="find">The text to find</param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.CleanUp(System.String)">
            <summary>
            Clean a string by converts null to an empty string and trimming any whitespace from the beginning and end
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.SplitClean(System.String)">
            <summary>
            Perform a string split using whitespace demarcators (' ', tab, newline, return) and trimming each result
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.SplitClean(System.String,System.Char)">
            <summary>
            Perform a string split that also trims whitespace from each result and removes duplicats
            </summary>
            <param name="text"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.SplitClean(System.String,System.Char[])">
            <summary>
            Perform a string split that also trims whitespace from each result and removes duplicats
            </summary>
            <param name="text"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.Reverse(System.Text.StringBuilder)">
             <summary>
             Reverse the contents of the StringBuilder
             </summary>
            
             <param name="text">
             The StringBuilder
             </param>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.Reverse(System.String)">
             <summary>
             Reverse a string
             </summary>
            
             <param name="text">
             The string
             </param>
            
             <returns>
             A new string
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.Substring(System.Char[],System.Int32,System.Int32)">
             <summary>
             Return a substring from a character array starting at the startIndex provided of the
             specified length.
             </summary>
            
             <param name="text">
             The source text.
             </param>
             <param name="startIndex">
             The starting index.
             </param>
             <param name="length">
             The length of the substring to extract.
             </param>
            
             <returns>
             The substring.
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.Substring(System.Char[],System.Int32)">
             <summary>
             Return a substring from a character array from the starting index to the end of the array.
             </summary>
            
             <param name="text">
             The source text.
             </param>
             <param name="startIndex">
             The starting index.
             </param>
            
             <returns>
             The substring.
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.Seek(System.Char[],System.String)">
             <summary>
             Return the position of the first occurrence of a string in a character array.
             </summary>
            
             <param name="text">
             The text to seek within
             </param>
             <param name="seek">
             The tarket
             </param>
            
             <returns>
             The index of the target, or -1 if not found
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.Seek(System.Char[],System.String,System.Int32)">
             <summary>
             Return the position of the first occurrence of a string in a character array that is on or
             after startIndex.
             </summary>
            
             <param name="text">
             .
             </param>
             <param name="seek">
             .
             </param>
             <param name="startIndex">
             .
             </param>
            
             <returns>
             .
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.ToLower(System.Char)">
             <summary>
             Convert a single character to lower case
             </summary>
            
             <param name="character">
             The character to act on.
             </param>
            
             <returns>
             The lowercased character
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.ToUpper(System.Char)">
             <summary>
             Convert a single character to upper case
             </summary>
            
             <param name="character">
             The character to act on.
             </param>
            
             <returns>
             The uppercased character
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.IndexOf``1(``0[],``0,System.Int32)">
             <summary>
             Return the index of item in an array. If count is > 0 then that is considered the length of
             the array.
             </summary>
            
             <typeparam name="T">
             .
             </typeparam>
             <param name="arr">
             .
             </param>
             <param name="item">
             .
             </param>
             <param name="count">
             .
             </param>
            
             <returns>
             .
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.ComparerFor(System.StringComparison)">
             <summary>
             Return the default StringComparer class that implements the behavior for a StringComparison
             </summary>
            
             <param name="comparison">
             The comparison to act on.
             </param>
            
             <returns>
             .
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.CloneList(System.Collections.IEnumerable)">
            <summary>
            (Alpha) Clone a sequence of objects.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.CloneList(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            (Alpha) Deep clone a sequence of objects.
            </summary>
            <param name="obj"></param>
            <param name="deep"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.Web.AsyncPostbackData">
            <summary>
            Represents async data from an ASP.NET webforms UpdatePanel
            </summary>
        </member>
        <member name="M:CsQuery.Web.AsyncPostbackData.Create(System.Int32,System.String,System.String,System.String)">
            <summary>
            Populate the content from a ASP.NET updatepanel data block
            </summary>
            <param name="length"></param>
            <param name="type"></param>
            <param name="id"></param>
            <param name="content"></param>
        </member>
        <member name="M:CsQuery.Web.AsyncPostbackData.Render">
             <summary>
             Output this data block, recalulating the lengtht parameter based on the new output.
             </summary>
            
             <returns>
             HTML string.
             </returns>
        </member>
        <member name="M:CsQuery.Web.AsyncPostbackData.Render(CsQuery.DomRenderingOptions)">
             <summary>
             Output this data block, recalulating the lengtht parameter based on the new output, using the passed options.
             </summary>
            
             <param name="options">
             Options for controlling the operation.
             </param>
            
             <returns>
             HTML string.
             </returns>
        </member>
        <member name="F:CsQuery.Web.AsyncPostbackData.Content">
            <summary>
            The content of the data packet (HTML). Probably, you'd rather be looking at the Dom property.
            </summary>
        </member>
        <member name="F:CsQuery.Web.AsyncPostbackData.Length">
            <summary>
            The length, in bytes, of the data component of this UpdatePanel data packet
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncPostbackData.Dom">
            <summary>
            Gets the DOM created from the HTML of this UpdatePanel data packet
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncPostbackData.ID">
            <summary>
            Gets or sets the UpdatePanel identifier.
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncPostbackData.DataType">
            <summary>
            Gets or sets the type of the data. This is a Microsoft entity.
            </summary>
        </member>
        <member name="T:CsQuery.Web.IAsyncRequestQueue">
            <summary>
            A group of async web requests. 
            NOT YET IMPLEMENTED
            </summary>
            
        </member>
        <member name="M:CsQuery.Web.IAsyncRequestQueue.AddRequest(System.String)">
             <summary>
             Adds a request to the queue.
             </summary>
            
             <param name="url">
             URL of the document.
             </param>
        </member>
        <member name="M:CsQuery.Web.IAsyncRequestQueue.AddRequest(CsQuery.Web.ICsqWebRequest)">
             <summary>
             Adds a request to the queue.
             </summary>
            
             <param name="request">
             The request.
             </param>
        </member>
        <member name="M:CsQuery.Web.IAsyncRequestQueue.Results">
             <summary>
             A sequence of responses from the completed requests
             </summary>
            
             <returns>
             An enumerator that allows foreach to be used to process results in this collection.
             </returns>
        </member>
        <member name="P:CsQuery.Web.IAsyncRequestQueue.State">
            <summary>
            Gets the state of the request queue.
            </summary>
        </member>
        <member name="T:CsQuery.Web.IWebRequestInfo">
            <summary>
            Interface representing a WebRequest
            </summary>
        </member>
        <member name="T:CsQuery.Web.CsqWebRequest">
            <summary>
            A CsqWebRequest object manages data and state related to a WebRequest
            </summary>
        </member>
        <member name="M:CsQuery.Web.CsqWebRequest.#ctor(System.String)">
             <summary>
             Creates a new CsqWebRequest for a given URL using the default IHttpWebRequestFactory.
             </summary>
            
             <param name="url">
             URL of the document.
             </param>
        </member>
        <member name="M:CsQuery.Web.CsqWebRequest.#ctor(System.String,HttpWebAdapters.IHttpWebRequestFactory)">
             <summary>
             Creates a new CsqWebRequest for a URL using the provided IHttpWebRequestFactory. (Usually,
             you should use the default constructor, unless replacing the .NET framework HttpWebRequest
             object for testing or some other purpose)
             </summary>
            
             <param name="url">
             URL of the document.
             </param>
             <param name="webRequestFactory">
             The web request factory.
             </param>
        </member>
        <member name="M:CsQuery.Web.CsqWebRequest.GetAsync(System.Action{CsQuery.Web.ICsqWebResponse},System.Action{CsQuery.Web.ICsqWebResponse})">
             <summary>
             Initiates an asynchronous GET request.
             </summary>
            
             <param name="success">
             A delegate that will be invoked with the response data structure upon successful resolution
             of the request.
             </param>
             <param name="fail">
             A delegate that will be invoked with the response data structure upon failure.
             </param>
            
             <returns>
             A ManualResetEvent object for this asynchronous operation.
             </returns>
        </member>
        <member name="M:CsQuery.Web.CsqWebRequest.GetAsync(HttpWebAdapters.IHttpWebRequest,System.Action{CsQuery.Web.ICsqWebResponse},System.Action{CsQuery.Web.ICsqWebResponse})">
             <summary>
             Initiates an asynchronous GET request from an IHttpWebRequest object.
             </summary>
            
             <param name="request">
             The request.
             </param>
             <param name="success">
             A delegate that will be invoked with the response data structure upon successful resolution
             of the request.
             </param>
             <param name="fail">
             A delegate that will be invoked with the response data structure upon failure.
             </param>
            
             <returns>
             A ManualResetEvent object for this asynchronous operation.
             </returns>
        </member>
        <member name="M:CsQuery.Web.CsqWebRequest.Get">
             <summary>
             Initiate a synchronous GET request.
             </summary>
            
             <returns>
             The HTML returned by a successful request
             </returns>
        </member>
        <member name="M:CsQuery.Web.CsqWebRequest.Get(HttpWebAdapters.IHttpWebRequest)">
             <summary>
             Initiate a synchronous GET request from an existing IHttpWebRequest object
             </summary>
            
             <param name="request">
             The request.
             </param>
            
             <returns>
             The HTML returned by a successful request.
             </returns>
        </member>
        <member name="M:CsQuery.Web.CsqWebRequest.GetWebRequest">
             <summary>
             Gets a new HttpWebRequest object for the URL bound to this CsqWebRequest.
             </summary>
            
             <returns>
             An HttpWebRequest.
             </returns>
        </member>
        <member name="M:CsQuery.Web.CsqWebRequest.Post">
             <summary>
             Initiate an http POST request.
             </summary>
            
             <returns>
             The data returned by the POST request
             </returns>
        </member>
        <member name="M:CsQuery.Web.CsqWebRequest.Post(System.String)">
             <summary>
             Initiate an http POST request.
             </summary>
            
             <param name="url">
             URL of the document.
             </param>
            
             <returns>
             The data returned by the POST request
             </returns>
        </member>
        <member name="M:CsQuery.Web.CsqWebRequest.Post(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
             <summary>
             Initiate an http POST request.
             </summary>
            
             <param name="url">
             URL of the document.
             </param>
             <param name="postData">
             The information describing the post data to be sent this request.
             </param>
            
             <returns>
             The data returned by the POST request.
             </returns>
        </member>
        <member name="M:CsQuery.Web.CsqWebRequest.GetResponseStreamReader(HttpWebAdapters.IHttpWebRequest)">
             <summary>
             Gets response stream from a webrequest using the correct encoding.
             </summary>
            
             <param name="request">
             The request.
             </param>
            
             <returns>
             The response stream.
             </returns>
        </member>
        <member name="P:CsQuery.Web.CsqWebRequest.Url">
            <summary>
            The url to load.
            </summary>
        </member>
        <member name="P:CsQuery.Web.CsqWebRequest.UserAgent">
            <summary>
            The UserAgent string to present to the remote server.
            </summary>
        </member>
        <member name="P:CsQuery.Web.CsqWebRequest.Async">
            <summary>
            Gets or sets a value indicating whether the asynchronous.
            </summary>
        </member>
        <member name="P:CsQuery.Web.CsqWebRequest.Complete">
            <summary>
            Returns true when this request has finished processing.
            </summary>
        </member>
        <member name="P:CsQuery.Web.CsqWebRequest.Dom">
            <summary>
            The CQ object representing the contents of the URL.
            </summary>
        </member>
        <member name="P:CsQuery.Web.CsqWebRequest.Timeout">
            <summary>
            The time, in milliseconds, after which to abort an incomplete request.
            </summary>
        </member>
        <member name="P:CsQuery.Web.CsqWebRequest.Id">
            <summary>
            A unique ID for this request. This will be automatically generated if not assigned.
            </summary>
        </member>
        <member name="P:CsQuery.Web.CsqWebRequest.Html">
            <summary>
            Gets or sets the HTML.
            </summary>
        </member>
        <member name="P:CsQuery.Web.CsqWebRequest.PostDataString">
            <summary>
            Gets or sets the post data string.
            </summary>
        </member>
        <member name="P:CsQuery.Web.CsqWebRequest.PostData">
            <summary>
            Gets the information describing the post data to be sent this request.
            </summary>
        </member>
        <member name="T:CsQuery.Web.AsyncWebRequest">
            <summary>
            A class encapsulating the functionality needed to make requests of remote web servers, and
            return the HTML as a CQ object.
            </summary>
        </member>
        <member name="M:CsQuery.Web.AsyncWebRequest.#ctor(HttpWebAdapters.IHttpWebRequest)">
             <summary>
             Creates an AsyncWebRequest for a WebRequest
             </summary>
            
             <param name="request">
             The WebRequest object.
             </param>
        </member>
        <member name="F:CsQuery.Web.AsyncWebRequest.allDone">
            <summary>
            A ManualResetEvent returned by the async request.
            </summary>
        </member>
        <member name="M:CsQuery.Web.AsyncWebRequest.GetDocument">
            <summary>
            Return a CQ object, treating the HTML as a complete document
            </summary>
        </member>
        <member name="M:CsQuery.Web.AsyncWebRequest.GetContent">
            <summary>
            Return a CQ object, treating the HTML as content
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Web.AsyncWebRequest.GetAsync">
            <summary>
            Begin the async request
            </summary>
            <returns></returns>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.HtmlStringbuilder">
            <summary>
            Accumulator for the HTML response
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.ResponseStream">
            <summary>
            Stream of the HTM Lresponse
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.CallbackSuccess">
            <summary>
            Delegate to invoke upon successful completion of a request
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.CallbackFail">
            <summary>
            Delegate to invoke when a request fails
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.Id">
            <summary>
            A unique identifier for this request
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.Url">
            <summary>
            The URL of the request
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.Timeout">
            <summary>
            Time, in milliseconds, after which a web request will be aborted.
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.UserAgent">
            <summary>
            Get or set the user agent string used when the request is made
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.Started">
            <summary>
            The time that the async request was initiated.
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.Finished">
            <summary>
            The time that the async request was completed
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.Complete">
            <summary>
            Indicates that an async request has completed.
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.Success">
            <summary>
            True if the WebRequest was completed successfully.
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.WebException">
            <summary>
            When a request fails, contains the exception raised.
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.Request">
            <summary>
            The WebRequest object
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.Error">
            <summary>
            Text of any error that occurred.
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.HttpStatus">
            <summary>
            The HTTP status code for the response.
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.HttpStatusDescription">
            <summary>
            The HTTP status description for the response.
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.Response">
            <summary>
            The async HttpWebResponse
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.Html">
            <summary>
            Return the Html response from the request
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.Dom">
            <summary>
            Return a document from the HTML web request result. DEPRECATED. use GetDocument() instead.
            </summary>
        </member>
        <member name="T:CsQuery.Web.ServerConfig">
            <summary>
            Configuration opttions used when accessing remote resources
            </summary>
        </member>
        <member name="M:CsQuery.Web.ServerConfig.#cctor">
            <summary>
            Configure the "default default" settings.
            </summary>
        </member>
        <member name="M:CsQuery.Web.ServerConfig.Merge(CsQuery.Web.ServerConfig)">
             <summary>
             Merge any non-null options into a new options object.
             </summary>
            
             <param name="options">
             The options
             </param>
            
             <returns>
             A new ServerConfig object
             </returns>
        </member>
        <member name="M:CsQuery.Web.ServerConfig.Apply(CsQuery.Web.ServerConfig,CsQuery.Web.ICsqWebRequest)">
             <summary>
             Apply these options to a web request.
             </summary>
            
             <param name="options">
             The options.
             </param>
             <param name="request">
             The CsqWebRequest object to apply the options to.
             </param>
        </member>
        <member name="P:CsQuery.Web.ServerConfig.Default">
            <summary>
            The default settings used when making remote requests.
            </summary>
        </member>
        <member name="P:CsQuery.Web.ServerConfig.UserAgent">
            <summary>
            Gets or sets the user agent string that will be used to identify this service to the server
            </summary>
        </member>
        <member name="P:CsQuery.Web.ServerConfig.Timeout">
            <summary>
            Gets or sets the timeout after which an incomplete request will be aborted
            </summary>
        </member>
        <member name="P:CsQuery.Web.ServerConfig.TimeoutSeconds">
            <summary>
            Gets or sets the timeout (in seconds)  after which an incomplete request will be aborted
            </summary>
        </member>
        <member name="T:CsQuery.Web.WebRequestState">
            <summary>
            Web request state: a class encapsulating information about an async web request
            </summary>
        </member>
        <member name="F:CsQuery.Web.WebRequestState.RequestData">
            <summary>
            The request
            </summary>
        </member>
        <member name="F:CsQuery.Web.WebRequestState.BufferRead">
            <summary>
            A buffer
            </summary>
        </member>
        <member name="F:CsQuery.Web.WebRequestState.Request">
            <summary>
            The WebRequest
            </summary>
        </member>
        <member name="F:CsQuery.Web.WebRequestState.ResponseStream">
            <summary>
            The response stream.
            </summary>
        </member>
        <member name="F:CsQuery.Web.WebRequestState.StreamDecode">
            <summary>
            The stream decoder.
            </summary>
        </member>
        <member name="F:CsQuery.Web.WebRequestState.RequestInfo">
            <summary>
            Information describing the request.
            </summary>
        </member>
        <member name="M:CsQuery.Web.WebRequestState.#ctor(CsQuery.Web.AsyncWebRequest)">
             <summary>
             Constructor.
             </summary>
            
             <param name="requestInfo">
             Information describing the request.
             </param>
        </member>
        <member name="T:CsQuery.Implementation.SelectionSet`1">
             <summary>
             A list of DOM elements. The default order is the order added to this construct; the Order
             property can be changed to return the contents in a different order.
             </summary>
            
             <typeparam name="T">
             The type of element represented by this set.
             </typeparam>
        </member>
        <member name="M:CsQuery.Implementation.SelectionSet`1.#ctor(CsQuery.Implementation.SelectionSetOrder)">
             <summary>
             Create an initially empty instance whose results are returned in the order specified.
             </summary>
            
             <param name="outputOrder">
             The output order.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.SelectionSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},CsQuery.Implementation.SelectionSetOrder,CsQuery.Implementation.SelectionSetOrder)">
             <summary>
             Create an instance based on an existing sequence. The order passed defines the order of the
             original list; if the output order should be different than change it.
             
             The sequence is bound directly as the source of this selection set; it is not enumerated.
             Therefore it's possible to create "live" sets that will reflect the same contents as their
             original source at any point in time. If a client alters the selection set, however, it
             becomes static as the set at that point is copied in order to permit alterations. The
             original source sequence is never altered, even if it is a list type that can be altered.
             
             Because of this care is required. If using an IEnumerable source that is not a basic data
             structure, but instead refers to a computationally-intensive process, it might be desirable
             to copy it to a list first. The output from the HTML parser and selector engine do this
             automatically to prevent accidental misuse. It is conceivable that some future function might
             want to provide direct access the the selector engine's IEnumerable output instead of a List
             copy to provide a live CSS selector; in this case the engine's Select method would need to be
             altered to return the enumerator directly.
             </summary>
            
             <param name="elements">
             The sequence to source this selection set.
             </param>
             <param name="inputOrder">
             The list order.
             </param>
             <param name="outputOrder">
             The output order.
             </param>
        </member>
        <member name="F:CsQuery.Implementation.SelectionSet`1._IsDirty">
            <summary>
            Cached count
            </summary>
        </member>
        <member name="F:CsQuery.Implementation.SelectionSet`1.OriginalList">
            <summary>
            The immutable list as set by a client; can be obsolete if MutableList is non-null
            </summary>
        </member>
        <member name="F:CsQuery.Implementation.SelectionSet`1._OrderedList">
            <summary>
            Cached reference to the list in the output order
            </summary>
        </member>
        <member name="F:CsQuery.Implementation.SelectionSet`1._MutableList">
            <summary>
            The active list, if changes are made after set by the client
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.SelectionSet`1.Add(`0)">
             <summary>
             Adds a new item to the SelectionSet
             </summary>
            
             <param name="item">
             The item to add.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.SelectionSet`1.Clear">
            <summary>
            Clears this SelectionSet
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.SelectionSet`1.Clone">
             <summary>
             Makes a clone of this SelectionSet
             </summary>
            
             <returns>
             A copy of this object.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.SelectionSet`1.CloneImpl">
             <summary>
             Enumerates clone objects in this collection.
             </summary>
            
             <returns>
             An enumerator that allows foreach to be used to process clone objects in this collection.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.SelectionSet`1.Contains(`0)">
             <summary>
             Test whether the item is present in the SelectionSet
             </summary>
            
             <param name="item">
             The item to test for containment.
             </param>
            
             <returns>
             true if the object is in this collection, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.SelectionSet`1.CopyTo(`0[],System.Int32)">
             <summary>
             Copy the contents of this SelectionSet to an array
             </summary>
            
             <param name="array">
             The target array.
             </param>
             <param name="arrayIndex">
             Zero-based index of the starting position in the array to begin copying.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.SelectionSet`1.Remove(`0)">
             <summary>
             Removes the given item from the SelectionSet
             </summary>
            
             <param name="item">
             The item to remove.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.SelectionSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Removes all elements in the specified collection from the current SelectionSet&lt;T&gt;
             object.
             </summary>
            
             <param name="other">
             The collection of items to remove from the SelectionSet&lt;T&gt; object.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.SelectionSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Modifies the current SelectionSet&lt;T&gt; object to contain only elements that are present
             in that object and in the specified collection.
             </summary>
            
             <param name="other">
             The collection to compare to the current SelectionSet&lt;T&gt;
             object.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.SelectionSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Determines whether a SelectionSet&lt;T&gt; object is a proper subset of the specified
             collection.
             </summary>
            
             <param name="other">
             The collection to compare to the current SelectionSet&lt;T&gt; object.
             </param>
            
             <returns>
             true if it is a proper subset, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.SelectionSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Determines whether a SelectionSet&lt;T&gt; object is a proper superset of the specified
             collection.
             </summary>
            
             <param name="other">
             The collection to compare to the current SelectionSet&lt;T&gt; object.
             </param>
            
             <returns>
             true if is is a proper superset, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.SelectionSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Determines whether a SelectionSet&lt;T&gt; object is a subset of the specified collection.
             </summary>
            
             <param name="other">
             The collection to compare to the current SelectionSet&lt;T&gt; object.
             </param>
            
             <returns>
             true if it is a proper subset, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.SelectionSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Determines whether a SelectionSet&lt;T&gt; object is a superset of the specified collection.
             </summary>
            
             <param name="other">
             The collection to compare to the current SelectionSet&lt;T&gt; object.
             </param>
            
             <returns>
             true if is is a proper superset, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.SelectionSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Determines whether the current SelectionSet&lt;T&gt; object and a specified collection share
             common elements.
             </summary>
            
             <param name="other">
             The collection to compare to the current System.Collections.Generic.HashSet&lt;T&gt;
             object.
             </param>
            
             <returns>
             true if the sets share at least one common element; , false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.SelectionSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Determines whether a SelectionSet&lt;T&gt; object and the specified collection contain the
             same elements.
             </summary>
            
             <param name="other">
             The collection to compare to the current SelectionSet&lt;T&gt; object.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.SelectionSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Modifies the current SelectionSet&lt;T&gt; object to contain only elements that are present
             either in that object or in the specified collection, but not both.
             </summary>
            
             <param name="other">
             The collection to compare to the current SelectionSet&lt;T&gt; object.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.SelectionSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Modifies the current SelectionSet&lt;T&gt; object to contain all elements that are present in
             itself, the specified collection, or both.
             </summary>
            
             <param name="other">
             The collection to compare to the current SelectionSet&lt;T&gt; object.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.SelectionSet`1.IndexOf(`0)">
             <summary>
             Return the zero-based index of item in a sequence.
             </summary>
            
             <param name="item">
             The item.
             </param>
            
             <returns>
             The zero-based position in the list where the item was found, or -1 if it was not found.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.SelectionSet`1.Insert(System.Int32,`0)">
             <summary>
             Inserts an item at the specified index
             </summary>
            
             <param name="index">
             Zero-based index of the position to insert the item
             </param>
             <param name="item">
             The item to insert.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.SelectionSet`1.RemoveAt(System.Int32)">
             <summary>
             Removes the item at the specified index.
             </summary>
            
             <exception cref="T:System.IndexOutOfRangeException">
             Thrown when the index is outside the bound of the current set.
             </exception>
            
             <param name="index">
             Zero-based index of the item to remove.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.SelectionSet`1.GetEnumerator">
             <summary>
             Gets the enumerator for the SelectionSet
             </summary>
            
             <returns>
             The enumerator.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.SelectionSet`1.ConvertToMutable">
            <summary>
            When an operation changes the original list, configures this object to track changes and deal
            with altered lists.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.SelectionSet`1.SynchronizeOrderedList">
            <summary>
            Use after set operations that alter the list
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.SelectionSet`1.MutableList">
            <summary>
            The list, if it has been changed from the value with which it was created
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.SelectionSet`1.OrderedList">
            <summary>
            The selection set in the output order.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.SelectionSet`1.IsDirty">
            <summary>
            The output (sorted) list is dirty because changes have been made since it was created. Update the cache.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.SelectionSet`1.IsAltered">
            <summary>
            The list is altered from its original state using "Add" or "Remove".
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.SelectionSet`1.OutputOrder">
            <summary>
            The order in which elements in the set are returned.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.SelectionSet`1.Count">
            <summary>
            Gets the number of items in the SelectionSet
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.SelectionSet`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this object is read only. For SelectionSet objects, this is always false.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.SelectionSet`1.Item(System.Int32)">
             <summary>
             Indexer to get or set items within this collection using array index syntax.
             </summary>
            
             <param name="index">
             Zero-based index of the entry to access.
             </param>
            
             <returns>
             The indexed item.
             </returns>
        </member>
        <member name="T:CsQuery.JsObject">
            <summary>
            A dynamic object implementation that differs from ExpandoObject in two ways:
            
            1) Missing property values always return null (or a specified value)
            2) Allows case-insensitivity
            
            </summary>
        </member>
        <member name="M:CsQuery.JsObject.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CsQuery.JsObject.#ctor(System.StringComparer,System.Object)">
             <summary>
             Create in instance using a comparer and a particular value for missing properties
             </summary>
            
             <param name="comparer">
             The comparer.
             </param>
             <param name="missingPropertyValue">
             The missing property value.
             </param>
        </member>
        <member name="M:CsQuery.JsObject.Initialize(System.StringComparer,System.Object)">
             <summary>
             Initializes this object to its default state.
             </summary>
            
             <param name="comparer">
             The comparer.
             </param>
             <param name="missingPropertyValue">
             The missing property value.
             </param>
        </member>
        <member name="M:CsQuery.JsObject.ToString">
             <summary>
             Convert this object into a JSON string.
             </summary>
            
             <returns>
             This object as a string.
             </returns>
        </member>
        <member name="M:CsQuery.JsObject.Enumerate``1">
             <summary>
             Enumerates the property/value pairs
             </summary>
            
             <typeparam name="T">
             Generic type parameter.
             </typeparam>
            
             <returns>
             An enumerator that allows foreach to be used to process enumerate&lt; t&gt; in this
             collection.
             </returns>
        </member>
        <member name="M:CsQuery.JsObject.Get``1(System.String)">
             <summary>
             Gets the strongly-typed value of a property
             </summary>
            
             <typeparam name="T">
             Generic type parameter.
             </typeparam>
             <param name="name">
             The property name
             </param>
            
             <returns>
             The value, or null if the value does not exist.
             </returns>
        </member>
        <member name="M:CsQuery.JsObject.GetList``1(System.String)">
             <summary>
             Return the value of a property as a strongly-typed sequence
             </summary>
            
             <exception cref="T:System.ArgumentException">
             Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            
             <typeparam name="T">
             The type of value expected in the property
             </typeparam>
             <param name="name">
             The name of the property
             </param>
            
             <returns>
             A sequence of values of type T
             </returns>
        </member>
        <member name="M:CsQuery.JsObject.Get(System.String)">
             <summary>
             Gets a value for a named property
             </summary>
            
             <param name="name">
             The property name.
             </param>
            
             <returns>
             The value
             </returns>
        </member>
        <member name="M:CsQuery.JsObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
             <summary>
             Provides the implementation for operations that get member values. Classes derived from the
             <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify
             dynamic behavior for operations such as getting a value for a property.
             </summary>
            
             <param name="binder">
             Provides information about the object that called the dynamic operation. The binder.Name
             property provides the name of the member on which the dynamic operation is performed. For
             example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject
             is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" />
             class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether
             the member name is case-sensitive.
             </param>
             <param name="result">
             The result of the get operation. For example, if the method is called for a property, you can
             assign the property value to <paramref name="result" />.
             </param>
            
             <returns>
             true if the operation is successful; otherwise, false. If this method returns false, the run-
             time binder of the language determines the behavior. (In most cases, a run-time exception is
             thrown.)
             </returns>
        </member>
        <member name="M:CsQuery.JsObject.TryGetMember(System.String,System.Type,System.Object@)">
             <summary>
             Provides the implementation for operations that get member values. Classes derived from the
             <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify
             dynamic behavior for operations such as getting a value for a property.
             </summary>
            
             <exception cref="T:System.Collections.Generic.KeyNotFoundException">
             Thrown when a key not found error condition occurs.
             </exception>
            
             <param name="name">
             .
             </param>
             <param name="type">
             The type.
             </param>
             <param name="result">
             The result of the get operation. For example, if the method is called for a property, you can
             assign the property value to <paramref name="result"/>.
             </param>
            
             <returns>
             true if the operation is successful; otherwise, false. If this method returns false, the run-
             time binder of the language determines the behavior. (In most cases, a run-time exception is
             thrown.)
             </returns>
        </member>
        <member name="M:CsQuery.JsObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
             <summary>
             Provides the implementation for operations that set member values. Classes derived from the
             <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify
             dynamic behavior for operations such as setting a value for a property.
             </summary>
            
             <param name="binder">
             Provides information about the object that called the dynamic operation. The binder.Name
             property provides the name of the member to which the value is being assigned. For example,
             for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of
             the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name
             returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is
             case-sensitive.
             </param>
             <param name="value">
             The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where
             sampleObject is an instance of the class derived from the
             <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".
             </param>
            
             <returns>
             true if the operation is successful; otherwise, false. If this method returns false, the run-
             time binder of the language determines the behavior. (In most cases, a language-specific run-
             time exception is thrown.)
             </returns>
        </member>
        <member name="M:CsQuery.JsObject.TrySetMember(System.String,System.Object)">
             <summary>
             Provides the implementation for operations that set member values. Classes derived from the
             <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify
             dynamic behavior for operations such as setting a value for a property.
             </summary>
            
             <param name="name">
             .
             </param>
             <param name="value">
             The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where
             sampleObject is an instance of the class derived from the
             <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".
             </param>
            
             <returns>
             true if the operation is successful; otherwise, false. If this method returns false, the run-
             time binder of the language determines the behavior. (In most cases, a language-specific run-
             time exception is thrown.)
             </returns>
        </member>
        <member name="M:CsQuery.JsObject.HasProperty(System.String)">
             <summary>
             Test if a named property exists
             </summary>
            
             <param name="name">
             The property name
             </param>
            
             <returns>
             true if the property exists, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.JsObject.Delete(System.String)">
             <summary>
             Deletes a named property.
             </summary>
            
             <param name="name">
             The property to delete.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.JsObject.ToJsObject(System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>
             Returns a new JsObject from a dictionary of key/value paris
             </summary>
            
             <param name="value">
             The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where
             sampleObject is an instance of the class derived from the
             <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".
             </param>
            
             <returns>
             value as a JsObject.
             </returns>
        </member>
        <member name="M:CsQuery.JsObject.GetDynamicMemberNames">
             <summary>
             Returns the enumeration of all dynamic member names.
             </summary>
            
             <returns>
             A sequence that contains dynamic member names.
             </returns>
        </member>
        <member name="M:CsQuery.JsObject.GetEnumerator">
             <summary>
             The enumerator
             </summary>
            
             <returns>
             The enumerator.
             </returns>
        </member>
        <member name="P:CsQuery.JsObject.AllowMissingProperties">
            <summary>
            When true, accessing missing properties will return MissingPropertyValue instead of throwing
            an error.
            </summary>
        </member>
        <member name="P:CsQuery.JsObject.MissingPropertyValue">
            <summary>
            An object or value to be returned when missing properties are accessed (assuming they are allowed)
            </summary>
        </member>
        <member name="P:CsQuery.JsObject.IgnoreCase">
            <summary>
            When true, the property names will not be case sensitive
            </summary>
        </member>
        <member name="P:CsQuery.JsObject.InnerProperties">
            <summary>
            The dictionary of properties
            </summary>
        </member>
        <member name="P:CsQuery.JsObject.Item(System.String)">
             <summary>
             Return the value of a named property
             </summary>
            
             <param name="name">
             The name.
             </param>
            
             <returns>
             The indexed item.
             </returns>
        </member>
        <member name="T:CsQuery.Implementation.ChildNodeList">
            <summary>
            A list of nodes representing the children of a DOM element.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.ChildNodeList.#ctor(CsQuery.IDomContainer)">
             <summary>
             Constructor binding this list to its owner
             </summary>
            
             <param name="owner">
             The object that owns this list (the parent)
             </param>
        </member>
        <member name="M:CsQuery.Implementation.ChildNodeList.Item(System.Int32)">
             <summary>
             Get the item at the specified index.
             </summary>
            
             <param name="index">
             Zero-based index of the item.
             </param>
            
             <returns>
             An item.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.ChildNodeList.IndexOf(CsQuery.IDomObject)">
             <summary>
             The zero-based index of the item in this list
             </summary>
            
             <param name="item">
             The element to add.
             </param>
            
             <returns>
             The zero-based index of the item, or -1 if it was not found.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.ChildNodeList.Add(CsQuery.IDomObject)">
             <summary>
             Add a child to this element.
             </summary>
            
             <param name="item">
             The element to add
             </param>
        </member>
        <member name="M:CsQuery.Implementation.ChildNodeList.AddAlways(CsQuery.IDomObject)">
            <summary>
            Add a child without validating that a node is a member of this DOM already or that the ID is unique
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:CsQuery.Implementation.ChildNodeList.Insert(System.Int32,CsQuery.IDomObject)">
             <summary>
             Adds a child element at a specific index.
             </summary>
            
             <param name="index">
             The index at which to insert the element
             </param>
             <param name="item">
             The element to insert
             </param>
        </member>
        <member name="M:CsQuery.Implementation.ChildNodeList.RemoveAt(System.Int32)">
            <summary>
            Remove an item from this list and update index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:CsQuery.Implementation.ChildNodeList.Remove(CsQuery.IDomObject)">
             <summary>
             Remove an element from this element's children.
             </summary>
            
             <param name="item">
             The item to remove.
             </param>
            
             <returns>
             true if it succeeds, false if the item was not found in the children.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.ChildNodeList.AddRange(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Adds a range of elements as children of this list.
             </summary>
            
             <param name="elements">
             An IEnumerable&lt;IDomObject&gt; of items to append to this.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.ChildNodeList.Clear">
            <summary>
            Remove all children of this node
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.ChildNodeList.Contains(CsQuery.IDomObject)">
             <summary>
             Query if this object contains the given item.
             </summary>
            
             <param name="item">
             The item to look for.
             </param>
            
             <returns>
             true if the object is in this collection, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.ChildNodeList.CopyTo(CsQuery.IDomObject[],System.Int32)">
             <summary>
             Copies this list to an array.
             </summary>
            
             <param name="array">
             The array.
             </param>
             <param name="arrayIndex">
             Zero-based index of the starting point in the array to copy to.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.ChildNodeList.GetEnumerator">
             <summary>
             Gets the enumerator.
             </summary>
            
             <returns>
             The enumerator.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.ChildNodeList.InnerList">
            <summary>
            The inner list of objects.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.ChildNodeList.Owner">
            <summary>
            Gets or sets the object that owns this list (the parent)
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.ChildNodeList.Indexer(System.Int32)">
             <summary>
             Indexer to get or set items within this collection using array index syntax.
             </summary>
            
             <param name="index">
             Zero-based index of the entry to access.
             </param>
            
             <returns>
             The indexed item.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.ChildNodeList.Count">
            <summary>
            Gets the number of items in this list.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.ChildNodeList.Length">
            <summary>
            The number of nodes in this INodeList.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.ChildNodeList.IsReadOnly">
            <summary>
            Gets a value indicating whether this object is read only. For ChildNodeList collections, this
            is always false.
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.RangeSortedDictionary`1">
            <summary>
            A dictionary that is substring-lookup capable. This is the data structure used to index HTML documents for selectors.
            A SortedSet of keys is used for the index because it allows fast access by substring. A list of keys obtained from the
            SortedSet for a selector is used to obtain the target references from a regular dictionary.
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:CsQuery.Implementation.RangeSortedDictionary`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:CsQuery.Implementation.RangeSortedDictionary`1.Keys">
            <summary>
            An ordered set of all the keys in this dictionary.
            </summary>
        </member>
        <member name="F:CsQuery.Implementation.RangeSortedDictionary`1.Index">
            <summary>
            The inner index.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.RangeSortedDictionary`1.GetRangeKeys(System.String)">
             <summary>
             Retrieve all the keys that match the subkey provided; that is, all keys that start with the
             value of 'subkey'.
             </summary>
            
             <param name="subkey">
             The subkey to match
             </param>
            
             <returns>
             A sequence of keys found in the dictionary.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.RangeSortedDictionary`1.GetRange(System.String,System.Int32,System.Boolean)">
             <summary>
             Return all matching keys at the specified depth relative to the subkey, e.g. 0 will return
             only the element that exactly matches the subkey.
             </summary>
            
             <param name="subKey">
             The subkey to match.
             </param>
             <param name="depth">
             The zero-based depth relative to the subkey's depth
             </param>
             <param name="descendants">
             When true, include elements that are at a greater depth too
             </param>
            
             <returns>
             A sequence of TValue elements.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.RangeSortedDictionary`1.GetRange(System.String)">
             <summary>
             Return a sequence of values for each key that starts with the value of 'subkey'.
             </summary>
            
             <param name="subKey">
             The subkey to match.
             </param>
            
             <returns>
             A sequence of values from the dictionary.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.RangeSortedDictionary`1.Add(System.String,`0)">
             <summary>
             Adds a key/value pair to the dictionary
             </summary>
            
             <param name="key">
             The key.
             </param>
             <param name="value">
             [out] The value.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.RangeSortedDictionary`1.ContainsKey(System.String)">
             <summary>
             Test whether the dictionary contains a value for 'key'
             </summary>
            
             <param name="key">
             The key.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.RangeSortedDictionary`1.Remove(System.String)">
             <summary>
             Removes the given key
             </summary>
            
             <param name="key">
             The key.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.RangeSortedDictionary`1.TryGetValue(System.String,`0@)">
             <summary>
             Try to get a value by name
             </summary>
            
             <param name="key">
             The key.
             </param>
             <param name="value">
             [out] The value.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.RangeSortedDictionary`1.Add(System.Collections.Generic.KeyValuePair{System.String,`0})">
             <summary>
             Adds a key/value pair to the dictionary.
             </summary>
            
             <param name="item">
             The item to test for.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.RangeSortedDictionary`1.Clear">
            <summary>
            Clears this object to its blank/initial state.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.RangeSortedDictionary`1.Contains(System.Collections.Generic.KeyValuePair{System.String,`0})">
             <summary>
             Test whether the KeyValuePair object exists in this dictionary.
             </summary>
            
             <param name="item">
             The item to test for.
             </param>
            
             <returns>
             true if the object is in this collection, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.RangeSortedDictionary`1.CopyTo(System.Collections.Generic.KeyValuePair{System.String,`0}[],System.Int32)">
             <summary>
             Copies the contents of the dictionary to an array of KeyValuePair objects.
             </summary>
            
             <param name="array">
             The array.
             </param>
             <param name="arrayIndex">
             Zero-based index of the array at which to start copying.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.RangeSortedDictionary`1.Remove(System.Collections.Generic.KeyValuePair{System.String,`0})">
             <summary>
             Removes the given KeyValuePair from the dictionary if it exists
             </summary>
            
             <param name="item">
             The item to remove.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.RangeSortedDictionary`1.GetEnumerator">
             <summary>
             Gets the enumerator.
             </summary>
            
             <returns>
             The enumerator.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.RangeSortedDictionary`1.KeysAudit">
            <summary>
            Returns the keys in human-readable format.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.RangeSortedDictionary`1.Values">
            <summary>
            Gets the values.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.RangeSortedDictionary`1.Item(System.String)">
             <summary>
             Return the value for 'key'
             </summary>
            
             <param name="key">
             The key.
             </param>
            
             <returns>
             The indexed item.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.RangeSortedDictionary`1.Count">
            <summary>
            Gets the number of items in this dictionary.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.RangeSortedDictionary`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this object is read only. This is always false.
            </summary>
        </member>
        <member name="T:CsQuery.Web.CsQueryHttpContext">
            <summary>
            Server extension to CsQuery -- adds functionality for dealing with postbacks, and getting data from 
            external sources
            </summary>
        </member>
        <member name="M:CsQuery.Web.CsQueryHttpContext.#ctor(System.Web.HttpContext,System.Web.UI.Page,System.Web.UI.HtmlTextWriter,System.Action{System.Web.UI.HtmlTextWriter})">
             <summary>
             Constructor for CsQueryHttpContext. Usually, you should use WebForms.CreateFromRender to
             create one of these.
             </summary>
            
             <param name="context">
             The context.
             </param>
             <param name="page">
             The ASP.NET WebForms Page object bound to this context.
             </param>
             <param name="writer">
             The writer.
             </param>
             <param name="renderMethod">
             The render method.
             </param>
        </member>
        <member name="M:CsQuery.Web.CsQueryHttpContext.Render">
            <summary>
            Renders the DOM to the bound TextWriter.
            </summary>
        </member>
        <member name="M:CsQuery.Web.CsQueryHttpContext.Render(CsQuery.DomRenderingOptions)">
             <summary>
             Renders the DOM to the bound TextWriter with the passed options
             </summary>
            
             <param name="options">
             Options for controlling the operation.
             </param>
        </member>
        <member name="M:CsQuery.Web.CsQueryHttpContext.Create">
            <summary>
            Create a context from the bound method information
            </summary>
        </member>
        <member name="P:CsQuery.Web.CsQueryHttpContext.Context">
             <summary>
             Gets or sets the current HttpContext.
             </summary>
            
             <value>
             The context.
             </value>
        </member>
        <member name="P:CsQuery.Web.CsQueryHttpContext.Writer">
             <summary>
             Gets the writer.
             </summary>
            
             <value>
             The interim writer
             </value>
        </member>
        <member name="P:CsQuery.Web.CsQueryHttpContext.ControlRenderMethod">
            <summary>
            A delegate to the Render method of a WebForms Page object
            </summary>
        </member>
        <member name="P:CsQuery.Web.CsQueryHttpContext.RealWriter">
            <summary>
            A reference to the HtmlTextWriter passed into the Render method
            </summary>
        </member>
        <member name="P:CsQuery.Web.CsQueryHttpContext.Page">
            <summary>
            The ASP.NET WebForms Page object bound to this context
            </summary>
        </member>
        <member name="P:CsQuery.Web.CsQueryHttpContext.Dom">
             <summary>
             The CQ object representing the output from the Render method.
             </summary>
            
             <value>
             The dom.
             </value>
        </member>
        <member name="P:CsQuery.Web.CsQueryHttpContext.IsAsync">
             <summary>
             Gets a value indicating whether this is an asynchronous get (e.g., an UpdatePanel).
             </summary>
            
             <value>
             true if this object is asynchronous, false if not.
             </value>
        </member>
        <member name="P:CsQuery.Web.CsQueryHttpContext.AsyncPostbackData">
             <summary>
             Sequence of AsyncPostbackData objects representing the HTML and metadata for each UpdatePanel
             that is part of the response
             </summary>
            
             <value>
             Object encapsulating the UpdatePanel data.
             </value>
        </member>
        <member name="T:CsQuery.Engine.Selector">
            <summary>
            A parsed selector, consisting of one or more SelectorClauses.
            </summary>
        </member>
        <member name="M:CsQuery.Engine.Selector.#ctor">
            <summary>
            Creates an empty selector
            </summary>
        </member>
        <member name="M:CsQuery.Engine.Selector.#ctor(CsQuery.Engine.SelectorClause)">
             <summary>
             Create a new selector from a single selector clause
             </summary>
            
             <param name="clause">
             The clause
             </param>
        </member>
        <member name="M:CsQuery.Engine.Selector.#ctor(System.Collections.Generic.IEnumerable{CsQuery.Engine.SelectorClause})">
             <summary>
             Create a new selector from a sequence of selector clauses.
             </summary>
            
             <param name="clauses">
             A sequence of clauses to build this selector
             </param>
        </member>
        <member name="M:CsQuery.Engine.Selector.#ctor(System.String)">
             <summary>
             Create a new selector from any string.
             </summary>
            
             <param name="selector">
             The CSS selector string, or a string of HTML.
             </param>
        </member>
        <member name="M:CsQuery.Engine.Selector.#ctor(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Create a new selector from DOM elements.
             </summary>
            
             <param name="elements">
             A sequence of elements.
             </param>
        </member>
        <member name="M:CsQuery.Engine.Selector.#ctor(CsQuery.IDomObject)">
             <summary>
             Create a new selector from a single element.
             </summary>
            
             <param name="element">
             The element to test.
             </param>
        </member>
        <member name="M:CsQuery.Engine.Selector.Add(CsQuery.Engine.SelectorClause)">
             <summary>
             Adds a clause to this selector.
             </summary>
            
             <param name="clause">
             The clause to insert.
             </param>
        </member>
        <member name="M:CsQuery.Engine.Selector.ToFilterSelector">
             <summary>
             Convert this selector to a context filter, meaning any open :filter type selectors will be
             applied against the context instead of the root. This differs from a Context selector in that
             non-filter selectors are still run against the document root, whereas in a Context selector,
             they are run against the context itself. This type is used for filters and "Is" and "Not",
             the Context type is used for "Find" and objects created with context.
             </summary>
            
             <returns>
             The context.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.Selector.ToContextSelector">
             <summary>
             Convert this selector to apply the context only: changes Root selectors to be applied to
             Context+Descendant traversal type. This is used to create selectors for use with "Find"
             </summary>
            
             <returns>
             A new selector.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.Selector.GetEngine(CsQuery.IDomDocument)">
             <summary>
             Gets a new selection engine for this selector
             </summary>
            
             <param name="document">
             The document that's the root for the selector engine
             </param>
            
             <returns>
             The new engine.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.Selector.Insert(System.Int32,CsQuery.Engine.SelectorClause,CsQuery.Engine.CombinatorType)">
             <summary>
             Insert a selector clause at the specified position.
             </summary>
            
             <exception cref="T:System.ArgumentException">
             Thrown if the selector is not valid to insert at this position.
             </exception>
            
             <param name="index">
             The position in the selector chain to insert this clause
             </param>
             <param name="clause">
             The clause to insert
             </param>
             <param name="combinatorType">
             (optional) type of the combinator.
             </param>
        </member>
        <member name="M:CsQuery.Engine.Selector.Select(CsQuery.IDomDocument)">
             <summary>
             Return the elements of document that match this selector
             </summary>
            
             <param name="document">
             The document against which to select
             </param>
            
             <returns>
             The sequence of matching elements
             </returns>
        </member>
        <member name="M:CsQuery.Engine.Selector.Select(CsQuery.IDomDocument,CsQuery.IDomObject)">
             <summary>
             Return the elements of document that match this selector within a context. 
             </summary>
            
             <param name="document">
             The document against which to select.
             </param>
             <param name="context">
             The context to select against. Context should be contained within document.
             </param>
            
             <returns>
             The sequence of matching elements.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.Selector.Select(CsQuery.IDomDocument,System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Return the elements of document that match this selector within a context.
             </summary>
            
             <param name="document">
             The document against which to select.
             </param>
             <param name="context">
             The context to select against. Context should be contained within document.
             </param>
            
             <returns>
             The sequence of matching elements.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.Selector.Filter(CsQuery.IDomDocument,System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Return only elements of sequence that match this selector.
             </summary>
            
             <param name="document">
             The DOM to which the members of the sequence belong.
             </param>
             <param name="sequence">
             The sequence to filter. 
             </param>
            
             <returns>
             A sequence of matching elements, which is a subset of the original sequence.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.Selector.Matches(CsQuery.IDomDocument,CsQuery.IDomObject)">
             <summary>
             Test if a single element matches this selector.
             </summary>
            
             <param name="document">
             The document context
             </param>
             <param name="element">
             The element to test
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.Selector.Except(CsQuery.IDomDocument,System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Return only elements from the sequence that do not match this selector.
             </summary>
            
             <param name="document">
             The document context.
             </param>
             <param name="sequence">
             The source sequence.
             </param>
            
             <returns>
             The elements from the source sequence that do not match this selector.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.Selector.Clone">
             <summary>
             Return a clone of this selector.
             </summary>
            
             <returns>
             A copy of this object.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.Selector.ToString">
             <summary>
             Returns CSS selector string of this Selector. This may not exactly match the input clause since
             it has been regenerated.
             </summary>
            
             <returns>
             A CSS selector.
             </returns>
        </member>
        <member name="M:CsQuery.Engine.Selector.GetEnumerator">
             <summary>
             An enumerator to iterate over each clause in this selector
             </summary>
            
             <returns>
             The enumerator.
             </returns>
        </member>
        <member name="P:CsQuery.Engine.Selector.Count">
            <summary>
            The number of clauses in this selector
            </summary>
        </member>
        <member name="P:CsQuery.Engine.Selector.Item(System.Int32)">
             <summary>
             Indexer to get clauses of this selector by index.
             </summary>
            
             <param name="index">
             Zero-based index of the entry to access.
             </param>
            
             <returns>
             The selector clause at the index specified
             </returns>
        </member>
        <member name="P:CsQuery.Engine.Selector.IsHmtl">
            <summary>
            Gets a value indicating whether this object is an HTML selector (e.g. it's not really a
            selector, but should return a new HTML fragment).
            </summary>
        </member>
        <member name="P:CsQuery.Engine.Selector.Clauses">
            <summary>
            Gets a list of clauses in this selector
            </summary>
        </member>
        <member name="P:CsQuery.Engine.Selector.ClausesClone">
            <summary>
            Gets a clone of the list of member clauses in this selector
            </summary>
        </member>
        <member name="T:CsQuery.ExtensionMethods.ExtensionMethods">
            <summary>
            Some extension methods that come in handy when working with CsQuery
            </summary>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.RegexReplace(System.String,System.String,System.String)">
             <summary>
             Perform a substring replace using a regular expression.
             </summary>
            
             <param name="input">
             The target of the replacement.
             </param>
             <param name="pattern">
             The pattern to match.
             </param>
             <param name="replacement">
             The replacement string.
             </param>
            
             <returns>
             A new string.
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.RegexReplace(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
             <summary>
             Perform a substring replace using a regular expression and one or more patterns
             </summary>
            
             <exception cref="T:System.ArgumentException">
             Thrown when the list of replacements is not the same length as the list of patterns.
             </exception>
            
             <param name="input">
             The target of the replacement.
             </param>
             <param name="patterns">
             The patterns.
             </param>
             <param name="replacements">
             The replacements.
             </param>
            
             <returns>
             A new string.
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.RegexReplace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
             <summary>
             Perform a substring replace using a regular expression.
             </summary>
            
             <param name="input">
             The target of the replacement.
             </param>
             <param name="pattern">
             The pattern to match.
             </param>
             <param name="evaluator">
             The evaluator.
             </param>
            
             <returns>
             A new string.
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.RegexTest(System.String,System.String)">
             <summary>
             Test whether the regular expression pattern matches the string.
             </summary>
            
             <param name="input">
             The string to test
             </param>
             <param name="pattern">
             The pattern
             </param>
            
             <returns>
             true if the pattern matches, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.Concat``1(System.Collections.Generic.IEnumerable{``0},``0)">
             <summary>
             Append an element to the end of a sequence.
             </summary>
            
             <typeparam name="T">
             Generic type parameter.
             </typeparam>
             <param name="list">
             The list to act on.
             </param>
             <param name="element">
             The element to append.
             </param>
            
             <returns>
             The combined sequence.
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
             <summary>
             Return the zero-based index of the first item in a sequence where the predicate returns true
             </summary>
            
             <typeparam name="T">
             Type of object in the sequence
             </typeparam>
             <param name="list">
             The sequence to search through.
             </param>
             <param name="predicate">
             The predicate.
             </param>
            
             <returns>
             The zero-based position in the list where the item was found, or -1 if it was not found.
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0@)">
             <summary>
             Return the zero-based index of the first item in a sequence where the predicate returns true,
             and return the matched item as an output parameter.
             </summary>
            
             <typeparam name="T">
             Generic type parameter.
             </typeparam>
             <param name="list">
             The sequence to search through.
             </param>
             <param name="predicate">
             The predicate.
             </param>
             <param name="item">
             [out] The matched item.
             </param>
            
             <returns>
             The zero-based position in the list where the item was found, or -1 if it was not found.
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.LastIndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0@)">
             <summary>
             Return the last zero-based index of the first item in a sequence where the predicate returns true,
             and return the matched item as an output parameter.
             </summary>
            
             <typeparam name="T">
             Generic type parameter.
             </typeparam>
             <param name="list">
             The sequence to search through.
             </param>
             <param name="predicate">
             The predicate.
             </param>
             <param name="item">
             [out] The matched item.
             </param>
            
             <returns>
             The zero-based index of the last match, or -1 if not found
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
             <summary>
             Return the zero-based index of item in a sequence.
             </summary>
            
             <typeparam name="T">
             The type of elements in the sequence.
             </typeparam>
             <param name="list">
             The sequence to search through.
             </param>
             <param name="target">
             The target collection.
             </param>
            
             <returns>
             The zero-based position in the list where the item was found, or -1 if it was not found.
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
             <summary>
             Iterate over a sequence, calling the delegate for each element.
             </summary>
            
             <typeparam name="T">
             The type of object in the sequence.
             </typeparam>
             <param name="list">
             The sequence.
             </param>
             <param name="action">
             The action to invoke for each object.
             </param>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
             <summary>
             Iterate over a sequence, calling the delegate for each element. The delegate should accept
             two parameters, the object T and the index of the current iteration.
             </summary>
            
             <typeparam name="T">
             The type of object in the sequence.
             </typeparam>
             <param name="list">
             The sequence.
             </param>
             <param name="action">
             The action to invoke for each object.
             </param>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.ToJSON(System.Object)">
            <summary>
            Serailize the object to a JSON string
            </summary>
            <param name="objectToSerialize"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.ParseJSON``1(System.String)">
            <summary>
            Deserialize the JSON string to a typed object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectToDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.ParseJSON(System.String)">
             <summary>
             Deserialize the JSON string to a dynamic object or a single value.
             </summary>
            
             <param name="json">
             The JSON string.
             </param>
            
             <returns>
             A new object created from the json.
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.HasProperty(System.Dynamic.DynamicObject,System.String)">
            <summary>
            Indicates whether a property exists on an ExpandoObject
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.Get``1(System.Dynamic.DynamicObject,System.String)">
            <summary>
            Return a typed value from a dynamic object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.Clone(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Clone a sequence of elements to a new sequence
             </summary>
            
             <param name="source">
             The source sequence
             </param>
            
             <returns>
             A sequence containing a clone of each element in the source.
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.Slice(System.Array,System.Int32,System.Int32)">
             <summary>
             Reduce the set of matched elements to a subset beginning with the 0-based index provided.
             </summary>
            
             <param name="array">
             The array to act on.
             </param>
             <param name="start">
             The 0-based index at which to begin selecting.
             </param>
             <param name="end">
             The 0-based index of the element at which to stop selecting. The actual element at this
             position is not included in the result.
             </param>
            
             <returns>
             A new array of the same type as the original.
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.Slice(System.Array,System.Int32)">
             <summary>
             Reduce the set of matched elements to a subset beginning with the 0-based index provided.
             </summary>
            
             <param name="array">
             The array to act on.
             </param>
             <param name="start">
             The 0-based index at which to begin selecting.
             </param>
            
             <returns>
             A new array of the same type as the original.
             </returns>
        </member>
        <member name="T:CsQuery.Utility.Support">
            <summary>
            Some static methods that didn't fit in anywhere else. 
            </summary>
        </member>
        <member name="M:CsQuery.Utility.Support.GetFile(System.String)">
            <summary>
            Read all text of a file, trying to find it from the execution location if not rooted.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.Support.GetFileStream(System.String)">
            <summary>
            Open a stream for a file, trying to find it from the execution location if not rooted.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:CsQuery.Utility.Support.TryGetFilePath(System.String,System.String@)">
             <summary>
             Given a partial path to a folder or file, try to find the full rooted path. The topmost part
             of the partial path must be part of the current application path; e.g. there must be an
             overlapping part on which to match.
             </summary>
            
             <param name="partialPath">
             The partial path to find.
             </param>
             <param name="filePath">
             [out] Full pathname of the file.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Utility.Support.GetFilePath(System.String)">
             <summary>
             Given a partial path to a folder or file, try to find the full rooted path. The topmost part
             of the partial path must be part of the current application path; e.g. there must be an
             overlapping part on which to match.
             </summary>
            
             <param name="partialPath">
             The partial path to find
             </param>
            
             <returns>
             The file path.
             </returns>
        </member>
        <member name="M:CsQuery.Utility.Support.GetFilePath(System.String,System.String)">
             <summary>
             Given a rooted path to look within, and a partial path to a file, the full path to the file.
             </summary>
            
             <exception cref="T:System.ArgumentException">
             Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            
             <param name="partialPath">
             The partial path to find.
             </param>
             <param name="basePath">
             The rooted path to match within
             </param>
            
             <returns>
             The full rooted path the the file.
             </returns>
        </member>
        <member name="M:CsQuery.Utility.Support.TryGetFilePath(System.String,System.String,System.String@)">
             <summary>
             Given a partial path to a folder or file, try to find the full rooted path. The topmost part
             of the partial path must be part of the current application path; e.g. there must be an
             overlapping part on which to match.
             </summary>
            
             <param name="partialPath">
             The partial path to find.
             </param>
             <param name="basePath">
             The rooted path to match within.
             </param>
             <param name="outputPath">
             [out] Full pathname of the output file.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Utility.Support.GetFirstExternalAssembly">
             <summary>
             Gets the first assembly that is not the assembly that this method belongs to
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <returns>
             The first external assembly.
             </returns>
        </member>
        <member name="M:CsQuery.Utility.Support.GetResourceStream(System.String)">
            <summary>
             Gets a resource from the calling assembly
            </summary>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.Support.GetResourceStream(System.String,System.Reflection.Assembly)">
            <summary>
            Gets a resource name using the assembly and resource name
            </summary>
            <param name="resourceName"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.Support.GetResourceStream(System.String,System.String)">
             <summary>
             Gets an embedded resource from an assembly by name
             </summary>
            
             <param name="resourceName">
             The resource name
             </param>
             <param name="assembly">
             The assembly name
             </param>
            
             <returns>
             The resource stream.
             </returns>
        </member>
        <member name="M:CsQuery.Utility.Support.StreamToString(System.IO.Stream)">
             <summary>
             Convert a string to a stream using ASCII encoding.
             </summary>
            
             <param name="stream">
             The stream.
             </param>
            
             <returns>
             A string.
             </returns>
        </member>
        <member name="M:CsQuery.Utility.Support.CleanFilePath(System.String)">
             <summary>
             Convert slashes to backslashes; make sure there's one (or zero, if not rooted) leading or
             trailing backslash; resolve parent and current folder references. Missing values are
             returned as just one backslash.
             </summary>
            
             <param name="path">
             The path to clean
             </param>
            
             <returns>
             A cleaned/resolved path
             </returns>
        </member>
        <member name="M:CsQuery.Utility.Support.CombinePaths(System.String,System.String)">
             <summary>
             Combine two file paths, normalizing slashes and eliminating any relative path markers.
             </summary>
            
             <param name="path1">
             The first path.
             </param>
             <param name="path2">
             The second path.
             </param>
            
             <returns>
             A combined path.
             </returns>
        </member>
        <member name="M:CsQuery.Utility.Support.MethodPath(System.Reflection.MemberInfo)">
            <summary>
            Get a fully qualified namespaced path to a member
            </summary>
            <param name="mi"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.Support.MethodPath(System.Type,System.String)">
             <summary>
             Get a fully qualified namespaced path to a member.
             </summary>
            
             <param name="type">
             The type to inspect.
             </param>
             <param name="memberName">
             Name of the member.
             </param>
            
             <returns>
             A string
             </returns>
        </member>
        <member name="M:CsQuery.Utility.Support.TypePath(System.Type)">
             <summary>
             Get a fully qualified namespaced path to a type, e.g. "CsQuery.Utility.Support.TypePath"
             </summary>
            
             <param name="type">
             The type to inspect
             </param>
            
             <returns>
             A string
             </returns>
        </member>
        <member name="M:CsQuery.Utility.Support.StreamToCharArray(System.IO.Stream)">
             <summary>
             Conver a stream to a character array.
             </summary>
            
             <param name="stream">
             The stream.
             </param>
            
             <returns>
             A character array.
             </returns>
        </member>
        <member name="M:CsQuery.Utility.Support.CopyFiles(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.Boolean,System.String[])">
             <summary>
             Copies files matching a pattern.
             </summary>
            
             <exception cref="T:System.ArgumentException">
             Thrown when one or more arguments have unsupported or illegal values.
             </exception>
            
             <param name="source">
             Source for the.
             </param>
             <param name="destination">
             Destination for the.
             </param>
             <param name="overwrite">
             true to overwrite, false to preserve.
             </param>
             <param name="patterns">
             One or more file matching patterns to match.
             </param>
        </member>
        <member name="M:CsQuery.Utility.Support.CopyFiles(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String[])">
             <summary>
             Copies files matching a pattern. Existing files will be overwritten.
             </summary>
            
             <param name="source">
             Source directory for the files
             </param>
             <param name="destination">
             Destination directory.
             </param>
             <param name="patterns">
             One or more file matching patterns to match.
             </param>
        </member>
        <member name="M:CsQuery.Utility.Support.DeleteFiles(System.IO.DirectoryInfo,System.String[])">
             <summary>
             Deletes the files in a directory matching one or more patterns (nonrecursive)
             </summary>
            
             <exception cref="T:System.ArgumentException">
             Thrown when the directory is missing
             </exception>
            
             <param name="directory">
             Directory where files are located.
             </param>
             <param name="patterns">
             One or more file matching patterns to delete
             </param>
        </member>
        <member name="M:CsQuery.Utility.Support.DoubleOrZero(System.String)">
             <summary>
            Convert a string value to a double, or zero if non-numeric
             </summary>
            
             <param name="value">
             The value.
             </param>
            
             <returns>
             A double.
             </returns>
        </member>
        <member name="M:CsQuery.Utility.Support.IntOrZero(System.String)">
             <summary>
             Convert a string value to an integer, or zero if non-numeric
             </summary>
            
             <param name="value">
             The value.
             </param>
            
             <returns>
             An integer
             </returns>
        </member>
        <member name="M:CsQuery.Utility.Support.NumberToDoubleOrInt(System.IConvertible)">
             <summary>
             Return an int or double from any number.
             </summary>
            
             <param name="value">
             The number to convert
             </param>
            
             <returns>
             The converted number
             </returns>
        </member>
        <member name="M:CsQuery.Utility.Support.FromCamelCase(System.String)">
             <summary>
             Given a string, convert each uppercase letter to a "-" followed by the lower case letter.
             E.g. "fontSize" becomes "font-size".
             </summary>
            
             <param name="name">
             The string to uncamelcase
             </param>
            
             <returns>
             A string
             </returns>
        </member>
        <member name="M:CsQuery.Utility.Support.ToCamelCase(System.String,System.Boolean)">
             <summary>
             Converts a name from dashed-separators to camelCase.
             </summary>
            
             <param name="name">
             The string to camelCase.
             </param>
             <param name="capFirst">
             (optional) when true, the first letter of the resuling word is captalized.
             </param>
            
             <returns>
             a dased-separated string.
             </returns>
        </member>
        <member name="M:CsQuery.Utility.Support.AttributeToEnum``1(System.String)">
             <summary>
             Converts a value to an enum, assuming the enum is camelcased.
             </summary>
            
             <typeparam name="TEnum">
             Generic type parameter.
             </typeparam>
             <param name="value">
             The value.
             </param>
            
             <returns>
             value as a T.
             </returns>
        </member>
        <member name="M:CsQuery.Utility.Support.EnumToAttribute(System.Enum)">
             <summary>
             Convert an enum to a lowercased attribute value
             </summary>
            
             <param name="value">
             The value.
             </param>
            
             <returns>
             The attribute value of a string
             </returns>
        </member>
        <member name="M:CsQuery.Utility.Support.GetEncodedStream(System.String,System.Text.Encoding)">
             <summary>
             Return a stream, including BOM preamble, from a string
             </summary>
            
             <param name="html">
             The HTML.
             </param>
             <param name="encoding">
             The encoding.
             </param>
            
             <returns>
             The encoded stream.
             </returns>
        </member>
        <member name="T:CsQuery.Objects">
            <summary>
            A set of utility functions for testing objects. 
            </summary>
        </member>
        <member name="M:CsQuery.Objects.IsNullableType(System.Type)">
            <summary>
            Returns true of the type is a generic nullable type OR string
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.IsJson(System.Object)">
             <summary>
             Returns true if the object is a string, and appears to be JSON, e.g. it starts with a single
             curly brace.
             </summary>
            
             <param name="obj">
             The object to test.
             </param>
            
             <returns>
             true if json, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.IsImmutable(System.Object)">
             <summary>
             Tests whether an object is a common immutable, specifically, value types, strings, and null.
             KeyValuePairs are specifically excluded. (Why?)
             </summary>
            
             <param name="obj">
             .
             </param>
            
             <returns>
             true if immutable, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.IsExtendableType(System.Object)">
             <summary>
             Returns false if this is a value type, null string, or enumerable (but not Extendable)
             </summary>
            
             <param name="obj">
             .
             </param>
            
             <returns>
             true if extendable type, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.IsTruthy(System.Object)">
             <summary>
             Returns true when a value is "truthy" using same logic as Javascript.
               null = false; empty string = false; "0" string = true; 0 numeric = false; false boolean =
               false.
             </summary>
            
             <param name="obj">
             The object to test.
             </param>
            
             <returns>
             true if truthy, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.IsNumericType(System.Type)">
             <summary>
             Returns true if the object is a primitive numeric type, that is, any primtive except string
             &amp; char.
             </summary>
            
             <param name="type">
             The type to test.
             </param>
            
             <returns>
             true if numeric type, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.IsNativeType(System.Type)">
             <summary>
             Returns true if the value is a Javascript native type (string, number, bool, datetime)
             </summary>
            
             <param name="type">
             The type to test
             </param>
            
             <returns>
             true if a Javascript native type, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.Join(System.Array)">
             <summary>
             Combine elements of an array into a single string, separated by a comma.
             </summary>
            
             <param name="array">
             The array to join.
             </param>
            
             <returns>
             A string separated by a comma.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.Join(System.Collections.IEnumerable)">
             <summary>
             Combine elements of a sequenceinto a single string, separated by a comma.
             </summary>
            
             <param name="list">
             A list of objects.
             </param>
            
             <returns>
             A string containging the string representation of each object in the sequence separated by a
             comma.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.IsExpando(System.Object)">
             <summary>
             Test if an object is "Expando-like", e.g. is an IDictionary&lt;string,object&gt;.
             </summary>
            
             <param name="obj">
             The object to test.
             </param>
            
             <returns>
             true if expando, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.IsEmptyExpando(System.Object)">
             <summary>
             Test if an object is a an IDictionary&lt;string,object&gt; that is empty.
             </summary>
            
             <param name="obj">
             The object to test
             </param>
            
             <returns>
             true if empty expando, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.IsKeyValuePair(System.Object)">
             <summary>
             Test if an object is a KeyValuePair&lt;,&gt; (e.g. of any types)
             </summary>
            
             <param name="obj">
             The object to test
             </param>
            
             <returns>
             true if key value pair, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.Coerce(System.Object)">
            <summary>
            Coerce a javascript object into a Javascript type (null, bool, int, double, datetime, or string). If you know what the 
            type should be, then use Convert instead.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.Convert``1(System.Object)">
             <summary>
             Convert an object of any value type to the specified type using any known means.
             </summary>
            
             <exception cref="T:System.InvalidCastException">
             Thrown when an object cannot be cast to a required type.
             </exception>
            
             <typeparam name="T">
             Generic type parameter.
             </typeparam>
             <param name="value">
             The object to convert
             </param>
            
             <returns>
             An object of the target type
             </returns>
        </member>
        <member name="M:CsQuery.Objects.Convert(System.Object,System.Type)">
             <summary>
             Convert an object of any value type to the specified type using any known means.
             </summary>
            
             <exception cref="T:System.InvalidCastException">
             Thrown when an object cannot be cast to a required type.
             </exception>
            
             <param name="value">
             The object to convert
             </param>
             <param name="type">
             The target type
             </param>
            
             <returns>
             An object of the target type
             </returns>
        </member>
        <member name="M:CsQuery.Objects.Convert``1(System.Object,``0)">
             <summary>
             Convert an object of any value type to the specified type using any known means.
             </summary>
            
             <typeparam name="T">
             Generic type parameter.
             </typeparam>
             <param name="value">
             The object to convert.
             </param>
             <param name="defaultValue">
             (optional) the default value.
             </param>
            
             <returns>
             An object of the target type.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.TryConvert``1(System.Object,``0@)">
             <summary>
             Try to convert any object to the specified type
             </summary>
            
             <typeparam name="T">
             The target type
             </typeparam>
             <param name="value">
             The object or value to convert.
             </param>
             <param name="typedValue">
             [out] The typed value.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.TryConvert(System.Object,System.Object@,System.Type,System.Object)">
             <summary>
             Try to convert an object or value to a specified type, using a default value if the
             conversion fails.
             </summary>
            
             <param name="value">
             The object or value to convert.
             </param>
             <param name="typedValue">
             [out] The typed value.
             </param>
             <param name="type">
             The type to convert to
             </param>
             <param name="defaultValue">
             (optional) the default value.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.ChangeType(System.Object,System.Type)">
             <summary>
             Returns an Object with the specified Type and whose value is equivalent to the specified
             object.
             </summary>
            
             <remarks>
             This method exists as a workaround to System.Convert.ChangeType(Object, Type) which does not
             handle nullables as of version 2.0 (2.0.50727.42) of the .NET Framework. The idea is that
             this method will be deleted once Convert.ChangeType is updated in a future version of the
             .NET Framework to handle nullable types, so we want this to behave as closely to
             Convert.ChangeType as possible. This method was written by Peter Johnson at:
             http://aspalliance.com/author.aspx?uId=1026.
             </remarks>
            
             <exception cref="T:System.ArgumentNullException">
             Thrown when one or more required arguments are null.
             </exception>
            
             <param name="value">
             An Object that implements the IConvertible interface.
             </param>
             <param name="conversionType">
             The Type to which value is to be converted.
             </param>
            
             <returns>
             An object whose Type is conversionType (or conversionType's underlying type if conversionType
             is Nullable&lt;&gt;) and whose value is equivalent to value. -or- a null reference, if value
             is a null reference and conversionType is not a value type.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.TryParseNumber(System.String,System.Object@,System.Type)">
             <summary>
             Try to parse a string into a valid number
             </summary>
            
             <exception cref="T:System.InvalidCastException">
             Thrown when parsing fails
             </exception>
            
             <param name="value">
             The value to parse
             </param>
             <param name="number">
             [out] The parsed value type
             </param>
             <param name="T">
             The Type to process.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.EnumerateProperties``1(System.Object)">
            <summary>
            Enumerate the values of the properties of an object to a sequence of type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.EnumerateProperties``1(System.Object,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Enumerate the values of the properties of an object to a sequence of type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="ignoreAttributes">All properties with an attribute of these types will be ignored</param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.DefaultValue(System.Type)">
             <summary>
             Return the default value for a type.
             </summary>
            
             <param name="type">
             The type
             </param>
            
             <returns>
             An value or null
             </returns>
        </member>
        <member name="M:CsQuery.Objects.CreateInstance(System.Type)">
             <summary>
             Creates an instance of a type
             </summary>
            
             <param name="type">
             The type
             </param>
            
             <returns>
             The new instance.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.CreateInstance``1">
             <summary>
             Creates an instance of type
             </summary>
            
             <typeparam name="T">
             Generic type parameter.
             </typeparam>
            
             <returns>
             The new instance&lt; t&gt;
             </returns>
        </member>
        <member name="M:CsQuery.Objects.Enumerate``1(``0)">
             <summary>
             Returns a sequence containing a single element, the object passed by parameter.
             </summary>
            
             <typeparam name="T">
             The type of object.
             </typeparam>
             <param name="obj">
             The object to add to the sequence.
             </param>
            
             <returns>
             A sequence with one element.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.Enumerate``1(``0[])">
             <summary>
             Returns an enumeration composed of each object in the parameter list.
             </summary>
            
             <typeparam name="T">
             The generic type of the enumeration.
             </typeparam>
             <param name="obj">
             The sequence of objects.
             </param>
            
             <returns>
             An enumerator that allows foreach to be used to process enumerate&lt; t&gt; in this
             collection.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.Enumerate(System.Object[])">
             <summary>
             Enumerates a sequence of objects
             </summary>
            
             <param name="obj">
             The sequence
             </param>
            
             <returns>
             An enumeration.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.EmptyEnumerable``1">
             <summary>
             Returns an empty sequence of the specified type.
             </summary>
            
             <typeparam name="T">
             The generic type of the sequence.
             </typeparam>
            
             <returns>
             An empty sequence.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.Dict2Dynamic``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>
             Convert (recursively) an IDictionary&lt;string,object&gt; to a dynamic object.
             </summary>
            
             <typeparam name="T">
             Generic type parameter.
             </typeparam>
             <param name="obj">
             The source dicationary
             </param>
            
             <returns>
             A new dynamic object
             </returns>
        </member>
        <member name="M:CsQuery.Objects.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
             <summary>
             Combine elements of a sequence into a single string, separated by separator.
             </summary>
            
             <param name="list">
             The source sequence.
             </param>
             <param name="separator">
             The separator.
             </param>
            
             <returns>
             A string.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.ParseValue(System.Object)">
            <summary>
            Deal with datetime values
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.ConvertDeserializedValue``1(System.Object,System.Boolean)">
             <summary>
             Takes a default deserialized value from JavaScriptSerializer and parses it into expando
             objects. This will convert inner array types to strongly-typed arrays; inner object types to
             dynamic objects; and inner date/time value strings to real datetime values.
             </summary>
            
             <typeparam name="T">
             The target type.
             </typeparam>
             <param name="value">
             The value.
             </param>
             <param name="convertDates">
             When true, date values will be parsed also. (This is likely problematic because of different
             date conventions).
             </param>
            
             <returns>
             The deserialized converted value&lt; t&gt;
             </returns>
        </member>
        <member name="M:CsQuery.Objects.GetUnderlyingType(System.Type)">
            <summary>
            Return the proper type for an object (ignoring nullability)
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.Dict2Dynamic``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
             <summary>
             Convert any IDictionary&lt;string,object&gt; into an expandoobject recursively.
             </summary>
            
             <typeparam name="T">
             The type of target to create. It must implementing IDynamicMetaObjectProvider; if it is
             actually the interface IDynamicMetaObjectProvider, then the default dynamic object type will
             be created.
             </typeparam>
             <param name="obj">
             The source dictionary
             </param>
             <param name="convertDates">
             .
             </param>
            
             <returns>
             .
             </returns>
        </member>
        <member name="M:CsQuery.Objects.Extend(System.Boolean,System.Object,System.Object[])">
             <summary>
             Map properties of inputObjects to target. If target is an expando object, it will be updated.
             If not, a new one will be created including the properties of target and inputObjects.
             </summary>
            
             <param name="deep">
             When true, will clone properties that are objects.
             </param>
             <param name="target">
             The target of the mapping, or null to create a new target
             </param>
             <param name="inputObjects">
             One or more objects that are the source of the mapping
             </param>
            
             <returns>
             The target object itself, if non-null, or a new dynamic object, if the target is null
             </returns>
        </member>
        <member name="M:CsQuery.Objects.ToExpando(System.Object)">
             <summary>
             Converts a regular object to a dynamic object, or returns the source object if it is already
             a dynamic object.
             </summary>
            
             <param name="source">
             
             </param>
            
             <returns>
             source as a JsObject.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.ToExpando``1(System.Object)">
             <summary>
             Converts this object to a dynamic object of type T.
             </summary>
            
             <typeparam name="T">
             The type of dynamic object to create; must inherit IDynamicMetaObjectProvider and
             IDictionary&lt;string,object&gt;
             </typeparam>
             <param name="source">
             The object to convert.
             </param>
            
             <returns>
             The given data converted to a T.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.ToExpando(System.Object,System.Boolean)">
             <summary>
             Converts a regular object to an expando object, or returns the source object if it is already
             an expando object. If "deep" is true, child properties are cloned rather than referenced.
             </summary>
            
             <param name="source">
             The object to convert
             </param>
             <param name="deep">
             When true, will clone properties that are objects.
             </param>
            
             <returns>
             The given data converted to a JsObject.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.ToExpando``1(System.Object,System.Boolean)">
             <summary>
             Converts this object to an expando object of type T.
             </summary>
            
             <typeparam name="T">
             The type of object; must inherit IDynamicMetaObjectProvider and IDictionary&lt;string,
             object&gt;
             </typeparam>
             <param name="source">
             The object to convert
             </param>
             <param name="deep">
             When true, will clone properties that are objects.
             </param>
            
             <returns>
             The given data converted to a T.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.ToExpando``1(System.Object,System.Boolean,System.Collections.Generic.IEnumerable{System.Type})">
             <summary>
             Converts this object to an expando object of type T.
             </summary>
            
             <typeparam name="T">
             Generic type parameter.
             </typeparam>
             <param name="source">
             The object to convert.
             </param>
             <param name="deep">
             When true, will clone properties that are objects.
             </param>
             <param name="ignoreAttributes">
             A sequence of Attribute objects that, when any is found on a property, indicate that it should be ignored.
             </param>
            
             <returns>
             The given data converted to a T.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.CloneObject(System.Object)">
             <summary>
             Clone an object. For value types, returns the value. For reference types, coverts to a
             dynamic object.
             </summary>
            
             <param name="obj">
             The source object.
             </param>
            
             <returns>
             The value passed or a new dynamic object.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.CloneObject(System.Object,System.Boolean)">
             <summary>
             Clone an object. For value types, returns the value. For reference types, coverts to a dynamic object. 
             </summary>
            
             <param name="obj">
             The source object.
             </param>
             <param name="deep">
             When true, will clone properties that are objects.
             </param>
            
             <returns>
             The value passed or a new dynamic object.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.DeleteProperty(System.Object,System.String)">
             <summary>
             Remove a property from a dynamic object, or return a copy of the object a a new dynamic object without the property.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="obj">
             The source object
             </param>
             <param name="property">
             The property to delete
             </param>
            
             <returns>
             A new dynamic object
             </returns>
        </member>
        <member name="M:CsQuery.Objects.AddExtendKVP(System.Boolean,System.Collections.Generic.HashSet{System.Object},System.Object,System.String,System.Object)">
            <summary>
            Implementation of "Extend" functionality
            </summary>
            <param name="deep"></param>
            <param name="parents"></param>
            <param name="target"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:CsQuery.Objects.ToNewExpando``1(System.Object,System.Boolean,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Implementation of object>expando
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="deep"></param>
            <param name="ignoreAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.TryStringToBool(System.String,System.Boolean@)">
            <summary>
            Try to parse an english or numeric string into a boolean value
            </summary>
            <param name="value"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.CreateTextNode(System.String)">
             <summary>
             Creates a new text node.
             </summary>
            
             <param name="text">
             The text.
             </param>
            
             <returns>
             The new text node.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.CreateComment(System.String)">
             <summary>
             Creates a comment node.
             </summary>
            
             <param name="comment">
             The comment.
             </param>
            
             <returns>
             The new comment.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.CreateDocument">
             <summary>
             Creates a new empty document.
             </summary>
            
             <returns>
             The new document.
             </returns>
        </member>
        <member name="M:CsQuery.Objects.CreateCData(System.String)">
             <summary>
             Creates CDATA node
             </summary>
            
             <param name="data">
             The data.
             </param>
            
             <returns>
             The new CDATA node
             </returns>
        </member>
        <member name="M:CsQuery.Objects.CreateFragment">
             <summary>
             Creates a new, empty fragment node.
             </summary>
            
             <returns>
             The new fragment.
             </returns>
        </member>
        <member name="T:CsQuery.Utility.JSON">
            <summary>
            Methods for working with JSON. 
            </summary>
            
        </member>
        <member name="M:CsQuery.Utility.JSON.ToJSON(System.Object)">
             <summary>
             Convert an object to JSON using the default handling of the serializer.
             </summary>
            
             <param name="obj">
             The object.
             </param>
            
             <returns>
             JSON representation of the object.
             </returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.ParseJSON``1(System.String)">
             <summary>
             Parse JSON into a typed object.
             </summary>
            
             <typeparam name="T">
             The type of object to reutrn.
             </typeparam>
             <param name="json">
             The JSON string.
             </param>
            
             <returns>
             An object of type T populated with the data from the json source
             </returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.ParseJSON(System.String,System.Type)">
             <summary>
             Parse JSON into a typed object.
             </summary>
            
             <param name="json">
             The JSON string
             </param>
             <param name="type">
             The type of object to return
             </param>
            
             <returns>
             An object of the specified type
             </returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.ParseJSON(System.String)">
             <summary>
             Parse a JSON object or nameless JSON value into a dynamic object, or single typed value.
             </summary>
            
             <param name="json">
             The JSON string
             </param>
            
             <returns>
             An object
             </returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.ParseJSONValue``1(System.String)">
             <summary>
             Parse a single JSON value to a C# value of the specified type., if the
             value is another object, an object or array.
             </summary>
            
             <typeparam name="T">
             The type of data to return
             </typeparam>
             <param name="jsonValue">
             A string that represents a single nameless JSON value.
             </param>
            
             <returns>
             An object of the CLR datatype matching the value.
             </returns>
            
             <exception cref="T:System.ArgumentException">
             Thrown when the argument was not a valid JSON value.
             </exception>
        </member>
        <member name="M:CsQuery.Utility.JSON.ParseJSONValue(System.String)">
             <summary>
             Parse a single JSON value to a C# value (string, bool, int, double, datetime) or, if the value is
             another object, an object or array.
             </summary>
            
             <exception cref="T:System.ArgumentException">
             Thrown when the argument was not a valid JSON value
             </exception>
            
             <param name="jsonValue">
             A string that represents a single nameless JSON value
             </param>
            
             <returns>
             An object of the CLR datatype matching the value
             </returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.ParseJSONValue(System.String,System.Type)">
             <summary>
             Parse a JSON value to a C# CLR object of the type requested.
             </summary>
            
             <exception cref="T:System.ArgumentException">
             Thrown when the value could not be converted to the specified type
             </exception>
            
             <param name="jsonValue">
             The JSON value.
             </param>
             <param name="type">
             The target type.
             </param>
            
             <returns>
             An object of the type specfiied.
             </returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.TryParseJSONValue(System.String,System.Object@)">
             <summary>
             Parse a JSON value to a C# value into the best matching CLR type for that JSON value type
             </summary>
            
             <param name="jsonValue">
             The JSON value.
             </param>
             <param name="value">
             [out] The value.
             </param>
            
             <returns>
             true if successful, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.TryParseJSONValue(System.String,System.Type,System.Object@)">
             <summary>
             Parse a JSON value to a C# value of the type requested.
             </summary>
            
             <param name="jsonValue">
             The JSON value.
             </param>
             <param name="type">
             The target type.
             </param>
             <param name="value">
             [out] The value.
             </param>
            
             <returns>
             true if successful, false if not
             </returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.IsJsonDate(System.String)">
             <summary>
             The value represents a JSON date (MS format)
             </summary>
            
             <param name="jsonValue">
             The JSON value
             </param>
            
             <returns>
             true if JSON date, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.IsJsonObject(System.String)">
             <summary>
             The value represents a JSON object, e.g. is bounded by curly braces.
             </summary>
            
             <param name="jsonValue">
             the JSON value
             </param>
            
             <returns>
             true if JSON object, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.IsJsonString(System.String)">
             <summary>
             The value represents a JSON string, e.g. is bounded by double-quotes.
             </summary>
            
             <param name="jsonValue">
             The JSON value
             </param>
            
             <returns>
             true if JSON string, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.IsJsonArray(System.String)">
             <summary>
             The value represents a JSON array, e.g. is bounded by square brackets.
             </summary>
            
             <param name="jsonValue">
             The JSON value
             </param>
            
             <returns>
             true if JSON array, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.TryParseJsonValueImpl(System.String,System.Object@)">
             <summary>
             Try to parse a JSON value into a value type or, if the value represents an object or array,
             an object. This method does not address numeric types, leaving that up to a caller, so that
             they can map to specific numeric casts if desired.
             </summary>
            
             <exception cref="T:System.ArgumentException">
             Thrown when the value was not a valid JSON value.
             </exception>
            
             <param name="jsonValue">
             The JSON value
             </param>
             <param name="value">
             [out] the convert and typecast CLR value
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.ParseJSONObject(System.String)">
            <summary>
            Deserialize javscript, then transform to an ExpandObject
            </summary>
            <param name="objectToDeserialize"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.Implementation.SelectionSetOrder">
            <summary>
            Orders in which the selection set can be arranged. Ascending and Descending refer to to the
            DOM element order.
            </summary>
        </member>
        <member name="F:CsQuery.Implementation.SelectionSetOrder.OrderAdded">
            <summary>
            The items should be returned in the order they were added to the selection set.
            </summary>
        </member>
        <member name="F:CsQuery.Implementation.SelectionSetOrder.Ascending">
            <summary>
            The items should be returned in the order they appear in the DOM.
            </summary>
        </member>
        <member name="F:CsQuery.Implementation.SelectionSetOrder.Descending">
            <summary>
            The items should be returned in the reverse order they appear in the DOM.
            </summary>
        </member>
    </members>
</doc>
