<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Raven.Client.Lightweight</name>
    </assembly>
    <members>
        <member name="M:Raven.Client.Bundles.Versioning.VersioningExtensions.GetRevisionsFor``1(Raven.Client.ISyncAdvancedSessionOperation,System.String,System.Int32,System.Int32)">
            <summary>
            Returns all previous document revisions for specified document (with paging).
            </summary>
        </member>
        <member name="M:Raven.Client.Bundles.Versioning.VersioningExtensions.GetRevisionIdsFor``1(Raven.Client.ISyncAdvancedSessionOperation,System.String,System.Int32,System.Int32)">
            <summary>
            Returns all revision document keys for specified document (with paging).
            </summary>
        </member>
        <member name="M:Raven.Client.Bundles.Versioning.VersioningExtensions.GetRevisionsForAsync``1(Raven.Client.IAsyncAdvancedSessionOperations,System.String,System.Int32,System.Int32)">
            <summary>
            Returns all previous document revisions for specified document (with paging).
            </summary>
        </member>
        <member name="M:Raven.Client.Bundles.Versioning.VersioningExtensions.GetRevisionIdsForAsync``1(Raven.Client.IAsyncAdvancedSessionOperations,System.String,System.Int32,System.Int32)">
            <summary>
            Returns all revision document keys for specified document (with paging).
            </summary>
        </member>
        <member name="M:Raven.Client.Changes.IDatabaseChanges.ForIndex(System.String)">
            <summary>
            Subscribe to changes for specified index only.
            </summary>
        </member>
        <member name="M:Raven.Client.Changes.IDatabaseChanges.ForDocument(System.String)">
            <summary>
            Subscribe to changes for specified document only.
            </summary>
        </member>
        <member name="M:Raven.Client.Changes.IDatabaseChanges.ForAllDocuments">
            <summary>
            Subscribe to changes for all documents.
            </summary>
        </member>
        <member name="M:Raven.Client.Changes.IDatabaseChanges.ForAllIndexes">
            <summary>
            Subscribe to changes for all indexes.
            </summary>
        </member>
        <member name="M:Raven.Client.Changes.IDatabaseChanges.ForAllTransformers">
            <summary>
            Subscribe to changes for all transformers.
            </summary>
        </member>
        <member name="M:Raven.Client.Changes.IDatabaseChanges.ForDocumentsStartingWith(System.String)">
            <summary>
            Subscribe to changes for all documents that Id starts with given prefix.
            </summary>
        </member>
        <member name="M:Raven.Client.Changes.IDatabaseChanges.ForDocumentsInCollection(System.String)">
            <summary>
            Subscribe to changes for all documents that belong to specified collection (Raven-Entity-Name).
            </summary>
        </member>
        <member name="M:Raven.Client.Changes.IDatabaseChanges.ForDocumentsInCollection``1">
            <summary>
            Subscribe to changes for all documents that belong to specified collection (Raven-Entity-Name).
            </summary>
        </member>
        <member name="M:Raven.Client.Changes.IDatabaseChanges.ForDocumentsOfType(System.String)">
            <summary>
            Subscribe to changes for all documents that belong to specified type (Raven-Clr-Type).
            </summary>
        </member>
        <member name="M:Raven.Client.Changes.IDatabaseChanges.ForDocumentsOfType(System.Type)">
            <summary>
            Subscribe to changes for all documents that belong to specified type (Raven-Clr-Type).
            </summary>
        </member>
        <member name="M:Raven.Client.Changes.IDatabaseChanges.ForDocumentsOfType``1">
            <summary>
            Subscribe to changes for all documents that belong to specified type (Raven-Clr-Type).
            </summary>
        </member>
        <member name="M:Raven.Client.Changes.IDatabaseChanges.ForAllReplicationConflicts">
            <summary>
            Subscribe to all replication conflicts.
            </summary>
        </member>
        <member name="M:Raven.Client.Changes.IDatabaseChanges.ForBulkInsert(System.Nullable{System.Guid})">
            <summary>
            Subscribe to all bulk insert operation changes that belong to a operation with given Id.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.AdminRequestCreator.GetDatabaseNamesAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the list of databases from the server asynchronously
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IAdminDatabaseCommands.GetDatabaseConfiguration">
            <summary>
                Gets configuration for current database.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IAdminDatabaseCommands.GetIndexingStatus">
            <summary>
                Get the indexing status
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IAdminDatabaseCommands.StartIndexing(System.Nullable{System.Int32})">
            <summary>
                Enables indexing.
            </summary>
            <param name="maxNumberOfParallelIndexTasks">
                if set then maximum number of parallel indexing tasks will be set to this
                value.
            </param>
        </member>
        <member name="M:Raven.Client.Connection.IAdminDatabaseCommands.StopIndexing">
            <summary>
                Disables all indexing.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IGlobalAdminDatabaseCommands.CompactDatabase(System.String)">
            <summary>
                Sends an async command to compact a database. During the compaction the specified database will be offline.
            </summary>
            <param name="databaseName">name of a database to compact</param>
        </member>
        <member name="M:Raven.Client.Connection.IGlobalAdminDatabaseCommands.CreateDatabase(Raven.Abstractions.Data.DatabaseDocument)">
            <summary>
                Creates a database
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IGlobalAdminDatabaseCommands.DeleteDatabase(System.String,System.Boolean)">
            <summary>
                Used to delete a database from a server, with a possibility to remove all the data from hard drive.
                <para>
                    Warning: if hardDelete is set to <c>true</c> then ALL data will be removed from the data directory of a
                    database.
                </para>
            </summary>
            <param name="databaseName">name of a database to delete</param>
            <param name="hardDelete">should all data be removed (data files, indexing files, etc.). Default: false</param>
        </member>
        <member name="M:Raven.Client.Connection.IGlobalAdminDatabaseCommands.EnsureDatabaseExists(System.String,System.Boolean)">
            <summary>
                Ensures that the database exists, creating it if needed
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IGlobalAdminDatabaseCommands.GetBuildNumber">
            <summary>
                Gets the build number
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IGlobalAdminDatabaseCommands.GetDatabaseNames(System.Int32,System.Int32)">
            <summary>
                Returns the names of all tenant databases on the RavenDB server
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IGlobalAdminDatabaseCommands.GetStatistics">
            <summary>
                Gets server-wide statistics.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IGlobalAdminDatabaseCommands.StartBackup(System.String,Raven.Abstractions.Data.DatabaseDocument,System.Boolean,System.String)">
            <summary>
                Begins a backup operation.
            </summary>
            <param name="backupLocation">path to directory where backup will be stored</param>
            <param name="databaseDocument">
                Database configuration document that will be stored with backup in 'Database.Document'
                file. Pass <c>null</c> to use the one from system database. WARNING: Database configuration document may contain
                sensitive data which will be decrypted and stored in backup.
            </param>
            <param name="incremental">indicates if backup is incremental</param>
            <param name="databaseName">name of a database that will be backed up</param>
        </member>
        <member name="M:Raven.Client.Connection.IGlobalAdminDatabaseCommands.StartRestore(Raven.Abstractions.Data.DatabaseRestoreRequest)">
            <summary>
                Begins a restore operation.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncAdminDatabaseCommands.GetDatabaseConfigurationAsync(System.Threading.CancellationToken)">
            <summary>
                Gets configuration for current database.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncAdminDatabaseCommands.GetIndexingStatusAsync(System.Threading.CancellationToken)">
            <summary>
                Get the indexing status
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncAdminDatabaseCommands.StartIndexingAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
                Enables indexing.
            </summary>
            <param name="maxNumberOfParallelIndexTasks">
                if set then maximum number of parallel indexing tasks will be set to this
                value.
            </param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncAdminDatabaseCommands.StopIndexingAsync(System.Threading.CancellationToken)">
            <summary>
                Disables all indexing.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncGlobalAdminDatabaseCommands.CompactDatabaseAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Sends an async command to compact a database. During the compaction the specified database will be offline.
            </summary>
            <param name="databaseName">name of a database to compact</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncGlobalAdminDatabaseCommands.CreateDatabaseAsync(Raven.Abstractions.Data.DatabaseDocument,System.Threading.CancellationToken)">
            <summary>
                Creates a database
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncGlobalAdminDatabaseCommands.DeleteDatabaseAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Used to delete a database from a server, with a possibility to remove all the data from hard drive.
                <para>
                    Warning: if hardDelete is set to <c>true</c> then ALL data will be removed from the data directory of a
                    database.
                </para>
            </summary>
            <param name="databaseName">name of a database to delete</param>
            <param name="hardDelete">should all data be removed (data files, indexing files, etc.). Default: false</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncGlobalAdminDatabaseCommands.EnsureDatabaseExistsAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Ensures that the database exists, creating it if needed
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncGlobalAdminDatabaseCommands.GetBuildNumberAsync(System.Threading.CancellationToken)">
            <summary>
                Gets the build number
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncGlobalAdminDatabaseCommands.GetDatabaseNamesAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
                Returns the names of all tenant databases on the RavenDB server
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncGlobalAdminDatabaseCommands.GetStatisticsAsync(System.Threading.CancellationToken)">
            <summary>
                Gets server-wide statistics.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncGlobalAdminDatabaseCommands.StartBackupAsync(System.String,Raven.Abstractions.Data.DatabaseDocument,System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
                Begins a backup operation.
            </summary>
            <param name="backupLocation">path to directory where backup will be stored</param>
            <param name="databaseDocument">
                Database configuration document that will be stored with backup in 'Database.Document'
                file. Pass <c>null</c> to use the one from system database. WARNING: Database configuration document may contain
                sensitive data which will be decrypted and stored in backup.
            </param>
            <param name="incremental">indicates if backup is incremental</param>
            <param name="databaseName">name of a database that will be backed up</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncGlobalAdminDatabaseCommands.StartRestoreAsync(Raven.Abstractions.Data.DatabaseRestoreRequest,System.Threading.CancellationToken)">
            <summary>
                Begins a restore operation.
            </summary>
        </member>
        <member name="T:Raven.Client.IDisposalNotification">
            <summary>
            Provide a way for interested party to tell whatever implementers have been disposed
            </summary>
        </member>
        <member name="E:Raven.Client.IDisposalNotification.AfterDispose">
            <summary>
            Called after dispose is completed
            </summary>
        </member>
        <member name="P:Raven.Client.IDisposalNotification.WasDisposed">
            <summary>
            Whatever the instance has been disposed
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Async.AsyncServerClientBase`2.ReplicationInformer">
            <summary>
            Allow access to the replication informer used to determine how we replicate requests
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IReplicationInformerBase.GetFailureCount(System.String)">
            <summary>
            Get the current failure count for the url
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IReplicationInformerBase.GetFailureLastCheck(System.String)">
            <summary>
            Get failure last check time for the url
            </summary>
        </member>
        <member name="E:Raven.Client.Connection.IReplicationInformerBase.FailoverStatusChanged">
            <summary>
            Notify when the failover status changed
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.IReplicationInformerBase.DelayTimeInMiliSec">
            <summary>
            Set how long we will wait between pinging failed servers
            Is set to 0, will not ping failed servers
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.IReplicationInformerBase.ReplicationDestinationsUrls">
            <summary>
            Gets the replication destinations.
            </summary>
            <value>The replication destinations.</value>
        </member>
        <member name="M:Raven.Client.Connection.IReplicationInformerBase`1.RefreshReplicationInformation(`0)">
            <summary>
            Refreshes the replication information.
            Expert use only.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IReplicationInformerBase`1.ClearReplicationInformationLocalCache(`0)">
            <summary>
            Clears the replication information local cache.
            Expert use only.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IDocumentStoreReplicationInformer.UpdateReplicationInformationIfNeeded(Raven.Client.Connection.Async.AsyncServerClient)">
            <summary>
            Updates replication information if needed
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.IDocumentStoreReplicationInformer.FailoverServers">
            <summary>
            Failover servers set manually in config file or when document store was initialized
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.ReplicationInformerBase`1">
            <summary>
            Replication and failover management on the client side
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.ReplicationInformerBase`1.#ctor(Raven.Client.Convention,Raven.Client.Connection.HttpJsonRequestFactory,System.Int32)">
            <summary>
             Create a new instance of this class
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.ReplicationInformerBase`1.RefreshReplicationInformation(`0)">
            <summary>
            Refreshes the replication information.
            Expert use only.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.ReplicationInformerBase`1.GetFailureCount(System.String)">
            <summary>
            Get the current failure count for the url
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.ReplicationInformerBase`1.GetFailureLastCheck(System.String)">
            <summary>
            Get failure last check time for the url
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.ReplicationInformerBase`1.ShouldExecuteUsing(Raven.Client.Connection.OperationMetadata,Raven.Client.Connection.OperationMetadata,System.Int32,System.String,System.Boolean,System.Exception,System.Threading.CancellationToken)">
            <summary>
            Should execute the operation using the specified operation URL
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.ReplicationInformerBase`1.IsFirstFailure(System.String)">
            <summary>
            Determines whether this is the first failure on the specified operation URL.
            </summary>
            <param name="operationUrl">The operation URL.</param>
        </member>
        <member name="M:Raven.Client.Connection.ReplicationInformerBase`1.IncrementFailureCount(System.String)">
            <summary>
            Increments the failure count for the specified operation URL
            </summary>
            <param name="operationUrl">The operation URL.</param>
        </member>
        <member name="M:Raven.Client.Connection.ReplicationInformerBase`1.ResetFailureCount(System.String)">
            <summary>
            Resets the failure count for the specified URL
            </summary>
            <param name="operationUrl">The operation URL.</param>
        </member>
        <member name="E:Raven.Client.Connection.ReplicationInformerBase`1.FailoverStatusChanged">
            <summary>
            Notify when the failover status changed
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.ReplicationInformerBase`1.ReplicationDestinationsUrls">
            <summary>
            Gets the replication destinations.
            </summary>
            <value>The replication destinations.</value>
        </member>
        <member name="P:Raven.Client.Connection.ReplicationInformer.FailoverServers">
            <summary>
            Failover servers set manually in config file or when document store was initialized
            </summary>
        </member>
        <member name="T:Raven.Client.Counters.Connections.CounterConvention">
            <summary>
            The set of conventions used by the <see cref="T:Raven.Client.Counters.Connections.CounterConvention"/> which allow the users to customize
            the way the Raven client API behaves
            </summary>
        </member>
        <member name="M:Raven.Client.Convention.GetIdentityProperty(System.Type)">
            <summary>
            Gets the identity property.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Convention.FailoverBehavior">
            <summary>
            How should we behave in a replicated environment when we can't 
            reach the primary node and need to failover to secondary node(s).
            </summary>
        </member>
        <member name="P:Raven.Client.Convention.AllowMultipuleAsyncOperations">
            <summary>
            Enable multipule async operations
            </summary>
        </member>
        <member name="P:Raven.Client.Convention.FindIdentityProperty">
            <summary>
            Gets or sets the function to find the identity property.
            </summary>
            <value>The find identity property.</value>
        </member>
        <member name="P:Raven.Client.Convention.IdentityPartsSeparator">
            <summary>
            Gets or sets the identity parts separator used by the HiLo generators
            </summary>
            <value>The identity parts separator.</value>
        </member>
        <member name="P:Raven.Client.Convention.ShouldCacheRequest">
            <summary>
            Whatever or not RavenDB should cache the request to the specified url.
            </summary>
        </member>
        <member name="P:Raven.Client.Convention.HandleUnauthorizedResponseAsync">
            <summary>
            Begins handling of unauthenticated responses, usually by authenticating against the oauth server
            in async manner
            </summary>
        </member>
        <member name="P:Raven.Client.Convention.HandleForbiddenResponseAsync">
            <summary>
            Begins handling of forbidden responses
            in async manner
            </summary>
        </member>
        <member name="P:Raven.Client.Convention.SaveEnumsAsIntegers">
            <summary>
            Saves Enums as integers and instruct the Linq provider to query enums as integer values.
            </summary>
        </member>
        <member name="M:Raven.Client.Counters.Connections.CounterConvention.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Counters.Connections.CounterConvention"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Counters.Connections.CounterConvention.Clone">
            <summary>
            Clone the current conventions to a new instance
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.Profiling.IHoldProfilingInformation">
            <summary>
            Interface for getting profiling information about the actions of the system
            within a given context, usually the context is database commands or async database commands
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.IHoldProfilingInformation.ProfilingInformation">
            <summary>
            The profiling information
            </summary>
        </member>
        <member name="P:Raven.Client.Counters.RavenCountersClient.ProfilingInformation">
            <summary>
            Notify when the failover status changed
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAsyncReliableSubscriptions.CreateAsync``1(Raven.Abstractions.Data.SubscriptionCriteria{``0},System.String)">
            <summary>
            It creates a data subscription in a database. The subscription will expose all documents that match the specified subscription criteria for a given type.
            </summary>
            <returns>Created subscription identifier.</returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncReliableSubscriptions.CreateAsync(Raven.Abstractions.Data.SubscriptionCriteria,System.String)">
            <summary>
            It creates a data subscription in a database. The subscription will expose all documents that match the specified subscription criteria.
            </summary>
            <returns>Created subscription identifier.</returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncReliableSubscriptions.OpenAsync(System.Int64,Raven.Abstractions.Data.SubscriptionConnectionOptions,System.String)">
            <summary>
            It opens a subscription and starts pulling documents since a last processed document for that subscription (in document's Etag order).
            The connection options determine client and server cooperation rules like document batch sizes or a timeout in a matter of which a client
            needs to acknowledge that batch has been processed. The acknowledgment is sent after all documents are processed by subscription's handlers.  
            There can be only a single client that is connected to a subscription.
            </summary>
            <returns>Subscription object that allows to add/remove subscription handlers.</returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncReliableSubscriptions.OpenAsync``1(System.Int64,Raven.Abstractions.Data.SubscriptionConnectionOptions,System.String)">
            <summary>
            It opens a subscription and starts pulling documents since a last processed document for that subscription (in document's Etag order).
            The connection options determine client and server cooperation rules like document batch sizes or a timeout in a matter of which a client
            needs to acknowledge that batch has been processed. The acknowledgment is sent after all documents are processed by subscription's handlers.  
            There can be only a single client that is connected to a subscription.
            </summary>
            <returns>Subscription object that allows to add/remove subscription handlers.</returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncReliableSubscriptions.GetSubscriptionsAsync(System.Int32,System.Int32,System.String)">
            <summary>
            It downloads a list of all existing subscriptions in a database.
            </summary>
            <returns>Existing subscriptions' configurations.</returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncReliableSubscriptions.DeleteAsync(System.Int64,System.String)">
            <summary>
            It deletes a subscription.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAsyncReliableSubscriptions.ReleaseAsync(System.Int64,System.String)">
            <summary>
            It releases a subscriptions by forcing a connected client to drop.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IReliableSubscriptions.Create``1(Raven.Abstractions.Data.SubscriptionCriteria{``0},System.String)">
            <summary>
            It creates a data subscription in a database. The subscription will expose all documents that match the specified subscription criteria for a given type.
            </summary>
            <returns>Created subscription identifier.</returns>
        </member>
        <member name="M:Raven.Client.Document.IReliableSubscriptions.Create(Raven.Abstractions.Data.SubscriptionCriteria,System.String)">
            <summary>
            It creates a data subscription in a database. The subscription will expose all documents that match the specified subscription criteria.
            </summary>
            <returns>Created subscription identifier.</returns>
        </member>
        <member name="M:Raven.Client.Document.IReliableSubscriptions.Open(System.Int64,Raven.Abstractions.Data.SubscriptionConnectionOptions,System.String)">
            <summary>
            It opens a subscription and starts pulling documents since a last processed document for that subscription (in document's Etag order).
            The connection options determine client and server cooperation rules like document batch sizes or a timeout in a matter of which a client
            needs to acknowledge that batch has been processed. The acknowledgment is sent after all documents are processed by subscription's handlers.  
            There can be only a single client that is connected to a subscription.
            </summary>
            <returns>Subscription object that allows to add/remove subscription handlers.</returns>
        </member>
        <member name="M:Raven.Client.Document.IReliableSubscriptions.Open``1(System.Int64,Raven.Abstractions.Data.SubscriptionConnectionOptions,System.String)">
            <summary>
            It opens a subscription and starts pulling documents since a last processed document for that subscription (in document's Etag order).
            The connection options determine client and server cooperation rules like document batch sizes or a timeout in a matter of which a client
            needs to acknowledge that batch has been processed. The acknowledgment is sent after all documents are processed by subscription's handlers.  
            There can be only a single client that is connected to a subscription.
            </summary>
            <returns>Subscription object that allows to add/remove subscription handlers.</returns>
        </member>
        <member name="M:Raven.Client.Document.IReliableSubscriptions.GetSubscriptions(System.Int32,System.Int32,System.String)">
            <summary>
            It downloads a list of all existing subscriptions in a database.
            </summary>
            <returns>Existing subscriptions' configurations.</returns>
        </member>
        <member name="M:Raven.Client.Document.IReliableSubscriptions.Delete(System.Int64,System.String)">
            <summary>
            It deletes a subscription.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IReliableSubscriptions.Release(System.Int64,System.String)">
            <summary>
            It releases a subscriptions by forcing a connected client to drop.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ReplicationBehavior.WaitAsync(Raven.Abstractions.Data.Etag,System.Nullable{System.TimeSpan},System.String,System.Int32)">
            <summary>
            Represents an replication operation to all destination servers of an item specified by ETag
            </summary>
            <param name="etag">ETag of an replicated item</param>
            <param name="timeout">Optional timeout - by default, 30 seconds</param>
            <param name="database">The database from which to check, if null, the default database for the document store connection string</param>
            <param name="replicas">The min number of replicas that must have the value before we can return (or the number of destinations, if higher)</param>
            <returns>Task which will have the number of nodes that the caught up to the specified etag</returns>
        </member>
        <member name="P:Raven.Client.Document.Subscription`1.IsErrored">
            <summary>
            It indicates if the subscription is in errored state.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.Subscription`1.IsClosed">
            <summary>
            It determines if the subscription is closed.
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.IAbstractFilesQuery`1.OpenSubclause">
            <summary>
              Simplified method for opening a new clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.FileSystem.IAbstractFilesQuery`1.CloseSubclause">
            <summary>
              Simplified method for closing a clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.FileSystem.IAbstractFilesQuery`1.Take(System.Int32)">
            <summary>
              Takes the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.FileSystem.IAbstractFilesQuery`1.Skip(System.Int32)">
            <summary>
              Skips the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.FileSystem.IAbstractFilesQuery`1.Where(System.String)">
            <summary>
              Filter the results from the index using the specified where clause.
            </summary>
            <param name = "whereClause">The where clause.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAbstractFilesQuery`1.WhereEquals(System.String,System.Object)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.FileSystem.IAbstractFilesQuery`1.WhereEquals(Raven.Client.WhereParams)">
            <summary>
              Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.IAbstractFilesQuery`1.WhereIn(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.IAbstractFilesQuery`1.WhereBetween(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.FileSystem.IAbstractFilesQuery`1.WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.FileSystem.IAbstractFilesQuery`1.WhereGreaterThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAbstractFilesQuery`1.WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAbstractFilesQuery`1.WhereLessThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAbstractFilesQuery`1.WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAbstractFilesQuery`1.AndAlso">
            <summary>
              Add an AND to the query
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.IAbstractFilesQuery`1.OrElse">
            <summary>
              Add an OR to the query
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.IAbstractFilesQuery`1.OrderBy(System.String[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name = "fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAbstractFilesQuery`1.AddOrder(System.String,System.Boolean)">
            <summary>
              Adds an ordering for a specific field to the query
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAbstractFilesQuery`1.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Raven.Client.FileSystem.IAbstractFilesQuery`1.Conventions">
            <summary>
            Gets the files convention from the query session
            </summary>
        </member>
        <member name="F:Raven.Client.FileSystem.AbstractFilesQuery`2.queryText">
            <summary>
            The query to use
            </summary>
        </member>
        <member name="F:Raven.Client.FileSystem.AbstractFilesQuery`2.negate">
            <summary>
            Whatever to negate the next operation
            </summary>
        </member>
        <member name="F:Raven.Client.FileSystem.AbstractFilesQuery`2.orderByFields">
            <summary>
              The fields to order the results by
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.AbstractFilesQuery`2.OpenSubclause">
            <summary>
              Simplified method for opening a new clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.FileSystem.AbstractFilesQuery`2.CloseSubclause">
            <summary>
              Simplified method for closing a clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.FileSystem.AbstractFilesQuery`2.Where(System.String)">
            <summary>
              Filter the results from the index using the specified where clause.
            </summary>
            <param name = "whereClause">The where clause.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AbstractFilesQuery`2.WhereEquals(System.String,System.Object)">
            <summary>
              Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.AbstractFilesQuery`2.WhereStartsWith(System.String,System.Object)">
            <summary>
              Matches fields which starts with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AbstractFilesQuery`2.WhereEndsWith(System.String,System.Object)">
            <summary>
              Matches fields which ends with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AbstractFilesQuery`2.WhereBetween(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.FileSystem.AbstractFilesQuery`2.WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.FileSystem.AbstractFilesQuery`2.WhereGreaterThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AbstractFilesQuery`2.WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AbstractFilesQuery`2.WhereLessThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AbstractFilesQuery`2.WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AbstractFilesQuery`2.AndAlso">
            <summary>
              Add an AND to the query
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.AbstractFilesQuery`2.OrElse">
            <summary>
              Add an OR to the query
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.AbstractFilesQuery`2.AddOrder(System.String,System.Boolean)">
            <summary>
              Adds an ordering for a specific field to the query
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AbstractFilesQuery`2.OrderBy(System.String[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name = "fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AbstractFilesQuery`2.OrderByDescending(System.String[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by descending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name = "fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AbstractFilesQuery`2.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents the query for this instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents the query for this instance.
            </returns>
        </member>
        <member name="M:Raven.Client.FileSystem.AbstractFilesQuery`2.NegateNext">
            <summary>
             Negate the next operation
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.AbstractFilesQuery`2.Take(System.Int32)">
            <summary>
              Takes the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.FileSystem.AbstractFilesQuery`2.Skip(System.Int32)">
            <summary>
              Skips the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="F:Raven.Client.FileSystem.InMemoryFilesSessionOperations.entitiesByKey">
            <summary>
            Translate between a key and its associated entity
            </summary>
        </member>
        <member name="F:Raven.Client.FileSystem.InMemoryFilesSessionOperations.deletedEntities">
            <summary>
            The files waiting to be deleted
            </summary>
        </member>
        <member name="F:Raven.Client.FileSystem.InMemoryFilesSessionOperations.knownMissingIds">
            <summary>
            Entities whose filename we already know do not exist, because they were registered for deletion, etc.
            </summary>
        </member>
        <member name="F:Raven.Client.FileSystem.InMemoryFilesSessionOperations.conflicts">
            <summary>
            Current file conflicts
            </summary>
        </member>
        <member name="F:Raven.Client.FileSystem.InMemoryFilesSessionOperations.theListeners">
            <summary>
            all the listeners for this session
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.InMemoryFilesSessionOperations.#ctor(Raven.Client.FileSystem.FilesStore,Raven.Client.FileSystem.FilesSessionListeners,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.FileSystem.InMemoryFilesSessionOperations"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.InMemoryFilesSessionOperations.IsLoaded(System.String)">
            <summary>
            Returns whatever a filename with the specified id is loaded in the 
            current session
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.InMemoryFilesSessionOperations.IsDeleted(System.String)">
            <summary>
            Returns whatever a filename with the specified id is deleted.
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.InMemoryFilesSessionOperations.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.InMemoryFilesSessionOperations.Id">
            <summary>
            The session id 
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.InMemoryFilesSessionOperations.FileSystemName">
            <summary>
            The file system name for this session
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.InMemoryFilesSessionOperations.Listeners">
            <summary>
            all the listeners for this session
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.InMemoryFilesSessionOperations.FilesStore">
            <summary>
             The files store associated with this session
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.InMemoryFilesSessionOperations.NumberOfRequests">
            <summary>
            Gets the number of requests for this session
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.FileSystem.InMemoryFilesSessionOperations.StoreIdentifier">
            <summary>
            Gets the store identifier for this session.
            The store identifier is the identifier for the particular RavenDB instance.
            </summary>
            <value>The store identifier.</value>
        </member>
        <member name="P:Raven.Client.FileSystem.InMemoryFilesSessionOperations.Conventions">
            <summary>
            Gets the conventions used by this session
            </summary>
            <value>The conventions.</value>
            <remarks>
            This instance is shared among all sessions, changes to the <see cref="T:Raven.Client.FileSystem.FilesConvention"/> should be done
            via the <see cref="T:Raven.Client.FileSystem.IFilesStore"/> instance, not on a single session.
            </remarks>
        </member>
        <member name="P:Raven.Client.FileSystem.InMemoryFilesSessionOperations.MaxNumberOfRequestsPerSession">
            <summary>
            Gets or sets the max number of requests per session.
            If the <see cref="P:Raven.Client.FileSystem.InMemoryFilesSessionOperations.NumberOfRequests"/> rise above <see cref="P:Raven.Client.FileSystem.InMemoryFilesSessionOperations.MaxNumberOfRequestsPerSession"/>, an exception will be thrown.
            </summary>
            <value>The max number of requests per session.</value>
        </member>
        <member name="T:Raven.Client.FileSystem.InMemoryFilesSessionOperations.SaveChangesData">
            <summary>
            Data for a sending operations to the server
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.InMemoryFilesSessionOperations.SaveChangesData.Operations">
            <summary>
            Gets or sets the commands.
            </summary>
            <value>The commands.</value>
        </member>
        <member name="P:Raven.Client.FileSystem.InMemoryFilesSessionOperations.SaveChangesData.Entities">
            <summary>
            Gets or sets the entities.
            </summary>
            <value>The entities.</value>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesSession.SaveChangesAsync">
            <summary>
            Saves all the changes to the Raven server.
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.IAsyncFilesSession.Advanced">
            <summary>
            Get the accessor for advanced operations
            </summary>
            <remarks>
            Those operations are rarely needed, and have been moved to a separate 
            property to avoid cluttering the API
            </remarks>
        </member>
        <member name="P:Raven.Client.FileSystem.IAdvancedFilesSessionOperations.FilesStore">
            <summary>
            The filesystem store associated with this session
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.IAdvancedFilesSessionOperations.StoreIdentifier">
            <summary>
            Gets the store identifier for this session.
            The store identifier is the identifier for the particular RavenDB instance. 
            </summary>
            <value>The store identifier.</value>
        </member>
        <member name="P:Raven.Client.FileSystem.IAdvancedFilesSessionOperations.MaxNumberOfRequestsPerSession">
            <summary>
            Gets or sets the max number of requests per session.
            If the <see cref="P:Raven.Client.FileSystem.IAdvancedFilesSessionOperations.NumberOfRequests"/> rise above <see cref="P:Raven.Client.FileSystem.IAdvancedFilesSessionOperations.MaxNumberOfRequestsPerSession"/>, an exception will be thrown.
            </summary>
            <value>The max number of requests per session.</value>
        </member>
        <member name="P:Raven.Client.FileSystem.IAdvancedFilesSessionOperations.NumberOfRequests">
            <summary>
            Gets the number of requests for this session
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.IAdvancedFilesSessionOperations.UseOptimisticConcurrency">
            <summary>
            Gets or sets a value indicating whether the session should use optimistic concurrency.
            When set to <c>true</c>, a check is made so that a change made behind the session back would fail
            and raise <see cref="T:Raven.Abstractions.Exceptions.ConcurrencyException"/>.
            </summary>
            <value></value>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesSession.#ctor(Raven.Client.FileSystem.FilesStore,Raven.Client.FileSystem.IAsyncFilesCommands,Raven.Client.FileSystem.FilesSessionListeners,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.FileSystem.AsyncFilesSession"/> class.
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.AsyncFilesSession.Commands">
            <summary>
            Gets the async files commands.
            </summary>
            <value>The async files commands.</value>
        </member>
        <member name="T:Raven.Client.FileSystem.Connection.FilesReplicationInformer">
            <summary>
            Replication and failover management on the client side
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.Connection.FilesReplicationInformer.RefreshReplicationInformation(Raven.Client.FileSystem.IAsyncFilesCommands)">
            <summary>
            Refreshes the replication information.
            Expert use only.
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.IAsyncFilesCommands.OperationsHeaders">
            <summary>
            Gets the operations headers.
            </summary>
            <value>The operations headers.</value>
        </member>
        <member name="P:Raven.Client.FileSystem.IAsyncFilesCommands.Admin">
            <summary>
            Admin operations
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.IAsyncFilesCommands.Configuration">
            <summary>
            Configuration commands used to change the general configuration of file systems.
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.IAsyncFilesCommands.Storage">
            <summary>
            Very low level storage commands.
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.IAsyncFilesCommands.Synchronization">
            <summary>
            Low level synchronization commands.
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.IAsyncFilesCommands.PrimaryCredentials">
            <summary>
            Primary credentials for access. Will be used also in replication context - for failovers
            </summary>
        </member>
        <member name="T:Raven.Client.FileSystem.IAsyncFilesQueryBase`2">
            <summary>
            A query against a file system.
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.Where(System.Func{`0,System.Boolean})">
            <summary>
              This function exists solely to forbid in memory where clause on IFilesQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.Where(System.String)">
            <summary>
              Filter the results from the index using the specified where clause.
            </summary>
            <param name = "whereClause">The where clause.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.WhereEquals(System.String,System.Object)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.WhereEquals``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.WhereEquals(Raven.Client.WhereParams)">
            <summary>
            Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.WhereIn(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.WhereIn``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.WhereStartsWith(System.String,System.Object)">
            <summary>
              Matches fields which starts with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.WhereStartsWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields which starts with the specified value.
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.WhereEndsWith(System.String,System.Object)">
            <summary>
              Matches fields which ends with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.WhereEndsWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields which ends with the specified value.
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.WhereBetween(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.WhereBetween``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,``0)">
            <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.WhereBetweenOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,``0)">
            <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.WhereGreaterThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.WhereGreaterThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is greater than the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.WhereGreaterThanOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.WhereLessThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.WhereLessThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is less than the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.WhereLessThanOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.ContainsAny(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Performs a query matching ANY of the provided values against the given field (OR)
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.ContainsAny``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Performs a query matching ANY of the provided values against the given field (OR)
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.ContainsAll(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Performs a query matching ALL of the provided values against the given field (AND)
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.ContainsAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Performs a query matching ALL of the provided values against the given field (AND)
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.OrderBy(System.String[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
            </summary>
            <param name = "fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
            </summary>
            <param name = "propertySelectors">Property selectors for the fields.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.OrderByDescending(System.String[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by descending.
            </summary>
            <param name = "fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by descending.
            </summary>
            <param name = "propertySelectors">Property selectors for the fields.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.AndAlso">
            <summary>
              Add an AND to the query
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.OrElse">
            <summary>
              Add an OR to the query
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.FirstOrDefaultAsync">
            <summary>
              Returns first element or default value for type if sequence is empty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.FirstAsync">
            <summary>
              Returns first element or throws if sequence is empty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.SingleOrDefaultAsync">
            <summary>
              Returns first element or default value for given type if sequence is empty. Throws if sequence contains more than one element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.SingleAsync">
            <summary>
              Returns first element or throws if sequence is empty or contains more than one element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.Take(System.Int32)">
            <summary>
              Takes the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.Skip(System.Int32)">
            <summary>
              Skips the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.FileSystem.IAsyncFilesQueryBase`2.Conventions">
            <summary>
            Gets the files convention from the query session
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesQuery`1.RegisterResultsForDeletion">
            <summary>
              Deletes the files matching the query.
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesOrderedQueryBase`2.ThenBy(System.String[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort.
            </summary>
            <param name = "fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesOrderedQueryBase`2.ThenBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort.
            </summary>
            <param name = "propertySelectors">Property selectors for the fields.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesOrderedQueryBase`2.ThenByDescending(System.String[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort.
            </summary>
            <param name = "fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.IAsyncFilesOrderedQueryBase`2.ThenByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort.
            </summary>
            <param name = "propertySelectors">Property selectors for the fields.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#Where(System.Func{`0,System.Boolean})">
            <summary>
              This function exists solely to forbid in memory where clause on IAsyncFilesQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#Where(System.String)">
            <summary>
            Filter the results using the specified where clause.
            </summary>
            <param name="whereClause">The where clause.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#WhereEquals(System.String,System.Object)">
            <summary>
            	Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#WhereEquals``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            	Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#WhereEquals(Raven.Client.WhereParams)">
            <summary>
            	Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#WhereIn(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#WhereIn``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#WhereStartsWith(System.String,System.Object)">
            <summary>
            Matches fields which starts with the specified value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#WhereStartsWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields which starts with the specified value.
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#WhereEndsWith(System.String,System.Object)">
            <summary>
            Matches fields which ends with the specified value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#WhereEndsWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields which ends with the specified value.
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#WhereBetween(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#WhereBetween``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,``0)">
            <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#WhereBetweenOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,``0)">
            <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#WhereGreaterThan(System.String,System.Object)">
            <summary>
            Matches fields where the value is greater than the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#WhereGreaterThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is greater than the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
            Matches fields where the value is greater than the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#WhereGreaterThanOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is greater than the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#WhereLessThan(System.String,System.Object)">
            <summary>
            Matches fields where the value is less than the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#WhereLessThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is less than the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
            Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#WhereLessThanOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#ContainsAny(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Performs a query matching ANY of the provided values against the given field (OR)
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#ContainsAny``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Performs a query matching ANY of the provided values against the given field (OR)
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#ContainsAll(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Performs a query matching ALL of the provided values against the given field (AND)
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#ContainsAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Performs a query matching ALL of the provided values against the given field (AND)
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#AndAlso">
            <summary>
            Add an AND to the query
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#OrElse">
            <summary>
            Add an OR to the query
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#OrderBy(System.String[])">
            <summary>
            Order the results by the specified fields
            The fields are the names of the fields to sort, defaulting to sorting by ascending.
            </summary>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
            </summary>
            <param name = "propertySelectors">Property selectors for the fields.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#OrderByDescending(System.String[])">
            <summary>
            Order the results by the specified fields
            The fields are the names of the fields to sort, defaulting to sorting by descending.
            </summary>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by descending.
            </summary>
            <param name = "propertySelectors">Property selectors for the fields.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesOrderedQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#ThenBy(System.String[])">
            <summary>
            Order the results by the specified fields
            The fields are the names of the fields to sort, defaulting to sorting by ascending.
            </summary>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesOrderedQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#ThenBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
            </summary>
            <param name = "propertySelectors">Property selectors for the fields.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesOrderedQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#ThenByDescending(System.String[])">
            <summary>
            Order the results by the specified fields
            The fields are the names of the fields to sort, defaulting to sorting by descending.
            </summary>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesOrderedQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#ThenByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by descending.
            </summary>
            <param name = "propertySelectors">Property selectors for the fields.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#Take(System.Int32)">
            <summary>
              Takes the specified count.
            </summary>
            <param name = "count">The count.</param>
        </member>
        <member name="M:Raven.Client.FileSystem.AsyncFilesQuery`1.Raven#Client#FileSystem#IAsyncFilesQueryBase{T@Raven#Client#FileSystem#IAsyncFilesQuery{T}}#Skip(System.Int32)">
            <summary>
              Skips the specified count.
            </summary>
            <param name = "count">The count.</param>
        </member>
        <member name="T:Raven.Client.FileSystem.FilesQueryStatistics">
            <summary>
            Statistics about a the files query.
            Such as how many records match the query
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.FilesQueryStatistics.DurationMilliseconds">
            <summary>
            The duration of the query _server side_
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.FilesQueryStatistics.TotalResults">
            <summary>
            What was the total count of the results that matched the query
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.FilesQueryStatistics.SkippedResults">
            <summary>
            Gets or sets the skipped results
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.FilesQueryStatistics.NonAuthoritativeInformation">
            <summary>
            Gets or sets a value indicating whether any of the documents returned by this query
            are non authoritative (modified by uncommitted transaction).
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.FilesSessionListeners.#ctor">
            <summary>
                Create a new instance of this class
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.FilesSessionListeners.DeleteListeners">
            <summary>
                The delete listeners.
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.FilesSessionListeners.MetadataChangeListeners">
            <summary>
                The metadata changed listeners allow to modify metadata before it is executed.
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.FilesSessionListeners.ConflictListeners">
            <summary>
                The conflict listeners
            </summary>
        </member>
        <member name="T:Raven.Client.FileSystem.FilesConvention">
            <summary>
            The set of conventions used by the <see cref="T:Raven.Client.FileSystem.FilesConvention"/> which allow the users to customize
            the way the Raven client API behaves
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.FilesConvention.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.FileSystem.FilesConvention"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.FilesConvention.Clone">
            <summary>
            Clone the current conventions to a new instance
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.FilesConvention.MaxNumberOfRequestsPerSession">
            <summary>
            Gets or sets the default max number of requests per session.
            </summary>
            <value>The max number of requests per session.</value>
        </member>
        <member name="P:Raven.Client.FileSystem.FilesConvention.DefaultUseOptimisticConcurrency">
            <summary>
            Whether UseOptimisticConcurrency is set to true by default for all opened sessions
            </summary>
        </member>
        <member name="T:Raven.Client.FileSystem.IFilesStore">
            <summary>
            Interface for managing access to RavenFS and open sessions.
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.IFilesStore.Changes(System.String)">
            <summary>
            Subscribe to change notifications from the server
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.IFilesStore.Initialize">
            <summary>
            Initializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.FileSystem.IFilesStore.OpenAsyncSession">
            <summary>
            Opens the async session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.FileSystem.IFilesStore.OpenAsyncSession(System.String)">
            <summary>
            Opens the async session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.FileSystem.IFilesStore.OpenAsyncSession(Raven.Client.FileSystem.OpenFilesSessionOptions)">
            <summary>
            Opens the async session.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.FileSystem.IFilesStore.SharedOperationsHeaders">
            <summary>
            Gets the shared operations headers.
            </summary>
            <value>The shared operations headers.</value>
        </member>
        <member name="P:Raven.Client.FileSystem.IFilesStore.JsonRequestFactory">
            <summary>
            Get the <see cref="T:Raven.Client.Connection.HttpJsonRequestFactory"/> for this store
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.IFilesStore.Identifier">
            <summary>
            Gets or sets the identifier for this store.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Raven.Client.FileSystem.IFilesStore.AsyncFilesCommands">
            <summary>
            Gets the async file system commands.
            </summary>
            <value>The async file system commands.</value>
        </member>
        <member name="P:Raven.Client.FileSystem.IFilesStore.Conventions">
            <summary>
            Gets the conventions.
            </summary>
            <value>The conventions.</value>
        </member>
        <member name="P:Raven.Client.FileSystem.IFilesStore.Url">
            <summary>
            Gets the URL.
            </summary>
        </member>
        <member name="F:Raven.Client.FileSystem.FilesStore.currentSessionId">
            <summary>
            The current session id - only used during construction
            </summary>
        </member>
        <member name="F:Raven.Client.FileSystem.FilesStore.AsyncFilesCommandsGenerator">
            <summary>
            Generate new instance of files commands
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.FilesStore.Credentials">
            <summary>
            Gets or sets the credentials.
            </summary>
            <value>The credentials.</value>
        </member>
        <member name="P:Raven.Client.FileSystem.FilesStore.ApiKey">
            <summary>
            The API Key to use when authenticating against a RavenDB server that
            supports API Key authentication
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.FilesStore.SharedOperationsHeaders">
            <summary>
            Gets the shared operations headers.
            </summary>
            <value>The shared operations headers.</value>
        </member>
        <member name="P:Raven.Client.FileSystem.FilesStore.HasJsonRequestFactory">
            <summary>
            Whatever this instance has json request factory available
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.FilesStore.JsonRequestFactory">
            <summary>
             Get the <see cref="T:Raven.Client.Connection.HttpJsonRequestFactory"/> for the stores
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.FilesStore.Conventions">
            <summary>
            Gets the conventions.
            </summary>
            <value>The conventions.</value>
        </member>
        <member name="P:Raven.Client.FileSystem.FilesStore.MaxNumberOfCachedRequests">
            <summary>
            Max number of cached requests (default: 2048)
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.FilesStore.Url">
            <summary>
            Gets or sets the URL.
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.FilesStore.Identifier">
            <summary>
            Gets or sets the identifier for this store.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Raven.Client.FileSystem.FilesStore.AsyncFilesCommands">
            <summary>
            Gets the async file system commands.
            </summary>
            <value>The async file system commands.</value>
        </member>
        <member name="E:Raven.Client.FileSystem.FilesStore.SessionCreatedInternal">
            <summary>
             Internal notification for integration tools, mainly
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.Listeners.IFilesConflictListener.ConflictDetected(Raven.Abstractions.FileSystem.FileHeader,Raven.Abstractions.FileSystem.FileHeader,System.String)">
            <summary>
            Invoked when a conflict has been detected over a file.
            </summary>
            <param name="local">The file in conflict in its local version</param>
            <param name="remote">The file in conflict in its remote version</param>
            <param name="sourceServerUri">The source file system URL that tried to synchronize a file to a destination where the conflict appeared</param>
            <returns>A resolution strategy for this conflict</returns>
        </member>
        <member name="M:Raven.Client.FileSystem.Listeners.IFilesConflictListener.ConflictResolved(Raven.Abstractions.FileSystem.FileHeader)">
            <summary>
            Invoked when a file conflict has been resolved.
            </summary>
            <param name="instance">The file with the resolved conflict</param>
        </member>
        <member name="M:Raven.Client.FileSystem.Listeners.IFilesDeleteListener.BeforeDelete(Raven.Abstractions.FileSystem.FileHeader)">
            <summary>
            Invoked before the delete request is sent to the server.
            </summary>
            <param name="instance">The file to delete</param>
        </member>
        <member name="M:Raven.Client.FileSystem.Listeners.IFilesDeleteListener.AfterDelete(System.String)">
            <summary>
            Invoked after the delete operation was effective on the server.
            </summary>
            <param name="filename">The filename of the deleted file</param>
        </member>
        <member name="M:Raven.Client.FileSystem.Listeners.IMetadataChangeListener.BeforeChange(Raven.Abstractions.FileSystem.FileHeader,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Invoked before the written data is sent to the server.
            </summary>
            <param name="instance">The file to affect</param>
            <param name="metadata">The new metadata</param>
            <param name="original">The original remote object metadata</param>
            <returns>
            Whatever the metadata was modified and requires us to re-send it.
            Returning false would mean that any request of write to the file would be 
            ignored in the current SaveChanges call.
            </returns>
        </member>
        <member name="M:Raven.Client.FileSystem.Listeners.IMetadataChangeListener.AfterChange(Raven.Abstractions.FileSystem.FileHeader,Raven.Json.Linq.RavenJObject)">
            <summary>
            Invoked after the metadata is sent to the server.
            </summary>
            <param name="instance">The updated file information.</param>
            <param name="metadata">The current metadata as stored in the server.</param>
        </member>
        <member name="T:Raven.Client.FileSystem.Shard.IShardAccessStrategy">
            <summary>
            Apply an operation to all the shard session
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.Shard.IShardAccessStrategy.ApplyAsync``1(System.Collections.Generic.IList{Raven.Client.FileSystem.IAsyncFilesCommands},Raven.Client.FileSystem.Shard.ShardRequestData,System.Func{Raven.Client.FileSystem.IAsyncFilesCommands,System.Int32,System.Threading.Tasks.Task{``0}})">
            <summary>
            Applies the specified action to all shard sessions.
            </summary>
        </member>
        <member name="E:Raven.Client.FileSystem.Shard.IShardAccessStrategy.OnAsyncError">
            <summary>
            Occurs on error, allows to handle an error one (or more) of the nodes
            is failing
            </summary>
        </member>
        <member name="T:Raven.Client.FileSystem.Shard.IShardResolutionStrategy">
            <summary>
            Implementers of this interface provide a way to decide which shards will be queried
            for a specified operation
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.Shard.IShardResolutionStrategy.GetShardIdForUpload(System.String,Raven.Json.Linq.RavenJObject)">
            <summary>
            Find in which node to put the file
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.Shard.IShardResolutionStrategy.GetShardIdFromFileName(System.String)">
            <summary>
            Find in which node to the file is in
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.Shard.IShardResolutionStrategy.GenerateShardIdFor(System.String,Raven.Json.Linq.RavenJObject)">
            <summary>
             Generate a shard id for the specified entity
             </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.Shard.IShardResolutionStrategy.PotentialShardsFor(Raven.Client.FileSystem.Shard.ShardRequestData)">
            <summary>
             Selects the shard ids appropriate for the specified data.
             </summary><returns>Return a list of shards ids that will be search. Returning null means search all shards.</returns>
        </member>
        <member name="P:Raven.Client.Util.HttpClientCache.MaxIdleTime">
            <summary>
            The maximum idle time to keep a connection in the cache
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.RavenMethodAttribute">
            <summary>
            When applied to a custom extension method used in an index, RavenDB will translate
            the invocation to a regular method call so it can be understood by the server.
            </summary>
        </member>
        <member name="T:Raven.Client.FileSystem.ExceptionExtensions">
            <summary>
                Extension methods to handle common scenarios
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.ExceptionExtensions.ToPropertyPath(System.Linq.Expressions.LambdaExpression,System.Char,System.Char)">
            <summary>
             Turn an expression like x=&lt; x.User.Name to "User.Name"
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.ExceptionExtensions.SimplifyError(System.Exception)">
            <summary>
                Extracts a portion of an exception for a user friendly display
            </summary>
            <param name="e">The exception.</param>
            <returns>The primary portion of the exception message.</returns>
        </member>
        <member name="E:Raven.Client.FileSystem.AsyncFilesServerClient.FailoverStatusChanged">
            <summary>
            Notify when the failover status changed
            </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.Shard.DefaultShardResolutionStrategy.GenerateShardIdFor(System.String,Raven.Json.Linq.RavenJObject)">
            <summary>
             Generate a shard id for the specified entity
             </summary>
        </member>
        <member name="M:Raven.Client.FileSystem.Shard.DefaultShardResolutionStrategy.PotentialShardsFor(Raven.Client.FileSystem.Shard.ShardRequestData)">
            <summary>
             Selects the shard ids appropriate for the specified data.
             </summary><returns>Return a list of shards ids that will be search. Returning null means search all shards.</returns>
        </member>
        <member name="T:Raven.Client.FileSystem.Shard.SequentialShardAccessStrategy">
            <summary>
            Apply an operation to all the shard session in sequence
            </summary>
        </member>
        <member name="T:Raven.Client.FileSystem.Shard.ShardRequestData">
            <summary>
            Information required to resolve the appropriate shard for an entity / entity and key
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.Shard.ShardRequestData.Keys">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Client.FileSystem.Shard.ShardRequestData.Query">
            <summary>
            The query the user is using
            </summary>
        </member>
        <member name="T:Raven.Client.FileSystem.Shard.ShardStrategy">
            <summary>
            Default shard strategy for the sharding document store
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.Shard.ShardStrategy.ShardResolutionStrategy">
            <summary>
            Gets or sets the shard resolution strategy.
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.Shard.ShardStrategy.ShardAccessStrategy">
            <summary>
            Gets or sets the shard access strategy.
            </summary>
        </member>
        <member name="P:Raven.Client.FileSystem.Shard.ShardStrategy.ModifyFileName">
            <summary>
            Get or sets the modification for the document id for sharding
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.RavenQueryInspector`1">
            <summary>
            Implements <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/>
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.IRavenQueryable`1">
            <summary>
            An implementation of <see cref="T:System.Linq.IOrderedQueryable`1"/> with Raven specific operation
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryable`1.Statistics(Raven.Client.RavenQueryStatistics@)">
            <summary>
            Provide statistics about the query, such as duration, total number of results, staleness information, etc.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryable`1.Customize(System.Action{Raven.Client.IDocumentQueryCustomization})">
            <summary>
            Customizes the query using the specified action
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryable`1.TransformWith``2">
            <summary>
            Specifies a result transformer to use on the results
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryable`1.TransformWith``1(System.String)">
            <summary>
            Specifies a result transformer name to use on the results
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryable`1.AddQueryInput(System.String,Raven.Json.Linq.RavenJToken)">
            <summary>
            Inputs a key and value to the query (accessible by the transformer)
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryable`1.AddTransformerParameter(System.String,Raven.Json.Linq.RavenJToken)">
            <summary>
            Inputs a key and value to the query (accessible by the transformer)
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.IRavenQueryInspector">
            <summary>
            Provide access to the underlying <see cref="T:Raven.Client.IDocumentQuery`1"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IRavenQueryInspector.GetLastEqualityTerm(System.Boolean)">
            <summary>
            The last term that we asked the query to use equals on
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IRavenQueryInspector.GetIndexQuery(System.Boolean)">
            <summary>
            Get the index query for this query
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IRavenQueryInspector.GetFacets(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Get the facets as per the specified facet document with the given start and pageSize
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IRavenQueryInspector.GetFacets(System.Collections.Generic.List{Raven.Abstractions.Data.Facet},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Get the facet results as per the specified facets with the given start and pageSize
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IRavenQueryInspector.GetFacetsAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get the facets as per the specified facet document with the given start and pageSize
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IRavenQueryInspector.GetFacetsAsync(System.Collections.Generic.List{Raven.Abstractions.Data.Facet},System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get the facet results as per the specified facets with the given start and pageSize
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.IRavenQueryInspector.IndexQueried">
            <summary>
            Get the name of the index being queried
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.IRavenQueryInspector.AsyncIndexQueried">
            <summary>
            Get the name of the index being queried in async queries
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.IRavenQueryInspector.DatabaseCommands">
            <summary>
            Grant access to the database commands
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.IRavenQueryInspector.AsyncDatabaseCommands">
            <summary>
            Grant access to the async database commands
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.IRavenQueryInspector.Session">
            <summary>
            The query session
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.Init(Raven.Client.Linq.IRavenQueryProvider,Raven.Client.RavenQueryStatistics,Raven.Client.RavenQueryHighlightings,System.String,System.Linq.Expressions.Expression,Raven.Client.Document.InMemoryDocumentSessionOperations,Raven.Client.Connection.IDatabaseCommands,Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Linq.RavenQueryInspector`1"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.Statistics(Raven.Client.RavenQueryStatistics@)">
            <summary>
            Provide statistics about the query, such as total count of matching records
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.Customize(System.Action{Raven.Client.IDocumentQueryCustomization})">
            <summary>
            Customizes the query using the specified action
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.GetLastEqualityTerm(System.Boolean)">
            <summary>
             Get the last equality term for the query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.FieldsToFetch(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set the fields to fetch
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryInspector`1.IndexQueried">
            <summary>
            Get the name of the index being queried
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryInspector`1.AsyncIndexQueried">
            <summary>
            Get the name of the index being queried asynchronously
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryInspector`1.DatabaseCommands">
            <summary>
            Grant access to the database commands
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryInspector`1.AsyncDatabaseCommands">
            <summary>
            Grant access to the async database commands
            </summary>
        </member>
        <member name="M:Raven.Client.ILoadConfiguration.AddQueryParam(System.String,Raven.Json.Linq.RavenJToken)">
            <summary>
            Adds transformer parameter that will be passed to transformer on server-side.
            </summary>
            <param name="name">name of the parameter</param>
            <param name="value">value of the parameter</param>
        </member>
        <member name="M:Raven.Client.ILoadConfiguration.AddTransformerParameter(System.String,Raven.Json.Linq.RavenJToken)">
            <summary>
            Adds transformer parameter that will be passed to transformer on server-side.
            </summary>
            <param name="name">name of the parameter</param>
            <param name="value">value of the parameter</param>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractTransformerCreationTask">
            <summary>
            Base class for creating transformers
            </summary>
            <remarks>
            The naming convention is that underscores in the inherited class names are replaced by slashed
            For example: Posts_ByName will be saved to Posts/ByName
            </remarks>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractCommonApiForIndexesAndTransformers.Recurse``2(``0,System.Func{``0,``1})">
            <summary>
            Allows to use lambdas recursively
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractCommonApiForIndexesAndTransformers.Recurse``2(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Allows to use lambdas recursively
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractCommonApiForIndexesAndTransformers.Recurse``2(``0,System.Func{``0,System.Collections.Generic.ICollection{``1}})">
            <summary>
            Allows to use lambdas recursively
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractCommonApiForIndexesAndTransformers.Recurse``2(``0,System.Func{``0,System.Collections.Generic.ISet{``1}})">
            <summary>
            Allows to use lambdas recursively
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractCommonApiForIndexesAndTransformers.Recurse``2(``0,System.Func{``0,System.Collections.Generic.HashSet{``1}})">
            <summary>
            Allows to use lambdas recursively
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractCommonApiForIndexesAndTransformers.Recurse``2(``0,System.Func{``0,System.Collections.Generic.SortedSet{``1}})">
            <summary>
            Allows to use lambdas recursively
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractCommonApiForIndexesAndTransformers.LoadDocument``1(System.String)">
            <summary>
            Loads the specifed document during the indexing process
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractCommonApiForIndexesAndTransformers.LoadDocument``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the specifed document during the indexing process
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractCommonApiForIndexesAndTransformers.Recurse``2(``0,System.Func{``0,System.Collections.Generic.IList{``1}})">
            <summary>
            Allows to use lambdas recursively
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractCommonApiForIndexesAndTransformers.Recurse``2(``0,System.Func{``0,``1[]})">
            <summary>
            Allows to use lambdas recursively
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractCommonApiForIndexesAndTransformers.Recurse``2(``0,System.Func{``0,System.Collections.Generic.List{``1}})">
            <summary>
            Allows to use lambdas recursively
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractCommonApiForIndexesAndTransformers.MetadataFor(System.Object)">
            <summary>
            Allow to get to the metadata of the document
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractCommonApiForIndexesAndTransformers.AsDocument(System.Object)">
            <summary>
            Allow to access an entity as a document
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractTransformerCreationTask.Parameter(System.String)">
            <summary>
            Returns value of a transformer parameter for specified key
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractTransformerCreationTask.ParameterOrDefault(System.String,System.Object)">
            <summary>
            Returns value of a transformer parameter for specified key or specified default value if there is no parameter under given key
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractTransformerCreationTask.TransformWith``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Applies transformer with given name on a specified items
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractTransformerCreationTask.TransformWith``2(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Applies transformer with given name on a specified items
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractTransformerCreationTask.TransformWith``1(System.String,``0)">
            <summary>
            Applies transformer with given name on a specified item
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractTransformerCreationTask.TransformWith``2(System.String,``0)">
            <summary>
            Applies transformer with given name on a specified item
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractTransformerCreationTask.TransformWith``1(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Applies transformers with given names on a specified items
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractTransformerCreationTask.TransformWith``2(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Applies transformers with given names on a specified items
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractTransformerCreationTask.TransformWith``1(System.Collections.Generic.IEnumerable{System.String},``0)">
            <summary>
            Applies transformers with given names on a specified item
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractTransformerCreationTask.TransformWith``2(System.Collections.Generic.IEnumerable{System.String},``0)">
            <summary>
            Applies transformers with given names on a specified item
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractTransformerCreationTask.CreateTransformerDefinition(System.Boolean)">
            <summary>
            Creates the transformer definition.
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractTransformerCreationTask.Execute(Raven.Client.Connection.IDatabaseCommands,Raven.Client.Document.DocumentConvention)">
            <summary>
            Executes the index creation against the specified document database using the specified conventions
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractTransformerCreationTask.ExecuteAsync(Raven.Client.Connection.Async.IAsyncDatabaseCommands,Raven.Client.Document.DocumentConvention,System.Threading.CancellationToken)">
            <summary>
            Executes the index creation against the specified document store.
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractTransformerCreationTask.TransformerName">
            <summary>
            Generates transformer name from type name replacing all _ with /
            <para>e.g.</para>
            <para>if our type is <code>'Orders_Totals'</code> then index name would be <code>'Orders/Totals'</code></para>
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractTransformerCreationTask.Conventions">
            <summary>
            Gets or sets the conventions that should be used when index definition is created.
            </summary>
        </member>
        <member name="T:Raven.Client.Listeners.IDocumentConversionListener">
            <summary>
            Extended hook for users to provide additional logic for converting to / from 
            entities to document/metadata pairs.
            </summary>
        </member>
        <member name="M:Raven.Client.Listeners.IDocumentConversionListener.BeforeConversionToDocument(System.String,System.Object,Raven.Json.Linq.RavenJObject)">
            <summary>
            Called before converting an entity to a document and metadata
            </summary>
        </member>
        <member name="M:Raven.Client.Listeners.IDocumentConversionListener.AfterConversionToDocument(System.String,System.Object,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Called after having converted an entity to a document and metadata
            </summary>
        </member>
        <member name="M:Raven.Client.Listeners.IDocumentConversionListener.BeforeConversionToEntity(System.String,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Called before converting a document and metadata to an entity
            </summary>
        </member>
        <member name="M:Raven.Client.Listeners.IDocumentConversionListener.AfterConversionToEntity(System.String,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject,System.Object)">
            <summary>
            Called after having converted a document and metadata to an entity
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncDatabaseCommandsExtensions.PatchAsync(Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.String,Raven.Abstractions.Data.PatchRequest[])">
            <summary>
            Sends a patch request for a specific document, ignoring the document's Etag
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patches">Array of patch requests</param>
        </member>
        <member name="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands">
            <summary>
                An async database command operations
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.BatchAsync(Raven.Abstractions.Commands.ICommandData[],System.Threading.CancellationToken)">
            <summary>
                Sends multiple operations in a single request, reducing the number of remote calls and allowing several operations
                to share same transaction
            </summary>
            <param name="commandDatas">Commands to process</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.CommitAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Commits the specified tx id
            </summary>
            <param name="txId">transaction identifier</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.CreateRequest(System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
                Create a http request to the specified relative url on the current database
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.DeleteAsync(System.String,Raven.Abstractions.Data.Etag,System.Threading.CancellationToken)">
            <summary>
                Deletes the document with the specified key
            </summary>
            <param name="key">key of a document to be deleted</param>
            <param name="etag">current document etag, used for concurrency checks (null to skip check)</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.DeleteAttachmentAsync(System.String,Raven.Abstractions.Data.Etag,System.Threading.CancellationToken)">
            <summary>
                Removes an attachment from a database.
            </summary>
            <param name="key">key of an attachment to delete</param>
            <param name="etag">current attachment etag, used for concurrency checks (null to skip check)</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.DeleteByIndexAsync(System.String,Raven.Abstractions.Data.IndexQuery,Raven.Abstractions.Data.BulkOperationOptions,System.Threading.CancellationToken)">
            <summary>
                Perform a set based deletes using the specified index
            </summary>
            <param name="indexName">name of an index to perform a query on</param>
            <param name="queryToDelete">Tquery that will be performed</param>
            <param name="options">various operation options e.g. AllowStale or MaxOpsPerSec</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.DeleteIndexAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Deletes the specified index
            </summary>
            <param name="name">name of an index to delete</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.DeleteTransformerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Deletes the specified transformer
            </summary>
            <param name="name">name of a transformer to delete</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.DisableAllCaching">
            <summary>
                Disable all caching within the given scope
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.ForDatabase(System.String)">
            <summary>
                Create a new instance of <see cref="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands"/> that will interacts
                with the specified database
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.ForSystemDatabase">
            <summary>
                Create a new instance of <see cref="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands"/> that will interacts
                with the default database
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.ForceReadFromMaster">
            <summary>
                Force the database commands to read directly from the master, unless there has been a failover.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Retrieve a single document for a specified key.
            </summary>
            <param name="key">key of the document you want to retrieve</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetAsync(System.String[],System.String[],System.String,System.Collections.Generic.Dictionary{System.String,Raven.Json.Linq.RavenJToken},System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Retrieves documents with the specified ids, optionally specifying includes to fetch along and also optionally the
                transformer.
                <para>Returns MultiLoadResult where:</para>
                <para>- Results - list of documents in exact same order as in keys parameter</para>
                <para>- Includes - list of documents that were found in specified paths that were passed in includes parameter</para>
            </summary>
            <param name="keys">array of keys of the documents you want to retrieve</param>
            <param name="includes">array of paths in documents in which server should look for a 'referenced' document</param>
            <param name="transformer">name of a transformer that should be used to transform the results</param>
            <param name="transformerParameters">parameters that will be passed to transformer</param>
            <param name="metadataOnly">specifies if only document metadata should be returned</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetAttachmentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Downloads a single attachment.
            </summary>
            <param name="key">key of the attachment you want to download</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetAttachmentHeadersStartingWithAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
                Downloads attachment metadata for a multiple attachments.
            </summary>
            <param name="idPrefix">prefix for which attachments should be returned</param>
            <param name="start">number of attachments that should be skipped</param>
            <param name="pageSize">maximum number of attachments that will be returned</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetAttachmentsAsync(System.Int32,Raven.Abstractions.Data.Etag,System.Int32,System.Threading.CancellationToken)">
            <summary>
                Used to download attachment information for multiple attachments.
            </summary>
            <param name="start">indicates how many attachments should be skipped</param>
            <param name="startEtag">ETag from which to start</param>
            <param name="pageSize">maximum number of attachments that will be downloaded</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetBulkInsertOperation(Raven.Abstractions.Data.BulkInsertOptions,Raven.Client.Changes.IDatabaseChanges)">
            <summary>
                Get the low level bulk insert operation
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetDocumentsAsync(System.Int32,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Retrieves multiple documents.
            </summary>
            <param name="start">number of documents that should be skipped</param>
            <param name="pageSize">maximum number of documents that will be retrieved</param>
            <param name="metadataOnly">specifies if only document metadata should be returned</param>
            <remarks>
                This is primarily useful for administration of a database
            </remarks>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetDocumentsAsync(Raven.Abstractions.Data.Etag,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Retrieves multiple documents.
            </summary>
            <param name="fromEtag">Etag from which documents should start</param>
            <param name="pageSize">maximum number of documents that will be retrieved</param>
            <param name="metadataOnly">specifies if only document metadata should be returned</param>
            <remarks>
                This is primarily useful for administration of a database
            </remarks>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetFacetsAsync(System.String,Raven.Abstractions.Data.IndexQuery,System.String,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
                Using the given Index, calculate the facets as per the specified doc with the given start and pageSize
            </summary>
            <param name="index">name of an index to query</param>
            <param name="query">query definition containing all information required to query a specified index</param>
            <param name="facetSetupDoc">document key that contains predefined FacetSetup</param>
            <param name="start">number of results that should be skipped. Default: 0</param>
            <param name="pageSize">
                maximum number of results that will be retrieved. Default: null. If set, overrides
                Facet.MaxResults
            </param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetFacetsAsync(System.String,Raven.Abstractions.Data.IndexQuery,System.Collections.Generic.List{Raven.Abstractions.Data.Facet},System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
                Using the given Index, calculate the facets as per the specified doc with the given start and pageSize
            </summary>
            <param name="index">name of an index to query</param>
            <param name="query">query definition containing all information required to query a specified index</param>
            <param name="facets">list of facets required to perform a facet query</param>
            <param name="start">number of results that should be skipped. Default: 0</param>
            <param name="pageSize">
                maximum number of results that will be retrieved. Default: null. If set, overrides
                Facet.MaxResults
            </param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetIndexAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Retrieves an index definition from a database.
            </summary>
            <param name="name">name of an index</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetIndexMergeSuggestionsAsync(System.Threading.CancellationToken)">
            <summary>
                Retrieves all suggestions for an index merging
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetIndexNamesAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
                Retrieves multiple index names from a database.
            </summary>
            <param name="start">number of index names that should be skipped</param>
            <param name="pageSize">maximum number of index names that will be retrieved</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetIndexesAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
                Retrieves multiple index definitions from a database
            </summary>
            <param name="start">number of indexes that should be skipped</param>
            <param name="pageSize">maximum number of indexes that will be retrieved</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetLicenseStatusAsync(System.Threading.CancellationToken)">
            <summary>
                Gets the license status
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetLogsAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Gets the Logs
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetMultiFacetsAsync(Raven.Abstractions.Data.FacetQuery[],System.Threading.CancellationToken)">
            <summary>
                Sends a multiple faceted queries in a single request and calculates the facet results for each of them
            </summary>
            <param name="facetedQueries">List of the faceted queries that will be executed on the server-side</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetStatisticsAsync(System.Threading.CancellationToken)">
            <summary>
                Retrieve the statistics for the database
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetTermsAsync(System.String,System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
                Get the all terms stored in the index for the specified field
                You can page through the results by use fromValue parameter as the
                starting point for the next query
            </summary>
            <param name="index">name of an index</param>
            <param name="field">index field</param>
            <param name="fromValue">starting point for a query, used for paging</param>
            <param name="pageSize">maximum number of terms that will be returned</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetTransformerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Gets the transformer definition for the specified name
            </summary>
            <param name="name">transformer name</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetTransformersAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
                Gets the transformers from the server
            </summary>
            <param name="start">number of transformers that should be skipped</param>
            <param name="pageSize">maximum number of transformers that will be retrieved</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.HeadAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Retrieves the document metadata for the specified document key.
                <para>Returns:</para>
                <para>The document metadata for the specified document, or <c>null</c> if the document does not exist</para>
            </summary>
            <param name="key">key of a document to get metadata for</param>
            <returns>The document metadata for the specified document, or null if the document does not exist</returns>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.HeadAttachmentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Download attachment metadata for a single attachment.
            </summary>
            <param name="key">key of the attachment you want to download metadata for</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.IndexHasChangedAsync(System.String,Raven.Abstractions.Indexing.IndexDefinition,System.Threading.CancellationToken)">
            <summary>
                Lets you check if the given index definition differs from the one on a server.
                <para>
                    This might be useful when you want to check the prior index deployment, if index will be overwritten, and if
                    indexing data will be lost.
                </para>
                <para>Returns:</para>
                <para>- <c>true</c> - if an index does not exist on a server</para>
                <para>- <c>true</c> - if an index definition does not match the one from the indexDef parameter,</para>
                <para>
                    - <c>false</c> - if there are no differences between an index definition on server and the one from the
                    indexDef parameter
                </para>
                If index does not exist this method returns true.
            </summary>
            <param name="name">name of an index to check</param>
            <param name="indexDef">index definition</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.MoreLikeThisAsync(Raven.Abstractions.Data.MoreLikeThisQuery,System.Threading.CancellationToken)">
            <summary>
                Return a list of documents that based on the MoreLikeThisQuery.
            </summary>
            <param name="query">more like this query definition that will be executed</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.MultiGetAsync(Raven.Abstractions.Data.GetRequest[],System.Threading.CancellationToken)">
            <summary>
                Perform a single POST request containing multiple nested GET requests
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.NextIdentityForAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Generate the next identity value from the server
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PatchAsync(System.String,Raven.Abstractions.Data.PatchRequest[],System.Threading.CancellationToken)">
            <summary>
                Sends a patch request for a specific document, ignoring the document's Etag and if the document is missing
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patches">Array of patch requests</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PatchAsync(System.String,Raven.Abstractions.Data.PatchRequest[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Sends a patch request for a specific document, ignoring the document's Etag
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patches">Array of patch requests</param>
            <param name="ignoreMissing">
                true if the patch request should ignore a missing document, false to throw
                DocumentDoesNotExistException
            </param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PatchAsync(System.String,Raven.Abstractions.Data.ScriptedPatchRequest,System.Threading.CancellationToken)">
            <summary>
                Sends a patch request for a specific document, ignoring the document's Etag and  if the document is missing
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patch">The patch request to use (using JavaScript)</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PatchAsync(System.String,Raven.Abstractions.Data.ScriptedPatchRequest,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Sends a patch request for a specific document, ignoring the document's Etag
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patch">The patch request to use (using JavaScript)</param>
            <param name="ignoreMissing">
                true if the patch request should ignore a missing document, false to throw
                DocumentDoesNotExistException
            </param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PatchAsync(System.String,Raven.Abstractions.Data.PatchRequest[],Raven.Abstractions.Data.Etag,System.Threading.CancellationToken)">
            <summary>
                Sends a patch request for a specific document
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patches">Array of patch requests</param>
            <param name="etag">Require specific Etag [null to ignore]</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PatchAsync(System.String,Raven.Abstractions.Data.PatchRequest[],Raven.Abstractions.Data.PatchRequest[],Raven.Json.Linq.RavenJObject,System.Threading.CancellationToken)">
            <summary>
                Sends a patch request for a specific document which may or may not currently exist
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patchesToExisting">Array of patch requests to apply to an existing document</param>
            <param name="patchesToDefault">Array of patch requests to apply to a default document when the document is missing</param>
            <param name="defaultMetadata">The metadata for the default document when the document is missing</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PatchAsync(System.String,Raven.Abstractions.Data.ScriptedPatchRequest,Raven.Abstractions.Data.Etag,System.Threading.CancellationToken)">
            <summary>
                Sends a patch request for a specific document
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patch">The patch request to use (using JavaScript)</param>
            <param name="etag">Require specific Etag [null to ignore]</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PatchAsync(System.String,Raven.Abstractions.Data.ScriptedPatchRequest,Raven.Abstractions.Data.ScriptedPatchRequest,Raven.Json.Linq.RavenJObject,System.Threading.CancellationToken)">
            <summary>
                Sends a patch request for a specific document which may or may not currently exist
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patchExisting">The patch request to use (using JavaScript) to an existing document</param>
            <param name="patchDefault">
                The patch request to use (using JavaScript)  to a default document when the document is
                missing
            </param>
            <param name="defaultMetadata">The metadata for the default document when the document is missing</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PrepareTransactionAsync(System.String,System.Nullable{System.Guid},System.Byte[],System.Threading.CancellationToken)">
            <summary>
                Prepares the transaction on the server.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PutAsync(System.String,Raven.Abstractions.Data.Etag,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject,System.Threading.CancellationToken)">
            <summary>
                Puts the document in the database with the specified key.
                <para>Returns PutResult where:</para>
                <para>- Key - unique key under which document was stored,</para>
                <para>- Etag - stored document etag</para>
            </summary>
            <param name="key">unique key under which document will be stored</param>
            <param name="etag">current document etag, used for concurrency checks (null to skip check)</param>
            <param name="document">document data</param>
            <param name="metadata">document metadata</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PutAttachmentAsync(System.String,Raven.Abstractions.Data.Etag,System.IO.Stream,Raven.Json.Linq.RavenJObject,System.Threading.CancellationToken)">
            <summary>
                Puts a byte array as attachment with the specified key
            </summary>
            <param name="key">unique key under which attachment will be stored</param>
            <param name="etag">current attachment etag, used for concurrency checks (null to skip check)</param>
            <param name="data">attachment data</param>
            <param name="metadata">attachment metadata</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PutIndexAsync(System.String,Raven.Abstractions.Indexing.IndexDefinition,System.Threading.CancellationToken)">
            <summary>
                Creates an index with the specified name, based on an index definition
            </summary>
            <param name="name">name of an index</param>
            <param name="indexDef">definition of an index</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PutIndexAsync(System.String,Raven.Abstractions.Indexing.IndexDefinition,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Creates an index with the specified name, based on an index definition
            </summary>
            <param name="name">name of an index</param>
            <param name="indexDef">definition of an index</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PutIndexAsync``2(System.String,Raven.Client.Indexes.IndexDefinitionBuilder{``0,``1},System.Threading.CancellationToken)">
            <summary>
                Creates an index with the specified name, based on an index definition that is created by the supplied
                IndexDefinitionBuilder
            </summary>
            <typeparam name="TDocument">Type of the document index should work on</typeparam>
            <typeparam name="TReduceResult">Type of reduce result</typeparam>
            <param name="name">name of an index</param>
            <param name="indexDef">definition of an index</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PutIndexAsync``2(System.String,Raven.Client.Indexes.IndexDefinitionBuilder{``0,``1},System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Creates an index with the specified name, based on an index definition that is created by the supplied
                IndexDefinitionBuilder
            </summary>
            <typeparam name="TDocument">Type of the document index should work on</typeparam>
            <typeparam name="TReduceResult">Type of reduce result</typeparam>
            <param name="name">name of an index</param>
            <param name="indexDef">definition of an index</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PutTransformerAsync(System.String,Raven.Abstractions.Indexing.TransformerDefinition,System.Threading.CancellationToken)">
            <summary>
                Creates a transformer with the specified name, based on an transformer definition
            </summary>
            <param name="name">name of a transformer</param>
            <param name="transformerDefinition">definition of a transformer</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.QueryAsync(System.String,Raven.Abstractions.Data.IndexQuery,System.String[],System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Queries the specified index in the Raven-flavored Lucene query syntax
            </summary>
            <param name="index">name of an index to query</param>
            <param name="query">query definition containing all information required to query a specified index</param>
            <param name="includes">
                an array of relative paths that specify related documents ids which should be included in a
                query result
            </param>
            <param name="metadataOnly">true if returned documents should include only metadata without a document body.</param>
            <param name="indexEntriesOnly">true if query results should contain only index entries.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.ResetIndexAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Removes all indexing data from a server for a given index so the indexation can start from scratch for that index.
            </summary>
            <param name="name">name of an index to reset</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.RollbackAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Rollbacks the specified tx id
            </summary>
            <param name="txId">transaction identifier</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.SeedIdentityForAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
                Seeds the next identity value on the server
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.StartsWithAsync(System.String,System.String,System.Int32,System.Int32,Raven.Client.RavenPagingInformation,System.Boolean,System.String,System.String,System.Collections.Generic.Dictionary{System.String,Raven.Json.Linq.RavenJToken},System.String,System.Threading.CancellationToken)">
            <summary>
                Retrieves documents for the specified key prefix.
            </summary>
            <param name="keyPrefix">prefix for which documents should be returned e.g. "products/"</param>
            <param name="matches">
                pipe ('|') separated values for which document keys (after 'keyPrefix') should be matched ('?'
                any single character, '*' any characters)
            </param>
            <param name="start">number of documents that should be skipped</param>
            <param name="pageSize">maximum number of documents that will be retrieved</param>
            <param name="pagingInformation">used to perform rapid pagination on a server side</param>
            <param name="metadataOnly">specifies if only document metadata should be returned</param>
            <param name="exclude">
                pipe ('|') separated values for which document keys (after 'keyPrefix') should not be matched
                ('?' any single character, '*' any characters)
            </param>
            <param name="transformer">name of a transformer that should be used to transform the results</param>
            <param name="transformerParameters">parameters that will be passed to transformer</param>
            <param name="skipAfter">
                skip document fetching until given key is found and return documents after that key (default:
                null)
            </param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.StreamDocsAsync(Raven.Abstractions.Data.Etag,System.String,System.String,System.Int32,System.Int32,System.String,Raven.Client.RavenPagingInformation,System.String,System.Threading.CancellationToken)">
            <summary>
                Streams the documents by etag OR starts with the prefix and match the matches
                Will return *all* results, regardless of the number of itmes that might be returned.
            </summary>
            <param name="fromEtag">ETag of a document from which stream should start (mutually exclusive with 'startsWith')</param>
            <param name="startsWith">prefix for which documents should be streamed (mutually exclusive with 'fromEtag')</param>
            <param name="matches">
                pipe ('|') separated values for which document keys (after 'keyPrefix') should be matched ('?'
                any single character, '*' any characters)
            </param>
            <param name="start">number of documents that should be skipped</param>
            <param name="pageSize">maximum number of documents that will be retrieved</param>
            <param name="exclude">
                pipe ('|') separated values for which document keys (after 'keyPrefix') should not be matched
                ('?' any single character, '*' any characters)
            </param>
            <param name="pagingInformation">used to perform rapid pagination on a server side</param>
            <param name="skipAfter">
                skip document fetching until given key is found and return documents after that key (default:
                null)
            </param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.StreamQueryAsync(System.String,Raven.Abstractions.Data.IndexQuery,Raven.Abstractions.Extensions.Reference{Raven.Abstractions.Data.QueryHeaderInformation},System.Threading.CancellationToken)">
            <summary>
                Queries the specified index in the Raven flavored Lucene query syntax. Will return *all* results, regardless
                of the number of items that might be returned.
            </summary>
            <param name="index">name of an index to query</param>
            <param name="query">query definition containing all information required to query a specified index</param>
            <param name="queryHeaderInfo">information about performed query</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.SuggestAsync(System.String,Raven.Abstractions.Data.SuggestionQuery,System.Threading.CancellationToken)">
            <summary>
                Returns a list of suggestions based on the specified suggestion query
            </summary>
            <param name="index">name of an index to query</param>
            <param name="suggestionQuery">
                suggestion query definition containing all information required to query a specified
                index
            </param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.UpdateAttachmentMetadataAsync(System.String,Raven.Abstractions.Data.Etag,Raven.Json.Linq.RavenJObject,System.Threading.CancellationToken)">
            <summary>
                Updates attachments metadata only.
            </summary>
            <param name="key">key under which attachment is stored</param>
            <param name="etag">current attachment etag, used for concurrency checks (null to skip check)</param>
            <param name="metadata">attachment metadata</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.UpdateByIndexAsync(System.String,Raven.Abstractions.Data.IndexQuery,Raven.Abstractions.Data.ScriptedPatchRequest,Raven.Abstractions.Data.BulkOperationOptions,System.Threading.CancellationToken)">
            <summary>
                Perform a set based update using the specified index
            </summary>
            <param name="indexName">name of an index to perform a query on</param>
            <param name="queryToUpdate">query that will be performed</param>
            <param name="patch">JavaScript patch that will be executed on query results</param>
            <param name="options">various operation options e.g. AllowStale or MaxOpsPerSec</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.UpdateByIndexAsync(System.String,Raven.Abstractions.Data.IndexQuery,Raven.Abstractions.Data.PatchRequest[],Raven.Abstractions.Data.BulkOperationOptions,System.Threading.CancellationToken)">
            <summary>
                Perform a set based update using the specified index
            </summary>
            <param name="indexName">name of an index to perform a query on</param>
            <param name="queryToUpdate">query that will be performed</param>
            <param name="patchRequests">array of patches that will be executed on a query results</param>
            <param name="options">various operation options e.g. AllowStale or MaxOpsPerSec</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.UrlFor(System.String)">
            <summary>
                Get the full URL for the given document key
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.With(System.Net.ICredentials)">
            <summary>
                Returns a new <see cref="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands"/> using the specified credentials
            </summary>
            <param name="credentialsForSession">The credentials for session.</param>
        </member>
        <member name="P:Raven.Client.Connection.Async.IAsyncDatabaseCommands.Admin">
            <summary>
                Admin operations for current database
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GlobalAdmin">
            <summary>
                Admin operations performed against system database, like create/delete database
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Async.IAsyncDatabaseCommands.Info">
            <summary>
                Info operations for current database
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Async.IAsyncDatabaseCommands.OperationsHeaders">
            <summary>
                Gets or sets the operations headers
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PrimaryCredentials">
            <summary>
                Primary credentials for access. Will be used also in replication context - for failovers
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncInfoDatabaseCommands.GetReplicationInfoAsync(System.Threading.CancellationToken)">
            <summary>
                Get replication info
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.HandleException(Raven.Abstractions.Connection.ErrorResponseException)">
            <summary>
            Attempts to handle an exception raised when receiving a response from the server
            </summary>
            <param name="e">The exception to handle</param>
            <returns>returns true if the exception is handled, false if it should be thrown</returns>
        </member>
        <member name="M:Raven.Client.Connection.CreateHttpJsonRequestParams.AddOperationHeaders(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds the operation headers.
            </summary>
            <param name="operationsHeaders">The operations headers.</param>
        </member>
        <member name="T:Raven.Client.Connection.Implementation.HttpJsonRequest">
            <summary>
            A representation of an HTTP json request to the RavenDB server
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Implementation.HttpJsonRequest.ReadResponseJsonAsync">
            <summary>
            Begins the read response string.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Implementation.HttpJsonRequest.AddOperationHeaders(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds the operation headers.
            </summary>
            <param name="operationsHeaders">The operations headers.</param>
        </member>
        <member name="M:Raven.Client.Connection.Implementation.HttpJsonRequest.AddOperationHeader(System.String,System.String)">
            <summary>
            Adds the operation header.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Implementation.HttpJsonRequest.CalculateDuration">
            <summary>
            The request duration
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Implementation.HttpJsonRequest.ResponseHeaders">
            <summary>
            Gets or sets the response headers.
            </summary>
            <value>The response headers.</value>
        </member>
        <member name="P:Raven.Client.Connection.Implementation.HttpJsonRequest.ResponseStatusCode">
            <summary>
            Gets or sets the response status code.
            </summary>
            <value>The response status code.</value>
        </member>
        <member name="P:Raven.Client.Connection.Implementation.HttpJsonRequest.SkipServerCheck">
            <summary>
             Whatever we can skip the server check and directly return the cached result
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.HttpJsonRequestFactory">
            <summary>
             Create the HTTP Json Requests to the RavenDB Server
             and manages the http cache
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.HttpJsonRequestFactory.InvokeLogRequest(Raven.Client.Connection.Profiling.IHoldProfilingInformation,System.Func{Raven.Client.Connection.Profiling.RequestResultArgs})">
            <summary>
            Invoke the LogRequest event
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.HttpJsonRequestFactory.CreateHttpJsonRequest(Raven.Client.Connection.CreateHttpJsonRequestParams)">
            <summary>
            Creates the HTTP json request.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.HttpJsonRequestFactory.ResetCache(System.Nullable{System.Int32})">
            <summary>
            Reset the number of cached requests and clear the entire cache
            Mostly used for testing
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.HttpJsonRequestFactory.#ctor(System.Int32,System.Net.Http.HttpMessageHandler,System.Boolean)">
            <summary>
            default ctor
            </summary>
            <param name="maxNumberOfCachedRequests"></param>
        </member>
        <member name="M:Raven.Client.Connection.HttpJsonRequestFactory.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Raven.Client.Connection.HttpJsonRequestFactory.DisableAllCaching">
            <summary>
            Disable all caching within the given scope
            </summary>
        </member>
        <member name="E:Raven.Client.Connection.HttpJsonRequestFactory.ConfigureRequest">
            <summary>
            Occurs when a json request is created
            </summary>
        </member>
        <member name="E:Raven.Client.Connection.HttpJsonRequestFactory.LogRequest">
            <summary>
            Occurs when a json request is completed
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.HttpJsonRequestFactory.NumberOfCacheResets">
            <summary>
            The number of cache evictions forced by
            tracking changes if aggressive cache was enabled
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.HttpJsonRequestFactory.NumberOfCachedRequests">
            <summary>
            The number of requests that we got 304 for 
            and were able to handle purely from the cache
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.HttpJsonRequestFactory.CurrentCacheSize">
            <summary>
            The number of currently held requests in the cache
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.HttpJsonRequestFactory.DisableRequestCompression">
            <summary>
            Determine whether to use compression or not 
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.HttpJsonRequestFactory.AggressiveCacheDuration">
            <summary>
             The aggressive cache duration
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.HttpJsonRequestFactory.RequestTimeout">
            <summary>
             Session timeout - Thread Local
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.HttpJsonRequestFactory.DisableHttpCaching">
            <summary>
            Disable the HTTP caching
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.HttpJsonRequestFactory.EnableBasicAuthenticationOverUnsecuredHttpEvenThoughPasswordsWouldBeSentOverTheWireInClearTextToBeStolenByHackers">
            <summary>
            Advanced: Don't set this unless you know what you are doing!
            
            
            Enable using basic authentication using http
            By default, RavenDB only allows basic authentication over HTTPS, setting this property to true
            will instruct RavenDB to make unsecured calls (usually only good for testing / internal networks).
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.IDatabaseCommands">
            <summary>
                A sync database command operations
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Batch(System.Collections.Generic.IEnumerable{Raven.Abstractions.Commands.ICommandData})">
            <summary>
                Sends multiple operations in a single request, reducing the number of remote calls and allowing several operations
                to share same transaction
            </summary>
            <param name="commandDatas">Commands to process</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Commit(System.String)">
            <summary>
                Commits the specified tx id
            </summary>
            <param name="txId">transaction identifier</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.CreateRequest(System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
                Create a http request to the specified relative url on the current database
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Delete(System.String,Raven.Abstractions.Data.Etag)">
            <summary>
                Deletes the document with the specified key
            </summary>
            <param name="key">key of a document to be deleted</param>
            <param name="etag">current document etag, used for concurrency checks (null to skip check)</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.DeleteAttachment(System.String,Raven.Abstractions.Data.Etag)">
            <summary>
                Removes an attachment from a database.
            </summary>
            <param name="key">key of an attachment to delete</param>
            <param name="etag">current attachment etag, used for concurrency checks (null to skip check)</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.DeleteByIndex(System.String,Raven.Abstractions.Data.IndexQuery,Raven.Abstractions.Data.BulkOperationOptions)">
            <summary>
                Perform a set based deletes using the specified index
            </summary>
            <param name="indexName">name of an index to perform a query on</param>
            <param name="queryToDelete">Tquery that will be performed</param>
            <param name="options">various operation options e.g. AllowStale or MaxOpsPerSec</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.DeleteIndex(System.String)">
            <summary>
                Deletes the specified index
            </summary>
            <param name="name">name of an index to delete</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.DeleteTransformer(System.String)">
            <summary>
                Deletes the specified transformer
            </summary>
            <param name="name">name of a transformer to delete</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.DisableAllCaching">
            <summary>
                Disable all caching within the given scope
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.ForDatabase(System.String)">
            <summary>
                Create a new instance of <see cref="T:Raven.Client.Connection.IDatabaseCommands"/> that will interact
                with the specified database
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.ForSystemDatabase">
            <summary>
                Create a new instance of <see cref="T:Raven.Client.Connection.IDatabaseCommands"/> that will interact
                with the default database
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.ForceReadFromMaster">
            <summary>
                Force the database commands to read directly from the master, unless there has been a failover.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Get(System.String)">
            <summary>
                Retrieve a single document for a specified key.
            </summary>
            <param name="key">key of the document you want to retrieve</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Get(System.String[],System.String[],System.String,System.Collections.Generic.Dictionary{System.String,Raven.Json.Linq.RavenJToken},System.Boolean)">
            <summary>
                Retrieves documents with the specified ids, optionally specifying includes to fetch along and also optionally the
                transformer.
                <para>Returns MultiLoadResult where:</para>
                <para>- Results - list of documents in exact same order as in keys parameter</para>
                <para>- Includes - list of documents that were found in specified paths that were passed in includes parameter</para>
            </summary>
            <param name="ids">array of keys of the documents you want to retrieve</param>
            <param name="includes">array of paths in documents in which server should look for a 'referenced' document</param>
            <param name="transformer">name of a transformer that should be used to transform the results</param>
            <param name="transformerParameters">parameters that will be passed to transformer</param>
            <param name="metadataOnly">specifies if only document metadata should be returned</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.GetAttachment(System.String)">
            <summary>
                Downloads a single attachment.
            </summary>
            <param name="key">key of the attachment you want to download</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.GetAttachmentHeadersStartingWith(System.String,System.Int32,System.Int32)">
            <summary>
                Downloads attachment metadata for a multiple attachments.
            </summary>
            <param name="idPrefix">prefix for which attachments should be returned</param>
            <param name="start">number of attachments that should be skipped</param>
            <param name="pageSize">maximum number of attachments that will be returned</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.GetAttachments(System.Int32,Raven.Abstractions.Data.Etag,System.Int32)">
            <summary>
                Used to download attachment information for multiple attachments.
            </summary>
            <param name="start">indicates how many attachments should be skipped</param>
            <param name="startEtag">ETag from which to start</param>
            <param name="pageSize">maximum number of attachments that will be downloaded</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.GetBulkInsertOperation(Raven.Abstractions.Data.BulkInsertOptions,Raven.Client.Changes.IDatabaseChanges)">
            <summary>
                Get the low level bulk insert operation
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.GetDocuments(System.Int32,System.Int32,System.Boolean)">
            <summary>
                Retrieves multiple documents.
            </summary>
            <param name="start">number of documents that should be skipped</param>
            <param name="pageSize">maximum number of documents that will be retrieved</param>
            <param name="metadataOnly">specifies if only document metadata should be returned</param>
            <remarks>
                This is primarily useful for administration of a database
            </remarks>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.GetDocuments(Raven.Abstractions.Data.Etag,System.Int32,System.Boolean)">
            <summary>
                Retrieves multiple documents.
            </summary>
            <param name="fromEtag">Etag from which documents should start</param>
            <param name="pageSize">maximum number of documents that will be retrieved</param>
            <param name="metadataOnly">specifies if only document metadata should be returned</param>
            <remarks>
                This is primarily useful for administration of a database
            </remarks>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.GetFacets(System.String,Raven.Abstractions.Data.IndexQuery,System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
                Using the given Index, calculate the facets as per the specified doc with the given start and pageSize
            </summary>
            <param name="index">name of an index to query</param>
            <param name="query">query definition containing all information required to query a specified index</param>
            <param name="facetSetupDoc">document key that contains predefined FacetSetup</param>
            <param name="start">number of results that should be skipped. Default: 0</param>
            <param name="pageSize">
                maximum number of results that will be retrieved. Default: null. If set, overrides
                Facet.MaxResults
            </param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.GetFacets(System.String,Raven.Abstractions.Data.IndexQuery,System.Collections.Generic.List{Raven.Abstractions.Data.Facet},System.Int32,System.Nullable{System.Int32})">
            <summary>
                Using the given Index, calculate the facets as per the specified doc with the given start and pageSize
            </summary>
            <param name="index">name of an index to query</param>
            <param name="query">query definition containing all information required to query a specified index</param>
            <param name="facets">list of facets required to perform a facet query</param>
            <param name="start">number of results that should be skipped. Default: 0</param>
            <param name="pageSize">
                maximum number of results that will be retrieved. Default: null. If set, overrides
                Facet.MaxResults
            </param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.GetIndex(System.String)">
            <summary>
                Retrieves an index definition from a database.
            </summary>
            <param name="name">name of an index</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.GetIndexMergeSuggestions">
            <summary>
                Retrieves all suggestions for an index merging
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.GetIndexNames(System.Int32,System.Int32)">
            <summary>
                Retrieves multiple index names from a database.
            </summary>
            <param name="start">number of index names that should be skipped</param>
            <param name="pageSize">maximum number of index names that will be retrieved</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.GetIndexes(System.Int32,System.Int32)">
            <summary>
                Retrieves multiple index definitions from a database
            </summary>
            <param name="start">number of indexes that should be skipped</param>
            <param name="pageSize">maximum number of indexes that will be retrieved</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.GetLicenseStatus">
            <summary>
                Gets the license status
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.GetLogs(System.Boolean)">
            <summary>
                Gets the Logs
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.GetMultiFacets(Raven.Abstractions.Data.FacetQuery[])">
            <summary>
                Sends a multiple faceted queries in a single request and calculates the facet results for each of them
            </summary>
            <param name="facetedQueries">List of the faceted queries that will be executed on the server-side</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.GetStatistics">
            <summary>
                Retrieve the statistics for the database
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.GetTerms(System.String,System.String,System.String,System.Int32)">
            <summary>
                Get the all terms stored in the index for the specified field
                You can page through the results by use fromValue parameter as the
                starting point for the next query
            </summary>
            <param name="index">name of an index</param>
            <param name="field">index field</param>
            <param name="fromValue">starting point for a query, used for paging</param>
            <param name="pageSize">maximum number of terms that will be returned</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.GetTransformer(System.String)">
            <summary>
                Gets the transformer definition for the specified name
            </summary>
            <param name="name">transformer name</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.GetTransformers(System.Int32,System.Int32)">
            <summary>
                Gets the transformers from the server
            </summary>
            <param name="start">number of transformers that should be skipped</param>
            <param name="pageSize">maximum number of transformers that will be retrieved</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Head(System.String)">
            <summary>
                Retrieves the document metadata for the specified document key.
                <para>Returns:</para>
                <para>The document metadata for the specified document, or <c>null</c> if the document does not exist</para>
            </summary>
            <param name="key">key of a document to get metadata for</param>
            <returns>The document metadata for the specified document, or null if the document does not exist</returns>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.HeadAttachment(System.String)">
            <summary>
                Download attachment metadata for a single attachment.
            </summary>
            <param name="key">key of the attachment you want to download metadata for</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.IndexHasChanged(System.String,Raven.Abstractions.Indexing.IndexDefinition)">
            <summary>
                Lets you check if the given index definition differs from the one on a server.
                <para>
                    This might be useful when you want to check the prior index deployment, if index will be overwritten, and if
                    indexing data will be lost.
                </para>
                <para>Returns:</para>
                <para>- <c>true</c> - if an index does not exist on a server</para>
                <para>- <c>true</c> - if an index definition does not match the one from the indexDef parameter,</para>
                <para>
                    - <c>false</c> - if there are no differences between an index definition on server and the one from the
                    indexDef parameter
                </para>
                If index does not exist this method returns true.
            </summary>
            <param name="name">name of an index to check</param>
            <param name="indexDef">index definition</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.MoreLikeThis(Raven.Abstractions.Data.MoreLikeThisQuery)">
            <summary>
                Return a list of documents that based on the MoreLikeThisQuery.
            </summary>
            <param name="query">more like this query definition that will be executed</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.MultiGet(Raven.Abstractions.Data.GetRequest[])">
            <summary>
                Perform a single POST request containing multiple nested GET requests
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.NextIdentityFor(System.String)">
            <summary>
                Generate the next identity value from the server
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Patch(System.String,Raven.Abstractions.Data.PatchRequest[])">
            <summary>
                Sends a patch request for a specific document, ignoring the document's Etag and if the document is missing
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patches">Array of patch requests</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Patch(System.String,Raven.Abstractions.Data.PatchRequest[],System.Boolean)">
            <summary>
                Sends a patch request for a specific document, ignoring the document's Etag
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patches">Array of patch requests</param>
            <param name="ignoreMissing">
                true if the patch request should ignore a missing document, false to throw
                DocumentDoesNotExistException
            </param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Patch(System.String,Raven.Abstractions.Data.ScriptedPatchRequest)">
            <summary>
                Sends a patch request for a specific document, ignoring the document's Etag and  if the document is missing
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patch">The patch request to use (using JavaScript)</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Patch(System.String,Raven.Abstractions.Data.ScriptedPatchRequest,System.Boolean)">
            <summary>
                Sends a patch request for a specific document, ignoring the document's Etag
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patch">The patch request to use (using JavaScript)</param>
            <param name="ignoreMissing">
                true if the patch request should ignore a missing document, false to throw
                DocumentDoesNotExistException
            </param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Patch(System.String,Raven.Abstractions.Data.PatchRequest[],Raven.Abstractions.Data.Etag)">
            <summary>
                Sends a patch request for a specific document
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patches">Array of patch requests</param>
            <param name="etag">Require specific Etag [null to ignore]</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Patch(System.String,Raven.Abstractions.Data.PatchRequest[],Raven.Abstractions.Data.PatchRequest[],Raven.Json.Linq.RavenJObject)">
            <summary>
                Sends a patch request for a specific document which may or may not currently exist
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patchesToExisting">Array of patch requests to apply to an existing document</param>
            <param name="patchesToDefault">Array of patch requests to apply to a default document when the document is missing</param>
            <param name="defaultMetadata">The metadata for the default document when the document is missing</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Patch(System.String,Raven.Abstractions.Data.ScriptedPatchRequest,Raven.Abstractions.Data.Etag)">
            <summary>
                Sends a patch request for a specific document
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patch">The patch request to use (using JavaScript)</param>
            <param name="etag">Require specific Etag [null to ignore]</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Patch(System.String,Raven.Abstractions.Data.ScriptedPatchRequest,Raven.Abstractions.Data.ScriptedPatchRequest,Raven.Json.Linq.RavenJObject)">
            <summary>
                Sends a patch request for a specific document which may or may not currently exist
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patchExisting">The patch request to use (using JavaScript) to an existing document</param>
            <param name="patchDefault">
                The patch request to use (using JavaScript)  to a default document when the document is
                missing
            </param>
            <param name="defaultMetadata">The metadata for the default document when the document is missing</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.PrepareTransaction(System.String,System.Nullable{System.Guid},System.Byte[])">
            <summary>
                Prepares the transaction on the server.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Put(System.String,Raven.Abstractions.Data.Etag,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
                Puts the document in the database with the specified key.
                <para>Returns PutResult where:</para>
                <para>- Key - unique key under which document was stored,</para>
                <para>- Etag - stored document etag</para>
            </summary>
            <param name="key">unique key under which document will be stored</param>
            <param name="etag">current document etag, used for concurrency checks (null to skip check)</param>
            <param name="document">document data</param>
            <param name="metadata">document metadata</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.PutAttachment(System.String,Raven.Abstractions.Data.Etag,System.IO.Stream,Raven.Json.Linq.RavenJObject)">
            <summary>
                Puts a byte array as attachment with the specified key
            </summary>
            <param name="key">unique key under which attachment will be stored</param>
            <param name="etag">current attachment etag, used for concurrency checks (null to skip check)</param>
            <param name="data">attachment data</param>
            <param name="metadata">attachment metadata</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.PutIndex(System.String,Raven.Abstractions.Indexing.IndexDefinition)">
            <summary>
                Creates an index with the specified name, based on an index definition
            </summary>
            <param name="name">name of an index</param>
            <param name="indexDef">definition of an index</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.PutIndex(System.String,Raven.Abstractions.Indexing.IndexDefinition,System.Boolean)">
            <summary>
                Creates an index with the specified name, based on an index definition
            </summary>
            <param name="name">name of an index</param>
            <param name="indexDef">definition of an index</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.PutIndex``2(System.String,Raven.Client.Indexes.IndexDefinitionBuilder{``0,``1})">
            <summary>
                Creates an index with the specified name, based on an index definition that is created by the supplied
                IndexDefinitionBuilder
            </summary>
            <typeparam name="TDocument">Type of the document index should work on</typeparam>
            <typeparam name="TReduceResult">Type of reduce result</typeparam>
            <param name="name">name of an index</param>
            <param name="indexDef">definition of an index</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.PutIndex``2(System.String,Raven.Client.Indexes.IndexDefinitionBuilder{``0,``1},System.Boolean)">
            <summary>
                Creates an index with the specified name, based on an index definition that is created by the supplied
                IndexDefinitionBuilder
            </summary>
            <typeparam name="TDocument">Type of the document index should work on</typeparam>
            <typeparam name="TReduceResult">Type of reduce result</typeparam>
            <param name="name">name of an index</param>
            <param name="indexDef">definition of an index</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.PutTransformer(System.String,Raven.Abstractions.Indexing.TransformerDefinition)">
            <summary>
                Creates a transformer with the specified name, based on an transformer definition
            </summary>
            <param name="name">name of a transformer</param>
            <param name="transformerDefinition">definition of a transformer</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Query(System.String,Raven.Abstractions.Data.IndexQuery,System.String[],System.Boolean,System.Boolean)">
            <summary>
                Queries the specified index in the Raven-flavored Lucene query syntax
            </summary>
            <param name="index">name of an index to query</param>
            <param name="query">query definition containing all information required to query a specified index</param>
            <param name="includes">
                an array of relative paths that specify related documents ids which should be included in a
                query result
            </param>
            <param name="metadataOnly">true if returned documents should include only metadata without a document body.</param>
            <param name="indexEntriesOnly">true if query results should contain only index entries.</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.ResetIndex(System.String)">
            <summary>
                Removes all indexing data from a server for a given index so the indexation can start from scratch for that index.
            </summary>
            <param name="name">name of an index to reset</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Rollback(System.String)">
            <summary>
                Rollbacks the specified tx id
            </summary>
            <param name="txId">transaction identifier</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.SeedIdentityFor(System.String,System.Int64)">
            <summary>
                Seeds the next identity value on the server
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.StartsWith(System.String,System.String,System.Int32,System.Int32,Raven.Client.RavenPagingInformation,System.Boolean,System.String,System.String,System.Collections.Generic.Dictionary{System.String,Raven.Json.Linq.RavenJToken},System.String)">
            <summary>
                Retrieves documents for the specified key prefix.
            </summary>
            <param name="keyPrefix">prefix for which documents should be returned e.g. "products/"</param>
            <param name="matches">
                pipe ('|') separated values for which document keys (after 'keyPrefix') should be matched ('?'
                any single character, '*' any characters)
            </param>
            <param name="start">number of documents that should be skipped</param>
            <param name="pageSize">maximum number of documents that will be retrieved</param>
            <param name="pagingInformation">used to perform rapid pagination on a server side</param>
            <param name="metadataOnly">specifies if only document metadata should be returned</param>
            <param name="exclude">
                pipe ('|') separated values for which document keys (after 'keyPrefix') should not be matched
                ('?' any single character, '*' any characters)
            </param>
            <param name="transformer">name of a transformer that should be used to transform the results</param>
            <param name="transformerParameters">parameters that will be passed to transformer</param>
            <param name="skipAfter">
                skip document fetching until given key is found and return documents after that key (default:
                null)
            </param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.StreamDocs(Raven.Abstractions.Data.Etag,System.String,System.String,System.Int32,System.Int32,System.String,Raven.Client.RavenPagingInformation,System.String)">
            <summary>
                Streams the documents by etag OR starts with the prefix and match the matches
                Will return *all* results, regardless of the number of itmes that might be returned.
            </summary>
            <param name="fromEtag">ETag of a document from which stream should start (mutually exclusive with 'startsWith')</param>
            <param name="startsWith">prefix for which documents should be streamed (mutually exclusive with 'fromEtag')</param>
            <param name="matches">
                pipe ('|') separated values for which document keys (after 'keyPrefix') should be matched ('?'
                any single character, '*' any characters)
            </param>
            <param name="start">number of documents that should be skipped</param>
            <param name="pageSize">maximum number of documents that will be retrieved</param>
            <param name="exclude">
                pipe ('|') separated values for which document keys (after 'keyPrefix') should not be matched
                ('?' any single character, '*' any characters)
            </param>
            <param name="pagingInformation">used to perform rapid pagination on a server side</param>
            <param name="skipAfter">
                skip document fetching until given key is found and return documents after that key (default:
                null)
            </param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.StreamQuery(System.String,Raven.Abstractions.Data.IndexQuery,Raven.Abstractions.Data.QueryHeaderInformation@)">
            <summary>
                Queries the specified index in the Raven flavored Lucene query syntax. Will return *all* results, regardless
                of the number of items that might be returned.
            </summary>
            <param name="index">name of an index to query</param>
            <param name="query">query definition containing all information required to query a specified index</param>
            <param name="queryHeaderInfo">information about performed query</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.Suggest(System.String,Raven.Abstractions.Data.SuggestionQuery)">
            <summary>
                Returns a list of suggestions based on the specified suggestion query
            </summary>
            <param name="index">name of an index to query</param>
            <param name="suggestionQuery">
                suggestion query definition containing all information required to query a specified
                index
            </param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.UpdateAttachmentMetadata(System.String,Raven.Abstractions.Data.Etag,Raven.Json.Linq.RavenJObject)">
            <summary>
                Updates attachments metadata only.
            </summary>
            <param name="key">key under which attachment is stored</param>
            <param name="etag">current attachment etag, used for concurrency checks (null to skip check)</param>
            <param name="metadata">attachment metadata</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.UpdateByIndex(System.String,Raven.Abstractions.Data.IndexQuery,Raven.Abstractions.Data.PatchRequest[],Raven.Abstractions.Data.BulkOperationOptions)">
            <summary>
                Perform a set based update using the specified index
            </summary>
            <param name="indexName">name of an index to perform a query on</param>
            <param name="queryToUpdate">query that will be performed</param>
            <param name="patchRequests">array of patches that will be executed on a query results</param>
            <param name="options">various operation options e.g. AllowStale or MaxOpsPerSec</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.UpdateByIndex(System.String,Raven.Abstractions.Data.IndexQuery,Raven.Abstractions.Data.ScriptedPatchRequest,Raven.Abstractions.Data.BulkOperationOptions)">
            <summary>
                Perform a set based update using the specified index
            </summary>
            <param name="indexName">name of an index to perform a query on</param>
            <param name="queryToUpdate">query that will be performed</param>
            <param name="patch">JavaScript patch that will be executed on query results</param>
            <param name="options">various operation options e.g. AllowStale or MaxOpsPerSec</param>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.UrlFor(System.String)">
            <summary>
                Get the full URL for the given document key
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IDatabaseCommands.With(System.Net.ICredentials)">
            <summary>
                Returns a new <see cref="T:Raven.Client.Connection.IDatabaseCommands"/> that use specified credentials
            </summary>
            <param name="credentialsForSession">credentials to use</param>
        </member>
        <member name="P:Raven.Client.Connection.IDatabaseCommands.Admin">
            <summary>
                Admin operations for current database
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.IDatabaseCommands.GlobalAdmin">
            <summary>
                Admin operations performed against system database, like create/delete database
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.IDatabaseCommands.Info">
            <summary>
                Info operations for current database
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.IDatabaseCommands.OperationsHeaders">
            <summary>
                Gets or sets the operations headers
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.IDatabaseCommands.PrimaryCredentials">
            <summary>
                Primary credentials for access. Will be used also in replication context - for failovers
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IInfoDatabaseCommands.GetReplicationInfo">
            <summary>
                Get replication info
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.DocumentConventionJsonExtensions">
            <summary>
            Extension to json objects
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.DocumentConventionJsonExtensions.Deserialize``1(Raven.Json.Linq.RavenJObject,Raven.Client.Document.DocumentConvention)">
            <summary>
            Deserializes the specified instance <param name="self"/> to an instance of <typeparam name="T"/> using the specified <param name="convention"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.DocumentConventionJsonExtensions.Deserialize(Raven.Json.Linq.RavenJObject,System.Type,Raven.Client.Document.DocumentConvention)">
            <summary>
            Deserializes the specified instance <param name="self"/> to an instance of <param name="type"/> using the specified <param name="convention"/>
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.JsonLuceneDateTimeConverter">
            <summary>
            Convert a lucene data format to and from json values
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.JsonLuceneDateTimeConverter.WriteJson(Raven.Imports.Newtonsoft.Json.JsonWriter,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Raven.Client.Connection.JsonLuceneDateTimeConverter.ReadJson(Raven.Imports.Newtonsoft.Json.JsonReader,System.Type,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Raven.Client.Connection.JsonLuceneDateTimeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Raven.Client.Connection.JsonLuceneDateTimeConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Raven.Client.Connection.Profiling.ProfilingContext">
            <summary>
            Manages all profiling activities for a given item
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Profiling.ProfilingContext.RecordAction(System.Object,Raven.Client.Connection.Profiling.RequestResultArgs)">
            <summary>
            Register the action as associated with the sender
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Profiling.ProfilingContext.TryGet(System.Guid)">
            <summary>
            Try to get a session matching the specified id.
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.Profiling.RequestStatus">
            <summary>
            The status of the request
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.RequestStatus.SentToServer">
            <summary>
            The request was sent to the server
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.RequestStatus.Cached">
            <summary>
            The request was served directly from the local cache
            after checking with the server to see if it was still 
            up to date
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.RequestStatus.AggressivelyCached">
            <summary>
            The request was served from the local cache without
            checking with the server and may be out of date
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.RequestStatus.ErrorOnServer">
            <summary>
            The server returned an error
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.Profiling.RequestResultArgs">
            <summary>
            The result of a request made to the server
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Profiling.RequestResultArgs.#ctor">
            <summary>
            Creates a new instance of <seealso cref="T:Raven.Client.Connection.Profiling.RequestResultArgs"/>
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.AdditionalInformation">
            <summary>
            Any additional information that might be required
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.At">
            <summary>
            When the request completed
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.Status">
            <summary>
            The request status
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.Url">
            <summary>
            The request Url
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.DurationMilliseconds">
            <summary>
            How long this request took
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.Method">
            <summary>
            The request method
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.PostedData">
            <summary>
            The data posted to the server
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.HttpResult">
            <summary>
            The HTTP result for this request
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.Result">
            <summary>
            The result of this request
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.TotalSize">
            <summary>
            Total amount of memory used by strings here
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.Profiling.ProfilingInformation">
            <summary>
            Information about a particular session
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Profiling.ProfilingInformation.CreateProfilingInformation(System.Nullable{System.Guid})">
            <summary>
             Create a new instance of profiling information and provide additional context information
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.ProfilingInformation.Requests">
            <summary>
             The requests made by this session
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.ProfilingInformation.Id">
            <summary>
            Uniquely identify the session
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.ProfilingInformation.At">
            <summary>
            The time when the session was created
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.ProfilingInformation.DurationMilliseconds">
            <summary>
            The duration this session was opened
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Profiling.ProfilingInformation.#ctor(System.Nullable{System.Guid})">
            <summary>
             Create a new instance of this class
            </summary>
        </member>
        <member name="E:Raven.Client.Connection.Profiling.ProfilingInformation.OnContextCreated">
            <summary>
             A hook that allows extensions to provide additional information about the created context
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.ProfilingInformation.Context">
            <summary>
            Additional information that is added by extension
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.RavenTransactionAccessor">
            <summary>
            Provide access to the current transaction 
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.RavenTransactionAccessor.StartTransaction">
            <summary>
            Starts a transaction
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.RavenTransactionAccessor.StartTransaction(System.TimeSpan)">
            <summary>
            Starts a transaction with the specified timeout
            </summary>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.RavenTransactionAccessor.GetTransactionInformation">
            <summary>
            Gets the transaction information for the current transaction
            </summary>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Connection.FailoverStatusChangedEventArgs">
            <summary>
            The event arguments for when the failover status changed
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.FailoverStatusChangedEventArgs.Failing">
            <summary>
            Whatever that url is now failing
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.FailoverStatusChangedEventArgs.Url">
            <summary>
            The url whose failover status changed
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.SerializationHelper">
            <summary>
             Helper method to do serialization from RavenJObject to JsonDocument
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.SerializationHelper.RavenJObjectsToJsonDocuments(System.Collections.Generic.IEnumerable{Raven.Json.Linq.RavenJObject})">
            <summary>
             Translate a collection of RavenJObject to JsonDocuments
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.SerializationHelper.ToJsonDocuments(System.Collections.Generic.IEnumerable{Raven.Json.Linq.RavenJObject})">
            <summary>
             Translate a collection of RavenJObject to JsonDocuments
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.SerializationHelper.ToJsonDocument(Raven.Json.Linq.RavenJObject)">
            <summary>
             Translate a collection of RavenJObject to JsonDocuments
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.SerializationHelper.ToQueryResult(Raven.Json.Linq.RavenJObject,Raven.Abstractions.Data.Etag,System.String,System.Int64)">
            <summary>
            Translate a result for a query
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.SerializationHelper.DeserializeJsonDocument(System.String,Raven.Json.Linq.RavenJToken,System.Net.Http.Headers.HttpResponseHeaders,System.Net.HttpStatusCode)">
            <summary>
            Deserialize a request to a JsonDocument
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.SerializationHelper.DeserializeJsonDocumentMetadata(System.String,System.Net.Http.Headers.HttpResponseHeaders,System.Net.HttpStatusCode)">
            <summary>
            Deserialize a request to a JsonDocument
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.SerializationHelper.DeserializeJsonDocumentMetadata(System.String,System.Collections.Specialized.NameValueCollection,System.Net.HttpStatusCode)">
            <summary>
            Deserialize a request to a JsonDocument
            </summary>
        </member>
        <member name="T:Raven.Client.Converters.GuidConverter">
            <summary>
            Convert strings from / to guids
            </summary>
        </member>
        <member name="T:Raven.Client.Converters.ITypeConverter">
            <summary>
            Interface for performing type conversions.
            We couldn't use the built-in TypeConverter because it is too big an interface for people to build on.
            </summary>
        </member>
        <member name="M:Raven.Client.Converters.ITypeConverter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
        </member>
        <member name="M:Raven.Client.Converters.ITypeConverter.ConvertFrom(System.String,System.Object,System.Boolean)">
            <summary>
            Converts the given object to the type of this converter.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="tag">The tag prefix to use</param>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
            <param name="allowNull">Whatever null is a valid value</param>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Raven.Client.Converters.ITypeConverter.ConvertTo(System.String)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
        </member>
        <member name="M:Raven.Client.Converters.GuidConverter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
        </member>
        <member name="M:Raven.Client.Converters.GuidConverter.ConvertFrom(System.String,System.Object,System.Boolean)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Raven.Client.Converters.GuidConverter.ConvertTo(System.String)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
        </member>
        <member name="T:Raven.Client.Converters.Int32Converter">
            <summary>
            Convert strings from / to int32
            </summary>
        </member>
        <member name="M:Raven.Client.Converters.Int32Converter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from. 
                            </param>
        </member>
        <member name="M:Raven.Client.Converters.Int32Converter.ConvertFrom(System.String,System.Object,System.Boolean)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Raven.Client.Converters.Int32Converter.ConvertTo(System.String)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
        </member>
        <member name="T:Raven.Client.Converters.Int64Converter">
            <summary>
            Convert strings from / to int64
            </summary>
        </member>
        <member name="M:Raven.Client.Converters.Int64Converter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from. 
                            </param>
        </member>
        <member name="M:Raven.Client.Converters.Int64Converter.ConvertFrom(System.String,System.Object,System.Boolean)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Raven.Client.Converters.Int64Converter.ConvertTo(System.String)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
        </member>
        <member name="T:Raven.Client.Document.AsyncShardedDocumentQuery`1">
            <summary>
            A query that is executed against sharded instances
            </summary>
        </member>
        <member name="T:Raven.Client.Document.AsyncDocumentQuery`1">
            <summary>
            A query against a Raven index
            </summary>
        </member>
        <member name="T:Raven.Client.Document.AbstractDocumentQuery`2">
            <summary>
              A query against a Raven index
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentQueryCustomization">
            <summary>
                Customize the document query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.BeforeQueryExecution(System.Action{Raven.Abstractions.Data.IndexQuery})">
            <summary>
                Allow you to modify the index query before it is executed
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.Highlight(System.String,System.Int32,System.Int32,System.String)">
            <summary>
                Adds matches highlighting for the specified field.
            </summary>
            <remarks>
                The specified field should be analysed and stored for highlighter to work.
                For each match it creates a fragment that contains matched text surrounded by highlighter tags.
            </remarks>
            <param name="fieldName">The field name to highlight.</param>
            <param name="fragmentLength">The fragment length.</param>
            <param name="fragmentCount">The maximum number of fragments for the field.</param>
            <param name="fragmentsField">The field in query results item to put highlightings into.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.Highlight(System.String,System.Int32,System.Int32,Raven.Client.FieldHighlightings@)">
            <summary>
                Adds matches highlighting for the specified field.
            </summary>
            <remarks>
                The specified field should be analysed and stored for highlighter to work.
                For each match it creates a fragment that contains matched text surrounded by highlighter tags.
            </remarks>
            <param name="fieldName">The field name to highlight.</param>
            <param name="fragmentLength">The fragment length.</param>
            <param name="fragmentCount">The maximum number of fragments for the field.</param>
            <param name="highlightings">Field highlightings for all results.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.Highlight(System.String,System.String,System.Int32,System.Int32,Raven.Client.FieldHighlightings@)">
            <summary>
                Adds matches highlighting for the specified field on a Map/Reduce Index.
            </summary>
            <remarks>
                This is only valid for Map/Reduce Index querys.
                The specified field and key should be analysed and stored for highlighter to work.
                For each match it creates a fragment that contains matched text surrounded by highlighter tags.
            </remarks>
            <param name="fieldName">The field name to highlight.</param>
            <param name="fieldKeyName">The field key to associate highlights with.</param>
            <param name="fragmentLength">The fragment length.</param>
            <param name="fragmentCount">The maximum number of fragments for the field.</param>
            <param name="highlightings">Field highlightings for all results.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Includes the specified path in the query, loading the document specified in that path
            </summary>
            <typeparam name="TResult">The type of the object that holds the id that you want to include.</typeparam>
            <param name="path">The path, which is name of the property that holds the id of the object to include.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.Include``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Includes the specified path in the query, loading the document specified in that path
            </summary>
            <typeparam name="TResult">The type of the object that holds the id that you want to include.</typeparam>
            <typeparam name="TInclude">The type of the object that you want to include.</typeparam>
            <param name="path">Path in documents in which server should look for a 'referenced' documents.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.Include(System.String)">
            <summary>
                Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">Path in documents in which server should look for a 'referenced' documents.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.NoCaching">
            <summary>
                Disables caching for query results.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.NoTracking">
            <summary>
                Disables tracking for queried entities by Raven's Unit of Work.
                Usage of this option will prevent holding query results in memory.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.RandomOrdering">
            <summary>
                Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.RandomOrdering(System.String)">
            <summary>
                Order the search results randomly using the specified seed
                this is useful if you want to have repeatable random queries
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.RelatesToShape(System.String,System.String,Raven.Abstractions.Indexing.SpatialRelation)">
            <summary>
                Filter matches based on a given shape - only documents with the shape defined in fieldName that
                have a relation rel with the given shapeWKT will be returned
            </summary>
            <param name="fieldName">Spatial field name.</param>
            <param name="shapeWKT">WKT formatted shape</param>
            <param name="rel">Spatial relation to check (Within, Contains, Disjoint, Intersects, Nearby)</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.SetAllowMultipleIndexEntriesForSameDocumentToResultTransformer(System.Boolean)">
            <summary>
                If set to true, this property will send multiple index entries from the same document (assuming the index project
                them)
                to the result transformer function. Otherwise, those entries will be consolidate an the transformer will be
                called just once for each document in the result set
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.SetHighlighterTags(System.String,System.String)">
            <summary>
                Sets the tags to highlight matches with.
            </summary>
            <param name="preTag">Prefix tag.</param>
            <param name="postTag">Postfix tag.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.SetHighlighterTags(System.String[],System.String[])">
            <summary>
                Sets the tags to highlight matches with.
            </summary>
            <param name="preTags">Prefix tags.</param>
            <param name="postTags">Postfix tags.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.ShowTimings">
            <summary>
                Enables calculation of timings for various parts of a query (Lucene search, loading documents, transforming
                results). Default: false
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.SortByDistance">
            <summary>
                When using spatial queries, instruct the query to sort by the distance from the origin point
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.Spatial(System.String,System.Func{Raven.Client.Spatial.SpatialCriteriaFactory,Raven.Client.Spatial.SpatialCriteria})">
            <summary>
                Ability to use one factory to determine spatial shape that will be used in query.
            </summary>
            <param name="fieldName">Spatial field name.</param>
            <param name="clause">function with spatial criteria factory</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.TransformResults(System.Func{Raven.Abstractions.Data.IndexQuery,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object}})">
            <summary>
                Execute the transformation function on the results of this query.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResults">
            <summary>
                EXPERT ONLY: Instructs the query to wait for non stale results.
                This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.CustomSortUsing(System.String)">
            <summary>
            Sort using custom sorter on the server
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.CustomSortUsing(System.String,System.Boolean)">
            <summary>
            Sort using custom sorter on the server
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResults(System.TimeSpan)">
            <summary>
                EXPERT ONLY: Instructs the query to wait for non stale results for the specified wait timeout.
                This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
            <param name="waitTimeout">Maximum time to wait for index query results to become non-stale before exception is thrown.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
                Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name="cutOff">
                Index will be considered stale if modification date of last indexed document is greater than this
                value.
            </param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
                Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name="cutOff">
                Index will be considered stale if modification date of last indexed document is greater than this
                value.
            </param>
            <param name="waitTimeout">Maximum time to wait for index query results to become non-stale before exception is thrown.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOf(Raven.Abstractions.Data.Etag)">
            <summary>
                Instructs the query to wait for non stale results as of the cutoff etag.
            </summary>
            <param name="cutOffEtag">
                <para>Cutoff etag is used to check if the index has already process a document with the given</para>
                <para>etag. Unlike Cutoff, which uses dates and is susceptible to clock synchronization issues between</para>
                <para>machines, cutoff etag doesn't rely on both the server and client having a synchronized clock and </para>
                <para>can work without it.</para>
                <para>However, when used to query map/reduce indexes, it does NOT guarantee that the document that this</para>
                <para>etag belong to is actually considered for the results. </para>
                <para>What it does it guarantee that the document has been mapped, but not that the mapped values has been reduced. </para>
                <para>Since map/reduce queries, by their nature,vtend to be far less susceptible to issues with staleness, this is </para>
                <para>considered to be an acceptable tradeoff.</para>
                <para>If you need absolute no staleness with a map/reduce index, you will need to ensure synchronized clocks and </para>
                <para>use the Cutoff date option, instead.</para>
            </param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOf(Raven.Abstractions.Data.Etag,System.TimeSpan)">
            <summary>
                Instructs the query to wait for non stale results as of the cutoff etag for the specified timeout.
            </summary>
            <param name="cutOffEtag">
                <para>Cutoff etag is used to check if the index has already process a document with the given</para>
                <para>etag. Unlike Cutoff, which uses dates and is susceptible to clock synchronization issues between</para>
                <para>machines, cutoff etag doesn't rely on both the server and client having a synchronized clock and </para>
                <para>can work without it.</para>
                <para>However, when used to query map/reduce indexes, it does NOT guarantee that the document that this</para>
                <para>etag belong to is actually considered for the results. </para>
                <para>What it does it guarantee that the document has been mapped, but not that the mapped values has been reduced. </para>
                <para>Since map/reduce queries, by their nature,vtend to be far less susceptible to issues with staleness, this is </para>
                <para>considered to be an acceptable tradeoff.</para>
                <para>If you need absolute no staleness with a map/reduce index, you will need to ensure synchronized clocks and </para>
                <para>use the Cutoff date option, instead.</para>
            </param>
            <param name="waitTimeout">Maximum time to wait for index query results to become non-stale before exception is thrown.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOfLastWrite">
            <summary>
                Instructs the query to wait for non stale results as of the last write made by any session belonging to the
                current document store.
                This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or
                dynamic queries).
                However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is
                actually considered for the results.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOfLastWrite(System.TimeSpan)">
            <summary>
                Instructs the query to wait for non stale results as of the last write made by any session belonging to the
                current document store.
                This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or
                dynamic queries).
                However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is
                actually considered for the results.
            </summary>
            <param name="waitTimeout">Maximum time to wait for index query results to become non-stale before exception is thrown.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOfNow">
            <summary>
                Instructs the query to wait for non stale results as of now.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
                Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name="waitTimeout">Maximum time to wait for index query results to become non-stale before exception is thrown.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WithinRadiusOf(System.Double,System.Double,System.Double)">
            <summary>
                Filter matches to be inside the specified radius. This method assumes that spatial data is found under default
                spatial field name: __spatial
            </summary>
            <param name="radius">Radius (in kilometers) in which matches should be found.</param>
            <param name="latitude">Latitude poiting to a circle center.</param>
            <param name="longitude">Longitude poiting to a circle center.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WithinRadiusOf(System.String,System.Double,System.Double,System.Double)">
            <summary>
                Filter matches to be inside the specified radius
            </summary>
            <param name="fieldName">Spatial field name.</param>
            <param name="radius">Radius (in kilometers) in which matches should be found.</param>
            <param name="latitude">Latitude poiting to a circle center.</param>
            <param name="longitude">Longitude poiting to a circle center.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WithinRadiusOf(System.Double,System.Double,System.Double,Raven.Abstractions.Indexing.SpatialUnits)">
            <summary>
                Filter matches to be inside the specified radius
            </summary>
            <param name="radius">Radius (measured in units passed to radiusUnits parameter) in which matches should be found.</param>
            <param name="latitude">Latitude poiting to a circle center.</param>
            <param name="longitude">Longitude poiting to a circle center.</param>
            <param name="radiusUnits">Units that will be used to measure distances (Kilometers, Miles).</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WithinRadiusOf(System.String,System.Double,System.Double,System.Double,Raven.Abstractions.Indexing.SpatialUnits)">
            <summary>
                Filter matches to be inside the specified radius
            </summary>
            <param name="fieldName">Spatial field name.</param>
            <param name="radius">Radius (measured in units passed to radiusUnits parameter) in which matches should be found.</param>
            <param name="latitude">Latitude poiting to a circle center.</param>
            <param name="longitude">Longitude poiting to a circle center.</param>
            <param name="radiusUnits">Units that will be used to measure distances (Kilometers, Miles).</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.SortByDistance(System.Double,System.Double)">
            <summary>
            When using spatial queries, instruct the query to sort by the distance from the origin point
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.SortByDistance(System.Double,System.Double,System.String)">
            <summary>
            When using spatial queries, instruct the query to sort by the distance from the origin point
            </summary>
        </member>
        <member name="T:Raven.Client.Document.IAbstractDocumentQuery`1">
            <summary>
             Mostly used by the linq provider
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResults(System.TimeSpan)">
            <summary>
              Instruct the query to wait for non stale result for the specified wait timeout.
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.GetProjectionFields">
            <summary>
              Gets the fields for projection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.RandomOrdering">
            <summary>
            Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.CustomSortUsing(System.String,System.Boolean)">
            <summary>
            Sort using custom sorter on the server
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.RandomOrdering(System.String)">
            <summary>
            Order the search results randomly using the specified seed
            this is useful if you want to have repeatable random queries
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.AddOrder(System.String,System.Boolean)">
            <summary>
              Adds an ordering for a specific field to the query
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.AddOrder(System.String,System.Boolean,System.Type)">
            <summary>
              Adds an ordering for a specific field to the query and specifies the type of field for sorting purposes
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
            <param name = "fieldType">the type of the field to be sorted.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Include(System.String)">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Take(System.Int32)">
            <summary>
              Takes the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Skip(System.Int32)">
            <summary>
              Skips the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Where(System.String)">
            <summary>
              Filter the results from the index using the specified where clause.
            </summary>
            <param name = "whereClause">The where clause.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereEquals(System.String,System.Object)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereEquals(System.String,System.Object,System.Boolean)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.OpenSubclause">
            <summary>
              Simplified method for opening a new clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.CloseSubclause">
            <summary>
              Simplified method for closing a clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereEquals(Raven.Client.WhereParams)">
            <summary>
              Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.NegateNext">
            <summary>
             Negate the next operation
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereIn(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereStartsWith(System.String,System.Object)">
            <summary>
              Matches fields which starts with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereEndsWith(System.String,System.Object)">
            <summary>
              Matches fields which ends with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereBetween(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereGreaterThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereLessThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.AndAlso">
            <summary>
              Add an AND to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.OrElse">
            <summary>
              Add an OR to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Boost(System.Decimal)">
            <summary>
              Specifies a boost weight to the last where clause.
              The higher the boost factor, the more relevant the term will be.
            </summary>
            <param name = "boost">boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Fuzzy(System.Decimal)">
            <summary>
              Specifies a fuzziness factor to the single word term in the last where clause
            </summary>
            <param name = "fuzzy">0.0 to 1.0 where 1.0 means closer match</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Proximity(System.Int32)">
            <summary>
              Specifies a proximity distance for the phrase in the last where clause
            </summary>
            <param name = "proximity">number of words within</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.OrderBy(System.String[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name = "fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Highlight(System.String,System.Int32,System.Int32,System.String)">
            <summary>
              Adds matches highlighting for the specified field.
            </summary>
            <remarks>
              The specified field should be analysed and stored for highlighter to work.
              For each match it creates a fragment that contains matched text surrounded by highlighter tags.
            </remarks>
            <param name="fieldName">The field name to highlight.</param>
            <param name="fragmentLength">The fragment length.</param>
            <param name="fragmentCount">The maximum number of fragments for the field.</param>
            <param name="fragmentsField">The field in query results item to put highlightings into.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Highlight(System.String,System.Int32,System.Int32,Raven.Client.FieldHighlightings@)">
            <summary>
              Adds matches highlighting for the specified field.
            </summary>
            <remarks>
              The specified field should be analysed and stored for highlighter to work.
              For each match it creates a fragment that contains matched text surrounded by highlighter tags.
            </remarks>
            <param name="fieldName">The field name to highlight.</param>
            <param name="fragmentLength">The fragment length.</param>
            <param name="fragmentCount">The maximum number of fragments for the field.</param>
            <param name="highlightings">Field highlightings for all results.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Highlight(System.String,System.String,System.Int32,System.Int32,Raven.Client.FieldHighlightings@)">
            <summary>
              Adds matches highlighting for the specified field on a Map/Reduce Index.
            </summary>
            <remarks>
              This is only valid for Map/Reduce Index querys.
              The specified field and key should be analysed and stored for highlighter to work.
              For each match it creates a fragment that contains matched text surrounded by highlighter tags.
            </remarks>
            <param name="fieldName">The field name to highlight.</param>
            <param name="fieldKeyName">The field key to associate highlights with.</param>
            <param name="fragmentLength">The fragment length.</param>
            <param name="fragmentCount">The maximum number of fragments for the field.</param>
            <param name="highlightings">Field highlightings for all results.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.SetHighlighterTags(System.String,System.String)">
            <summary>
              Sets the tags to highlight matches with.
            </summary>
            <param name="preTag">Prefix tag.</param>
            <param name="postTag">Postfix tag.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.SetHighlighterTags(System.String[],System.String[])">
            <summary>
              Sets the tags to highlight matches with.
            </summary>
            <param name="preTags">Prefix tags.</param>
            <param name="postTags">Postfix tags.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResultsAsOfNow">
            <summary>
              Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name = "cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name = "cutOff">The cut off.</param>
            <param name = "waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResults">
            <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Search(System.String,System.String,Raven.Client.EscapeQueryOptions)">
            <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.GetLastEqualityTerm(System.Boolean)">
            <summary>
              The last term that we asked the query to use equals on
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.ContainsAny(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Performs a query matching ANY of the provided values against the given field (OR)
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.ContainsAll(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Performs a query matching ALL of the provided values against the given field (AND)
            </summary>
        </member>
        <member name="P:Raven.Client.Document.IAbstractDocumentQuery`1.IndexQueried">
            <summary>
              Get the name of the index being queried
            </summary>
        </member>
        <member name="P:Raven.Client.Document.IAbstractDocumentQuery`1.DocumentConvention">
            <summary>
            Gets the document convention from the query session
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.negate">
            <summary>
            Whatever to negate the next operation
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.theDatabaseCommands">
            <summary>
            The database commands to use
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.theAsyncDatabaseCommands">
            <summary>
            Async database commands to use
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.indexName">
            <summary>
            The index to query
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.projectionFields">
            <summary>
              The list of fields to project directly from the results
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.fieldsToFetch">
            <summary>
              The list of fields to project directly from the index on the server
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.queryListeners">
            <summary>
            The query listeners for this query
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.theSession">
            <summary>
            The session for this query
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.cutoff">
            <summary>
              The cutoff date to use for detecting staleness in the index
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.orderByFields">
            <summary>
              The fields to order the results by
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.highlightedFields">
            <summary>
              The fields to highlight
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.highlighterPreTags">
            <summary>
              Highlighter pre tags
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.highlighterPostTags">
            <summary>
              Highlighter post tags
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.highlighterKeyName">
            <summary>
              Highlighter key
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.sortByHints">
            <summary>
              The types to sort the fields by (NULL if not specified)
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.pageSize">
            <summary>
              The page size to use when querying the index
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.queryText">
            <summary>
            The query to use
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.start">
            <summary>
              which record to start reading from
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.timeout">
            <summary>
            Timeout for this query
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.theWaitForNonStaleResults">
            <summary>
            Should we wait for non stale results
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.theWaitForNonStaleResultsAsOfNow">
            <summary>
            Should we wait for non stale results as of now?
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.includes">
            <summary>
            The paths to include when loading the query
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.queryStats">
            <summary>
            Holds the query stats
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.highlightings">
            <summary>
            Holds the query highlightings
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.resultsTransformer">
            <summary>
            The name of the results transformer to use after executing this query
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.disableEntitiesTracking">
            <summary>
            Determines if entities should be tracked and kept in memory
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.disableCaching">
            <summary>
            Determine if query results should be cached.
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.showQueryTimings">
            <summary>
            Indicates if detailed timings should be calculated for various query parts (Lucene search, loading documents, transforming results). Default: false
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.shouldExplainScores">
            <summary>
            Determine if scores of query results should be explained
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.#ctor(Raven.Client.Document.InMemoryDocumentSessionOperations,Raven.Client.Connection.IDatabaseCommands,System.String,System.String[],System.String[],Raven.Client.Listeners.IDocumentQueryListener[],System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentQuery`1"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.#ctor(Raven.Client.Document.InMemoryDocumentSessionOperations,Raven.Client.Connection.IDatabaseCommands,Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.String,System.String[],System.String[],Raven.Client.Listeners.IDocumentQueryListener[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.AbstractDocumentQuery`2"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.#ctor(Raven.Client.Document.AbstractDocumentQuery{`0,`1})">
            <summary>
              Initializes a new instance of the <see cref="T:Raven.Client.IDocumentQuery`1"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#Include(System.String)">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResults(System.TimeSpan)">
            <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results for the specified wait timeout.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#SortByDistance">
            <summary>
            When using spatial queries, instruct the query to sort by the distance from the origin point
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#SortByDistance(System.Double,System.Double)">
            <summary>
            When using spatial queries, instruct the query to sort by the distance from the origin point
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#SortByDistance(System.Double,System.Double,System.String)">
            <summary>
            When using spatial queries, instruct the query to sort by the distance from the origin point
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WithinRadiusOf(System.Double,System.Double,System.Double)">
            <summary>
              Filter matches to be inside the specified radius
            </summary>
            <param name = "radius">The radius.</param>
            <param name = "latitude">The latitude.</param>
            <param name = "longitude">The longitude.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WithinRadiusOf(System.Double,System.Double,System.Double,Raven.Abstractions.Indexing.SpatialUnits)">
            <summary>
              Filter matches to be inside the specified radius
            </summary>
            <param name = "radius">The radius.</param>
            <param name = "latitude">The latitude.</param>
            <param name = "longitude">The longitude.</param>
            <param name = "radiusUnits">The units of the <paramref name="radius"/></param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GenerateQueryWithinRadiusOf(System.String,System.Double,System.Double,System.Double,System.Double,System.Nullable{Raven.Abstractions.Indexing.SpatialUnits})">
            <summary>
              Filter matches to be inside the specified radius
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResults">
            <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResults(System.TimeSpan)">
            <summary>
              Instruct the query to wait for non stale result for the specified wait timeout.
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Lazily">
            <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Lazily(System.Action{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.LazilyAsync(System.Action{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.CountLazily">
            <summary>
            Register the query as a lazy-count query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.QueryResultAsync(System.Threading.CancellationToken)">
            <summary>
              Gets the query result
              Execute the query the first time that this is called.
            </summary>
            <value>The query result.</value>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GetProjectionFields">
            <summary>
              Gets the fields for projection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.RandomOrdering">
            <summary>
            Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.RandomOrdering(System.String)">
            <summary>
            Order the search results randomly using the specified seed
            this is useful if you want to have repeatable random queries
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.AddOrder(System.String,System.Boolean)">
            <summary>
              Adds an ordering for a specific field to the query
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.AddOrder(System.String,System.Boolean,System.Type)">
            <summary>
              Adds an ordering for a specific field to the query and specifies the type of field for sorting purposes
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
            <param name = "fieldType">the type of the field to be sorted.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GetEnumerator">
            <summary>
              Gets the enumerator.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Include(System.String)">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Where(System.Func{`0,System.Boolean})">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Count(System.Func{`0,System.Boolean})">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Count">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Take(System.Int32)">
            <summary>
              Takes the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Skip(System.Int32)">
            <summary>
              Skips the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Where(System.String)">
            <summary>
              Filter the results from the index using the specified where clause.
            </summary>
            <param name = "whereClause">The where clause.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereEquals(System.String,System.Object)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereEquals(System.String,System.Object,System.Boolean)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.OpenSubclause">
            <summary>
              Simplified method for opening a new clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.CloseSubclause">
            <summary>
              Simplified method for closing a clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereEquals(Raven.Client.WhereParams)">
            <summary>
              Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.NegateNext">
            <summary>
             Negate the next operation
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereIn(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereStartsWith(System.String,System.Object)">
            <summary>
              Matches fields which starts with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereEndsWith(System.String,System.Object)">
            <summary>
              Matches fields which ends with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereBetween(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereGreaterThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereLessThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.AndAlso">
            <summary>
              Add an AND to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.OrElse">
            <summary>
              Add an OR to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Boost(System.Decimal)">
            <summary>
              Specifies a boost weight to the last where clause.
              The higher the boost factor, the more relevant the term will be.
            </summary>
            <param name = "boost">boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Fuzzy(System.Decimal)">
            <summary>
              Specifies a fuzziness factor to the single word term in the last where clause
            </summary>
            <param name = "fuzzy">0.0 to 1.0 where 1.0 means closer match</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Proximity(System.Int32)">
            <summary>
              Specifies a proximity distance for the phrase in the last where clause
            </summary>
            <param name = "proximity">number of words within</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.OrderBy(System.String[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name = "fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.OrderByDescending(System.String[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by descending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name = "fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOfNow">
            <summary>
              Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOfLastWrite">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOfLastWrite(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name = "cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name = "cutOff">The cut off.</param>
            <param name = "waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOf(Raven.Abstractions.Data.Etag)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff etag.
            </summary>
            <param name="cutOffEtag">The cut off etag.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOf(Raven.Abstractions.Data.Etag,System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff etag for the specified timeout.
            </summary>
            <param name="cutOffEtag">The cut off etag.</param>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOfNow">
            <summary>
              Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name = "cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name = "cutOff">The cut off.</param>
            <param name = "waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOf(Raven.Abstractions.Data.Etag)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff etag.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOf(Raven.Abstractions.Data.Etag,System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff etag.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOfLastWrite">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOfLastWrite(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResults">
            <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Statistics(Raven.Client.RavenQueryStatistics@)">
            <summary>
            Provide statistics about the query, such as total count of matching records
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.AfterQueryExecuted(System.Action{Raven.Abstractions.Data.QueryResult})">
            <summary>
            Callback to get the results of the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.InvokeAfterQueryExecuted(Raven.Abstractions.Data.QueryResult)">
            <summary>
            Called externally to raise the after query executed callback
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GenerateIndexQuery(System.String)">
            <summary>
              Generates the index query.
            </summary>
            <param name = "query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Search(System.String,System.String,Raven.Client.EscapeQueryOptions)">
            <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents the query for this instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents the query for this instance.
            </returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GetLastEqualityTerm(System.Boolean)">
            <summary>
            The last term that we asked the query to use equals on
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#RandomOrdering">
            <summary>
            Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#RandomOrdering(System.String)">
            <summary>
            Order the search results randomly using the specified seed
            this is useful if you want to have repeatable random queries
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.ToListAsync(System.Threading.CancellationToken)">
            <summary>
            Returns a list of results for a query asynchronously. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the total count of records for this query
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.IndexQueried">
            <summary>
              Get the name of the index being queried
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.AsyncIndexQueried">
            <summary>
              Get the name of the index being queried
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.DatabaseCommands">
            <summary>
              Grant access to the database commands
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.AsyncDatabaseCommands">
            <summary>
              Grant access to the async database commands
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.DocumentConvention">
            <summary>
            Gets the document convention from the query session
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.Session">
            <summary>
              Gets the session associated with this document query
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.QueryResult">
            <summary>
              Gets the query result
              Execute the query the first time that this is called.
            </summary>
            <value>The query result.</value>
        </member>
        <member name="T:Raven.Client.IAsyncDocumentQuery`1">
            <summary>
                Asynchronous query against a raven index
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentQueryBase`2">
            <summary>
                A query against a Raven index
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.AddOrder(System.String,System.Boolean)">
            <summary>
                Adds an ordering for a specific field to the query
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.AddOrder``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
                Adds an ordering for a specific field to the query
            </summary>
            <param name="propertySelector">Property selector for the field.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.AddOrder(System.String,System.Boolean,System.Type)">
            <summary>
                Adds an ordering for a specific field to the query and specifies the type of field for sorting purposes
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
            <param name="fieldType">the type of the field to be sorted.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.AfterQueryExecuted(System.Action{Raven.Abstractions.Data.QueryResult})">
            <summary>
                Callback to get the results of the query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.AndAlso">
            <summary>
                Add an AND to the query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.BeforeQueryExecution(System.Action{Raven.Abstractions.Data.IndexQuery})">
            <summary>
                Allows you to modify the index query before it is sent to the server
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Boost(System.Decimal)">
            <summary>
                Specifies a boost weight to the last where clause.
                The higher the boost factor, the more relevant the term will be.
            </summary>
            <param name="boost">
                boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher
                weight
            </param>
            <returns></returns>
            <remarks>
                http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.CloseSubclause">
            <summary>
                Simplified method for closing a clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.ContainsAll(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                Performs a query matching ALL of the provided values against the given field (AND)
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.ContainsAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Performs a query matching ALL of the provided values against the given field (AND)
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.ContainsAny(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                Performs a query matching ANY of the provided values against the given field (OR)
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.ContainsAny``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Performs a query matching ANY of the provided values against the given field (OR)
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Count(System.Func{`0,System.Boolean})">
            <summary>
                This function exists solely to forbid in memory where clause on IDocumentQuery, because
                that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Count">
            <summary>
                This function exists solely to forbid in memory where clause on IDocumentQuery, because
                that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Distinct">
            <summary>
                Apply distinct operation to this query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.ExplainScores">
            <summary>
                Adds explanations of scores calculated for queried documents to the query result
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.First">
            <summary>
                Returns first element or throws if sequence is empty.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.FirstOrDefault">
            <summary>
                Returns first element or default value for type if sequence is empty.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Fuzzy(System.Decimal)">
            <summary>
                Specifies a fuzziness factor to the single word term in the last where clause
            </summary>
            <param name="fuzzy">0.0 to 1.0 where 1.0 means closer match</param>
            <returns></returns>
            <remarks>
                http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Highlight(System.String,System.Int32,System.Int32,System.String)">
            <summary>
                Adds matches highlighting for the specified field.
            </summary>
            <remarks>
                The specified field should be analysed and stored for highlighter to work.
                For each match it creates a fragment that contains matched text surrounded by highlighter tags.
            </remarks>
            <param name="fieldName">The field name to highlight.</param>
            <param name="fragmentLength">The fragment length.</param>
            <param name="fragmentCount">The maximum number of fragments for the field.</param>
            <param name="fragmentsField">The field in query results item to put highlightings into.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Highlight(System.String,System.Int32,System.Int32,Raven.Client.FieldHighlightings@)">
            <summary>
                Adds matches highlighting for the specified field.
            </summary>
            <remarks>
                The specified field should be analysed and stored for highlighter to work.
                For each match it creates a fragment that contains matched text surrounded by highlighter tags.
            </remarks>
            <param name="fieldName">The field name to highlight.</param>
            <param name="fragmentLength">The fragment length.</param>
            <param name="fragmentCount">The maximum number of fragments for the field.</param>
            <param name="highlightings">Field highlightings for all results.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Highlight(System.String,System.String,System.Int32,System.Int32,Raven.Client.FieldHighlightings@)">
            <summary>
                Adds matches highlighting for the specified field on a Map/Reduce Index.
            </summary>
            <remarks>
                This is only valid for Map/Reduce Index querys.
                The specified field and key should be analysed and stored for highlighter to work.
                For each match it creates a fragment that contains matched text surrounded by highlighter tags.
            </remarks>
            <param name="fieldName">The field name to highlight.</param>
            <param name="fieldKeyName">The field key name to associate highlights with.</param>
            <param name="fragmentLength">The fragment length.</param>
            <param name="fragmentCount">The maximum number of fragments for the field.</param>
            <param name="highlightings">Field highlightings for all results.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Highlight``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.IEnumerable}})">
            <summary>
                Adds matches highlighting for the specified field.
            </summary>
            <remarks>
                The specified field should be analysed and stored for highlighter to work.
                For each match it creates a fragment that contains matched text surrounded by highlighter tags.
            </remarks>
            <param name="propertySelector">The property to highlight.</param>
            <param name="fragmentLength">The fragment length.</param>
            <param name="fragmentCount">The maximum number of fragments for the field.</param>
            <param name="fragmentsPropertySelector">The property to put highlightings into.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Highlight``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.Int32,Raven.Client.FieldHighlightings@)">
            <summary>
                Adds matches highlighting for the specified field.
            </summary>
            <remarks>
                The specified field should be analysed and stored for highlighter to work.
                For each match it creates a fragment that contains matched text surrounded by highlighter tags.
            </remarks>
            <param name="propertySelector">The property to highlight.</param>
            <param name="fragmentLength">The fragment length.</param>
            <param name="fragmentCount">The maximum number of fragments for the field.</param>
            <param name="highlightings">Field highlightings for all results.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Highlight``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.Int32,Raven.Client.FieldHighlightings@)">
            <summary>
                Adds matches highlighting for the specified field on a Map/Reduce Index.
            </summary>
            <remarks>
                This is only valid for Map/Reduce Index querys.
                The specified fields should be analysed and stored for highlighter to work.
                For each match it creates a fragment that contains matched text surrounded by highlighter tags.
            </remarks>
            <param name="propertySelector">The property to highlight.</param>
            <param name="keyPropertySelector">The key property to associate highlights with.</param>
            <param name="fragmentLength">The fragment length.</param>
            <param name="fragmentCount">The maximum number of fragments for the field.</param>
            <param name="highlightings">Field highlightings for all results.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Include(System.String)">
            <summary>
                Includes the specified path in the query, loading the document specified in that path
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Intersect">
            <summary>
                Partition the query so we can intersect different parts of the query
                across different index entries.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.InvokeAfterQueryExecuted(Raven.Abstractions.Data.QueryResult)">
            <summary>
                Called externally to raise the after query executed callback
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.NegateNext">
            <summary>
                Negate the next operation
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.NoCaching">
            <summary>
                Disables caching for query results.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.NoTracking">
            <summary>
                Disables tracking for queried entities by Raven's Unit of Work.
                Usage of this option will prevent holding query results in memory.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.OpenSubclause">
            <summary>
                Simplified method for opening a new clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.OrElse">
            <summary>
                Add an OR to the query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.OrderBy(System.String[])">
            <summary>
                Order the results by the specified fields
                The fields are the names of the fields to sort, defaulting to sorting by ascending.
                You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
                Order the results by the specified fields
                The fields are the names of the fields to sort, defaulting to sorting by ascending.
                You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name="propertySelectors">Property selectors for the fields.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.OrderByDescending(System.String[])">
            <summary>
                Order the results by the specified fields
                The fields are the names of the fields to sort, defaulting to sorting by descending.
                You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
                Order the results by the specified fields
                The fields are the names of the fields to sort, defaulting to sorting by descending.
                You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name="propertySelectors">Property selectors for the fields.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.OrderByScore">
            <summary>
                Adds an ordering by score for a specific field to the query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.OrderByScoreDescending">
            <summary>
                Adds an ordering by score for a specific field to the query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Proximity(System.Int32)">
            <summary>
                Specifies a proximity distance for the phrase in the last where clause
            </summary>
            <param name="proximity">number of words within</param>
            <returns></returns>
            <remarks>
                http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.RandomOrdering">
            <summary>
                Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.RandomOrdering(System.String)">
            <summary>
                Order the search results randomly using the specified seed
                this is useful if you want to have repeatable random queries
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.RelatesToShape(System.String,System.String,Raven.Abstractions.Indexing.SpatialRelation,System.Double)">
            <summary>
                Filter matches based on a given shape - only documents with the shape defined in fieldName that
                have a relation rel with the given shapeWKT will be returned
            </summary>
            <param name="fieldName">Spatial field name.</param>
            <param name="shapeWKT">WKT formatted shape</param>
            <param name="rel">Spatial relation to check (Within, Contains, Disjoint, Intersects, Nearby)</param>
            <param name="distanceErrorPct">The allowed error percentage. By default: 0.025</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Search(System.String,System.String,Raven.Client.EscapeQueryOptions)">
            <summary>
                Perform a search for documents which fields that match the searchTerms.
                If there is more than a single term, each of them will be checked independently.
            </summary>
            <param name="fieldName">Marks a field in which terms should be looked for</param>
            <param name="searchTerms">
                Space separated terms e.g. 'John Adam' means that we will look in selected field for 'John'
                or 'Adam'.
            </param>
            <param name="escapeQueryOptions">
                Terms escaping strategy. One of the following: EscapeAll, AllowPostfixWildcard,
                AllowAllWildcards, RawQuery. Default: EscapeQueryOptions.RawQuery
            </param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Search``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,Raven.Client.EscapeQueryOptions)">
            <summary>
                Perform a search for documents which fields that match the searchTerms.
                If there is more than a single term, each of them will be checked independently.
            </summary>
            <param name="propertySelector">Expression marking a field in which terms should be looked for</param>
            <param name="searchTerms">
                Space separated terms e.g. 'John Adam' means that we will look in selected field for 'John'
                or 'Adam'.
            </param>
            <param name="escapeQueryOptions">
                Terms escaping strategy. One of the following: EscapeAll, AllowPostfixWildcard,
                AllowAllWildcards, RawQuery. Default: EscapeQueryOptions.RawQuery
            </param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.SetAllowMultipleIndexEntriesForSameDocumentToResultTransformer(System.Boolean)">
            <summary>
                If set to true, this property will send multiple index entries from the same document (assuming the index project
                them)
                to the result transformer function. Otherwise, those entries will be consolidate an the transformer will be
                called just once for each document in the result set
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.SetHighlighterTags(System.String,System.String)">
            <summary>
                Sets the tags to highlight matches with.
            </summary>
            <param name="preTag">Prefix tag.</param>
            <param name="postTag">Postfix tag.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.SetHighlighterTags(System.String[],System.String[])">
            <summary>
                Sets the tags to highlight matches with.
            </summary>
            <param name="preTags">Prefix tags.</param>
            <param name="postTags">Postfix tags.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.SetResultTransformer(System.String)">
            <summary>
                Sets a transformer to use after executing a query
            </summary>
            <param name="resultsTransformer"></param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.ShowTimings">
            <summary>
                Enables calculation of timings for various parts of a query (Lucene search, loading documents, transforming
                results). Default: false
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Single">
            <summary>
                Returns first element or throws if sequence is empty or contains more than one element.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.SingleOrDefault">
            <summary>
                Returns first element or default value for given type if sequence is empty. Throws if sequence contains more than
                one element.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Skip(System.Int32)">
            <summary>
                Skips the specified count.
            </summary>
            <param name="count">Number of items to skip.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.SortByDistance">
            <summary>
                Sorts the query results by distance.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Statistics(Raven.Client.RavenQueryStatistics@)">
            <summary>
                Provide statistics about the query, such as total count of matching records
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Take(System.Int32)">
            <summary>
                Takes the specified count.
            </summary>
            <param name="count">Maximum number of items to take.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.UsingDefaultField(System.String)">
            <summary>
                Select the default field to use for this query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.UsingDefaultOperator(Raven.Abstractions.Data.QueryOperator)">
            <summary>
                Select the default operator to use for this query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResults">
            <summary>
                EXPERT ONLY: Instructs the query to wait for non stale results.
                This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResults(System.TimeSpan)">
            <summary>
                EXPERT ONLY: Instructs the query to wait for non stale results for the specified wait timeout.
                This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
            <param name="waitTimeout">Maximum time to wait for index query results to become non-stale before exception is thrown.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
                Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name="cutOff">
                Index will be considered stale if modification date of last indexed document is greater than this
                value.
            </param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
                Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name="cutOff">
                Index will be considered stale if modification date of last indexed document is greater than this
                value.
            </param>
            <param name="waitTimeout">Maximum time to wait for index query results to become non-stale before exception is thrown.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOf(Raven.Abstractions.Data.Etag)">
            <summary>
                Instructs the query to wait for non stale results as of the cutoff etag.
            </summary>
            <param name="cutOffEtag">
                <para>Cutoff etag is used to check if the index has already process a document with the given</para>
                <para>etag. Unlike Cutoff, which uses dates and is susceptible to clock synchronization issues between</para>
                <para>machines, cutoff etag doesn't rely on both the server and client having a synchronized clock and </para>
                <para>can work without it.</para>
                <para>However, when used to query map/reduce indexes, it does NOT guarantee that the document that this</para>
                <para>etag belong to is actually considered for the results. </para>
                <para>What it does it guarantee that the document has been mapped, but not that the mapped values has been reduced. </para>
                <para>Since map/reduce queries, by their nature,vtend to be far less susceptible to issues with staleness, this is </para>
                <para>considered to be an acceptable tradeoff.</para>
                <para>If you need absolute no staleness with a map/reduce index, you will need to ensure synchronized clocks and </para>
                <para>use the Cutoff date option, instead.</para>
            </param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOf(Raven.Abstractions.Data.Etag,System.TimeSpan)">
            <summary>
                Instructs the query to wait for non stale results as of the cutoff etag for the specified timeout.
            </summary>
            <param name="cutOffEtag">
                <para>Cutoff etag is used to check if the index has already process a document with the given</para>
                <para>etag. Unlike Cutoff, which uses dates and is susceptible to clock synchronization issues between</para>
                <para>machines, cutoff etag doesn't rely on both the server and client having a synchronized clock and </para>
                <para>can work without it.</para>
                <para>However, when used to query map/reduce indexes, it does NOT guarantee that the document that this</para>
                <para>etag belong to is actually considered for the results. </para>
                <para>What it does it guarantee that the document has been mapped, but not that the mapped values has been reduced. </para>
                <para>Since map/reduce queries, by their nature,vtend to be far less susceptible to issues with staleness, this is </para>
                <para>considered to be an acceptable tradeoff.</para>
                <para>If you need absolute no staleness with a map/reduce index, you will need to ensure synchronized clocks and </para>
                <para>use the Cutoff date option, instead.</para>
            </param>
            <param name="waitTimeout">Maximum time to wait for index query results to become non-stale before exception is thrown.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOfLastWrite">
            <summary>
                Instructs the query to wait for non stale results as of the last write made by any session belonging to the
                current document store.
                This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or
                dynamic queries).
                However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is
                actually considered for the results.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOfLastWrite(System.TimeSpan)">
            <summary>
                Instructs the query to wait for non stale results as of the last write made by any session belonging to the
                current document store.
                This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or
                dynamic queries).
                However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is
                actually considered for the results.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOfNow">
            <summary>
                Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
                Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name="waitTimeout">Maximum time to wait for index query results to become non-stale before exception is thrown.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Where(System.Func{`0,System.Boolean})">
            <summary>
                This function exists solely to forbid in memory where clause on IDocumentQuery, because
                that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Where(System.String)">
            <summary>
                Filter the results from the index using the specified where clause.
            </summary>
            <param name="whereClause">Lucene-syntax based query predicate.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereBetween(System.String,System.Object,System.Object)">
            <summary>
                Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereBetween``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,``0)">
            <summary>
                Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name="propertySelector">Property selector for the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
                Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereBetweenOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,``0)">
            <summary>
                Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name="propertySelector">Property selector for the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEndsWith(System.String,System.Object)">
            <summary>
                Matches fields which ends with the specified value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEndsWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
                Matches fields which ends with the specified value.
            </summary>
            <param name="propertySelector">Property selector for the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEquals(System.String,System.Object)">
            <summary>
                Matches exact value
            </summary>
            <remarks>
                Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEquals``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
                Matches exact value
            </summary>
            <remarks>
                Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEquals(System.String,System.Object,System.Boolean)">
            <summary>
                Matches exact value
            </summary>
            <remarks>
                Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEquals``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,System.Boolean)">
            <summary>
                Matches exact value
            </summary>
            <remarks>
                Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEquals(Raven.Client.WhereParams)">
            <summary>
                Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereGreaterThan(System.String,System.Object)">
            <summary>
                Matches fields where the value is greater than the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereGreaterThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
                Matches fields where the value is greater than the specified value
            </summary>
            <param name="propertySelector">Property selector for the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
                Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereGreaterThanOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
                Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name="propertySelector">Property selector for the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereIn(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                Check that the field has one of the specified values
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereIn``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Check that the field has one of the specified values
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereLessThan(System.String,System.Object)">
            <summary>
                Matches fields where the value is less than the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereLessThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
                Matches fields where the value is less than the specified value
            </summary>
            <param name="propertySelector">Property selector for the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
                Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereLessThanOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
                Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name="propertySelector">Property selector for the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereStartsWith(System.String,System.Object)">
            <summary>
                Matches fields which starts with the specified value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereStartsWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
                Matches fields which starts with the specified value.
            </summary>
            <param name="propertySelector">Property selector for the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WithinRadiusOf(System.Double,System.Double,System.Double,Raven.Abstractions.Indexing.SpatialUnits)">
            <summary>
                Filter matches to be inside the specified radius
            </summary>
            <param name="radius">Radius (measured in units passed to radiusUnits parameter) in which matches should be found.</param>
            <param name="latitude">Latitude poiting to a circle center.</param>
            <param name="longitude">Longitude poiting to a circle center.</param>
            <param name="radiusUnits">Units that will be used to measure distances (Kilometers, Miles).</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WithinRadiusOf(System.String,System.Double,System.Double,System.Double,Raven.Abstractions.Indexing.SpatialUnits)">
            <summary>
                Filter matches to be inside the specified radius
            </summary>
            <param name="fieldName">Spatial field name.</param>
            <param name="radius">Radius (measured in units passed to radiusUnits parameter) in which matches should be found.</param>
            <param name="latitude">Latitude poiting to a circle center.</param>
            <param name="longitude">Longitude poiting to a circle center.</param>
            <param name="radiusUnits">Units that will be used to measure distances (Kilometers, Miles).</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.CustomSortUsing(System.String,System.Boolean)">
            <summary>
            Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.SortByDistance(System.Double,System.Double)">
            <summary>
            Sorts the query results by distance.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.SortByDistance(System.Double,System.Double,System.String)">
            <summary>
            Sorts the query results by distance.
            </summary>
        </member>
        <member name="P:Raven.Client.IDocumentQueryBase`2.DocumentConvention">
            <summary>
                Gets the document convention from the query session
            </summary>
        </member>
        <member name="P:Raven.Client.IDocumentQueryBase`2.Not">
            <summary>
                Negate the next operation
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentQuery`1.CountLazilyAsync(System.Threading.CancellationToken)">
            <summary>
            Register the query as a lazy-count query and return a lazy instance that will evaluate the query when needed.
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentQuery`1.GetFacetsAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
                Get the facets as per the specified doc with the given start and pageSize
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentQuery`1.GetFacetsAsync(System.Collections.Generic.List{Raven.Abstractions.Data.Facet},System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
                Get the facets as per the specified facets with the given start and pageSize
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentQuery`1.GetIndexQuery(System.Boolean)">
            <summary>
                Create the index query object for this query
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentQuery`1.LazilyAsync(System.Action{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
                Register the query as a lazy query and return a lazy
                instance that will evaluate the query only when needed.
            Also provide a function to execute when the value is evaluated
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentQuery`1.QueryResultAsync(System.Threading.CancellationToken)">
            <summary>
                Gets the query result. Executing this method for the first time will execute the query.
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentQuery`1.SelectFields``1(System.String[])">
            <summary>
                Selects the specified fields directly from the index if the are stored. If the field is not stored in index, value
                will come from document directly.
            </summary>
            <typeparam name="TProjection">Type of the projection.</typeparam>
            <param name="fields">Array of fields to load.</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentQuery`1.SelectFields``1(System.String[],System.String[])">
            <summary>
                Selects the specified fields directly from the index if the are stored. If the field is not stored in index, value
                will come from document directly.
            </summary>
            <typeparam name="TProjection">Type of the projection.</typeparam>
            <param name="fields">Array of fields to load.</param>
            <param name="projections">Array of field projections.</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentQuery`1.SelectFields``1">
            <summary>
                Selects the specified fields directly from the index if the are stored. If the field is not stored in index, value
                will come from document directly.
                <para>Array of fields will be taken from TProjection</para>
            </summary>
            <typeparam name="TProjection">Type of the projection from which fields will be taken.</typeparam>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentQuery`1.SetQueryInputs(System.Collections.Generic.Dictionary{System.String,Raven.Json.Linq.RavenJToken})">
            <summary>
                Transformer parameters that will be passed to transformer if one is specified.
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentQuery`1.SetTransformerParameters(System.Collections.Generic.Dictionary{System.String,Raven.Json.Linq.RavenJToken})">
            <summary>
                Transformer parameters that will be passed to transformer if one is specified.
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentQuery`1.Spatial(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Func{Raven.Client.Spatial.SpatialCriteriaFactory,Raven.Client.Spatial.SpatialCriteria})">
            <summary>
                Ability to use one factory to determine spatial shape that will be used in query.
            </summary>
            <param name="path">Spatial field name.</param>
            <param name="clause">function with spatial criteria factory</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentQuery`1.Spatial(System.String,System.Func{Raven.Client.Spatial.SpatialCriteriaFactory,Raven.Client.Spatial.SpatialCriteria})">
            <summary>
                Ability to use one factory to determine spatial shape that will be used in query.
            </summary>
            <param name="fieldName">Spatial field name.</param>
            <param name="clause">function with spatial criteria factory</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentQuery`1.ToListAsync(System.Threading.CancellationToken)">
            <summary>
                Executed the query and returns the results.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.#ctor(Raven.Client.Document.InMemoryDocumentSessionOperations,Raven.Client.Connection.IDatabaseCommands,Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.String,System.String[],System.String[],Raven.Client.Listeners.IDocumentQueryListener[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.AsyncDocumentQuery`1"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.#ctor(Raven.Client.Document.AsyncDocumentQuery{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.AbstractDocumentQuery`2"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Include(System.String)">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Take(System.Int32)">
            <summary>
            Takes the specified count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Skip(System.Int32)">
            <summary>
            Skips the specified count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Where(System.String)">
            <summary>
            Filter the results from the index using the specified where clause.
            </summary>
            <param name="whereClause">The where clause.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereEquals(System.String,System.Object)">
            <summary>
            	Matches exact value
            </summary>
            <remarks>
            	Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereEquals``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereEquals(System.String,System.Object,System.Boolean)">
            <summary>
            	Matches exact value
            </summary>
            <remarks>
            	Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereEquals``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,System.Boolean)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereEquals(Raven.Client.WhereParams)">
            <summary>
            Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereIn(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereIn``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereStartsWith(System.String,System.Object)">
            <summary>
            Matches fields which starts with the specified value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereStartsWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields which starts with the specified value.
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereEndsWith(System.String,System.Object)">
            <summary>
            Matches fields which ends with the specified value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereEndsWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields which ends with the specified value.
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereBetween(System.String,System.Object,System.Object)">
            <summary>
            Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereBetween``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,``0)">
            <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
            Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereBetweenOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,``0)">
            <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereGreaterThan(System.String,System.Object)">
            <summary>
            Matches fields where the value is greater than the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereGreaterThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is greater than the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
            Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereGreaterThanOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereLessThan(System.String,System.Object)">
            <summary>
            Matches fields where the value is less than the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereLessThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is less than the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
            Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereLessThanOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#AndAlso">
            <summary>
            Add an AND to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#OrElse">
            <summary>
            Add an OR to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Boost(System.Decimal)">
            <summary>
            Specifies a boost weight to the last where clause.
            The higher the boost factor, the more relevant the term will be.
            </summary>
            <param name="boost">boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Fuzzy(System.Decimal)">
            <summary>
            Specifies a fuzziness factor to the single word term in the last where clause
            </summary>
            <param name="fuzzy">0.0 to 1.0 where 1.0 means closer match</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Proximity(System.Int32)">
            <summary>
            Specifies a proximity distance for the phrase in the last where clause
            </summary>
            <param name="proximity">number of words within</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WithinRadiusOf(System.Double,System.Double,System.Double,Raven.Abstractions.Indexing.SpatialUnits)">
            <summary>
            Filter matches to be inside the specified radius
            </summary>
            <param name="radius">The radius.</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <param name="radiusUnits">The units of the <paramref name="radius"/>.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WithinRadiusOf(System.String,System.Double,System.Double,System.Double,Raven.Abstractions.Indexing.SpatialUnits)">
            <summary>
            Filter matches to be inside the specified radius
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#SortByDistance">
            <summary>
            Sorts the query results by distance.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#SortByDistance(System.Double,System.Double)">
            <summary>
            Sorts the query results by distance.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#SortByDistance(System.Double,System.Double,System.String)">
            <summary>
            Sorts the query results by distance.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#OrderBy(System.String[])">
            <summary>
            Order the results by the specified fields
            The fields are the names of the fields to sort, defaulting to sorting by ascending.
            You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name = "propertySelectors">Property selectors for the fields.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#OrderByDescending(System.String[])">
            <summary>
            Order the results by the specified fields
            The fields are the names of the fields to sort, defaulting to sorting by descending.
            You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by descending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name = "propertySelectors">Property selectors for the fields.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResultsAsOfNow">
            <summary>
            Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name="waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name="cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name="cutOff">The cut off.</param>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResultsAsOf(Raven.Abstractions.Data.Etag)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff etag.
            </summary>
            <param name="cutOffEtag">The cut off etag.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResultsAsOf(Raven.Abstractions.Data.Etag,System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff etag for the specified timeout.
            </summary>
            <param name="cutOffEtag">The cut off etag.</param>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResultsAsOfLastWrite">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResultsAsOfLastWrite(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResults">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#BeforeQueryExecution(System.Action{Raven.Abstractions.Data.IndexQuery})">
            <summary>
            Allows you to modify the index query before it is sent to the server
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResults(System.TimeSpan)">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results for the specified wait timeout.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.SelectFields``1">
            <summary>
            Selects all the projection fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.SelectFields``1(System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.SelectFields``1(System.String[],System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.CountLazilyAsync(System.Threading.CancellationToken)">
            <summary>
            Register the query as a lazy-count query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#AddOrder(System.String,System.Boolean)">
            <summary>
            Adds an ordering for a specific field to the query
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#OrderByScore">
            <summary>
            Adds an ordering by score for a specific field to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#OrderByScoreDescending">
            <summary>
            Adds an ordering by score descending for a specific field to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.AddOrder``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
              Adds an ordering for a specific field to the query
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#RandomOrdering">
            <summary>
            Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#CustomSortUsing(System.String,System.Boolean)">
            <summary>
            Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#RandomOrdering(System.String)">
            <summary>
            Order the search results randomly using the specified seed
            this is useful if you want to have repeatable random queries
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#AddOrder(System.String,System.Boolean,System.Type)">
            <summary>
            Adds an ordering for a specific field to the query and specifies the type of field for sorting purposes
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
            <param name="fieldType">the type of the field to be sorted.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#OpenSubclause">
            <summary>
            Simplified method for opening a new clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Search(System.String,System.String,Raven.Client.EscapeQueryOptions)">
            <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Search``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,Raven.Client.EscapeQueryOptions)">
            <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#CloseSubclause">
            <summary>
            Simplified method for closing a clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Intersect">
            <summary>
            Partition the query so we can intersect different parts of the query
            across different index entries.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#ContainsAny(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Performs a query matching ANY of the provided values against the given field (OR)
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.ContainsAny``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs a query matching ANY of the provided values against the given field (OR)
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#ContainsAll(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Performs a query matching ALL of the provided values against the given field (AND)
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.ContainsAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs a query matching ALL of the provided values against the given field (AND)
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Statistics(Raven.Client.RavenQueryStatistics@)">
            <summary>
            Provide statistics about the query, such as total count of matching records
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#SetResultTransformer(System.String)">
            <summary>
            Sets a transformer to use after executing a query
            </summary>
            <param name="resultsTransformer"></param>
        </member>
        <member name="P:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Not">
            <summary>
            Negate the next operation
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncShardedDocumentQuery`1.#ctor(Raven.Client.Document.InMemoryDocumentSessionOperations,System.Func{Raven.Client.Shard.ShardRequestData,System.Collections.Generic.IList{System.Tuple{System.String,Raven.Client.Connection.Async.IAsyncDatabaseCommands}}},Raven.Client.Shard.ShardStrategy,System.String,System.String[],System.String[],Raven.Client.Listeners.IDocumentQueryListener[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.ShardedDocumentQuery`1"/> class.
            </summary>
        </member>
        <member name="T:Raven.Client.Document.AsyncMultiTypeHiLoKeyGenerator">
            <summary>
            Generate a hilo key for each given type
            </summary>
        </member>
        <member name="T:Raven.Client.Document.AsyncHiLoKeyGenerator">
            <summary>
            Generate hilo numbers against a RavenDB document
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncHiLoKeyGenerator.#ctor(System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.HiLoKeyGenerator"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncHiLoKeyGenerator.GenerateDocumentKeyAsync(Raven.Client.Connection.Async.IAsyncDatabaseCommands,Raven.Client.Document.DocumentConvention,System.Object)">
            <summary>
            Generates the document key.
            </summary>
            <param name="convention">The convention.</param>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncHiLoKeyGenerator.NextIdAsync(Raven.Client.Connection.Async.IAsyncDatabaseCommands)">
            <summary>
             Create the next id (numeric)
            </summary>
        </member>
        <member name="M:Raven.Client.Document.GenerateEntityIdOnTheClient.TryGetIdFromInstance(System.Object,System.String@)">
            <summary>
            Attempts to get the document key from an instance 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.GenerateEntityIdOnTheClient.GetOrGenerateDocumentKey(System.Object)">
            <summary>
            Tries to get the identity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.GenerateEntityIdOnTheClient.TrySetIdentity(System.Object,System.String)">
            <summary>
            Tries to set the identity property
            </summary>
            <param name="entity">The entity.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:Raven.Client.Document.EntityToJson.EntitiesToJsonCachingScope">
            <summary>
            All calls to convert an entity to a json object would be cache
            This is used inside the SaveChanges() action, where we need to access the entities json
            in several disparate places.
            
            Note: This assumes that no modifications can happen during the SaveChanges. This is naturally true
            Note: for SaveChanges (and multi threaded access will cause undefined behavior anyway).
            Note: For SaveChangesAsync, the same holds true as well.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.EntityToJson.Listeners">
            <summary>
            All the listeners for this session
            </summary>
        </member>
        <member name="E:Raven.Client.Document.ILowLevelBulkInsertOperation.Report">
            <summary>
                Report on the progress of the operation
            </summary>
        </member>
        <member name="T:Raven.Client.FieldHighlightings">
            <summary>
                Query highlightings for the documents.
            </summary>
        </member>
        <member name="M:Raven.Client.FieldHighlightings.GetFragments(System.String)">
            <summary>
                Returns the list of document's field highlighting fragments.
            </summary>
            <param name="key">The document id, or the map/reduce key field.</param>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.FieldHighlightings.FieldName">
            <summary>
                The field name.
            </summary>
        </member>
        <member name="T:Raven.Client.IAsyncDocumentSessionImpl">
            <summary>
            Interface for document session using async approaches
            </summary>
        </member>
        <member name="T:Raven.Client.IAsyncDocumentSession">
            <summary>
                Interface for document session using async approaches
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Delete``1(``0)">
            <summary>
                Marks the specified entity for deletion. The entity will be deleted when
                <see cref="M:Raven.Client.IDocumentSession.SaveChanges"/> is called.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">instance of entity to delete</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Delete``1(System.ValueType)">
            <summary>
                Marks the specified entity for deletion. The entity will be deleted when
                <see cref="M:Raven.Client.IDocumentSession.SaveChanges"/> is called.
                <para>WARNING: This method will not call beforeDelete listener!</para>
                <para>This method allows you to call:</para>
                <para>Delete&lt;Post&gt;(1)</para>
                <para>And that call will internally be translated to </para>
                <para>Delete&lt;Post&gt;("posts/1");</para>
                <para>Or whatever your conventions specify.</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">entity Id</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Delete(System.String)">
            <summary>
                Marks the specified entity for deletion. The entity will be deleted when
                <see cref="M:Raven.Client.IDocumentSession.SaveChanges"/> is called.
                <para>WARNING: This method will not call beforeDelete listener!</para>
            </summary>
            <param name="id">entity Id</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Include(System.String)">
            <summary>
                Begin a load while including the specified path
            </summary>
            <param name="path">Path in documents in which server should look for a 'referenced' documents.</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Begin a load while including the specified path
            </summary>
            <param name="path">Path in documents in which server should look for a 'referenced' documents.</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Include``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Begin a load while including the specified path
            </summary>
            <param name="path">Path in documents in which server should look for a 'referenced' documents.</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
                Loads the specified entity with the specified id.
            </summary>
            <param name="id">Identifier of a entity that will be loaded.</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``1(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
                Loads the specified entities with the specified ids.
            </summary>
            <param name="ids">Enumerable of Ids that should be loaded</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``1(System.ValueType,System.Threading.CancellationToken)">
            <summary>
                Loads the specified entity with the specified id after applying
                conventions on the provided id to get the real document id.
                <para>This method allows you to call:</para>
                <para>LoadAsync&lt;Post&gt;(1)</para>
                <para>And that call will internally be translated to </para>
                <para>LoadAsync&lt;Post&gt;("posts/1");</para>
                <para>Or whatever your conventions specify.</para>
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``1(System.Threading.CancellationToken,System.ValueType[])">
            <summary>
                Loads the specified entities with the specified id after applying
                conventions on the provided id to get the real document id.
                <para>This method allows you to call:</para>
                <para>LoadAsync&lt;Post&gt;(1, 2, 3)</para>
                <para>And that call will internally be translated to </para>
                <para>LoadAsync&lt;Post&gt;("posts/1", "posts/2", "posts/3");</para>
                <para>Or whatever your conventions specify.</para>
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``1(System.Collections.Generic.IEnumerable{System.ValueType},System.Threading.CancellationToken)">
            <summary>
                Loads the specified entities with the specified id after applying
                conventions on the provided id to get the real document id.
            </summary>
            <remarks>
                <para>This method allows you to call:</para>
                <para>LoadAsync&lt;Post&gt;(new List&lt;int&gt;(){1,2,3})</para>
                <para>And that call will internally be translated to </para>
                <para>LoadAsync&lt;Post&gt;("posts/1", "posts/2", "posts/3");</para>
                <para>Or whatever your conventions specify.</para>
            </remarks>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``2(System.String,System.Action{Raven.Client.ILoadConfiguration},System.Threading.CancellationToken)">
            <summary>
                Performs a load that will use the specified results transformer against the specified id
            </summary>
            <typeparam name="TTransformer">The transformer to use in this load operation</typeparam>
            <typeparam name="TResult">The results shape to return after the load operation</typeparam>
            <param name="id">Id of a document to load</param>
            <param name="configure">additional configuration options for operation e.g. AddTransformerParameter</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``2(System.Collections.Generic.IEnumerable{System.String},System.Action{Raven.Client.ILoadConfiguration},System.Threading.CancellationToken)">
            <summary>
                Performs a load that will use the specified results transformer against the specified id
            </summary>
            <param name="ids">Enumerable of ids of documents to load</param>
            <param name="configure">additional configuration options for operation e.g. AddTransformerParameter</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``1(System.String,System.String,System.Action{Raven.Client.ILoadConfiguration},System.Threading.CancellationToken)">
            <summary>
                Performs a load that will use the specified results transformer against the specified id
            </summary>
            <typeparam name="TResult">The results shape to return after the load operation</typeparam>
            <param name="id">Id of a document to load</param>
            <param name="transformer">The transformer to use in this load operation</param>
            <param name="configure">additional configuration options for operation e.g. AddTransformerParameter</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``1(System.Collections.Generic.IEnumerable{System.String},System.String,System.Action{Raven.Client.ILoadConfiguration},System.Threading.CancellationToken)">
            <summary>
                Performs a load that will use the specified results transformer against the specified ids
            </summary>
            <typeparam name="TResult">The results shape to return after the load operation</typeparam>
            <param name="ids">Enumerable of ids of documents to load</param>
            <param name="transformer">The transformer to use in this load operation</param>
            <param name="configure">additional configuration options for operation e.g. AddTransformerParameter</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``1(System.String,System.Type,System.Action{Raven.Client.ILoadConfiguration},System.Threading.CancellationToken)">
            <summary>
                Performs a load that will use the specified results transformer against the specified id
            </summary>
            <typeparam name="TResult">The results shape to return after the load operation</typeparam>
            <param name="id">Id of a entity to load</param>
            <param name="transformerType">The transformer to use in this load operation</param>
            <param name="configure">additional configuration options for operation e.g. AddTransformerParameter</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``1(System.Collections.Generic.IEnumerable{System.String},System.Type,System.Action{Raven.Client.ILoadConfiguration},System.Threading.CancellationToken)">
            <summary>
                Performs a load that will use the specified results transformer against the specified ids
            </summary>
            <typeparam name="TResult">The results shape to return after the load operation</typeparam>
            <param name="ids">Enumerable of ids of documents to load</param>
            <param name="transformerType">The transformer to use in this load operation</param>
            <param name="configure">additional configuration options for operation e.g. AddTransformerParameter</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Query``1(System.String,System.Boolean)">
            <summary>
                Queries the specified index using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <param name="indexName">Name of the index.</param>
            <param name="isMapReduce">Whatever we are querying a map/reduce index (modify how we treat identifier properties)</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Query``1">
            <summary>
                Dynamically queries RavenDB using LINQ
            </summary>
            <typeparam name="T">The result of the query</typeparam>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Query``2">
            <summary>
                Queries the index specified by <typeparamref name="TIndexCreator" /> using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
                Saves all the pending changes to the server.
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.StoreAsync(System.Object,Raven.Abstractions.Data.Etag,System.Threading.CancellationToken)">
            <summary>
                Stores entity in session, extracts Id from entity using Conventions or generates new one if it is not available and
                forces concurrency check with given Etag
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.StoreAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
                Stores entity in session, extracts Id from entity using Conventions or generates new one if it is not available.
                <para>Forces concurrency check if the Id is not available during extraction.</para>
            </summary>
            <param name="entity">entity to store.</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.StoreAsync(System.Object,Raven.Abstractions.Data.Etag,System.String,System.Threading.CancellationToken)">
            <summary>
                Stores entity in session with given id and forces concurrency check with given Etag.
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.StoreAsync(System.Object,System.String,System.Threading.CancellationToken)">
            <summary>
                Stores the specified dynamic entity, under the specified id.
            </summary>
            <param name="entity">entity to store.</param>
            <param name="id">Id to store this entity under. If other entity exists with the same id it will be overridden.</param>
        </member>
        <member name="P:Raven.Client.IAsyncDocumentSession.Advanced">
            <summary>
                Get the accessor for advanced operations
            </summary>
            <remarks>
                Those operations are rarely needed, and have been moved to a separate
                property to avoid cluttering the API
            </remarks>
        </member>
        <member name="T:Raven.Client.Document.Batches.IAsyncLazySessionOperations">
            <summary>
                Specify interface for lazy async operation for the session
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncLazySessionOperations.Include(System.String)">
            <summary>
                Begin a load while including the specified path
            </summary>
            <param name="path">Path in documents in which server should look for a 'referenced' documents.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncLazySessionOperations.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Begin a load while including the specified path
            </summary>
            <param name="path">Path in documents in which server should look for a 'referenced' documents.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncLazySessionOperations.LoadAsync``1(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
                Loads the specified entities with the specified ids.
            </summary>
            <param name="ids">Enumerable of Ids that should be loaded</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncLazySessionOperations.LoadAsync``1(System.Collections.Generic.IEnumerable{System.String},System.Action{``0[]},System.Threading.CancellationToken)">
            <summary>
                Loads the specified entities with the specified ids and a function to call when it is evaluated.
            </summary>
            <param name="ids">Enumerable of Ids that should be loaded</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncLazySessionOperations.LoadAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
                Loads the specified entity with the specified id.
            </summary>
            <param name="id">Identifier of a entity that will be loaded.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncLazySessionOperations.LoadAsync``1(System.String,System.Action{``0},System.Threading.CancellationToken)">
            <summary>
                Loads the specified entity with the specified id and a function to call when it is evaluated.
            </summary>
            <param name="id">Identifier of a entity that will be loaded.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncLazySessionOperations.LoadAsync``1(System.ValueType,System.Threading.CancellationToken)">
            <summary>
                Loads the specified entity with the specified id after applying
                conventions on the provided id to get the real document id.
                <para>This method allows you to call:</para>
                <para>LoadAsync&lt;Post&gt;(1)</para>
                <para>And that call will internally be translated to </para>
                <para>LoadAsync&lt;Post&gt;("posts/1");</para>
                <para>Or whatever your conventions specify.</para>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncLazySessionOperations.LoadAsync``1(System.ValueType,System.Action{``0},System.Threading.CancellationToken)">
            <summary>
                Loads the specified entity with the specified id after applying
                conventions on the provided id to get the real document id.
                <para>This method allows you to call:</para>
                <para>LoadAsync&lt;Post&gt;(1)</para>
                <para>And that call will internally be translated to </para>
                <para>LoadAsync&lt;Post&gt;("posts/1");</para>
                <para>Or whatever your conventions specify.</para>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncLazySessionOperations.LoadAsync``1(System.Threading.CancellationToken,System.ValueType[])">
            <summary>
                Loads the specified entity with the specified ids after applying
                conventions on the provided id to get the real document id.
                <para>This method allows you to call:</para>
                <para>LoadAsync&lt;Post&gt;(1)</para>
                <para>And that call will internally be translated to </para>
                <para>LoadAsync&lt;Post&gt;("posts/1");</para>
                <para>Or whatever your conventions specify.</para>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncLazySessionOperations.LoadAsync``1(System.Collections.Generic.IEnumerable{System.ValueType},System.Threading.CancellationToken)">
            <summary>
                Loads the specified entity with the specified ids after applying
                conventions on the provided id to get the real document id.
                <para>This method allows you to call:</para>
                <para>LoadAsync&lt;Post&gt;(1)</para>
                <para>And that call will internally be translated to </para>
                <para>LoadAsync&lt;Post&gt;("posts/1");</para>
                <para>Or whatever your conventions specify.</para>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncLazySessionOperations.LoadAsync``1(System.Collections.Generic.IEnumerable{System.ValueType},System.Action{``0[]},System.Threading.CancellationToken)">
            <summary>
                Loads the specified entity with the specified ids after applying
                conventions on the provided id to get the real document id.
                <para>This method allows you to call:</para>
                <para>LoadAsync&lt;Post&gt;(1)</para>
                <para>And that call will internally be translated to </para>
                <para>LoadAsync&lt;Post&gt;("posts/1");</para>
                <para>Or whatever your conventions specify.</para>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncLazySessionOperations.LoadAsync``2(System.String,System.Action{Raven.Client.ILoadConfiguration},System.Action{``1},System.Threading.CancellationToken)">
            <summary>
                Performs a load that will use the specified results transformer against the specified id
            </summary>
            <typeparam name="TTransformer">The transformer to use in this load operation</typeparam>
            <typeparam name="TResult">The results shape to return after the load operation</typeparam>
            <param name="id">Id of a document to load</param>
            <param name="configure">additional configuration options for operation e.g. AddTransformerParameter</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncLazySessionOperations.LoadAsync``1(System.String,System.Type,System.Action{Raven.Client.ILoadConfiguration},System.Action{``0},System.Threading.CancellationToken)">
            <summary>
                Performs a load that will use the specified results transformer against the specified id
            </summary>
            <typeparam name="TResult">The results shape to return after the load operation</typeparam>
            <param name="id">Id of a entity to load</param>
            <param name="transformerType">The transformer to use in this load operation</param>
            <param name="configure">additional configuration options for operation e.g. AddTransformerParameter</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncLazySessionOperations.LoadStartingWithAsync``1(System.String,System.String,System.Int32,System.Int32,System.String,Raven.Client.RavenPagingInformation,System.String,System.Threading.CancellationToken)">
            <summary>
                Loads multiple entities that contain common prefix.
            </summary>
            <param name="keyPrefix">prefix for which documents should be returned e.g. "products/"</param>
            <param name="matches">
                pipe ('|') separated values for which document keys (after 'keyPrefix') should be matched ('?'
                any single character, '*' any characters)
            </param>
            <param name="start">number of documents that should be skipped. By default: 0.</param>
            <param name="pageSize">maximum number of documents that will be retrieved. By default: 25.</param>
            <param name="pagingInformation">used to perform rapid pagination on a server side</param>
            <param name="exclude">
                pipe ('|') separated values for which document keys (after 'keyPrefix') should not be matched
                ('?' any single character, '*' any characters)
            </param>
            <param name="skipAfter">
                skip document fetching until given key is found and return documents after that key (default:
                null)
            </param>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncEagerSessionOperations.ExecuteAllPendingLazyOperationsAsync(System.Threading.CancellationToken)">
            <summary>
                Execute all the lazy requests pending within this session
            </summary>
        </member>
        <member name="T:Raven.Client.DocumentStoreBase">
            <summary>
            Contains implementation of some IDocumentStore operations shared by DocumentStore implementations
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentStore">
            <summary>
            Interface for managing access to RavenDB and open sessions.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentStore.Changes(System.String)">
            <summary>
            Subscribe to change notifications from the server
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentStore.AggressivelyCacheFor(System.TimeSpan)">
            <summary>
            Setup the context for aggressive caching.
            </summary>
            <param name="cacheDuration">Specify the aggressive cache duration</param>
            <remarks>
            Aggressive caching means that we will not check the server to see whatever the response
            we provide is current or not, but will serve the information directly from the local cache
            without touching the server.
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentStore.AggressivelyCache">
            <summary>
            Setup the context for aggressive caching.
            </summary>
            <remarks>
            Aggressive caching means that we will not check the server to see whatever the response
            we provide is current or not, but will serve the information directly from the local cache
            without touching the server.
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentStore.DisableAggressiveCaching">
            <summary>
            Setup the context for no aggressive caching
            </summary>
            <remarks>
            This is mainly useful for internal use inside RavenDB, when we are executing
            queries that has been marked with WaitForNonStaleResults, we temporarily disable
            aggressive caching.
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentStore.SetRequestsTimeoutFor(System.TimeSpan)">
            <summary>
            Setup the WebRequest timeout for the session
            </summary>
            <param name="timeout">Specify the timeout duration</param>
            <remarks>
            Sets the timeout for the JsonRequest.  Scoped to the Current Thread.
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentStore.Initialize">
            <summary>
            Initializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentStore.OpenAsyncSession">
            <summary>
            Opens the async session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentStore.OpenAsyncSession(System.String)">
            <summary>
            Opens the async session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentStore.OpenSession">
            <summary>
            Opens the session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentStore.OpenSession(System.String)">
            <summary>
            Opens the session for a particular database
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentStore.OpenSession(Raven.Client.Document.OpenSessionOptions)">
            <summary>
            Opens the session with the specified options.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentStore.SideBySideExecuteIndex(Raven.Client.Indexes.AbstractIndexCreationTask,Raven.Abstractions.Data.Etag,System.Nullable{System.DateTime})">
            <summary>
            Executes the index creation in side-by-side mode.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentStore.SideBySideExecuteIndexAsync(Raven.Client.Indexes.AbstractIndexCreationTask,Raven.Abstractions.Data.Etag,System.Nullable{System.DateTime})">
            <summary>
            Executes the index creation in side-by-side mode.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentStore.ExecuteIndex(Raven.Client.Indexes.AbstractIndexCreationTask)">
            <summary>
            Executes the index creation.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentStore.ExecuteIndexAsync(Raven.Client.Indexes.AbstractIndexCreationTask)">
            <summary>
            Executes the index creation.
            </summary>
            <param name="indexCreationTask"></param>
        </member>
        <member name="M:Raven.Client.IDocumentStore.ExecuteTransformer(Raven.Client.Indexes.AbstractTransformerCreationTask)">
            <summary>
            Executes the transformer creation
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentStore.GetLastWrittenEtag">
            <summary>
             Gets the etag of the last document written by any session belonging to this 
             document store
            </summary>
        </member>
        <member name="P:Raven.Client.IDocumentStore.SharedOperationsHeaders">
            <summary>
            Gets the shared operations headers.
            </summary>
            <value>The shared operations headers.</value>
        </member>
        <member name="P:Raven.Client.IDocumentStore.JsonRequestFactory">
            <summary>
            Get the <see cref="T:Raven.Client.Connection.HttpJsonRequestFactory"/> for this store
            </summary>
        </member>
        <member name="P:Raven.Client.IDocumentStore.HasJsonRequestFactory">
            <summary>
            Whatever this instance has json request factory available
            </summary>
        </member>
        <member name="P:Raven.Client.IDocumentStore.Identifier">
            <summary>
            Gets or sets the identifier for this store.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Raven.Client.IDocumentStore.AsyncDatabaseCommands">
            <summary>
            Gets the async database commands.
            </summary>
            <value>The async database commands.</value>
        </member>
        <member name="P:Raven.Client.IDocumentStore.DatabaseCommands">
            <summary>
            Gets the database commands.
            </summary>
            <value>The database commands.</value>
        </member>
        <member name="P:Raven.Client.IDocumentStore.Conventions">
            <summary>
            Gets the conventions.
            </summary>
            <value>The conventions.</value>
        </member>
        <member name="P:Raven.Client.IDocumentStore.Url">
            <summary>
            Gets the URL.
            </summary>
        </member>
        <member name="P:Raven.Client.IDocumentStore.AsyncSubscriptions">
            <summary>
            Provides methods to manage data subscriptions in async manner.
            </summary>
        </member>
        <member name="P:Raven.Client.IDocumentStore.Subscriptions">
            <summary>
            Provides methods to manage data subscriptions.
            </summary>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.AggressivelyCacheFor(System.TimeSpan)">
            <summary>
            Subscribe to change notifications from the server
            </summary>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.ExecuteIndex(Raven.Client.Indexes.AbstractIndexCreationTask)">
            <summary>
            Executes the index creation.
            </summary>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.ExecuteIndexAsync(Raven.Client.Indexes.AbstractIndexCreationTask)">
            <summary>
            Executes the index creation.
            </summary>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.SideBySideExecuteIndex(Raven.Client.Indexes.AbstractIndexCreationTask,Raven.Abstractions.Data.Etag,System.Nullable{System.DateTime})">
            <summary>
            Executes the index creation in side-by-side mode.
            </summary>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.SideBySideExecuteIndexAsync(Raven.Client.Indexes.AbstractIndexCreationTask,Raven.Abstractions.Data.Etag,System.Nullable{System.DateTime})">
            <summary>
            Executes the index creation in side-by-side mode.
            </summary>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.ExecuteTransformer(Raven.Client.Indexes.AbstractTransformerCreationTask)">
            <summary>
            Executes the transformer creation
            </summary>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.GetLastWrittenEtag">
            <summary>
             Gets the etag of the last document written by any session belonging to this 
             document store
            </summary>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.RegisterListener(Raven.Client.Listeners.IDocumentConversionListener)">
            <summary>
            Registers the extended conversion listener.
            </summary>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.RegisterListener(Raven.Client.Listeners.IDocumentQueryListener)">
            <summary>
            Registers the query listener.
            </summary>
            <param name="queryListener">The query listener.</param>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.RegisterListener(Raven.Client.Listeners.IDocumentStoreListener)">
            <summary>
            Registers the store listener.
            </summary>
            <param name="documentStoreListener">The document store listener.</param>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.RegisterListener(Raven.Client.Listeners.IDocumentDeleteListener)">
            <summary>
            Registers the delete listener.
            </summary>
            <param name="deleteListener">The delete listener.</param>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.RegisterListener(Raven.Client.Listeners.IDocumentConflictListener)">
            <summary>
            Registers the conflict listener.
            </summary>
            <param name="conflictListener">The conflict listener.</param>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.GetProfilingInformationFor(System.Guid)">
            <summary>
             Get the profiling information for the given id
            </summary>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.AggressivelyCache">
            <summary>
            Setup the context for aggressive caching.
            </summary>
        </member>
        <member name="E:Raven.Client.DocumentStoreBase.AfterDispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Raven.Client.DocumentStoreBase.WasDisposed">
            <summary>
            Whatever the instance has been disposed
            </summary>
        </member>
        <member name="P:Raven.Client.DocumentStoreBase.SharedOperationsHeaders">
            <summary>
            Gets the shared operations headers.
            </summary>
            <value>The shared operations headers.</value>
        </member>
        <member name="P:Raven.Client.DocumentStoreBase.Conventions">
            <summary>
            Gets the conventions.
            </summary>
            <value>The conventions.</value>
        </member>
        <member name="P:Raven.Client.DocumentStoreBase.Url">
            <summary>
            Gets or sets the URL.
            </summary>
        </member>
        <member name="P:Raven.Client.DocumentStoreBase.FailoverServers">
            <summary>
            Failover servers used by replication informers when cannot fetch the list of replication 
            destinations if a master server is down.
            </summary>
        </member>
        <member name="P:Raven.Client.DocumentStoreBase.UseFipsEncryptionAlgorithms">
            <summary>
            Whenever or not we will use FIPS compliant encryption algorithms (must match server settings).
            </summary>
        </member>
        <member name="P:Raven.Client.DocumentStoreBase.EnlistInDistributedTransactions">
            <summary>
             Whatever or not we will automatically enlist in distributed transactions
            </summary>
        </member>
        <member name="P:Raven.Client.DocumentStoreBase.ResourceManagerId">
            <summary>
            The resource manager id for the document store.
            IMPORTANT: Using Guid.NewGuid() to set this value is almost certainly a mistake, you should set
            it to a value that remains consistent between restart of the system.
            </summary>
        </member>
        <member name="P:Raven.Client.DocumentStoreBase.RegisteredQueryListeners">
            <summary>
            Gets a read-only collection of the registered query listeners.
            </summary>
        </member>
        <member name="P:Raven.Client.DocumentStoreBase.RegisteredStoreListeners">
            <summary>
            Gets a read-only collection of the registered store listeners.
            </summary>
        </member>
        <member name="P:Raven.Client.DocumentStoreBase.RegisteredDeleteListeners">
            <summary>
            Gets a read-only collection of the registered delete listeners.
            </summary>
        </member>
        <member name="P:Raven.Client.DocumentStoreBase.RegisteredConflictListeners">
            <summary>
            Gets a read-only collection of the registered conflict listeners.
            </summary>
        </member>
        <member name="E:Raven.Client.DocumentStoreBase.SessionCreatedInternal">
            <summary>
             Internal notification for integration tools, mainly
            </summary>
        </member>
        <member name="T:Raven.Client.Document.Async.AsyncDocumentSession">
            <summary>
            Implementation for async document session 
            </summary>
        </member>
        <member name="T:Raven.Client.Document.InMemoryDocumentSessionOperations">
            <summary>
            Abstract implementation for in memory session operations
            </summary>
        </member>
        <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.deletedEntities">
            <summary>
            The entities waiting to be deleted
            </summary>
        </member>
        <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.knownMissingIds">
            <summary>
            Entities whose id we already know do not exists, because they are a missing include, or a missing load, etc.
            </summary>
        </member>
        <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.entitiesAndMetadata">
            <summary>
            hold the data required to manage the data for RavenDB's Unit of Work
            </summary>
        </member>
        <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.entitiesByKey">
            <summary>
            Translate between a key and its associated entity
            </summary>
        </member>
        <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.theListeners">
            <summary>
            all the listeners for this session
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.#ctor(System.String,Raven.Client.DocumentStoreBase,Raven.Client.Document.DocumentSessionListeners,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.InMemoryDocumentSessionOperations"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetEtagFor``1(``0)">
            <summary>
            Gets the ETag for the specified entity.
            If the entity is transient, it will load the etag from the store
            and associate the current state of the entity with the etag from the server.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetMetadataFor``1(``0)">
            <summary>
            Gets the metadata for the specified entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetJsonDocument(System.String)">
            <summary>
            Get the json document by key from the store
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.IsLoaded(System.String)">
            <summary>
            Returns whatever a document with the specified id is loaded in the 
            current session
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.IsDeleted(System.String)">
            <summary>
            Returns whatever a document with the specified id is deleted 
            or known to be missing
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetDocumentId(System.Object)">
            <summary>
            Gets the document id.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.HasChanged(System.Object)">
            <summary>
            Determines whether the specified entity has changed.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            	<c>true</c> if the specified entity has changed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.TrackEntity``1(Raven.Abstractions.Data.JsonDocument)">
            <summary>
            Tracks the entity inside the unit of work
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documentFound">The document found.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.TrackEntity``1(System.String,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject,System.Boolean)">
            <summary>
            Tracks the entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="document">The document.</param>
            <param name="metadata">The metadata.</param>'
            <param name="noTracking"></param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.TrackEntity(System.Type,Raven.Abstractions.Data.JsonDocument)">
            <summary>
            Tracks the entity inside the unit of work
            </summary>
            <param name="entityType"></param>
            <param name="documentFound">The document found.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.TrackEntity(System.Type,System.String,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject,System.Boolean)">
            <summary>
            Tracks the entity.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="key">The key.</param>
            <param name="document">The document.</param>
            <param name="metadata">The metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.ConvertToEntity(System.Type,System.String,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Converts the json document to an entity.
            </summary>
            <param name="entityType"></param>
            <param name="id">The id.</param>
            <param name="documentFound">The document found.</param>
            <param name="metadata">The metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value of the specified type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Delete``1(``0)">
            <summary>
            Marks the specified entity for deletion. The entity will be deleted when SaveChanges is called.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Delete``1(System.ValueType)">
            <summary>
            Marks the specified entity for deletion. The entity will be deleted when <see cref="M:Raven.Client.IDocumentSession.SaveChanges"/> is called.
            WARNING: This method will not call beforeDelete listener!
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The entity.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Delete(System.String)">
            <summary>
            Marks the specified entity for deletion. The entity will be deleted when <see cref="M:Raven.Client.IDocumentSession.SaveChanges"/> is called.
            WARNING: This method will not call beforeDelete listener!
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Store(System.Object)">
            <summary>
            Stores the specified entity in the session. The entity will be saved when SaveChanges is called.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Store(System.Object,Raven.Abstractions.Data.Etag)">
            <summary>
            Stores the specified entity in the session. The entity will be saved when SaveChanges is called.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Store(System.Object,System.String)">
            <summary>
            Stores the specified entity in the session, explicitly specifying its Id. The entity will be saved when SaveChanges is called.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Store(System.Object,Raven.Abstractions.Data.Etag,System.String)">
            <summary>
            Stores the specified entity in the session, explicitly specifying its Id. The entity will be saved when SaveChanges is called.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.CreatePutEntityCommand(System.Object,Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata)">
            <summary>
            Creates the put entity command.
            </summary>
            <param name="entity">The entity.</param>
            <param name="documentMetadata">The document metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.UpdateBatchResults(System.Collections.Generic.IList{Raven.Abstractions.Data.BatchResult},Raven.Client.Document.InMemoryDocumentSessionOperations.SaveChangesData)">
            <summary>
            Updates the batch results.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.PrepareForSaveChanges">
            <summary>
            Prepares for save changes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.MarkReadOnly(System.Object)">
            <summary>
            Mark the entity as read only, change tracking won't apply 
            to such an entity. This can be done as an optimization step, so 
            we don't need to check the entity for changes.
            This flag is persisted in the document metadata and subsequent modifications of the document will not be possible.
            If you want the session to ignore this entity, consider using the Evict() method.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.IgnoreChangesFor(System.Object)">
            <summary>
            Mark the entity as one that should be ignore for change tracking purposes,
            it still takes part in the session, but is ignored for SaveChanges.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.EntityChanged(System.Object,Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata,System.Collections.Generic.IDictionary{System.String,Raven.Abstractions.Data.DocumentsChanges[]})">
            <summary>
            Determines if the entity have changed.
            </summary>
            <param name="entity">The entity.</param>
            <param name="documentMetadata">The document metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Evict``1(``0)">
            <summary>
            Evicts the specified entity from the session.
            Remove the entity from the delete queue and stops tracking changes for this entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Clear">
            <summary>
            Clears this instance.
            Remove all entities from the delete queue and stops tracking changes for all entities.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Defer(Raven.Abstractions.Commands.ICommandData[])">
            <summary>
            Defer commands to be executed on SaveChanges()
            </summary>
            <param name="commands">The commands to be executed</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.ExplicitlyVersion(System.Object)">
            <summary>
            Version this entity when it is saved.  Use when Versioning bundle configured to ExcludeUnlessExplicit.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Commit(System.String)">
            <summary>
            Commits the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Rollback(System.String)">
            <summary>
            Rollbacks the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.ClearEnlistment">
            <summary>
            Clears the enlistment.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.Id">
            <summary>
            The session id 
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DatabaseName">
            <summary>
            The database name for this session
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.Listeners">
            <summary>
            all the listeners for this session
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentStore">
            <summary>
             The document store associated with this session
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NumberOfRequests">
            <summary>
            Gets the number of requests for this session
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NumberOfEntitiesInUnitOfWork">
            <summary>
            Gets the number of entities held in memory to manage Unit of Work
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NonAuthoritativeInformationTimeout">
            <summary>
            Gets or sets the timeout to wait for authoritative information if encountered non authoritative document.
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.StoreIdentifier">
            <summary>
            Gets the store identifier for this session.
            The store identifier is the identifier for the particular RavenDB instance.
            </summary>
            <value>The store identifier.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.Conventions">
            <summary>
            Gets the conventions used by this session
            </summary>
            <value>The conventions.</value>
            <remarks>
            This instance is shared among all sessions, changes to the <see cref="T:Raven.Client.Document.DocumentConvention"/> should be done
            via the <see cref="T:Raven.Client.IDocumentStore"/> instance, not on a single session.
            </remarks>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.ResourceManagerId">
            <summary>
            The transaction resource manager identifier
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.MaxNumberOfRequestsPerSession">
            <summary>
            Gets or sets the max number of requests per session.
            If the <see cref="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NumberOfRequests"/> rise above <see cref="P:Raven.Client.Document.InMemoryDocumentSessionOperations.MaxNumberOfRequestsPerSession"/>, an exception will be thrown.
            </summary>
            <value>The max number of requests per session.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.UseOptimisticConcurrency">
            <summary>
            Gets or sets a value indicating whether the session should use optimistic concurrency.
            When set to <c>true</c>, a check is made so that a change made behind the session back would fail
            and raise <see cref="T:Raven.Abstractions.Exceptions.ConcurrencyException"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.HasChanges">
            <summary>
            Gets a value indicating whether any of the entities tracked by the session has changes.
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.AllowNonAuthoritativeInformation">
            <summary>
            Gets or sets a value indicating whether non authoritative information is allowed.
            Non authoritative information is document that has been modified by a transaction that hasn't been committed.
            The server provides the latest committed version, but it is known that attempting to write to a non authoritative document
            will fail, because it is already modified.
            If set to <c>false</c>, the session will wait <see cref="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NonAuthoritativeInformationTimeout"/> for the transaction to commit to get an
            authoritative information. If the wait is longer than <see cref="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NonAuthoritativeInformationTimeout"/>, <see cref="T:Raven.Client.Exceptions.NonAuthoritativeInformationException"/> is thrown.
            </summary>
            <value>
            	<c>true</c> if non authoritative information is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata">
            <summary>
            Metadata held about an entity by the session
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.OriginalValue">
            <summary>
            Gets or sets the original value.
            </summary>
            <value>The original value.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.ETag">
            <summary>
            Gets or sets the ETag.
            </summary>
            <value>The ETag.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.OriginalMetadata">
            <summary>
            Gets or sets the original metadata.
            </summary>
            <value>The original metadata.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.ForceConcurrencyCheck">
            <summary>
            A concurrency check will be forced on this entity 
            even if UseOptimisticConcurrency is set to false
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.IgnoreChanges">
            <summary>
            If set to true, the session will ignore this document
            when SaveChanges() is called, and won't perform and change tracking
            </summary>
        </member>
        <member name="T:Raven.Client.Document.InMemoryDocumentSessionOperations.SaveChangesData">
            <summary>
            Data for a batch command to the server
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.SaveChangesData.Commands">
            <summary>
            Gets or sets the commands.
            </summary>
            <value>The commands.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.SaveChangesData.Entities">
            <summary>
            Gets or sets the entities.
            </summary>
            <value>The entities.</value>
        </member>
        <member name="T:Raven.Client.IAsyncAdvancedSessionOperations">
            <summary>
                Advanced async session operations
            </summary>
        </member>
        <member name="T:Raven.Client.IAdvancedDocumentSessionOperations">
            <summary>
                Advanced session operations
            </summary>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.Clear">
            <summary>
                Clears this instance.
                Remove all entities from the delete queue and stops tracking changes for all entities.
            </summary>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.Defer(Raven.Abstractions.Commands.ICommandData[])">
            <summary>
                Defer commands to be executed on SaveChanges()
            </summary>
            <param name="commands">Array of comands to be executed.</param>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.Evict``1(``0)">
            <summary>
                Evicts the specified entity from the session.
                Remove the entity from the delete queue and stops tracking changes for this entity.
            </summary>
            <param name="entity">Entity to evict.</param>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.ExplicitlyVersion(System.Object)">
            <summary>
                Version this entity when it is saved.  Use when Versioning bundle configured to ExcludeUnlessExplicit.
            </summary>
            <param name="entity">Entity to version..</param>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.GetDocumentId(System.Object)">
            <summary>
                Gets the document id for the specified entity.
            </summary>
            <remarks>
                This function may return <c>null</c> if the entity isn't tracked by the session, or if the entity is
                a new entity with a key that should be generated on the server.
            </remarks>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.GetEtagFor``1(``0)">
            <summary>
                Gets the ETag for the specified entity.
                If the entity is transient, it will load the etag from the store
                and associate the current state of the entity with the etag from the server.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.GetMetadataFor``1(``0)">
            <summary>
                Gets the metadata for the specified entity.
                If the entity is transient, it will load the metadata from the store
                and associate the current state of the entity with the metadata from the server.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.HasChanged(System.Object)">
            <summary>
                Determines whether the specified entity has changed.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
                <c>true</c> if the specified entity has changed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.IsLoaded(System.String)">
            <summary>
                Returns whatever a document with the specified id is loaded in the
                current session
            </summary>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.MarkReadOnly(System.Object)">
            <summary>
                Mark the entity as read only, change tracking won't apply
                to such an entity. This can be done as an optimization step, so
                we don't need to check the entity for changes.
            </summary>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.IgnoreChangesFor(System.Object)">
            <summary>
            Mark the entity as one that should be ignore for change tracking purposes,
            it still takes part in the session, but is ignored for SaveChanges.
            </summary>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.WhatChanged">
            <summary>
            Returns all changes for each entity stored within session. Including name of the field/property that changed, its old and new value and change type.
            </summary>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.AllowNonAuthoritativeInformation">
            <summary>
                Gets or sets a value indicating whether non authoritative information is allowed.
                Non authoritative information is document that has been modified by a transaction that hasn't been committed.
                The server provides the latest committed version, but it is known that attempting to write to a non authoritative
                document
                will fail, because it is already modified.
                If set to <c>false</c>, the session will wait <see cref="P:Raven.Client.IAdvancedDocumentSessionOperations.NonAuthoritativeInformationTimeout"/> for the transaction
                to commit to get an
                authoritative information. If the wait is longer than <see cref="P:Raven.Client.IAdvancedDocumentSessionOperations.NonAuthoritativeInformationTimeout"/>,
                <see cref="T:Raven.Client.Exceptions.NonAuthoritativeInformationException"/> is thrown.
            </summary>
            <value>
                <c>true</c> if non authoritative information is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.DocumentStore">
            <summary>
                The document store associated with this session
            </summary>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.ExternalState">
            <summary>
                Allow extensions to provide additional state per session
            </summary>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.HasChanges">
            <summary>
                Gets a value indicating whether any of the entities tracked by the session has changes.
            </summary>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.MaxNumberOfRequestsPerSession">
            <summary>
                Gets or sets the max number of requests per session.
                If the <see cref="P:Raven.Client.IAdvancedDocumentSessionOperations.NumberOfRequests"/> rise above <see cref="P:Raven.Client.IAdvancedDocumentSessionOperations.MaxNumberOfRequestsPerSession"/>, an exception will
                be thrown.
            </summary>
            <value>The max number of requests per session.</value>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.NonAuthoritativeInformationTimeout">
            <summary>
                Gets or sets the timeout to wait for authoritative information if encountered non authoritative document.
            </summary>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.NumberOfRequests">
            <summary>
                Gets the number of requests for this session
            </summary>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.StoreIdentifier">
            <summary>
                Gets the store identifier for this session.
                The store identifier is the identifier for the particular RavenDB instance.
            </summary>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.UseOptimisticConcurrency">
            <summary>
                Gets or sets a value indicating whether the session should use optimistic concurrency.
                When set to <c>true</c>, a check is made so that a change made behind the session back would fail
                and raise <see cref="T:Raven.Abstractions.Exceptions.ConcurrencyException"/>.
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.AsyncDocumentQuery``2">
            <summary>
                Queries the index specified by <typeparamref name="TIndexCreator" /> using lucene syntax.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.AsyncDocumentQuery``1(System.String,System.Boolean)">
            <summary>
                Query the specified index using Lucene syntax
            </summary>
            <param name="index">Name of the index.</param>
            <param name="isMapReduce">Control how we treat identifier properties in map/reduce indexes</param>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.AsyncDocumentQuery``1">
            <summary>
                Dynamically query RavenDB using Lucene syntax
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.AsyncLuceneQuery``2">
            <summary>
                Queries the index specified by <typeparamref name="TIndexCreator" /> using lucene syntax.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.AsyncLuceneQuery``1(System.String,System.Boolean)">
            <summary>
                Query the specified index using Lucene syntax
            </summary>
            <param name="index">Name of the index.</param>
            <param name="isMapReduce">Control how we treat identifier properties in map/reduce indexes</param>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.AsyncLuceneQuery``1">
            <summary>
                Dynamically query RavenDB using Lucene syntax
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.GetDocumentUrl(System.Object)">
            <summary>
                Returns full document url for a given entity
            </summary>
            <param name="entity">Instance of an entity for which url will be returned</param>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.LoadStartingWithAsync``1(System.String,System.String,System.Int32,System.Int32,System.String,Raven.Client.RavenPagingInformation,System.String,System.Threading.CancellationToken)">
            <summary>
                Loads multiple entities that contain common prefix.
            </summary>
            <param name="keyPrefix">prefix for which documents should be returned e.g. "products/"</param>
            <param name="matches">
                pipe ('|') separated values for which document keys (after 'keyPrefix') should be matched ('?'
                any single character, '*' any characters)
            </param>
            <param name="start">number of documents that should be skipped. By default: 0.</param>
            <param name="pageSize">maximum number of documents that will be retrieved. By default: 25.</param>
            <param name="pagingInformation">used to perform rapid pagination on a server side</param>
            <param name="exclude">
                pipe ('|') separated values for which document keys (after 'keyPrefix') should not be matched
                ('?' any single character, '*' any characters)
            </param>
            <param name="skipAfter">
                skip document fetching until given key is found and return documents after that key (default:
                null)
            </param>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.LoadStartingWithAsync``2(System.String,System.String,System.Int32,System.Int32,System.String,Raven.Client.RavenPagingInformation,System.Action{Raven.Client.ILoadConfiguration},System.String,System.Threading.CancellationToken)">
            <summary>
                Loads multiple entities that contain common prefix and applies specified transformer.
            </summary>
            <param name="keyPrefix">prefix for which documents should be returned e.g. "products/"</param>
            <param name="matches">
                pipe ('|') separated values for which document keys (after 'keyPrefix') should be matched ('?'
                any single character, '*' any characters)
            </param>
            <param name="start">number of documents that should be skipped. By default: 0.</param>
            <param name="pageSize">maximum number of documents that will be retrieved. By default: 25.</param>
            <param name="pagingInformation">used to perform rapid pagination on a server side</param>
            <param name="exclude">
                pipe ('|') separated values for which document keys (after 'keyPrefix') should not be matched
                ('?' any single character, '*' any characters)
            </param>
            <param name="configure">additional configuration options for operation e.g. AddTransformerParameter</param>
            <param name="skipAfter">
                skip document fetching until given key is found and return documents after that key (default:
                null)
            </param>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.RefreshAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
                Updates entity with latest changes from server
            </summary>
            <param name="entity">Instance of an entity that will be refreshed</param>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.Store(System.Object,Raven.Abstractions.Data.Etag)">
            <summary>
                Stores entity in session, extracts Id from entity using Conventions or generates new one if it is not available and
                forces concurrency check with given Etag
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.Store(System.Object,Raven.Abstractions.Data.Etag,System.String)">
            <summary>
                Stores entity in session with given id and forces concurrency check with given Etag.
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.Store(System.Object)">
            <summary>
                Stores entity in session, extracts Id from entity using Conventions or generates new one if it is not available.
                <para>Forces concurrency check if the Id is not available during extraction.</para>
            </summary>
            <param name="entity">entity to store.</param>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.Store(System.Object,System.String)">
            <summary>
                Stores the specified dynamic entity, under the specified id.
            </summary>
            <param name="entity">entity to store.</param>
            <param name="id">Id to store this entity under. If other entity exists with the same id it will be overridden.</param>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.StreamAsync``1(Raven.Client.IAsyncDocumentQuery{``0},System.Threading.CancellationToken)">
            <summary>
                Stream the results on the query to the client, converting them to
                CLR types along the way.
                <para>Does NOT track the entities in the session, and will not includes changes there when SaveChanges() is called</para>
            </summary>
            <param name="query">Query to stream results for</param>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.StreamAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Stream the results on the query to the client, converting them to
                CLR types along the way.
                <para>Does NOT track the entities in the session, and will not includes changes there when SaveChanges() is called</para>
            </summary>
            <param name="query">Query to stream results for</param>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.StreamAsync``1(Raven.Client.IAsyncDocumentQuery{``0},Raven.Abstractions.Extensions.Reference{Raven.Abstractions.Data.QueryHeaderInformation},System.Threading.CancellationToken)">
            <summary>
                Stream the results on the query to the client, converting them to
                CLR types along the way.
                <para>Does NOT track the entities in the session, and will not includes changes there when SaveChanges() is called</para>
            </summary>
            <param name="query">Query to stream results for</param>
            <param name="queryHeaderInformation">Information about performed query</param>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.StreamAsync``1(System.Linq.IQueryable{``0},Raven.Abstractions.Extensions.Reference{Raven.Abstractions.Data.QueryHeaderInformation},System.Threading.CancellationToken)">
            <summary>
                Stream the results on the query to the client, converting them to
                CLR types along the way.
                <para>Does NOT track the entities in the session, and will not includes changes there when SaveChanges() is called</para>
            </summary>
            <param name="query">Query to stream results for</param>
            <param name="queryHeaderInformation">Information about performed query</param>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.StreamAsync``1(Raven.Abstractions.Data.Etag,System.Int32,System.Int32,Raven.Client.RavenPagingInformation,System.Threading.CancellationToken)">
            <summary>
                Stream the results of documents search to the client, converting them to CLR types along the way.
                <para>Does NOT track the entities in the session, and will not includes changes there when SaveChanges() is called</para>
            </summary>
            <param name="fromEtag">ETag of a document from which stream should start</param>
            <param name="start">number of documents that should be skipped</param>
            <param name="pageSize">maximum number of documents that will be retrieved</param>
            <param name="pagingInformation">used to perform rapid pagination on a server side</param>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.StreamAsync``1(System.String,System.String,System.Int32,System.Int32,Raven.Client.RavenPagingInformation,System.String,System.Threading.CancellationToken)">
            <summary>
                Stream the results of documents search to the client, converting them to CLR types along the way.
                <para>Does NOT track the entities in the session, and will not includes changes there when SaveChanges() is called</para>
            </summary>
            <param name="startsWith">prefix for which documents should be returned e.g. "products/"</param>
            <param name="matches">
                pipe ('|') separated values for which document keys (after 'keyPrefix') should be matched ('?'
                any single character, '*' any characters)
            </param>
            <param name="start">number of documents that should be skipped</param>
            <param name="pageSize">maximum number of documents that will be retrieved</param>
            <param name="pagingInformation">used to perform rapid pagination on a server side</param>
            <param name="skipAfter">
                skip document fetching until given key is found and return documents after that key (default:
                null)
            </param>
        </member>
        <member name="P:Raven.Client.IAsyncAdvancedSessionOperations.Eagerly">
            <summary>
                Access the eager operations
            </summary>
        </member>
        <member name="P:Raven.Client.IAsyncAdvancedSessionOperations.Lazily">
            <summary>
                Access the lazy operations
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.IDocumentQueryGenerator">
            <summary>
             Generate a new document query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IDocumentQueryGenerator.Query``1(System.String,System.Boolean)">
            <summary>
            Create a new query for <typeparam name="T"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IDocumentQueryGenerator.AsyncQuery``1(System.String,System.Boolean)">
            <summary>
            Create a new query for <typeparam name="T"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IDocumentQueryGenerator.CreateRavenQueryInspector``1">
            <summary>
            Generates a query inspector
            </summary>
            <returns>RavenQueryInspector object</returns>
        </member>
        <member name="P:Raven.Client.Linq.IDocumentQueryGenerator.Conventions">
            <summary>
            Gets the conventions associated with this query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.#ctor(System.String,Raven.Client.Document.DocumentStore,Raven.Client.Connection.Async.IAsyncDatabaseCommands,Raven.Client.Document.DocumentSessionListeners,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.Async.AsyncDocumentSession"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Raven#Client#Document#Batches#IAsyncLazySessionOperations#Include(System.String)">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Raven#Client#Document#Batches#IAsyncLazySessionOperations#Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Raven#Client#Document#Batches#IAsyncLazySessionOperations#LoadAsync``1(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Loads the specified ids.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Raven#Client#Document#Batches#IAsyncLazySessionOperations#LoadAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Loads the specified id.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadAsync``1(System.Collections.Generic.IEnumerable{System.String},System.Action{``0[]},System.Threading.CancellationToken)">
            <summary>
            Loads the specified ids and a function to call when it is evaluated
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadAsync``1(System.String,System.Action{``0},System.Threading.CancellationToken)">
            <summary>
            Loads the specified id and a function to call when it is evaluated
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Raven#Client#Document#Batches#IAsyncLazySessionOperations#LoadAsync``1(System.ValueType,System.Action{``0},System.Threading.CancellationToken)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Raven#Client#Document#Batches#IAsyncLazySessionOperations#LoadAsync``1(System.ValueType,System.Threading.CancellationToken)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LazyLoadInternal``1(System.String[],System.Collections.Generic.KeyValuePair{System.String,System.Type}[],System.Action{``0[]},System.Threading.CancellationToken)">
            <summary>
            Register to lazily load documents and include
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadStartingWithAsync``1(System.String,System.String,System.Int32,System.Int32,System.String,Raven.Client.RavenPagingInformation,System.String,System.Threading.CancellationToken)">
            <summary>
            Load documents with the specified key prefix
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.AsyncLuceneQuery``2">
            <summary>
            Queries the index specified by <typeparamref name="TIndexCreator"/> using lucene syntax.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.AsyncDocumentQuery``2">
            <summary>
            Queries the index specified by <typeparamref name="TIndexCreator"/> using lucene syntax.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.AsyncLuceneQuery``1(System.String,System.Boolean)">
            <summary>
            Query the specified index using Lucene syntax
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.AsyncDocumentQuery``1(System.String,System.Boolean)">
            <summary>
            Query the specified index using Lucene syntax
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.AsyncLuceneQuery``1">
            <summary>
            Dynamically query RavenDB using Lucene syntax
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.AsyncDocumentQuery``1">
            <summary>
            Dynamically query RavenDB using Lucene syntax
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Include(System.String)">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Include``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadAsync``1(System.ValueType,System.Threading.CancellationToken)">
            <summary>
            Begins the async load operation, with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(1)
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadAsync``1(System.Threading.CancellationToken,System.ValueType[])">
            <summary>
            Begins the async multi-load operation, with the specified ids after applying
            conventions on the provided ids to get the real document ids.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(1,2,3)
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadAsync``1(System.Collections.Generic.IEnumerable{System.ValueType})">
            <summary>
            Begins the async multi-load operation, with the specified ids after applying
            conventions on the provided ids to get the real document ids.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(new List&lt;int&gt;(){1,2,3})
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadAsync``1(System.Collections.Generic.IEnumerable{System.ValueType},System.Threading.CancellationToken)">
            <summary>
            Begins the async multi-load operation, with the specified ids after applying
            conventions on the provided ids to get the real document ids.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(new List&lt;int&gt;(){1,2,3})
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Begins the async load operation
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadAsyncInternal``1(System.String[],System.Collections.Generic.KeyValuePair{System.String,System.Type}[],System.Threading.CancellationToken)">
            <summary>
            Begins the async multi load operation
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            Begins the async save changes operation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.GetJsonDocument(System.String)">
            <summary>
            Get the json document by key from the store
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Commit(System.String)">
            <summary>
            Commits the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Rollback(System.String)">
            <summary>
            Rollbacks the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Query``1">
            <summary>
            Dynamically queries RavenDB using LINQ
            </summary>
            <typeparam name="T">The result of the query</typeparam>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Raven#Client#Linq#IDocumentQueryGenerator#Query``1(System.String,System.Boolean)">
            <summary>
            Create a new query for <typeparam name="T"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.AsyncQuery``1(System.String,System.Boolean)">
            <summary>
            Create a new query for <typeparam name="T"/>
            </summary>
        </member>
        <member name="P:Raven.Client.Document.Async.AsyncDocumentSession.AsyncDatabaseCommands">
            <summary>
            Gets the async database commands.
            </summary>
            <value>The async database commands.</value>
        </member>
        <member name="P:Raven.Client.Document.Async.AsyncDocumentSession.Lazily">
            <summary>
            Access the lazy operations
            </summary>
        </member>
        <member name="P:Raven.Client.Document.Async.AsyncDocumentSession.Eagerly">
            <summary>
            Access the eager operations
            </summary>
        </member>
        <member name="P:Raven.Client.Document.Async.AsyncDocumentSession.Advanced">
            <summary>
            Get the accessor for advanced operations
            </summary>
            <remarks>
            Those operations are rarely needed, and have been moved to a separate 
            property to avoid cluttering the API
            </remarks>
        </member>
        <member name="T:Raven.Client.Document.AsyncMultiLoaderWithInclude`1">
            <summary>
            Fluent implementation for specifying include paths for loading documents
            </summary>
        </member>
        <member name="T:Raven.Client.Document.IAsyncLoaderWithInclude`1">
            <summary>
            Fluent interface for specifying include paths
            for loading documents
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.Include(System.String)">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.LoadAsync(System.String[])">
            <summary>
            Begins the async multi-load operation
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.LoadAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Begins the async multi-load operation
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.LoadAsync(System.String)">
            <summary>
            Begins the async load operation
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.LoadAsync(System.ValueType)">
            <summary>
            Begins the async load operation, with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(1)
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.LoadAsync(System.ValueType[])">
            <summary>
            Begins the async multi-load operation, with the specified ids after applying
            conventions on the provided ids to get the real document ids.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(1,2,3)
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.LoadAsync(System.Collections.Generic.IEnumerable{System.ValueType})">
            <summary>
            Begins the async multi-load operation, with the specified ids after applying
            conventions on the provided ids to get the real document ids.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(new List&lt;int&gt;(){1,2,3})
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.LoadAsync``1(System.String[])">
            <summary>
            Begins the async multi-load operation
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.LoadAsync``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Begins the async multi-load operation
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.LoadAsync``1(System.String)">
            <summary>
            Begins the async load operation
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.LoadAsync``1(System.ValueType)">
            <summary>
            Begins the async load operation, with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(1)
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.LoadAsync``1(System.ValueType[])">
            <summary>
            Begins the async multi-load operation, with the specified ids after applying
            conventions on the provided ids to get the real document ids.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(1,2,3)
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.LoadAsync``1(System.Collections.Generic.IEnumerable{System.ValueType})">
            <summary>
            Begins the async multi-load operation, with the specified ids after applying
            conventions on the provided ids to get the real document ids.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(new List&lt;int&gt;(){1,2,3})
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.Include(System.String)">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.Include``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.LoadAsync(System.String[])">
            <summary>
            Begins the async multi-load operation
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.LoadAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Begins the async multi-load operation
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.LoadAsync(System.String)">
            <summary>
            Begins the async load operation
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.LoadAsync(System.ValueType)">
            <summary>
            Begins the async load operation, with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(1)
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.LoadAsync(System.ValueType[])">
            <summary>
            Begins the async multi-load operation, with the specified ids after applying
            conventions on the provided ids to get the real document ids.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(1,2,3)
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.LoadAsync(System.Collections.Generic.IEnumerable{System.ValueType})">
            <summary>
            Begins the async multi-load operation, with the specified ids after applying
            conventions on the provided ids to get the real document ids.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(new List&lt;int&gt;(){1,2,3})
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.#ctor(Raven.Client.IAsyncDocumentSessionImpl)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.AsyncMultiLoaderWithInclude`1"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.LoadAsync``1(System.String[])">
            <summary>
            Begins the async multi-load operation
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.LoadAsync``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Begins the async multi-load operation
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.LoadAsync``1(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="id">The id.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.LoadAsync``1(System.ValueType)">
            <summary>
            Begins the async load operation, with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(1)
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.LoadAsync``1(System.ValueType[])">
            <summary>
            Begins the async multi-load operation, with the specified ids after applying
            conventions on the provided ids to get the real document ids.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(1,2,3)
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.LoadAsync``1(System.Collections.Generic.IEnumerable{System.ValueType})">
            <summary>
            Begins the async multi-load operation, with the specified ids after applying
            conventions on the provided ids to get the real document ids.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(new List&lt;int&gt;(){1,2,3})
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="T:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1">
            <summary>
                Fluent interface for specifying include paths
                for loading documents lazily
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Include(System.String)">
            <summary>
                Begin a load while including the specified path
            </summary>
            <param name="path">Path in documents in which server should look for a 'referenced' documents.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Begin a load while including the specified path
            </summary>
            <param name="path">Path in documents in which server should look for a 'referenced' documents.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load(System.String[])">
            <summary>
                Loads the specified entities with the specified ids.
            </summary>
            <param name="ids">Enumerable of Ids that should be loaded</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Loads the specified entities with the specified ids.
            </summary>
            <param name="ids">Enumerable of Ids that should be loaded</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load(System.String)">
            <summary>
                Loads the specified entity with the specified id.
            </summary>
            <param name="id">Identifier of a entity that will be loaded.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load(System.ValueType)">
            <summary>
                Loads the specified entity with the specified id after applying
                conventions on the provided id to get the real document id.
                <para>This method allows you to call:</para>
                <para>Load&lt;Post&gt;(1)</para>
                <para>And that call will internally be translated to </para>
                <para>Load&lt;Post&gt;("posts/1");</para>
                <para>Or whatever your conventions specify.</para>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load(System.ValueType[])">
            <summary>
                Loads the specified entities with the specified ids after applying
                conventions on the provided id to get the real document id.
                <para>This method allows you to call:</para>
                <para>Load&lt;Post&gt;(1, 2, 3)</para>
                <para>And that call will internally be translated to </para>
                <para>Load&lt;Post&gt;("posts/1", "posts/2", "posts/3");</para>
                <para>Or whatever your conventions specify.</para>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load(System.Collections.Generic.IEnumerable{System.ValueType})">
            <summary>
                Loads the specified entities with the specified ids after applying
                conventions on the provided id to get the real document id.
                <para>This method allows you to call:</para>
                <para>Load&lt;Post&gt;(1, 2, 3)</para>
                <para>And that call will internally be translated to </para>
                <para>Load&lt;Post&gt;("posts/1", "posts/2", "posts/3");</para>
                <para>Or whatever your conventions specify.</para>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load``1(System.String[])">
            <summary>
                Loads the specified entities with the specified ids.
            </summary>
            <param name="ids">Enumerable of Ids that should be loaded</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Loads the specified entities with the specified ids.
            </summary>
            <param name="ids">Enumerable of Ids that should be loaded</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load``1(System.String)">
            <summary>
                Loads the specified entity with the specified id.
            </summary>
            <param name="id">Identifier of a entity that will be loaded.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load``1(System.ValueType)">
            <summary>
                Loads the specified entity with the specified id after applying
                conventions on the provided id to get the real document id.
                <para>This method allows you to call:</para>
                <para>Load&lt;Post&gt;(1)</para>
                <para>And that call will internally be translated to </para>
                <para>Load&lt;Post&gt;("posts/1");</para>
                <para>Or whatever your conventions specify.</para>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load``1(System.ValueType[])">
            <summary>
                Loads the specified entities with the specified ids after applying
                conventions on the provided id to get the real document id.
                <para>This method allows you to call:</para>
                <para>Load&lt;Post&gt;(1, 2, 3)</para>
                <para>And that call will internally be translated to </para>
                <para>Load&lt;Post&gt;("posts/1", "posts/2", "posts/3");</para>
                <para>Or whatever your conventions specify.</para>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load``1(System.Collections.Generic.IEnumerable{System.ValueType})">
            <summary>
                Loads the specified entities with the specified ids after applying
                conventions on the provided id to get the real document id.
                <para>This method allows you to call:</para>
                <para>Load&lt;Post&gt;(1, 2, 3)</para>
                <para>And that call will internally be translated to </para>
                <para>Load&lt;Post&gt;("posts/1", "posts/2", "posts/3");</para>
                <para>Or whatever your conventions specify.</para>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncLazyLoaderWithInclude`1.Include(System.String)">
            <summary>
                Begin a load while including the specified path
            </summary>
            <param name="path">Path in documents in which server should look for a 'referenced' documents.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncLazyLoaderWithInclude`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Begin a load while including the specified path
            </summary>
            <param name="path">Path in documents in which server should look for a 'referenced' documents.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncLazyLoaderWithInclude`1.LoadAsync(System.String[])">
            <summary>
                Loads the specified entities with the specified ids.
            </summary>
            <param name="ids">Enumerable of Ids that should be loaded</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncLazyLoaderWithInclude`1.LoadAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Loads the specified entities with the specified ids.
            </summary>
            <param name="ids">Enumerable of Ids that should be loaded</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncLazyLoaderWithInclude`1.LoadAsync(System.String)">
            <summary>
                Loads the specified entity with the specified id.
            </summary>
            <param name="id">Identifier of a entity that will be loaded.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncLazyLoaderWithInclude`1.LoadAsync(System.ValueType)">
            <summary>
                Loads the specified entity with the specified id after applying
                conventions on the provided id to get the real document id.
                <para>This method allows you to call:</para>
                <para>Load&lt;Post&gt;(1)</para>
                <para>And that call will internally be translated to </para>
                <para>Load&lt;Post&gt;("posts/1");</para>
                <para>Or whatever your conventions specify.</para>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncLazyLoaderWithInclude`1.LoadAsync(System.ValueType[])">
            <summary>
                Loads the specified entities with the specified ids after applying
                conventions on the provided id to get the real document id.
                <para>This method allows you to call:</para>
                <para>Load&lt;Post&gt;(1, 2, 3)</para>
                <para>And that call will internally be translated to </para>
                <para>Load&lt;Post&gt;("posts/1", "posts/2", "posts/3");</para>
                <para>Or whatever your conventions specify.</para>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncLazyLoaderWithInclude`1.LoadAsync(System.Collections.Generic.IEnumerable{System.ValueType})">
            <summary>
                Loads the specified entities with the specified ids after applying
                conventions on the provided id to get the real document id.
                <para>This method allows you to call:</para>
                <para>Load&lt;Post&gt;(1, 2, 3)</para>
                <para>And that call will internally be translated to </para>
                <para>Load&lt;Post&gt;("posts/1", "posts/2", "posts/3");</para>
                <para>Or whatever your conventions specify.</para>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncLazyLoaderWithInclude`1.LoadAsync``1(System.String[])">
            <summary>
                Loads the specified entities with the specified ids.
            </summary>
            <param name="ids">Enumerable of Ids that should be loaded</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncLazyLoaderWithInclude`1.LoadAsync``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Loads the specified entities with the specified ids.
            </summary>
            <param name="ids">Enumerable of Ids that should be loaded</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncLazyLoaderWithInclude`1.LoadAsync``1(System.String)">
            <summary>
                Loads the specified entity with the specified id.
            </summary>
            <param name="id">Identifier of a entity that will be loaded.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncLazyLoaderWithInclude`1.LoadAsync``1(System.ValueType)">
            <summary>
                Loads the specified entity with the specified id after applying
                conventions on the provided id to get the real document id.
                <para>This method allows you to call:</para>
                <para>Load&lt;Post&gt;(1)</para>
                <para>And that call will internally be translated to </para>
                <para>Load&lt;Post&gt;("posts/1");</para>
                <para>Or whatever your conventions specify.</para>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncLazyLoaderWithInclude`1.LoadAsync``1(System.ValueType[])">
            <summary>
                Loads the specified entities with the specified ids after applying
                conventions on the provided id to get the real document id.
                <para>This method allows you to call:</para>
                <para>Load&lt;Post&gt;(1, 2, 3)</para>
                <para>And that call will internally be translated to </para>
                <para>Load&lt;Post&gt;("posts/1", "posts/2", "posts/3");</para>
                <para>Or whatever your conventions specify.</para>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.IAsyncLazyLoaderWithInclude`1.LoadAsync``1(System.Collections.Generic.IEnumerable{System.ValueType})">
            <summary>
                Loads the specified entities with the specified ids after applying
                conventions on the provided id to get the real document id.
                <para>This method allows you to call:</para>
                <para>Load&lt;Post&gt;(1, 2, 3)</para>
                <para>And that call will internally be translated to </para>
                <para>Load&lt;Post&gt;("posts/1", "posts/2", "posts/3");</para>
                <para>Or whatever your conventions specify.</para>
            </summary>
        </member>
        <member name="T:Raven.Client.Document.Batches.ILazySessionOperations">
            <summary>
                Specify interface for lazy operation for the session
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Include(System.String)">
            <summary>
                Begin a load while including the specified path
            </summary>
            <param name="path">Path in documents in which server should look for a 'referenced' documents.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Begin a load while including the specified path
            </summary>
            <param name="path">Path in documents in which server should look for a 'referenced' documents.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Loads the specified entities with the specified ids.
            </summary>
            <param name="ids">Enumerable of Ids that should be loaded</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.Collections.Generic.IEnumerable{System.String},System.Action{``0[]})">
            <summary>
                Loads the specified entities with the specified ids and a function to call when it is evaluated
            </summary>
            <param name="ids">Enumerable of Ids that should be loaded</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.String)">
            <summary>
                Loads the specified entity with the specified id.
            </summary>
            <param name="id">Identifier of a entity that will be loaded.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.String,System.Action{``0})">
            <summary>
                Loads the specified entity with the specified id and a function to call when it is evaluated
            </summary>
            <param name="id">Identifier of a entity that will be loaded.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.ValueType)">
            <summary>
                Loads the specified entity with the specified id after applying
                conventions on the provided id to get the real document id.
                <para>This method allows you to call:</para>
                <para>Load&lt;Post&gt;(1)</para>
                <para>And that call will internally be translated to </para>
                <para>Load&lt;Post&gt;("posts/1");</para>
                <para>Or whatever your conventions specify.</para>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.ValueType,System.Action{``0})">
            <summary>
                Loads the specified entity with the specified id after applying
                conventions on the provided id to get the real document id.
                <para>This method allows you to call:</para>
                <para>Load&lt;Post&gt;(1)</para>
                <para>And that call will internally be translated to </para>
                <para>Load&lt;Post&gt;("posts/1");</para>
                <para>Or whatever your conventions specify.</para>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.ValueType[])">
            <summary>
                Loads the specified entities with the specified ids after applying
                conventions on the provided id to get the real document id.
                <para>This method allows you to call:</para>
                <para>Load&lt;Post&gt;(1, 2, 3)</para>
                <para>And that call will internally be translated to </para>
                <para>Load&lt;Post&gt;("posts/1", "posts/2", "posts/3");</para>
                <para>Or whatever your conventions specify.</para>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.Collections.Generic.IEnumerable{System.ValueType})">
            <summary>
                Loads the specified entities with the specified ids after applying
                conventions on the provided id to get the real document id.
                <para>This method allows you to call:</para>
                <para>Load&lt;Post&gt;(1, 2, 3)</para>
                <para>And that call will internally be translated to </para>
                <para>Load&lt;Post&gt;("posts/1", "posts/2", "posts/3");</para>
                <para>Or whatever your conventions specify.</para>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.Collections.Generic.IEnumerable{System.ValueType},System.Action{``0[]})">
            <summary>
                Loads the specified entities with the specified ids after applying
                conventions on the provided id to get the real document id.
                <para>This method allows you to call:</para>
                <para>Load&lt;Post&gt;(1, 2, 3)</para>
                <para>And that call will internally be translated to </para>
                <para>Load&lt;Post&gt;("posts/1", "posts/2", "posts/3");</para>
                <para>Or whatever your conventions specify.</para>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``2(System.String,System.Action{Raven.Client.ILoadConfiguration},System.Action{``1})">
            <summary>
                Performs a load that will use the specified results transformer against the specified id
            </summary>
            <typeparam name="TTransformer">The transformer to use in this load operation</typeparam>
            <typeparam name="TResult">The results shape to return after the load operation</typeparam>
            <param name="id">Id of a document to load</param>
            <param name="configure">additional configuration options for operation e.g. AddTransformerParameter</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.String,System.Type,System.Action{Raven.Client.ILoadConfiguration},System.Action{``0})">
            <summary>
                Performs a load that will use the specified results transformer against the specified id
            </summary>
            <typeparam name="TResult">The results shape to return after the load operation</typeparam>
            <param name="id">Id of a entity to load</param>
            <param name="transformerType">The transformer to use in this load operation</param>
            <param name="configure">additional configuration options for operation e.g. AddTransformerParameter</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``2(System.Collections.Generic.IEnumerable{System.String},System.Action{Raven.Client.ILoadConfiguration},System.Action{``1})">
            <summary>
                Performs a load that will use the specified results transformer against the specified id
            </summary>
            <typeparam name="TTransformer">The transformer to use in this load operation</typeparam>
            <typeparam name="TResult">The results shape to return after the load operation</typeparam>
            <param name="ids">Enumerable of ids of documents to load</param>
            <param name="configure">additional configuration options for operation e.g. AddTransformerParameter</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.Collections.Generic.IEnumerable{System.String},System.Type,System.Action{Raven.Client.ILoadConfiguration},System.Action{``0})">
            <summary>
                Performs a load that will use the specified results transformer against the specified ids
            </summary>
            <typeparam name="TResult">The results shape to return after the load operation</typeparam>
            <param name="ids">Enumerable of ids of documents to load</param>
            <param name="transformerType">The transformer to use in this load operation</param>
            <param name="configure">additional configuration options for operation e.g. AddTransformerParameter</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.LoadStartingWith``1(System.String,System.String,System.Int32,System.Int32,System.String,Raven.Client.RavenPagingInformation,System.String)">
            <summary>
                Loads multiple entities that contain common prefix.
            </summary>
            <param name="keyPrefix">prefix for which documents should be returned e.g. "products/"</param>
            <param name="matches">
                pipe ('|') separated values for which document keys (after 'keyPrefix') should be matched ('?'
                any single character, '*' any characters)
            </param>
            <param name="start">number of documents that should be skipped. By default: 0.</param>
            <param name="pageSize">maximum number of documents that will be retrieved. By default: 25.</param>
            <param name="pagingInformation">used to perform rapid pagination on a server side</param>
            <param name="exclude">
                pipe ('|') separated values for which document keys (after 'keyPrefix') should not be matched
                ('?' any single character, '*' any characters)
            </param>
            <param name="skipAfter">
                skip document fetching until given key is found and return documents after that key (default:
                null)
            </param>
        </member>
        <member name="T:Raven.Client.Document.Batches.IEagerSessionOperations">
            <summary>
                Allow to perform eager operations on the session
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.IEagerSessionOperations.ExecuteAllPendingLazyOperations">
            <summary>
                Execute all the lazy requests pending within this session
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.#ctor(Raven.Client.IDocumentSessionImpl)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.Include(System.String)">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.Load(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.Load(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.Load(System.String)">
            <summary>
            Loads the specified id.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.Load(System.ValueType)">
            <summary>
            Loads the specified entity with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.Load(System.ValueType[])">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1,2,3)
            And that call will internally be translated to 
            Load{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.Load(System.Collections.Generic.IEnumerable{System.ValueType})">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(new List&lt;int&gt;(){1,2,3})
            And that call will internally be translated to 
            Load{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.Load``1(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.Load``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.Load``1(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="id">The id.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.Load``1(System.ValueType)">
            <summary>
            Loads the specified entity with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Batches.AsyncLazyMultiLoaderWithInclude`1.#ctor(Raven.Client.IAsyncDocumentSessionImpl)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.AsyncLazyMultiLoaderWithInclude`1.Include(System.String)">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.AsyncLazyMultiLoaderWithInclude`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.AsyncLazyMultiLoaderWithInclude`1.LoadAsync(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.AsyncLazyMultiLoaderWithInclude`1.LoadAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Batches.AsyncLazyMultiLoaderWithInclude`1.LoadAsync(System.String)">
            <summary>
            Loads the specified id.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.AsyncLazyMultiLoaderWithInclude`1.LoadAsync(System.ValueType)">
            <summary>
            Loads the specified entity with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Batches.AsyncLazyMultiLoaderWithInclude`1.LoadAsync(System.ValueType[])">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1,2,3)
            And that call will internally be translated to 
            Load{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Batches.AsyncLazyMultiLoaderWithInclude`1.LoadAsync(System.Collections.Generic.IEnumerable{System.ValueType})">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(new List&lt;int&gt;(){1,2,3})
            And that call will internally be translated to 
            Load{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Batches.AsyncLazyMultiLoaderWithInclude`1.LoadAsync``1(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.AsyncLazyMultiLoaderWithInclude`1.LoadAsync``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Batches.AsyncLazyMultiLoaderWithInclude`1.LoadAsync``1(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="id">The id.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.AsyncLazyMultiLoaderWithInclude`1.LoadAsync``1(System.ValueType)">
            <summary>
            Loads the specified entity with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="T:Raven.Client.Document.DefaultRavenContractResolver">
            <summary>
            The default json contract will serialize all properties and all public fields
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DefaultRavenContractResolver.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DefaultRavenContractResolver"/> class.
            </summary>
            <param name="shareCache">If set to <c>true</c> the <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver"/> will use a cached shared with other resolvers of the same type.
            Sharing the cache will significantly performance because expensive reflection will only happen once but could cause unexpected
            behavior if different instances of the resolver are suppose to produce different results. When set to false it is highly
            recommended to reuse <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver"/> instances with the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/>.</param>
        </member>
        <member name="M:Raven.Client.Document.DefaultRavenContractResolver.GetSerializableMembers(System.Type)">
            <summary>
            Gets the serializable members for the type.
            </summary>
            <param name="objectType">The type to get serializable members for.</param>
            <returns>The serializable members for the type.</returns>
        </member>
        <member name="T:Raven.Client.Document.DocumentConvention">
            <summary>
            The set of conventions used by the <see cref="T:Raven.Client.Document.DocumentStore"/> which allow the users to customize
            the way the Raven client API behaves
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentConvention"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.DefaultFindFullDocumentKeyFromNonStringIdentifier(System.Object,System.Type,System.Boolean)">
            <summary>
             Find the full document name assuming that we are using the standard conventions
             for generating a document key
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.TryGetDocumentIdFromRegisteredIdLoadConventions``1(System.ValueType)">
            <summary>
            Tries to get the full document id/key from a "simple" id to the full id.
            </summary>
            <param name="id">Simple id.</param>
            <returns>The full document id, null if no registered id load conventions found</returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.TryGetDocumentIdFromRegisteredIdLoadConventions(System.ValueType,System.Type)">
            <summary>
            Tries to get the full document id/key from a "simple" id to the full id.
            </summary>
            <param name="id">Simple id.</param>
            <param name="type">Document type</param>
            <returns>Full document id, null if no registered id load conventions found</returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GenerateDocumentKeyUsingIdentity(Raven.Client.Document.DocumentConvention,System.Object)">
            <summary>
            Generates the document key using identity.
            </summary>
            <param name="conventions">The conventions.</param>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.DefaultTypeTagName(System.Type)">
            <summary>
            Get the default tag name for the specified type.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GetTypeTagName(System.Type)">
            <summary>
            Gets the name of the type tag.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GetDynamicTagName(System.Object)">
            <summary>
            If object is dynamic, try to load a tag name.
            </summary>
            <param name="entity">Current entity.</param>
            <returns>Dynamic tag name if available.</returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GenerateDocumentKey(System.String,Raven.Client.Connection.IDatabaseCommands,System.Object)">
            <summary>
            Generates the document key.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.RegisterIdConvention``1(System.Func{System.String,Raven.Client.Connection.IDatabaseCommands,``0,System.String})">
            <summary>
            Register an id convention for a single type (and all of its derived types.
            Note that you can still fall back to the DocumentKeyGenerator if you want.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.RegisterAsyncIdConvention``1(System.Func{System.String,Raven.Client.Connection.Async.IAsyncDatabaseCommands,``0,System.Threading.Tasks.Task{System.String}})">
            <summary>
            Register an async id convention for a single type (and all of its derived types.
            Note that you can still fall back to the DocumentKeyGenerator if you want.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.RegisterIdLoadConvention``1(System.Func{System.ValueType,System.String})">
            <summary>
            Register an id convention for a single type (and all its derived types) to be used when calling session.Load{TEntity}(TId id)
            It is used by the default implementation of FindFullDocumentKeyFromNonStringIdentifier.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.CreateSerializer">
            <summary>
            Creates the serializer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GetClrType(System.String,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Get the CLR type (if exists) from the document
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GetClrTypeName(System.Type)">
            <summary>
             Get the CLR type name to be stored in the entity metadata
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.Clone">
            <summary>
            Clone the current conventions to a new instance
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.CustomizeJsonSerializer">
            <summary>
            Register an action to customize the json serializer used by the <see cref="T:Raven.Client.Document.DocumentStore"/>
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.DisableProfiling">
            <summary>
            Disable all profiling support
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.IdentityTypeConvertors">
            <summary>
             A list of type converters that can be used to translate the document key (string)
             to whatever type it is that is used on the entity, if the type isn't already a string
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.MaxNumberOfRequestsPerSession">
            <summary>
            Gets or sets the max length of Url of GET requests.
            </summary>
            <value>The max number of requests per session.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.MaxLengthOfQueryUsingGetUrl">
            <summary>
            Gets or sets the default max length of a query using the GET method against a server.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.AllowQueriesOnId">
            <summary>
            Whatever to allow queries on document id.
            By default, queries on id are disabled, because it is far more efficient
            to do a Load() than a Query() if you already know the id.
            This is NOT recommended and provided for backward compatibility purposes only.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.DefaultQueryingConsistency">
            <summary>
            The consistency options used when querying the database by default
            Note that this option impact only queries, since we have Strong Consistency model for the documents
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.DefaultUseOptimisticConcurrency">
            <summary>
            Whether UseOptimisticConcurrency is set to true by default for all opened sessions
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindClrType">
            <summary>
            Gets or sets the function to find the clr type of a document.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindClrTypeName">
            <summary>
            Gets or sets the function to find the clr type name from a clr type
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindFullDocumentKeyFromNonStringIdentifier">
            <summary>
            Gets or sets the function to find the full document key based on the type of a document
            and the value type identifier (just the numeric part of the id).
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.JsonContractResolver">
            <summary>
            Gets or sets the json contract resolver.
            </summary>
            <value>The json contract resolver.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindTypeTagName">
            <summary>
            Gets or sets the function to find the type tag.
            </summary>
            <value>The name of the find type tag.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindDynamicTagName">
            <summary>
            Gets or sets the function to find the tag name if the object is dynamic.
            </summary>
            <value>The tag name.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindPropertyNameForIndex">
            <summary>
            Gets or sets the function to find the indexed property name
            given the indexed document type, the index name, the current path and the property path.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindPropertyNameForDynamicIndex">
            <summary>
            Gets or sets the function to find the indexed property name
            given the indexed document type, the index name, the current path and the property path.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindIdentityPropertyNameFromEntityName">
            <summary>
            Get or sets the function to get the identity property name from the entity name
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.DocumentKeyGenerator">
            <summary>
            Gets or sets the document key generator.
            </summary>
            <value>The document key generator.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.AsyncDocumentKeyGenerator">
            <summary>
            Gets or sets the document key generator.
            </summary>
            <value>The document key generator.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.UseParallelMultiGet">
            <summary>
            Instruct RavenDB to parallel Multi Get processing 
            when handling lazy requests
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.ShouldAggressiveCacheTrackChanges">
            <summary>
            Whatever or not RavenDB should in the aggressive cache mode use Changes API to track
            changes and rebuild the cache. This will make that outdated data will be revalidated
            to make the cache more updated, however it is still possible to get a state result because of the time
            needed to receive the notification and forcing to check for cached data.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.ShouldSaveChangesForceAggressiveCacheCheck">
            <summary>
            Whatever or not RavenDB should in the aggressive cache mode should force the aggressive cache
            to check with the server after we called SaveChanges() on a non empty data set.
            This will make any outdated data revalidated, and will work nicely as long as you have just a 
            single client. For multiple clients, <see cref="P:Raven.Client.Document.DocumentConvention.ShouldAggressiveCacheTrackChanges"/>.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindIdValuePartForValueTypeConversion">
            <summary>
            When RavenDB needs to convert between a string id to a value type like int or guid, it calls
            this to perform the actual work
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.TransformTypeTagNameToDocumentKeyPrefix">
            <summary>
            Translate the type tag name to the document key prefix
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.EnlistInDistributedTransactions">
            <summary>
             Whatever or not RavenDB will automatically enlist in distributed transactions
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.ApplyReduceFunction">
            <summary>
            This is called in order to ensure that reduce function in a sharded environment is run 
            over the merged results
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.ReplicationInformerFactory">
            <summary>
            This is called to provide replication behavior for the client. You can customize 
            this to inject your own replication / failover logic.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.PrettifyGeneratedLinqExpressions">
            <summary>
             Attempts to prettify the generated linq expressions for indexes and transformers
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.IndexAndTransformerReplicationMode">
            <summary>
            How index and transformer updates should be handled in replicated setup.
            Defaults to <see cref="!:Document.IndexAndTransformerReplicationMode.All"/>.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.PreserveDocumentPropertiesNotFoundOnModel">
            <summary>
            Controls whatever properties on the object that weren't de-serialized to object properties 
            will be preserved when saving the document again. If false, those properties will be removed
            when the document will be saved.
            </summary>
        </member>
        <member name="F:Raven.Client.Document.IndexAndTransformerReplicationMode.None">
            <summary>
            No indexes or transformers are updated to replicated instances.
            </summary>
        </member>
        <member name="F:Raven.Client.Document.IndexAndTransformerReplicationMode.Indexes">
            <summary>
            All indexes are replicated.
            </summary>
        </member>
        <member name="F:Raven.Client.Document.IndexAndTransformerReplicationMode.Transformers">
            <summary>
            All transformers are replicated.
            </summary>
        </member>
        <member name="T:Raven.Client.Document.ConsistencyOptions">
            <summary>
            The consistency options for all queries, fore more details about the consistency options, see:
            http://www.allthingsdistributed.com/2008/12/eventually_consistent.html
            
            Note that this option impact only queries, since we have Strong Consistency model for the documents
            </summary>
        </member>
        <member name="F:Raven.Client.Document.ConsistencyOptions.None">
            <summary>
            Ensures that after querying an index at time T, you will never see the results
            of the index at a time prior to T.
            This is ensured by the server, and require no action from the client
            </summary>
        </member>
        <member name="F:Raven.Client.Document.ConsistencyOptions.AlwaysWaitForNonStaleResultsAsOfLastWrite">
            <summary>
             After updating a documents, will only accept queries which already indexed the updated value.
            </summary>
        </member>
        <member name="F:Raven.Client.Document.ConsistencyOptions.QueryYourWrites">
            <summary>
            Use AlwaysWaitForNonStaleResultsAsOfLastWrite, instead
            </summary>
        </member>
        <member name="F:Raven.Client.Document.ConsistencyOptions.MonotonicRead">
            <summary>
            Use None, instead
            </summary>
        </member>
        <member name="T:Raven.Client.Document.DocumentQuery`1">
            <summary>
            A query against a Raven index
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentQuery`1">
            <summary>
                A query against a Raven index
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.CountLazily">
            <summary>
                Register the query as a lazy-count query in the session and return a lazy
                instance that will evaluate the query only when needed.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.SetQueryInputs(System.Collections.Generic.Dictionary{System.String,Raven.Json.Linq.RavenJToken})">
            <summary>
                Get the facets as per the specified doc with the given start and pageSize
            </summary>
            <param name="queryInputs"></param>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.SetTransformerParameters(System.Collections.Generic.Dictionary{System.String,Raven.Json.Linq.RavenJToken})">
            <summary>
                Get the facets as per the specified facets with the given start and pageSize
            </summary>
            <param name="transformerParameters"></param>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.GetIndexQuery(System.Boolean)">
            <summary>
                Create the index query object for this query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.Lazily">
            <summary>
                Register the query as a lazy query in the session and return a lazy
                instance that will evaluate the query only when needed
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.Lazily(System.Action{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
                Register the query as a lazy query in the session and return a lazy
                instance that will evaluate the query only when needed.
                Also provide a function to execute when the value is evaluated
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.SelectFields``1(System.String[])">
            <summary>
                Selects the specified fields directly from the index if the are stored. If the field is not stored in index, value
                will come from document directly.
            </summary>
            <typeparam name="TProjection">Type of the projection.</typeparam>
            <param name="fields">Array of fields to load.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.SelectFields``1(System.String[],System.String[])">
            <summary>
                Selects the specified fields directly from the index if the are stored. If the field is not stored in index, value
                will come from document directly.
            </summary>
            <typeparam name="TProjection">Type of the projection.</typeparam>
            <param name="fields">Array of fields to load.</param>
            <param name="projections">Array of field projections.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.SelectFields``1">
            <summary>
                Selects the specified fields directly from the index if the are stored. If the field is not stored in index, value
                will come from document directly.
                <para>Array of fields will be taken from TProjection</para>
            </summary>
            <typeparam name="TProjection">Type of the projection from which fields will be taken.</typeparam>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.Spatial(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Func{Raven.Client.Spatial.SpatialCriteriaFactory,Raven.Client.Spatial.SpatialCriteria})">
            <summary>
                Ability to use one factory to determine spatial shape that will be used in query.
            </summary>
            <param name="path">Spatial field name.</param>
            <param name="clause">function with spatial criteria factory</param>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.Spatial(System.String,System.Func{Raven.Client.Spatial.SpatialCriteriaFactory,Raven.Client.Spatial.SpatialCriteria})">
            <summary>
                Ability to use one factory to determine spatial shape that will be used in query.
            </summary>
            <param name="fieldName">Spatial field name.</param>
            <param name="clause">function with spatial criteria factory</param>
        </member>
        <member name="P:Raven.Client.IDocumentQuery`1.IsDistinct">
            <summary>
                Whatever we should apply distinct operation to the query on the server side
            </summary>
        </member>
        <member name="P:Raven.Client.IDocumentQuery`1.QueryResult">
            <summary>
                Gets the query result. Accessing this property for the first time will execute the query.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.#ctor(Raven.Client.Document.InMemoryDocumentSessionOperations,Raven.Client.Connection.IDatabaseCommands,Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.String,System.String[],System.String[],Raven.Client.Listeners.IDocumentQueryListener[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentQuery`1"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.#ctor(Raven.Client.Document.DocumentQuery{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentQuery`1"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.SelectFields``1">
            <summary>
            Selects the projection fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.SelectFields``1(System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.SelectFields``1(System.String[],System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WaitForNonStaleResults(System.TimeSpan)">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results for the specified wait timeout.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#AddOrder(System.String,System.Boolean)">
            <summary>
            Adds an ordering for a specific field to the query
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.AddOrder``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
              Adds an ordering for a specific field to the query
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#RandomOrdering">
            <summary>
            Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#CustomSortUsing(System.String,System.Boolean)">
            <summary>
            Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#RandomOrdering(System.String)">
            <summary>
            Order the search results randomly using the specified seed
            this is useful if you want to have repeatable random queries
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#AddOrder(System.String,System.Boolean,System.Type)">
            <summary>
            Adds an ordering for a specific field to the query and specifies the type of field for sorting purposes
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
            <param name="fieldType">the type of the field to be sorted.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#OpenSubclause">
            <summary>
            Simplified method for opening a new clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#CloseSubclause">
            <summary>
            Simplified method for closing a clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Search(System.String,System.String,Raven.Client.EscapeQueryOptions)">
            <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Search``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,Raven.Client.EscapeQueryOptions)">
            <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Intersect">
            <summary>
            Partition the query so we can intersect different parts of the query
            across different index entries.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#ContainsAny(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Performs a query matching ANY of the provided values against the given field (OR)
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.ContainsAny``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs a query matching ANY of the provided values against the given field (OR)
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#ContainsAll(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Performs a query matching ALL of the provided values against the given field (AND)
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.ContainsAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs a query matching ALL of the provided values against the given field (AND)
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Statistics(Raven.Client.RavenQueryStatistics@)">
            <summary>
            Provide statistics about the query, such as total count of matching records
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Include(System.String)">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Take(System.Int32)">
            <summary>
            Takes the specified count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Skip(System.Int32)">
            <summary>
            Skips the specified count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Where(System.String)">
            <summary>
            Filter the results from the index using the specified where clause.
            </summary>
            <param name="whereClause">The where clause.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereEquals(System.String,System.Object)">
            <summary>
            	Matches exact value
            </summary>
            <remarks>
            	Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereEquals``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            	Matches exact value
            </summary>
            <remarks>
              Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereEquals(System.String,System.Object,System.Boolean)">
            <summary>
            	Matches exact value
            </summary>
            <remarks>
            	Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereEquals``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,System.Boolean)">
            <summary>
            	Matches exact value
            </summary>
            <remarks>
              Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereEquals(Raven.Client.WhereParams)">
            <summary>
            	Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereIn(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereIn``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereStartsWith(System.String,System.Object)">
            <summary>
            Matches fields which starts with the specified value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereStartsWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields which starts with the specified value.
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereEndsWith(System.String,System.Object)">
            <summary>
            Matches fields which ends with the specified value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereEndsWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields which ends with the specified value.
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereBetween(System.String,System.Object,System.Object)">
            <summary>
            Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereBetween``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,``0)">
            <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
            Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereBetweenOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,``0)">
            <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereGreaterThan(System.String,System.Object)">
            <summary>
            Matches fields where the value is greater than the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereGreaterThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is greater than the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
            Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereGreaterThanOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereLessThan(System.String,System.Object)">
            <summary>
            Matches fields where the value is less than the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereLessThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is less than the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
            Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereLessThanOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#AndAlso">
            <summary>
            Add an AND to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#OrElse">
            <summary>
            Add an OR to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Boost(System.Decimal)">
            <summary>
            Specifies a boost weight to the last where clause.
            The higher the boost factor, the more relevant the term will be.
            </summary>
            <param name="boost">boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Fuzzy(System.Decimal)">
            <summary>
            Specifies a fuzziness factor to the single word term in the last where clause
            </summary>
            <param name="fuzzy">0.0 to 1.0 where 1.0 means closer match</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Proximity(System.Int32)">
            <summary>
            Specifies a proximity distance for the phrase in the last where clause
            </summary>
            <param name="proximity">number of words within</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WithinRadiusOf(System.Double,System.Double,System.Double,Raven.Abstractions.Indexing.SpatialUnits)">
            <summary>
            Filter matches to be inside the specified radius
            </summary>
            <param name="radius">The radius.</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <param name="radiusUnits">The units of the <paramref name="radius"/>.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#SortByDistance">
            <summary>
            Sorts the query results by distance.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#SortByDistance(System.Double,System.Double)">
            <summary>
            Sorts the query results by distance.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#SortByDistance(System.Double,System.Double,System.String)">
            <summary>
            Sorts the query results by distance.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#OrderBy(System.String[])">
            <summary>
            Order the results by the specified fields
            The fields are the names of the fields to sort, defaulting to sorting by ascending.
            You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name = "propertySelectors">Property selectors for the fields.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#OrderByDescending(System.String[])">
            <summary>
            Order the results by the specified fields
            The fields are the names of the fields to sort, defaulting to sorting by descending.
            You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by descending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name = "propertySelectors">Property selectors for the fields.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WaitForNonStaleResultsAsOfNow">
            <summary>
            Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WaitForNonStaleResultsAsOfLastWrite">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WaitForNonStaleResultsAsOfLastWrite(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name="waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name="cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name="cutOff">The cut off.</param>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WaitForNonStaleResultsAsOf(Raven.Abstractions.Data.Etag)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff etag.
            </summary>
            <param name="cutOffEtag">The cut off etag.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WaitForNonStaleResultsAsOf(Raven.Abstractions.Data.Etag,System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff etag for the specified timeout.
            </summary>
            <param name="cutOffEtag">The cut off etag.</param>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#WaitForNonStaleResults">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#BeforeQueryExecution(System.Action{Raven.Abstractions.Data.IndexQuery})">
            <summary>
            Allows you to modify the index query before it is sent to the server
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Raven.Client.Document.DocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IDocumentQuery{T}}#Not">
            <summary>
            Negate the next operation
            </summary>
        </member>
        <member name="T:Raven.Client.Document.DocumentSession">
            <summary>
            Implements Unit of Work for accessing the RavenDB server
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentSessionImpl">
            <summary>
            Interface for document session which holds the internal operations
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentSession">
            <summary>
                Interface for document session
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Delete``1(``0)">
            <summary>
                Marks the specified entity for deletion. The entity will be deleted when
                <see cref="M:Raven.Client.IDocumentSession.SaveChanges"/> is called.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">instance of entity to delete</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Delete``1(System.ValueType)">
            <summary>
                Marks the specified entity for deletion. The entity will be deleted when
                <see cref="M:Raven.Client.IDocumentSession.SaveChanges"/> is called.
                <para>WARNING: This method will not call beforeDelete listener!</para>
                <para>This method allows you to call:</para>
                <para>Delete&lt;Post&gt;(1)</para>
                <para>And that call will internally be translated to </para>
                <para>Delete&lt;Post&gt;("posts/1");</para>
                <para>Or whatever your conventions specify.</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">entity Id</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Delete(System.String)">
            <summary>
                Marks the specified entity for deletion. The entity will be deleted when
                <see cref="M:Raven.Client.IDocumentSession.SaveChanges"/> is called.
                <para>WARNING: This method will not call beforeDelete listener!</para>
            </summary>
            <param name="id">entity Id</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Include(System.String)">
            <summary>
                Begin a load while including the specified path
            </summary>
            <param name="path">Path in documents in which server should look for a 'referenced' documents.</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Begin a load while including the specified path
            </summary>
            <param name="path">Path in documents in which server should look for a 'referenced' documents.</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Include``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Begin a load while including the specified path
            </summary>
            <param name="path">Path in documents in which server should look for a 'referenced' documents.</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Load``1(System.String)">
            <summary>
                Loads the specified entity with the specified id.
            </summary>
            <param name="id">Identifier of a entity that will be loaded.</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Load``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Loads the specified entities with the specified ids.
            </summary>
            <param name="ids">Enumerable of Ids that should be loaded</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Load``1(System.ValueType)">
            <summary>
                Loads the specified entity with the specified id after applying
                conventions on the provided id to get the real document id.
                <para>This method allows you to call:</para>
                <para>Load&lt;Post&gt;(1)</para>
                <para>And that call will internally be translated to </para>
                <para>Load&lt;Post&gt;("posts/1");</para>
                <para>Or whatever your conventions specify.</para>
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Load``1(System.ValueType[])">
            <summary>
                Loads the specified entities with the specified id after applying
                conventions on the provided id to get the real document id.
                <para>This method allows you to call:</para>
                <para>Load&lt;Post&gt;(1, 2, 3)</para>
                <para>And that call will internally be translated to </para>
                <para>Load&lt;Post&gt;("posts/1", "posts/2", "posts/3");</para>
                <para>Or whatever your conventions specify.</para>
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Load``1(System.Collections.Generic.IEnumerable{System.ValueType})">
            <summary>
                Loads the specified entities with the specified id after applying
                conventions on the provided id to get the real document id.
            </summary>
            <remarks>
                <para>This method allows you to call:</para>
                <para>Load&lt;Post&gt;(new List&lt;int&gt;(){1,2,3})</para>
                <para>And that call will internally be translated to </para>
                <para>Load&lt;Post&gt;("posts/1", "posts/2", "posts/3");</para>
                <para>Or whatever your conventions specify.</para>
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Load``2(System.String,System.Action{Raven.Client.ILoadConfiguration})">
            <summary>
                Performs a load that will use the specified results transformer against the specified id
            </summary>
            <typeparam name="TTransformer">The transformer to use in this load operation</typeparam>
            <typeparam name="TResult">The results shape to return after the load operation</typeparam>
            <param name="id">Id of a document to load</param>
            <param name="configure">additional configuration options for operation e.g. AddTransformerParameter</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Load``2(System.Collections.Generic.IEnumerable{System.String},System.Action{Raven.Client.ILoadConfiguration})">
            <summary>
                Performs a load that will use the specified results transformer against the specified id
            </summary>
            <param name="ids">Enumerable of ids of documents to load</param>
            <param name="configure">additional configuration options for operation e.g. AddTransformerParameter</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Load``1(System.String,System.String,System.Action{Raven.Client.ILoadConfiguration})">
            <summary>
                Performs a load that will use the specified results transformer against the specified id
            </summary>
            <typeparam name="TResult">The results shape to return after the load operation</typeparam>
            <param name="id">Id of a document to load</param>
            <param name="transformer">The transformer to use in this load operation</param>
            <param name="configure">additional configuration options for operation e.g. AddTransformerParameter</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Load``1(System.Collections.Generic.IEnumerable{System.String},System.String,System.Action{Raven.Client.ILoadConfiguration})">
            <summary>
                Performs a load that will use the specified results transformer against the specified ids
            </summary>
            <typeparam name="TResult">The results shape to return after the load operation</typeparam>
            <param name="ids">Enumerable of ids of documents to load</param>
            <param name="transformer">The transformer to use in this load operation</param>
            <param name="configure">additional configuration options for operation e.g. AddTransformerParameter</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Load``1(System.String,System.Type,System.Action{Raven.Client.ILoadConfiguration})">
            <summary>
                Performs a load that will use the specified results transformer against the specified id
            </summary>
            <typeparam name="TResult">The results shape to return after the load operation</typeparam>
            <param name="id">Id of a entity to load</param>
            <param name="transformerType">The transformer to use in this load operation</param>
            <param name="configure">additional configuration options for operation e.g. AddTransformerParameter</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Load``1(System.Collections.Generic.IEnumerable{System.String},System.Type,System.Action{Raven.Client.ILoadConfiguration})">
            <summary>
                Performs a load that will use the specified results transformer against the specified ids
            </summary>
            <typeparam name="TResult">The results shape to return after the load operation</typeparam>
            <param name="ids">Enumerable of ids of documents to load</param>
            <param name="transformerType">The transformer to use in this load operation</param>
            <param name="configure">additional configuration options for operation e.g. AddTransformerParameter</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Query``1(System.String,System.Boolean)">
            <summary>
                Queries the specified index using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <param name="indexName">Name of the index.</param>
            <param name="isMapReduce">Whatever we are querying a map/reduce index (modify how we treat identifier properties)</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Query``1">
            <summary>
                Dynamically queries RavenDB using LINQ
            </summary>
            <typeparam name="T">The result of the query</typeparam>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Query``2">
            <summary>
                Queries the index specified by <typeparamref name="TIndexCreator" /> using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
        </member>
        <member name="M:Raven.Client.IDocumentSession.SaveChanges">
            <summary>
                Saves all the pending changes to the server.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Store(System.Object,Raven.Abstractions.Data.Etag)">
            <summary>
                Stores entity in session, extracts Id from entity using Conventions or generates new one if it is not available and
                forces concurrency check with given Etag
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Store(System.Object,Raven.Abstractions.Data.Etag,System.String)">
            <summary>
                Stores entity in session with given id and forces concurrency check with given Etag.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Store(System.Object)">
            <summary>
                Stores entity in session, extracts Id from entity using Conventions or generates new one if it is not available.
                <para>Forces concurrency check if the Id is not available during extraction.</para>
            </summary>
            <param name="entity">entity to store.</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Store(System.Object,System.String)">
            <summary>
                Stores the specified dynamic entity, under the specified id.
            </summary>
            <param name="entity">entity to store.</param>
            <param name="id">Id to store this entity under. If other entity exists with the same id it will be overridden.</param>
        </member>
        <member name="P:Raven.Client.IDocumentSession.Advanced">
            <summary>
                Get the accessor for advanced operations
            </summary>
            <remarks>
                Those operations are rarely needed, and have been moved to a separate
                property to avoid cluttering the API
            </remarks>
        </member>
        <member name="T:Raven.Client.ITransactionalDocumentSession">
            <summary>
                Implementers of this interface provide transactional operations
                Note that this interface is mostly useful only for expert usage
            </summary>
        </member>
        <member name="M:Raven.Client.ITransactionalDocumentSession.Commit(System.String)">
            <summary>
                Commits the specified tx id
            </summary>
            <param name="txId">transaction identifier</param>
        </member>
        <member name="M:Raven.Client.ITransactionalDocumentSession.PrepareTransaction(System.String,System.Nullable{System.Guid},System.Byte[])">
            <summary>
                Prepares the transaction on the server.
            </summary>
        </member>
        <member name="M:Raven.Client.ITransactionalDocumentSession.Rollback(System.String)">
            <summary>
                Rollbacks the specified tx id
            </summary>
            <param name="txId">transaction identifier</param>
        </member>
        <member name="P:Raven.Client.ITransactionalDocumentSession.DatabaseName">
            <summary>
                The database name for this session
            </summary>
        </member>
        <member name="P:Raven.Client.ITransactionalDocumentSession.ResourceManagerId">
            <summary>
                The transaction resource manager identifier
            </summary>
        </member>
        <member name="T:Raven.Client.ISyncAdvancedSessionOperation">
            <summary>
                Advanced synchronous session operations
            </summary>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.DocumentQuery``2">
            <summary>
                Queries the index specified by <typeparamref name="TIndexCreator" /> using lucene syntax.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.DocumentQuery``1(System.String,System.Boolean)">
            <summary>
                Query the specified index using Lucene syntax
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="isMapReduce">Control how we treat identifier properties in map/reduce indexes</param>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.DocumentQuery``1">
            <summary>
                Dynamically query RavenDB using Lucene syntax
            </summary>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.GetDocumentUrl(System.Object)">
            <summary>
                Returns full document url for a given entity
            </summary>
            <param name="entity">Instance of an entity for which url will be returned</param>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.LoadStartingWith``1(System.String,System.String,System.Int32,System.Int32,System.String,Raven.Client.RavenPagingInformation,System.String)">
            <summary>
                Loads multiple entities that contain common prefix.
            </summary>
            <param name="keyPrefix">prefix for which documents should be returned e.g. "products/"</param>
            <param name="matches">
                pipe ('|') separated values for which document keys (after 'keyPrefix') should be matched ('?'
                any single character, '*' any characters)
            </param>
            <param name="start">number of documents that should be skipped. By default: 0.</param>
            <param name="pageSize">maximum number of documents that will be retrieved. By default: 25.</param>
            <param name="pagingInformation">used to perform rapid pagination on a server side</param>
            <param name="exclude">
                pipe ('|') separated values for which document keys (after 'keyPrefix') should not be matched
                ('?' any single character, '*' any characters)
            </param>
            <param name="skipAfter">
                skip document fetching until given key is found and return documents after that key (default:
                null)
            </param>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.LoadStartingWith``2(System.String,System.String,System.Int32,System.Int32,System.String,Raven.Client.RavenPagingInformation,System.Action{Raven.Client.ILoadConfiguration},System.String)">
            <summary>
                Loads multiple entities that contain common prefix and applies specified transformer.
            </summary>
            <param name="keyPrefix">prefix for which documents should be returned e.g. "products/"</param>
            <param name="matches">
                pipe ('|') separated values for which document keys (after 'keyPrefix') should be matched ('?'
                any single character, '*' any characters)
            </param>
            <param name="start">number of documents that should be skipped. By default: 0.</param>
            <param name="pageSize">maximum number of documents that will be retrieved. By default: 25.</param>
            <param name="pagingInformation">used to perform rapid pagination on a server side</param>
            <param name="exclude">
                pipe ('|') separated values for which document keys (after 'keyPrefix') should not be matched
                ('?' any single character, '*' any characters)
            </param>
            <param name="configure">additional configuration options for operation e.g. AddTransformerParameter</param>
            <param name="skipAfter">
                skip document fetching until given key is found and return documents after that key (default:
                null)
            </param>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.LuceneQuery``2">
            <summary>
                Queries the index specified by <typeparamref name="TIndexCreator" /> using lucene syntax.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.LuceneQuery``1(System.String,System.Boolean)">
            <summary>
                Query the specified index using Lucene syntax
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="isMapReduce">Control how we treat identifier properties in map/reduce indexes</param>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.LuceneQuery``1">
            <summary>
                Dynamically query RavenDB using Lucene syntax
            </summary>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.MultiFacetedSearch(Raven.Abstractions.Data.FacetQuery[])">
            <summary>
                Sends a multiple faceted queries in a single request and calculates the facet results for each of them
            </summary>
            <param name="queries">Array of the faceted queries that will be executed on the server-side</param>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.Refresh``1(``0)">
            <summary>
                Updates entity with latest changes from server
            </summary>
            <param name="entity">Instance of an entity that will be refreshed</param>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.Stream``1(System.Linq.IQueryable{``0})">
            <summary>
                Stream the results on the query to the client, converting them to
                CLR types along the way.
                <para>Does NOT track the entities in the session, and will not includes changes there when SaveChanges() is called</para>
            </summary>
            <param name="query">Query to stream results for</param>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.Stream``1(System.Linq.IQueryable{``0},Raven.Abstractions.Data.QueryHeaderInformation@)">
            <summary>
                Stream the results on the query to the client, converting them to
                CLR types along the way.
                <para>Does NOT track the entities in the session, and will not includes changes there when SaveChanges() is called</para>
            </summary>
            <param name="query">Query to stream results for</param>
            <param name="queryHeaderInformation">Information about performed query</param>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.Stream``1(Raven.Client.IDocumentQuery{``0})">
            <summary>
                Stream the results on the query to the client, converting them to
                CLR types along the way.
                <para>Does NOT track the entities in the session, and will not includes changes there when SaveChanges() is called</para>
            </summary>
            <param name="query">Query to stream results for</param>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.Stream``1(Raven.Client.IDocumentQuery{``0},Raven.Abstractions.Data.QueryHeaderInformation@)">
            <summary>
                Stream the results on the query to the client, converting them to
                CLR types along the way.
                <para>Does NOT track the entities in the session, and will not includes changes there when SaveChanges() is called</para>
            </summary>
            <param name="query">Query to stream results for</param>
            <param name="queryHeaderInformation">Information about performed query</param>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.Stream``1(Raven.Abstractions.Data.Etag,System.Int32,System.Int32,Raven.Client.RavenPagingInformation)">
            <summary>
                Stream the results of documents search to the client, converting them to CLR types along the way.
                <para>Does NOT track the entities in the session, and will not includes changes there when SaveChanges() is called</para>
            </summary>
            <param name="fromEtag">ETag of a document from which stream should start</param>
            <param name="start">number of documents that should be skipped</param>
            <param name="pageSize">maximum number of documents that will be retrieved</param>
            <param name="pagingInformation">used to perform rapid pagination on a server side</param>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.Stream``1(System.String,System.String,System.Int32,System.Int32,Raven.Client.RavenPagingInformation,System.String)">
            <summary>
                Stream the results of documents search to the client, converting them to CLR types along the way.
                <para>Does NOT track the entities in the session, and will not includes changes there when SaveChanges() is called</para>
            </summary>
            <param name="startsWith">prefix for which documents should be returned e.g. "products/"</param>
            <param name="matches">
                pipe ('|') separated values for which document keys (after 'keyPrefix') should be matched ('?'
                any single character, '*' any characters)
            </param>
            <param name="start">number of documents that should be skipped</param>
            <param name="pageSize">maximum number of documents that will be retrieved</param>
            <param name="pagingInformation">used to perform rapid pagination on a server side</param>
            <param name="skipAfter">
                skip document fetching until given key is found and return documents after that key (default:
                null)
            </param>
        </member>
        <member name="P:Raven.Client.ISyncAdvancedSessionOperation.Eagerly">
            <summary>
                Access the eager operations
            </summary>
        </member>
        <member name="P:Raven.Client.ISyncAdvancedSessionOperation.Lazily">
            <summary>
                Access the lazy operations
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.#ctor(System.String,Raven.Client.Document.DocumentStore,Raven.Client.Document.DocumentSessionListeners,System.Guid,Raven.Client.Connection.IDatabaseCommands)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentSession"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Raven#Client#Document#Batches#ILazySessionOperations#Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Raven#Client#Document#Batches#ILazySessionOperations#Load``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the specified ids.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Raven#Client#Document#Batches#ILazySessionOperations#Load``1(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Raven#Client#Document#Batches#ILazySessionOperations#Load``1(System.Collections.Generic.IEnumerable{System.String},System.Action{``0[]})">
            <summary>
            Loads the specified ids and a function to call when it is evaluated
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Raven#Client#Document#Batches#ILazySessionOperations#Load``1(System.String,System.Action{``0})">
            <summary>
            Loads the specified id and a function to call when it is evaluated
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Raven#Client#Document#Batches#ILazySessionOperations#Load``1(System.ValueType,System.Action{``0})">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Raven#Client#Document#Batches#ILazySessionOperations#Include(System.String)">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Raven#Client#Document#Batches#ILazySessionOperations#Load``1(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Load``1(System.String)">
            <summary>
            Loads the specified entity with the specified id.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Load``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the specified entities with the specified ids.
            </summary>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Load``1(System.ValueType)">
            <summary>
            Loads the specified entity with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Load``1(System.ValueType[])">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1,2,3)
            And that call will internally be translated to 
            Load{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Load``1(System.Collections.Generic.IEnumerable{System.ValueType})">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(new List&lt;int&gt;(){1,2,3})
            And that call will internally be translated to 
            Load{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Query``1(System.String,System.Boolean)">
            <summary>
            Queries the specified index using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <param name="indexName">Name of the index.</param>
            <param name="isMapReduce">Whatever we are querying a map/reduce index (modify how we treat identifier properties)</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Query``2">
            <summary>
            Queries the index specified by <typeparamref name="TIndexCreator"/> using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Refresh``1(``0)">
            <summary>
            Refreshes the specified entity from Raven server.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.GetJsonDocument(System.String)">
            <summary>
            Get the json document by key from the store
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Include(System.String)">
            <summary>
            Begin a load while including the specified path
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Begin a load while including the specified path
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Include``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Begin a load while including the specified path
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.GetDocumentUrl(System.Object)">
            <summary>
            Gets the document URL for the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.SaveChanges">
            <summary>
            Saves all the changes to the Raven server.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.LuceneQuery``2">
            <summary>
            Queries the index specified by <typeparamref name="TIndexCreator"/> using lucene syntax.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.DocumentQuery``2">
            <summary>
            Queries the index specified by <typeparamref name="TIndexCreator"/> using lucene syntax.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.LuceneQuery``1(System.String,System.Boolean)">
            <summary>
            Query the specified index using Lucene syntax
            </summary>
            <typeparam name="T"></typeparam>
            <param name="indexName">Name of the index.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.DocumentQuery``1(System.String,System.Boolean)">
            <summary>
            Query the specified index using Lucene syntax
            </summary>
            <typeparam name="T"></typeparam>
            <param name="indexName">Name of the index.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Commit(System.String)">
            <summary>
            Commits the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Rollback(System.String)">
            <summary>
            Rollbacks the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Query``1">
            <summary>
            Query RavenDB dynamically using LINQ
            </summary>
            <typeparam name="T">The result of the query</typeparam>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.LuceneQuery``1">
            <summary>
            Dynamically query RavenDB using Lucene syntax
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.DocumentQuery``1">
            <summary>
            Dynamically query RavenDB using Lucene syntax
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Raven#Client#Linq#IDocumentQueryGenerator#Query``1(System.String,System.Boolean)">
            <summary>
            Create a new query for <typeparam name="T"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Raven#Client#Linq#IDocumentQueryGenerator#AsyncQuery``1(System.String,System.Boolean)">
            <summary>
            Create a new query for <typeparam name="T"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.LazyLoadInternal``1(System.String[],System.Collections.Generic.KeyValuePair{System.String,System.Type}[],System.Action{``0[]})">
            <summary>
            Register to lazily load documents and include
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentSession.DatabaseCommands">
            <summary>
            Gets the database commands.
            </summary>
            <value>The database commands.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentSession.Lazily">
            <summary>
            Access the lazy operations
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentSession.Eagerly">
            <summary>
            Access the eager operations
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentSession.Advanced">
            <summary>
            Get the accessor for advanced operations
            </summary>
            <remarks>
            Those operations are rarely needed, and have been moved to a separate 
            property to avoid cluttering the API
            </remarks>
        </member>
        <member name="T:Raven.Client.Document.DocumentStore">
            <summary>
            Manages access to RavenDB and open sessions to work with RavenDB.
            </summary>
        </member>
        <member name="F:Raven.Client.Document.DocumentStore.currentSessionId">
            <summary>
            The current session id - only used during construction
            </summary>
        </member>
        <member name="F:Raven.Client.Document.DocumentStore.databaseCommandsGenerator">
            <summary>
            Generate new instance of database commands
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentStore"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.ParseConnectionString(System.String)">
            <summary>
            Set document store settings based on a given connection string.
            </summary>
            <param name="connString">The connection string to parse</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.SetConnectionStringSettings(Raven.Abstractions.Data.RavenConnectionStringOptions)">
            <summary>
            Copy the relevant connection string settings
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.GetConnectionStringOptions">
            <summary>
            Create the connection string parser
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.OpenSession">
            <summary>
            Opens the session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.OpenSession(System.String)">
            <summary>
            Opens the session for a particular database
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.Initialize(System.Boolean)">
            <summary>
            Initializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.AssertValidConfiguration">
            <summary>
            validate the configuration for the document store
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.InitializeInternal">
            <summary>
            Initialize the document store access method to RavenDB
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.DisableAggressiveCaching">
            <summary>
            Setup the context for no aggressive caching
            </summary>
            <remarks>
            This is mainly useful for internal use inside RavenDB, when we are executing
            queries that have been marked with WaitForNonStaleResults, we temporarily disable
            aggressive caching.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.Changes(System.String)">
            <summary>
            Subscribe to change notifications from the server
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.AggressivelyCacheFor(System.TimeSpan)">
            <summary>
            Setup the context for aggressive caching.
            </summary>
            <param name="cacheDuration">Specify the aggressive cache duration</param>
            <remarks>
            Aggressive caching means that we will not check the server to see whatever the response
            we provide is current or not, but will serve the information directly from the local cache
            without touching the server.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.SetRequestsTimeoutFor(System.TimeSpan)">
            <summary>
            Setup the WebRequest timeout for the session
            </summary>
            <param name="timeout">Specify the timeout duration</param>
            <remarks>
            Sets the timeout for the JsonRequest.  Scoped to the Current Thread.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.OpenAsyncSession">
            <summary>
            Opens the async session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.OpenAsyncSession(System.String)">
            <summary>
            Opens the async session.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.HasJsonRequestFactory">
            <summary>
            Whatever this instance has json request factory available
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.JsonRequestFactory">
            <summary>
             Get the <see cref="T:Raven.Client.Connection.HttpJsonRequestFactory"/> for the stores
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.DatabaseCommands">
            <summary>
            Gets the database commands.
            </summary>
            <value>The database commands.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.AsyncDatabaseCommands">
            <summary>
            Gets the async database commands.
            </summary>
            <value>The async database commands.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.Credentials">
            <summary>
            Gets or sets the credentials.
            </summary>
            <value>The credentials.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.Identifier">
            <summary>
            Gets or sets the identifier for this store.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.ApiKey">
            <summary>
            The API Key to use when authenticating against a RavenDB server that
            supports API Key authentication
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.ConnectionStringName">
            <summary>
            Gets or sets the name of the connection string name.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.DefaultDatabase">
            <summary>
            Gets or sets the default database name.
            </summary>
            <value>The default database name.</value>
        </member>
        <member name="E:Raven.Client.Document.DocumentStore.AfterDispose">
            <summary>
            Called after dispose is completed
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.MaxNumberOfCachedRequests">
            <summary>
            Max number of cached requests (default: 2048)
            </summary>
        </member>
        <member name="T:Raven.Client.Document.HiLoKeyGenerator">
            <summary>
            Generate hilo numbers against a RavenDB document
            </summary>
        </member>
        <member name="M:Raven.Client.Document.HiLoKeyGenerator.#ctor(System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.HiLoKeyGenerator"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.HiLoKeyGenerator.GenerateDocumentKey(Raven.Client.Connection.IDatabaseCommands,Raven.Client.Document.DocumentConvention,System.Object)">
            <summary>
            Generates the document key.
            </summary>
            <param name="convention">The convention.</param>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.HiLoKeyGenerator.NextId(Raven.Client.Connection.IDatabaseCommands)">
            <summary>
             Create the next id (numeric)
            </summary>
        </member>
        <member name="T:Raven.Client.Document.ILoaderWithInclude`1">
            <summary>
            Fluent interface for specifying include paths
            for loading documents
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Include(System.String)">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Include``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Load(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Load(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Load(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Load(System.ValueType)">
            <summary>
            Loads the specified entity with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Load(System.ValueType[])">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1,2,3)
            And that call will internally be translated to 
            Load{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Load(System.Collections.Generic.IEnumerable{System.ValueType})">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(new List&lt;int&gt;(){1,2,3})
            And that call will internally be translated to 
            Load{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Load``1(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Load``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Load``1(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Load``1(System.ValueType)">
            <summary>
            Loads the specified entity with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Load``1(System.ValueType[])">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1,2,3)
            And that call will internally be translated to 
            Load{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Load``1(System.Collections.Generic.IEnumerable{System.ValueType})">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(new List&lt;int&gt;(){1,2,3})
            And that call will internally be translated to 
            Load{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="T:Raven.Client.Document.DocumentSessionListeners">
            <summary>
                Holder for all the listeners for the session
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSessionListeners.#ctor">
            <summary>
                Create a new instance of this class
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentSessionListeners.ConversionListeners">
            <summary>
                The extended conversion listeners
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentSessionListeners.QueryListeners">
            <summary>
                The query listeners allow to modify queries before it is executed
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentSessionListeners.StoreListeners">
            <summary>
                The store listeners
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentSessionListeners.DeleteListeners">
            <summary>
                The delete listeners
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentSessionListeners.ConflictListeners">
            <summary>
                The conflict listeners
            </summary>
        </member>
        <member name="T:Raven.Client.Document.MultiLoaderWithInclude`1">
            <summary>
            Fluent implementation for specifying include paths
            for loading documents
            </summary>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Include(System.String)">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Include``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Load(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Load(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Load(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Load(System.ValueType)">
            <summary>
            Loads the specified entity with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Load(System.ValueType[])">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1,2,3)
            And that call will internally be translated to 
            Load{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Load(System.Collections.Generic.IEnumerable{System.ValueType})">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(new List&lt;int&gt;(){1,2,3})
            And that call will internally be translated to 
            Load{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.#ctor(Raven.Client.IDocumentSessionImpl)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.MultiLoaderWithInclude`1"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Load``1(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Load``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the specified ids.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Load``1(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="id">The id.</param>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Load``1(System.ValueType)">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="T:Raven.Client.Document.MultiTypeHiLoKeyGenerator">
            <summary>
            Generate a hilo key for each given type
            </summary>
        </member>
        <member name="M:Raven.Client.Document.MultiTypeHiLoKeyGenerator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.MultiTypeHiLoKeyGenerator"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.MultiTypeHiLoKeyGenerator.GenerateDocumentKey(Raven.Client.Connection.IDatabaseCommands,Raven.Client.Document.DocumentConvention,System.Object)">
            <summary>
            Generates the document key.
            </summary>
            <param name="conventions">The conventions.</param>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Document.RavenClientEnlistment">
            <summary>
            An implementation of <see cref="T:System.Transactions.IEnlistmentNotification"/> for the Raven Client API, allowing Raven
            Client API to participate in Distributed Transactions
            </summary>
        </member>
        <member name="M:Raven.Client.Document.RavenClientEnlistment.#ctor(Raven.Client.DocumentStoreBase,Raven.Client.ITransactionalDocumentSession,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.RavenClientEnlistment"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.RavenClientEnlistment.Prepare(System.Transactions.PreparingEnlistment)">
            <summary>
            Notifies an enlisted object that a transaction is being prepared for commitment.
            </summary>
            <param name="preparingEnlistment">A <see cref="T:System.Transactions.PreparingEnlistment"/> object used to send a response to the transaction manager.</param>
        </member>
        <member name="M:Raven.Client.Document.RavenClientEnlistment.Commit(System.Transactions.Enlistment)">
            <summary>
            Notifies an enlisted object that a transaction is being committed.
            </summary>
            <param name="enlistment">An <see cref="T:System.Transactions.Enlistment"/> object used to send a response to the transaction manager.</param>
        </member>
        <member name="M:Raven.Client.Document.RavenClientEnlistment.Rollback(System.Transactions.Enlistment)">
            <summary>
            Notifies an enlisted object that a transaction is being rolled back (aborted).
            </summary>
            <param name="enlistment">A <see cref="T:System.Transactions.Enlistment"/> object used to send a response to the transaction manager.</param>
        </member>
        <member name="M:Raven.Client.Document.RavenClientEnlistment.InDoubt(System.Transactions.Enlistment)">
            <summary>
            Notifies an enlisted object that the status of a transaction is in doubt.
            </summary>
            <param name="enlistment">An <see cref="T:System.Transactions.Enlistment"/> object used to send a response to the transaction manager.</param>
        </member>
        <member name="M:Raven.Client.Document.RavenClientEnlistment.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.RavenClientEnlistment.Rollback(System.Transactions.SinglePhaseEnlistment)">
            <summary>
            Rollbacks the specified single phase enlistment.
            </summary>
            <param name="singlePhaseEnlistment">The single phase enlistment.</param>
        </member>
        <member name="T:Raven.Client.Document.ReflectionUtil">
            <summary>
            Helper class for reflection operations
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ReflectionUtil.GetFullNameWithoutVersionInformation(System.Type)">
            <summary>
            Gets the full name without version information.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Document.ShardedDocumentQuery`1">
            <summary>
            A query that is executed against sharded instances
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.#ctor(Raven.Client.Document.InMemoryDocumentSessionOperations,System.Func{Raven.Client.Shard.ShardRequestData,System.Collections.Generic.IList{System.Tuple{System.String,Raven.Client.Connection.IDatabaseCommands}}},Raven.Client.Shard.ShardStrategy,System.String,System.String[],System.String[],Raven.Client.Listeners.IDocumentQueryListener[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.ShardedDocumentQuery`1"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.Lazily(System.Action{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.CountLazily">
            <summary>
            Register the query as a lazy-count query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
        </member>
        <member name="P:Raven.Client.Document.ShardedDocumentQuery`1.DatabaseCommands">
            <summary>
              Grant access to the database commands
            </summary>
        </member>
        <member name="P:Raven.Client.Document.ShardedDocumentQuery`1.AsyncDatabaseCommands">
            <summary>
              Grant access to the async database commands
            </summary>
        </member>
        <member name="T:Raven.Client.EntityStored">
            <summary>
            Delegate definition when an entity is stored in the session
            </summary>
        </member>
        <member name="T:Raven.Client.EntityToDocument">
            <summary>
            Delegate definition for converting an entity to a document and metadata
            </summary>
        </member>
        <member name="T:Raven.Client.DocumentToEntity">
            <summary>
            Delegate definition for converting a document and metadata to an entity
            </summary>
        </member>
        <member name="T:Raven.Client.Exceptions.ConflictException">
            <summary>
            This exception occurs when a (replication) conflict is encountered.
            Usually this required a user to manually resolve the conflict.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.ConflictException.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ConflictException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.ConflictException.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ConflictException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="properlyHandlesClientSideResolution"></param>
        </member>
        <member name="M:Raven.Client.Exceptions.ConflictException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ConflictException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.ConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ConflictException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="P:Raven.Client.Exceptions.ConflictException.ConflictedVersionIds">
            <summary>
            Gets or sets the conflicted version ids.
            </summary>
            <value>The conflicted version ids.</value>
        </member>
        <member name="P:Raven.Client.Exceptions.ConflictException.Etag">
            <summary>
            Gets or sets the conflicted document etag
            </summary>
        </member>
        <member name="T:Raven.Client.Exceptions.NonAuthoritativeInformationException">
            <summary>
            This exception is raised when a non authoritative information is encountered
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.NonAuthoritativeInformationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonAuthoritativeInformationException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.NonAuthoritativeInformationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonAuthoritativeInformationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.NonAuthoritativeInformationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonAuthoritativeInformationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.NonAuthoritativeInformationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonAuthoritativeInformationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Raven.Client.Exceptions.NonUniqueObjectException">
            <summary>
            This exception is thrown when a separate instance of an entity is added to the session
            when a different entity with the same key already exists within the session.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.NonUniqueObjectException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonUniqueObjectException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.NonUniqueObjectException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonUniqueObjectException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.NonUniqueObjectException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonUniqueObjectException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.NonUniqueObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonUniqueObjectException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Raven.Client.Exceptions.ReadVetoException">
            <summary>
            This exception is raised whenever a trigger vetoes the read by the session
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.ReadVetoException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ReadVetoException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.ReadVetoException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ReadVetoException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.ReadVetoException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ReadVetoException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.ReadVetoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ReadVetoException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Raven.Client.Extensions.MultiDatabase">
            <summary>
             Methods to create multitenant databases
            </summary>
        </member>
        <member name="M:Raven.Client.Extensions.MultiDatabase.GetDatabaseUrl(System.String,System.String)">
            <summary>
             Returns database url (system or non-system) based on system or non-system DB url.
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Extensions.MultiTenancyExtensions">
            <summary>
             Extension methods to create multitenant databases
            </summary>
        </member>
        <member name="M:Raven.Client.Extensions.MultiTenancyExtensions.EnsureDatabaseExists(Raven.Client.Connection.IGlobalAdminDatabaseCommands,System.String,System.Boolean)">
            <summary>
             Ensures that the database exists, creating it if needed
            </summary>
             <remarks>
             This operation happens _outside_ of any transaction
             </remarks>
        </member>
        <member name="M:Raven.Client.Extensions.TaskExtensions2.WaitUnwrap(System.Threading.Tasks.Task)">
            <summary>
            Waits on a task and if it throws, it unwrapped the inner exception from the AggregateException
            await keyword uses same mechanism.
            </summary>
            <param name="task"></param>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1">
            <summary>
            Abstract class used to provide infrastructure service for actual creation tasks
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractIndexCreationTask">
            <summary>
            Base class for creating indexes
            </summary>
            <remarks>
            The naming convention is that underscores in the inherited class names are replaced by slashed
            For example: Posts_ByName will be saved to Posts/ByName
            </remarks>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.CreateIndexDefinition">
            <summary>
            Creates the index definition.
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.CreateField(System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Provide a way to dynamically index values with runtime known values
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.CreateField(System.String,System.Object)">
            <summary>
            Provide a way to dynamically index values with runtime known values
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.SpatialGenerate(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Generates a spatial field in the index, generating a Point from the provided lat/lng coordinates
            </summary>
            <param name="lat">Latitude</param>
            <param name="lng">Longitude</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.SpatialClustering(System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Generate field with values that can be used for spatial clustering on the lat/lng coordinates
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.SpatialClustering(System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Int32,System.Int32)">
            <summary>
            Generate field with values that can be used for spatial clustering on the lat/lng coordinates
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.SpatialGenerate(System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Generates a spatial field in the index, generating a Point from the provided lat/lng coordinates
            </summary>
            <param name="fieldName">The field name, will be used for querying</param>
            <param name="lat">Latitude</param>
            <param name="lng">Longitude</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.SpatialGenerate(System.String,System.String)">
            <summary>
            Generates a spatial field in the index, generating a Point from the provided lat/lng coordinates
            </summary>
            <param name="fieldName">The field name, will be used for querying</param>
            <param name="shapeWKT">The shape representation in the WKT format</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.SpatialGenerate(System.String,System.String,Raven.Abstractions.Indexing.SpatialSearchStrategy)">
            <summary>
            Generates a spatial field in the index, generating a Point from the provided lat/lng coordinates
            </summary>
            <param name="fieldName">The field name, will be used for querying</param>
            <param name="shapeWKT">The shape representation in the WKT format</param>
            <param name="strategy">The spatial strategy to use</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.SpatialGenerate(System.String,System.String,Raven.Abstractions.Indexing.SpatialSearchStrategy,System.Int32)">
            <summary>
            Generates a spatial field in the index, generating a Point from the provided lat/lng coordinates
            </summary>
            <param name="fieldName">The field name, will be used for querying</param>
            <param name="shapeWKT">The shape representation in the WKT format</param>
            <param name="strategy">The spatial strategy to use</param>
            <param name="maxTreeLevel">Maximum number of levels to be used in the PrefixTree, controls the precision of shape representation.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.LoadAttachmentForIndexing(System.String)">
            <summary>
            Loads the specifed attachment content during the indexing process
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.SideBySideExecute(Raven.Client.IDocumentStore,Raven.Abstractions.Data.Etag,System.Nullable{System.DateTime})">
            <summary>
            Executes the index creation against the specified document store in side-by-side mode.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.Execute(Raven.Client.IDocumentStore)">
            <summary>
            Executes the index creation against the specified document store.
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.SideBySideExecute(Raven.Client.Connection.IDatabaseCommands,Raven.Client.Document.DocumentConvention,Raven.Abstractions.Data.Etag,System.Nullable{System.DateTime})">
            <summary>
            Executes the index creation using in side-by-side mode.
            </summary>
            <param name="databaseCommands"></param>
            <param name="documentConvention"></param>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.Execute(Raven.Client.Connection.IDatabaseCommands,Raven.Client.Document.DocumentConvention)">
            <summary>
            Executes the index creation against the specified document database using the specified conventions
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.SideBySideExecuteAsync(Raven.Client.IDocumentStore,Raven.Abstractions.Data.Etag,System.Nullable{System.DateTime})">
            <summary>
            Executes the index creation against the specified document store in side-by-side mode.
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.ExecuteAsync(Raven.Client.IDocumentStore)">
            <summary>
            Executes the index creation against the specified document store.
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.ExecuteAsync(Raven.Client.Connection.Async.IAsyncDatabaseCommands,Raven.Client.Document.DocumentConvention,System.Threading.CancellationToken)">
            <summary>
            Executes the index creation against the specified document store.
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask.IsMapReduce">
            <summary>
            Gets a value indicating whether this instance is map reduce index definition
            </summary>
            <value>
            	<c>true</c> if this instance is map reduce; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask.IndexName">
            <summary>
            Generates index name from type name replacing all _ with /
            <para>e.g.</para>
            <para>if our type is <code>'Orders_Totals'</code> then index name would be <code>'Orders/Totals'</code></para>
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask.Conventions">
            <summary>
            Gets or sets the conventions that should be used when index definition is created.
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask.Priority">
            <summary>
             index can have a priority that controls how much power of the indexing process it is allowed to consume. index priority can be forced by the user.
             There are four available values that you can set: Normal, Idle, Disabled, Abandoned
            <para>Default value: null means that the priority of the index is Normal.</para>
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.SpatialIndex.Generate(System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Generates a spatial field in the index, generating a Point from the provided lat/lng coordinates
            </summary>
            <param name="fieldName">The field name, will be used for querying</param>
            <param name="lat">Latitude</param>
            <param name="lng">Longitude</param>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.SpatialIndex.Generate(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Generates a spatial field in the index, generating a Point from the provided lat/lng coordinates
            </summary>
            <param name="lat">Latitude</param>
            <param name="lng">Longitude</param>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Index(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Raven.Abstractions.Indexing.FieldIndexing)">
            <summary>
            Register a field to be indexed
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Index(System.String,Raven.Abstractions.Indexing.FieldIndexing)">
            <summary>
            Register a field to be indexed
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Spatial(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Func{Raven.Abstractions.Indexing.SpatialOptionsFactory,Raven.Abstractions.Indexing.SpatialOptions})">
            <summary>
            Register a field to be spatially indexed
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Spatial(System.String,System.Func{Raven.Abstractions.Indexing.SpatialOptionsFactory,Raven.Abstractions.Indexing.SpatialOptions})">
            <summary>
            Register a field to be spatially indexed
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Store(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Raven.Abstractions.Indexing.FieldStorage)">
            <summary>
            Register a field to be stored
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Store(System.String,Raven.Abstractions.Indexing.FieldStorage)">
            <summary>
            Register a field to be stored
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Analyze(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            Register a field to be analyzed
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Analyze(System.String,System.String)">
            <summary>
            Register a field to be analyzed
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.TermVector(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Raven.Abstractions.Indexing.FieldTermVector)">
            <summary>
            Register a field to have term vectors
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.TermVector(System.String,Raven.Abstractions.Indexing.FieldTermVector)">
            <summary>
            Register a field to have term vectors
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Sort(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Raven.Abstractions.Indexing.SortOptions)">
            <summary>
            Register a field to be sorted
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Sort(System.String,Raven.Abstractions.Indexing.SortOptions)">
            <summary>
            Register a field to be sorted
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Suggestion(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Raven.Abstractions.Indexing.SuggestionOptions)">
            <summary>
            Register a field to be sorted
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Reduce">
            <summary>
            The reduce definition
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Stores">
            <summary>
            Index storage options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.StoresStrings">
            <summary>
            Index storage options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.IndexSortOptions">
            <summary>
            Index sort options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.IndexSortOptionsStrings">
            <summary>
            Index sort options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.IndexSuggestions">
            <summary>
            Index suggest options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Analyzers">
            <summary>
            Index sort options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.AnalyzersStrings">
            <summary>
            Index sort options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.TermVectors">
            <summary>
            Index term vector options
            </summary>		
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.TermVectorsStrings">
            <summary>
            Index term vector options
            </summary>		
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.SpatialIndexes">
            <summary>
            Spatial index options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.SpatialIndexesStrings">
            <summary>
            Spatial index options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Indexes">
            <summary>
            Indexing options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.IndexesStrings">
            <summary>
            Indexing options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.DisableInMemoryIndexing">
            <summary>
            Prevent index from being kept in memory. Default: false
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractMultiMapIndexCreationTask`1">
            <summary>
            Allow to create indexes with multiple maps
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractMultiMapIndexCreationTask`1.AddMapForAll``1(System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.IEnumerable}})">
            <summary>
            Uses reflection to call <see cref="M:Raven.Client.Indexes.AbstractMultiMapIndexCreationTask`1.AddMap``1(System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.IEnumerable}})"/> for the base type and all available subclasses.
            </summary>
            <remarks>This is taken from Oren's code in this thread https://groups.google.com/d/msg/ravendb/eFUlQG-spzE/Ac0PrvsFyJYJ </remarks>
            <typeparam name="TBase">The base class type whose descendant types are to be included in the index.</typeparam>
            <param name="expr"></param>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractMultiMapIndexCreationTask`1.CreateIndexDefinition">
            <summary>
            Creates the index definition.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractMultiMapIndexCreationTask`1.MaxIndexOutputsPerDocument">
            <summary>
            Index specific setting that limits the number of map outputs that an index is allowed to create for a one source document. If a map operation applied to
            the one document produces more outputs than this number then an index definition will be considered as a suspicious, the indexing of this document 
            will be skipped and the appropriate error message will be added to the indexing errors.
            <para>Default value: null means that the global value from Raven configuration will be taken to detect if number of outputs was exceeded.</para>
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractMultiMapIndexCreationTask">
            <summary>
            Allow to create indexes with multiple maps
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.Indexing.IndexingLinqExtensions">
            <summary>
            Extension methods that adds additional behavior during indexing operations
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.Indexing.IndexingLinqExtensions.WhereEntityIs``1(System.Collections.Generic.IEnumerable{System.Object},System.String[])">
            <summary>
            Marker method for allowing complex (multi entity) queries on the server.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.Indexing.IndexingLinqExtensions.Boost(System.Object,System.Single)">
            <summary>
            Boost the value with the given amount
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.Indexing.IndexingLinqExtensions.IfEntityIs``1(System.Object,System.String)">
            <summary>
            Marker method for allowing complex (multi entity) queries on the server.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.Indexing.IndexingLinqExtensions.StripHtml(System.Object)">
            <summary>
            Boost the value with the given amount
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.Indexing.IndexingLinqExtensions.ParseInt(System.Object)">
            <summary>
            Safely parses string value to int, when failed default(int) is returned.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.Indexing.IndexingLinqExtensions.ParseInt(System.Object,System.Int32)">
            <summary>
            Safely parses string value to int, when failed defaultValue is returned.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.Indexing.IndexingLinqExtensions.ParseDouble(System.Object)">
            <summary>
            Safely parses string value to double, when failed default(double) is returned.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.Indexing.IndexingLinqExtensions.ParseDouble(System.Object,System.Double)">
            <summary>
            Safely parses string value to double, when failed defaultValue is returned.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.Indexing.IndexingLinqExtensions.ParseDecimal(System.Object)">
            <summary>
            Safely parses string value to decimal, when failed default(decimal) is returned.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.Indexing.IndexingLinqExtensions.ParseDecimal(System.Object,System.Decimal)">
            <summary>
            Safely parses string value to decimal, when failed defaultValue is returned.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.Indexing.IndexingLinqExtensions.ParseShort(System.Object)">
            <summary>
            Safely parses string value to short, when failed default(short) is returned.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.Indexing.IndexingLinqExtensions.ParseShort(System.Object,System.Int16)">
            <summary>
            Safely parses string value to short, when failed defaultValue is returned.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.Indexing.IndexingLinqExtensions.ParseLong(System.Object)">
            <summary>
            Safely parses string value to long, when failed default(long) is returned.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.Indexing.IndexingLinqExtensions.ParseLong(System.Object,System.Int64)">
            <summary>
            Safely parses string value to long, when failed defaultValue is returned.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqPathProvider.GetPath(System.Linq.Expressions.Expression)">
            <summary>
            Get the path from the expression, including considering dictionary calls
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqPathProvider.GetValueFromExpression(System.Linq.Expressions.Expression,System.Type)">
            <summary>
            Get the actual value from the expression
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqPathProvider.GetMemberExpression(System.Linq.Expressions.Expression)">
            <summary>
            Get the member expression from the expression
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryableExtensions.Where``1(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryableExtensions.Where``1(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryableExtensions.OrderBy``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryableExtensions.OrderBy``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryableExtensions.OrderByDescending``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryableExtensions.OrderByDescending``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryableExtensions.ThenBy``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sorts(secondary) the elements of a sequence in ascending order according to a key.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryableExtensions.ThenByDescending``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sorts(secondary) the elements of a sequence in descending order according to a key.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryableExtensions.Select``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryableExtensions.Select``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryableExtensions.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Implementation of In operator
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryableExtensions.In``1(``0,``0[])">
            <summary>
            Implementation of In operator
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryableExtensions.Skip``1(Raven.Client.Linq.IRavenQueryable{``0},System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            Summary:
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryableExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Implementation of the Contains ANY operator
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryableExtensions.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Implementation of the Contains ALL operatior
            </summary>
        </member>
        <member name="T:Raven.Client.Listeners.IDocumentConflictListener">
            <summary>
            Hooks for users that allows you to handle document replication conflicts
            </summary>
        </member>
        <member name="F:Raven.Client.EscapeQueryOptions.AllowAllWildcards">
            <summary>
            This allows queries such as Name:*term*, which tend to be much
            more expensive and less performant than any other queries. 
            Consider carefully whatever you really need this, as there are other
            alternative for searching without doing extremely expensive leading 
            wildcard matches.
            </summary>
        </member>
        <member name="T:Raven.Client.Listeners.IDocumentDeleteListener">
            <summary>
            Hook for users to provide additional logic on delete operations
            </summary>
        </member>
        <member name="M:Raven.Client.Listeners.IDocumentDeleteListener.BeforeDelete(System.String,System.Object,Raven.Json.Linq.RavenJObject)">
            <summary>
            Invoked before the delete request is sent to the server.
            </summary>
            <param name="key">The key.</param>
            <param name="entityInstance">The entity instance.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="T:Raven.Client.Listeners.IDocumentQueryListener">
            <summary>
            Hook for users to modify all queries globally
            </summary>
        </member>
        <member name="M:Raven.Client.Listeners.IDocumentQueryListener.BeforeQueryExecuted(Raven.Client.IDocumentQueryCustomization)">
            <summary>
            Allow to customize a query globally
            </summary>
        </member>
        <member name="T:Raven.Client.Listeners.IDocumentStoreListener">
            <summary>
            Hook for users to provide additional logic on store operations
            </summary>
            
        </member>
        <member name="M:Raven.Client.Listeners.IDocumentStoreListener.BeforeStore(System.String,System.Object,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Invoked before the store request is sent to the server.
            </summary>
            <param name="key">The key.</param>
            <param name="entityInstance">The entity instance.</param>
            <param name="metadata">The metadata.</param>
            <param name="original">The original document that was loaded from the server</param>
            <returns>
            Whatever the entity instance was modified and requires us re-serialize it.
            Returning true would force re-serialization of the entity, returning false would 
            mean that any changes to the entityInstance would be ignored in the current SaveChanges call.
            </returns>
        </member>
        <member name="M:Raven.Client.Listeners.IDocumentStoreListener.AfterStore(System.String,System.Object,Raven.Json.Linq.RavenJObject)">
            <summary>
            Invoked after the store request is sent to the server.
            </summary>
            <param name="key">The key.</param>
            <param name="entityInstance">The entity instance.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractIndexCreationTask`1">
            <summary>
            Base class for creating indexes
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractIndexCreationTask`2">
            <summary>
            Base class for creating indexes
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask`2.CreateIndexDefinition">
            <summary>
            Creates the index definition.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask`2.MaxIndexOutputsPerDocument">
            <summary>
            Index specific setting that limits the number of map outputs that an index is allowed to create for a one source document. If a map operation applied to
            the one document produces more outputs than this number then an index definition will be considered as a suspicious, the indexing of this document 
            will be skipped and the appropriate error message will be added to the indexing errors.
            <para>Default value: null means that the global value from Raven configuration will be taken to detect if number of outputs was exceeded.</para>
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask`2.IsMapReduce">
            <summary>
            Gets a value indicating whether this instance is map reduce index definition
            </summary>
            <value>
            	<c>true</c> if this instance is map reduce; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask`2.Map">
            <summary>
            The map definition
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.ExpressionOperatorPrecedence">
            <summary>
            Precedence values for operations
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Primary">
            <summary>
            x.y  f(x)  a[x]  x++  x--  new
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Unary">
            <summary>
            +  -  !  ~  ++x  --x  (T)x
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Multiplicative">
            <summary>
            *  /  %
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Additive">
            <summary>
            +  -
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Shift">
            <summary>
            &lt;&lt; &gt;&gt;
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.RelationalAndTypeTesting">
            <summary>
            &lt;  &gt;  &lt;=  &gt;=  is  as
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Equality">
            <summary>
            ==  !=
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.LogicalAND">
            <summary>
            &amp;
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.LogicalXOR">
            <summary>
            ^
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.LogicalOR">
            <summary>
            |
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.ConditionalAND">
            <summary>
            &amp;&amp; (AndAlso in VB)
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.ConditionalOR">
            <summary>
            ||
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.NullCoalescing">
            <summary>
            ??
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Conditional">
            <summary>
            ?:
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Assignment">
            <summary>
            =  *=  /=  %=  +=  -=  &lt;&lt;=  &gt;&gt;=  &amp;=  ^=  |=
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.ParenthesisNotNeeded">
            <summary>
            pseudo operator for comparisons
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.ExpressionOperatorPrecedenceExtension">
            <summary>
            Methods on the enum
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionOperatorPrecedenceExtension.NeedsParenthesisFor(Raven.Client.Indexes.ExpressionOperatorPrecedence,Raven.Client.Indexes.ExpressionOperatorPrecedence)">
            <summary>
            Needs parenthesis for the expression
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.ExpressionStringBuilder">
            <summary>
              Based off of System.Linq.Expressions.ExpressionStringBuilder
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.ExpressionToString(Raven.Client.Document.DocumentConvention,System.Boolean,System.Type,System.String,System.Linq.Expressions.Expression)">
            <summary>
              Convert the expression to a string
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.BinaryExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitBlock(System.Linq.Expressions.BlockExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.BlockExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.CatchBlock" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.ConditionalExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
              Visits the <see cref = "T:System.Linq.Expressions.ConstantExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
            <summary>
              Visits the <see cref = "T:System.Linq.Expressions.DebugInfoExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitDefault(System.Linq.Expressions.DefaultExpression)">
            <summary>
              Visits the <see cref = "T:System.Linq.Expressions.DefaultExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.DynamicExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitElementInit(System.Linq.Expressions.ElementInit)">
            <summary>
              Visits the element init.
            </summary>
            <param name = "initializer">The initializer.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
              Visits the children of the extension expression.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitGoto(System.Linq.Expressions.GotoExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.GotoExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitIndex(System.Linq.Expressions.IndexExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.IndexExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.InvocationExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitLabel(System.Linq.Expressions.LabelExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.LabelExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>
              Visits the lambda.
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.ListInitExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitLoop(System.Linq.Expressions.LoopExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.LoopExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.MemberExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
              Visits the member assignment.
            </summary>
            <param name = "assignment">The assignment.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.MemberInitExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
              Visits the member list binding.
            </summary>
            <param name = "binding">The binding.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
              Visits the member member binding.
            </summary>
            <param name = "binding">The binding.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.MethodCallExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.NewExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.NewArrayExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
              Visits the <see cref = "T:System.Linq.Expressions.ParameterExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.RuntimeVariablesExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.SwitchExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.SwitchCase" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitTry(System.Linq.Expressions.TryExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.TryExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.TypeBinaryExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.UnaryExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="T:Raven.Client.Indexes.IClientSideDatabase">
            <summary>
            DatabaseAccessor for loading documents in the translator
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IClientSideDatabase.Load``1(System.String)">
            <summary>
            Loading a document during result transformers
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IClientSideDatabase.Load``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loading documents during result transformers
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IClientSideDatabase.Include(System.String)">
            <summary>
            Will ask RavenDB to include this document in the query results
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IClientSideDatabase.Include(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Will ask RavenDB to include these documents in the query results
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.IndexCreation">
            <summary>
            Helper class for creating indexes from implementations of <see cref="T:Raven.Client.Indexes.AbstractIndexCreationTask"/>.
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IndexCreation.CreateIndexes(System.Reflection.Assembly,Raven.Client.IDocumentStore)">
            <summary>
            Creates the indexes found in the specified assembly.
            </summary>
            <param name="assemblyToScanForIndexingTasks">The assembly to scan for indexing tasks.</param>
            <param name="documentStore">The document store.</param>
        </member>
        <member name="M:Raven.Client.Indexes.IndexCreation.CreateIndexes(System.ComponentModel.Composition.Hosting.ExportProvider,Raven.Client.Connection.IDatabaseCommands,Raven.Client.Document.DocumentConvention)">
            <summary>
            Creates the indexes found in the specified catalog
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IndexCreation.CreateIndexesAsync(System.ComponentModel.Composition.Hosting.ExportProvider,Raven.Client.Connection.Async.IAsyncDatabaseCommands,Raven.Client.Document.DocumentConvention)">
            <summary>
            Creates the indexes found in the specified catalog
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IndexCreation.CreateIndexes(System.ComponentModel.Composition.Hosting.ExportProvider,Raven.Client.IDocumentStore)">
            <summary>
            Creates the indexes found in the specified catalog
            </summary>
            <param name="catalogToGetnIndexingTasksFrom">The catalog to get indexing tasks from.</param>
            <param name="documentStore">The document store.</param>
        </member>
        <member name="M:Raven.Client.Indexes.IndexCreation.CreateIndexesAsync(System.Reflection.Assembly,Raven.Client.IDocumentStore)">
            <summary>
            Creates the indexes found in the specified assembly.
            </summary>
            <param name="assemblyToScanForIndexingTasks">The assembly to scan for indexing tasks.</param>
            <param name="documentStore">The document store.</param>
        </member>
        <member name="M:Raven.Client.Indexes.IndexCreation.CreateIndexesAsync(System.ComponentModel.Composition.Hosting.ExportProvider,Raven.Client.IDocumentStore)">
            <summary>
            Creates the indexes found in the specified catalog
            </summary>
            <param name="catalogToGetnIndexingTasksFrom">The catalog to get indexing tasks from.</param>
            <param name="documentStore">The document store.</param>
        </member>
        <member name="M:Raven.Client.Indexes.IndexCreation.SideBySideCreateIndexes(System.Reflection.Assembly,Raven.Client.IDocumentStore,Raven.Abstractions.Data.Etag,System.Nullable{System.DateTime})">
            <summary>
            Creates the indexes found in the specified assembly in side-by-side mode.
            </summary>
            <param name="assemblyToScanForIndexingTasks">The assembly to scan for indexing tasks.</param>
            <param name="documentStore">The document store.</param>
        </member>
        <member name="M:Raven.Client.Indexes.IndexCreation.SideBySideCreateIndexes(System.ComponentModel.Composition.Hosting.ExportProvider,Raven.Client.Connection.IDatabaseCommands,Raven.Client.Document.DocumentConvention,Raven.Abstractions.Data.Etag,System.Nullable{System.DateTime})">
            <summary>
            Creates the indexes found in the specified catalog in side-by-side mode.
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IndexCreation.SideBySideCreateIndexesAsync(System.ComponentModel.Composition.Hosting.ExportProvider,Raven.Client.Connection.Async.IAsyncDatabaseCommands,Raven.Client.Document.DocumentConvention,Raven.Abstractions.Data.Etag,System.Nullable{System.DateTime})">
            <summary>
            Creates the indexes found in the specified catalog in side-by-side mode.
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IndexCreation.SideBySideCreateIndexes(System.ComponentModel.Composition.Hosting.ExportProvider,Raven.Client.IDocumentStore,Raven.Abstractions.Data.Etag,System.Nullable{System.DateTime})">
            <summary>
            Creates the indexes found in the specified catalog in side-by-side mode.
            </summary>
            <param name="catalogToGetnIndexingTasksFrom">The catalog to get indexing tasks from.</param>
            <param name="documentStore">The document store.</param>
        </member>
        <member name="M:Raven.Client.Indexes.IndexCreation.SideBySideCreateIndexesAsync(System.Reflection.Assembly,Raven.Client.IDocumentStore,Raven.Abstractions.Data.Etag,System.Nullable{System.DateTime})">
            <summary>
            Creates the indexes found in the specified assembly in side-by-side mode.
            </summary>
            <param name="assemblyToScanForIndexingTasks">The assembly to scan for indexing tasks.</param>
            <param name="documentStore">The document store.</param>
        </member>
        <member name="M:Raven.Client.Indexes.IndexCreation.SideBySideCreateIndexesAsync(System.ComponentModel.Composition.Hosting.ExportProvider,Raven.Client.IDocumentStore,Raven.Abstractions.Data.Etag,System.Nullable{System.DateTime})">
            <summary>
            Creates the indexes found in the specified catalog in side-by-side mode.
            </summary>
            <param name="catalogToGetnIndexingTasksFrom">The catalog to get indexing tasks from.</param>
            <param name="documentStore">The document store.</param>
        </member>
        <member name="T:Raven.Client.Indexes.IndexDefinitionBuilder`2">
            <summary>
            This class provides a way to define a strongly typed index on the client.
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IndexDefinitionBuilder`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Indexes.IndexDefinitionBuilder`2"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IndexDefinitionBuilder`2.ToIndexDefinition(Raven.Client.Document.DocumentConvention,System.Boolean)">
            <summary>
            Toes the index definition.
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.Map">
            <summary>
            Gets or sets the map function
            </summary>
            <value>The map.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.Reduce">
            <summary>
            Gets or sets the reduce function
            </summary>
            <value>The reduce.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.Stores">
            <summary>
            Gets or sets the stores options
            </summary>
            <value>The stores.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.StoresStrings">
            <summary>
            Gets or sets the stores options
            </summary>
            <value>The stores.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.Indexes">
            <summary>
            Gets or sets the indexing options
            </summary>
            <value>The indexes.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.IndexesStrings">
            <summary>
            Gets or sets the indexing options
            </summary>
            <value>The indexes.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.SortOptions">
            <summary>
            Gets or sets the sort options.
            </summary>
            <value>The sort options.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.SortOptionsStrings">
            <summary>
            Gets or sets the sort options.
            </summary>
            <value>The sort options.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.Analyzers">
            <summary>
            Get os set the analyzers
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.AnalyzersStrings">
            <summary>
            Get os set the analyzers
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.Suggestions">
            <summary>
            Gets or sets the suggestion options.
            </summary>
            <value>The suggestion options.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.TermVectors">
            <summary>
            Gets or sets the term vector options
            </summary>
            <value>The term vectors.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.TermVectorsStrings">
            <summary>
            Gets or sets the term vector options
            </summary>
            <value>The term vectors.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.SpatialIndexes">
            <summary>
            Gets or sets the spatial options
            </summary>
            <value>The spatial options.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.SpatialIndexesStrings">
            <summary>
            Gets or sets the spatial options
            </summary>
            <value>The spatial options.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.DisableInMemoryIndexing">
            <summary>
            Prevent index from being kept in memory. Default: false
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.LockMode">
            <summary>
            Gets or sets the index lock mode
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.MaxIndexOutputsPerDocument">
            <summary>
            Max number of allowed indexing outputs per one source document
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.IndexDefinitionBuilder`1">
            <summary>
            This class provides a way to define a strongly typed index on the client.
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.IndexDefinitionHelper">
            <summary>
            Generate index definition from linq expressions
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IndexDefinitionHelper.PruneToFailureLinqQueryAsStringToWorkableCode``2(System.Linq.Expressions.LambdaExpression,Raven.Client.Document.DocumentConvention,System.String,System.Boolean)">
            <summary>
            Perform the actual generation
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.RavenDocumentsByEntityName">
            <summary>
             Create an index that allows to tag entities by their entity name
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.RavenDocumentsByEntityName.CreateIndexDefinition">
            <summary>
            Creates the Raven/DocumentsByEntityName index
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.RavenDocumentsByEntityName.IndexName">
            <summary>
            Return the actual index name
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.ExpressionInfo">
            <summary>
            This class represents a node in an expression, usually a member - but in the case of dynamic queries the path to a member
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.ExpressionInfo.#ctor(System.String,System.Type,System.Boolean)">
            <summary>
            Creates an ExpressionMemberInfo
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.ExpressionInfo.Path">
            <summary>
            Gets the full path of the member being referred to by this node
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.ExpressionInfo.Type">
            <summary>
            Gets the actual type being referred to
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.ExpressionInfo.IsNestedPath">
            <summary>
            Whatever the expression is of a nested path
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.ExpressionInfo.MaybeProperty">
            <summary>
            Maybe contain the relevant property
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.IRavenQueryProvider">
            <summary>
            Extension for the built-in <see cref="T:System.Linq.IQueryProvider"/> allowing for Raven specific operations
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.AfterQueryExecuted(System.Action{Raven.Abstractions.Data.QueryResult})">
            <summary>
            Callback to get the results of the query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.Customize(System.Action{Raven.Client.IDocumentQueryCustomization})">
            <summary>
            Customizes the query using the specified action
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.TransformWith(System.String)">
            <summary>
            The name of the transformer to use with this query
            </summary>
            <param name="transformerName"></param>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.For``1">
            <summary>
            Change the result type for the query provider
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.ToAsyncLuceneQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Convert the Linq query to a Lucene query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.ToAsyncDocumentQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Convert the Linq query to a Lucene query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.ToLuceneQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Convert the linq query to a Lucene query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.ToDocumentQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Convert the linq query to a Lucene query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.Lazily``1(System.Linq.Expressions.Expression,System.Action{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Convert the Linq query to a lazy Lucene query and provide a function to execute when it is being evaluated
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.CountLazily``1(System.Linq.Expressions.Expression)">
            <summary>
            Convert the Linq query to a lazy-count Lucene query and provide a function to execute when it is being evaluated
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.CountLazilyAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
            <summary>
            Convert the Linq query to a lazy-count Lucene query and provide a function to execute when it is being evaluated
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.MoveAfterQueryExecuted``1(Raven.Client.IAsyncDocumentQuery{``0})">
            <summary>
            Move the registered after query actions
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.AddQueryInput(System.String,Raven.Json.Linq.RavenJToken)">
            <summary>
            Adds input to transformer via a key/value pair
            </summary>
            <param name="input"></param>
            <param name="value"></param>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.AddTransformerParameter(System.String,Raven.Json.Linq.RavenJToken)">
            <summary>
            Adds input to transformer via a key/value pair
            </summary>
            <param name="input"></param>
            <param name="value"></param>
        </member>
        <member name="P:Raven.Client.Linq.IRavenQueryProvider.IndexName">
            <summary>
            Gets the name of the index.
            </summary>
            <value>The name of the index.</value>
        </member>
        <member name="P:Raven.Client.Linq.IRavenQueryProvider.QueryGenerator">
            <summary>
            Get the query generator
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.IRavenQueryProvider.CustomizeQuery">
            <summary>
            The action to execute on the customize query
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.IRavenQueryProvider.FieldsToFetch">
            <summary>
            Set the fields to fetch
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.IRavenQueryProvider.ResultTransformer">
            <summary>
            The result transformer to use
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.IRavenQueryProvider.TransformerParameters">
            <summary>
            Gets the query inputs being supplied to
            </summary>
        </member>
        <member name="T:Raven.Client.LinqExtensions">
            <summary>
             Extensions to the linq syntax
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.Include``1(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <typeparam name="TResult">The type of the object that holds the id that you want to include.</typeparam>
            <param name="source">The source for querying</param>
            <param name="path">The path, which is name of the property that holds the id of the object to include.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.LinqExtensions.Include``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <typeparam name="TResult">The type of the object that holds the id that you want to include.</typeparam>
            <typeparam name="TInclude">The type of the object that you want to include.</typeparam>
            <param name="source">The source for querying</param>
            <param name="path">The path, which is name of the property that holds the id of the object to include.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.LinqExtensions.AggregateBy``1(System.Linq.IQueryable{``0},System.String,System.String)">
            <summary>
            Query the facets results for this query using aggregation
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.AggregateBy``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Query the facets results for this query using aggregation
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.AggregateBy``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Query the facets results for this query using aggregation with a specific display name
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.ToFacets``1(System.Linq.IQueryable{``0},System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Query the facets results for this query using the specified facet document with the given start and pageSize
            </summary>
            <param name="facetSetupDoc">Name of the FacetSetup document</param>
            <param name="start">Start index for paging</param>
            <param name="pageSize">Paging PageSize. If set, overrides Facet.MaxResults</param>
        </member>
        <member name="M:Raven.Client.LinqExtensions.ToFacetQuery``1(System.Linq.IQueryable{``0},System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Transforms the query to the facet query that will allow you to execute multi faceted search
            </summary>
            <param name="facetSetupDoc">Name of the FacetSetup document</param>
            <param name="start">Start index for paging</param>
            <param name="pageSize">>Paging PageSize. If set, overrides Facet.MaxResults</param>
        </member>
        <member name="M:Raven.Client.LinqExtensions.ToFacets``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{Raven.Abstractions.Data.Facet},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Query the facets results for this query using the specified list of facets with the given start and pageSize
            </summary>
            <param name="facets">List of facets</param>
            <param name="start">Start index for paging</param>
            <param name="pageSize">Paging PageSize. If set, overrides Facet.MaxResults</param>
        </member>
        <member name="M:Raven.Client.LinqExtensions.ToFacetQuery``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{Raven.Abstractions.Data.Facet},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Query the facets results for this query using the specified list of facets with the given start and pageSize
            </summary>
            <param name="facets">List of facets</param>
            <param name="start">Start index for paging</param>
            <param name="pageSize">Paging PageSize. If set, overrides Facet.MaxResults</param>
        </member>
        <member name="M:Raven.Client.LinqExtensions.ToFacets``1(Raven.Client.IDocumentQuery{``0},System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Query the facets results for this query using the specified facet document with the given start and pageSize
            </summary>
            <param name="facetSetupDoc">Name of the FacetSetup document</param>
            <param name="start">Start index for paging</param>
            <param name="pageSize">Paging PageSize. If set, overrides Facet.MaxResults</param>
        </member>
        <member name="M:Raven.Client.LinqExtensions.ToFacets``1(Raven.Client.IDocumentQuery{``0},System.Collections.Generic.IEnumerable{Raven.Abstractions.Data.Facet},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Query the facets results for this query using the specified list of facets with the given start and pageSize
            </summary>
            <param name="facets">List of facets</param>
            <param name="start">Start index for paging</param>
            <param name="pageSize">Paging PageSize. If set, overrides Facet.MaxResults</param>
        </member>
        <member name="M:Raven.Client.LinqExtensions.ToFacetsLazy``1(System.Linq.IQueryable{``0},System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Lazily Query the facets results for this query using the specified facet document with the given start and pageSize
            </summary>
            <param name="facetSetupDoc">Name of the FacetSetup document</param>
            <param name="start">Start index for paging</param>
            <param name="pageSize">Paging PageSize. If set, overrides Facet.MaxResults</param>
        </member>
        <member name="M:Raven.Client.LinqExtensions.ToFacetsLazy``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{Raven.Abstractions.Data.Facet},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Lazily Query the facets results for this query using the specified list of facets with the given start and pageSize
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.ToFacetsLazy``1(Raven.Client.IDocumentQuery{``0},System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Lazily Query the facets results for this query using the specified facet document with the given start and pageSize
            </summary>
            <param name="facetSetupDoc">Name of the FacetSetup document</param>
            <param name="start">Start index for paging</param>
            <param name="pageSize">Paging PageSize. If set, overrides Facet.MaxResults</param>
        </member>
        <member name="M:Raven.Client.LinqExtensions.ToFacetsLazy``1(Raven.Client.IDocumentQuery{``0},System.Collections.Generic.IEnumerable{Raven.Abstractions.Data.Facet},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Lazily Query the facets results for this query using the specified list of facets with the given start and pageSize
            </summary>
            <param name="facets">List of facets</param>
            <param name="start">Start index for paging</param>
            <param name="pageSize">Paging PageSize. If set, overrides Facet.MaxResults</param>
        </member>
        <member name="M:Raven.Client.LinqExtensions.ToFacetsAsync``1(System.Linq.IQueryable{``0},System.String,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Async Query the facets results for this query using the specified facet document with the given start and pageSize
            </summary>
            <param name="facetSetupDoc">Name of the FacetSetup document</param>
            <param name="start">Start index for paging</param>
            <param name="pageSize">Paging PageSize. If set, overrides Facet.MaxResults</param>
        </member>
        <member name="M:Raven.Client.LinqExtensions.ToFacetsAsync``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{Raven.Abstractions.Data.Facet},System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Async Query the facets results for this query using the specified list of facets with the given start and pageSize
            </summary>
            <param name="facets">List of facets</param>
            <param name="start">Start index for paging</param>
            <param name="pageSize">Paging PageSize. If set, overrides Facet.MaxResults</param>
        </member>
        <member name="M:Raven.Client.LinqExtensions.ToFacetsAsync``1(Raven.Client.IAsyncDocumentQuery{``0},System.String,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Async Query the facets results for this query using the specified facet document with the given start and pageSize
            </summary>
            <param name="facetSetupDoc">Name of the FacetSetup document</param>
            <param name="start">Start index for paging</param>
            <param name="pageSize">Paging PageSize. If set, overrides Facet.MaxResults</param>
        </member>
        <member name="M:Raven.Client.LinqExtensions.ToFacetsAsync``1(Raven.Client.IAsyncDocumentQuery{``0},System.Collections.Generic.IEnumerable{Raven.Abstractions.Data.Facet},System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Async Query the facets results for this query using the specified list of facets with the given start and pageSize
            </summary>
            <param name="facets">List of facets</param>
            <param name="start">Start index for paging</param>
            <param name="pageSize">Paging PageSize. If set, overrides Facet.MaxResults</param>
        </member>
        <member name="M:Raven.Client.LinqExtensions.As``1(System.Linq.IQueryable)">
            <summary>
            Project into a different type.
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.Intersect``1(System.Linq.IQueryable{``0})">
            <summary>
            Partition the query so we can intersect different parts of the query
            across different index entries.
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.ProjectFromIndexFieldsInto``1(System.Linq.IQueryable)">
            <summary>
            Project from index fields (must be stored) into different type. If fields are not stored in index, document fields will be used.
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.Suggest(System.Linq.IQueryable)">
            <summary>
            Suggest alternative values for the queried term
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.Suggest(System.Linq.IQueryable,Raven.Abstractions.Data.SuggestionQuery)">
            <summary>
            Suggest alternative values for the queried term
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.SuggestLazy(System.Linq.IQueryable)">
            <summary>
            Lazy Suggest alternative values for the queried term
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.SuggestLazy(System.Linq.IQueryable,Raven.Abstractions.Data.SuggestionQuery)">
            <summary>
            Lazy Suggest alternative values for the queried term
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.SuggestAsync(System.Linq.IQueryable,Raven.Abstractions.Data.SuggestionQuery,System.Threading.CancellationToken)">
            <summary>
            Suggest alternative values for the queried term
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.SuggestAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
            <summary>
            Suggest alternative values for the queried term
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.LazilyAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Register the query as a lazy async query in the session and return a lazy async
            instance that will evaluate the query only when needed
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.LazilyAsync``1(System.Linq.IQueryable{``0},System.Action{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Register the query as a lazy async query in the session and return a lazy async
            instance that will evaluate the query only when needed
            As well as a function to execute when the value is evaluated
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.Lazily``1(System.Linq.IQueryable{``0})">
            <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.Lazily``1(System.Linq.IQueryable{``0},System.Action{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            As well as a function to execute when the value is evaluated
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.CountLazily``1(System.Linq.IQueryable{``0})">
            <summary>
            Register the query as a lazy-count query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.CountLazilyAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Register the query as a lazy-count query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Returns a list of results for a query asynchronously. 
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            
            <param name="source">
            The <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/> that contains the elements to be counted.
            </param>
            
            <returns>
            true if the source sequence contains any elements; otherwise, false.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:Raven.Client.LinqExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Determines whether any element of a sequence satisfies a condition.
            </summary>
            
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            
            <param name="source">
            The <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/> that contains the elements to be counted.
            </param>
            
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            
            <returns>
            true if any elements in the source sequence pass the test in the specified
            predicate; otherwise, false.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:Raven.Client.LinqExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
            
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            
            <param name="source">
            The <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/> that contains the elements to be counted.
            </param>
            
            <returns>
            The number of elements in the input sequence.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            
            <exception cref="T:System.OverflowException">
            The number of elements in source is larger than <see cref="F:System.Int32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Raven.Client.LinqExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns the number of elements in the specified sequence that satisfies a condition.
            </summary>
            
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            
            <param name="source">
            The <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/> that contains the elements to be counted.
            </param>
            
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            
            <returns>
            The number of elements in the sequence that satisfies the condition in
            the predicate function.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
            
            <exception cref="T:System.OverflowException">
            The number of elements in source is larger than <see cref="F:System.Int32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Raven.Client.LinqExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the first element of a sequence.
            </summary>
            
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            
            <param name="source">
            The <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/> to return the first element of.
            </param>
            
            <returns>
            The first element in source.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
            The source sequence is empty or source
            is not of type <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/>.
            </exception>
        </member>
        <member name="M:Raven.Client.LinqExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the first element of a sequence that satisfies a specified condition.
            </summary>
            
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            
            <param name="source">
            The <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/> to return the first element of.
            </param>
            
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            
            <returns>
            The first element in source.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
            No element satisfies the condition in predicate,
            the source sequence is empty or source
            is not of type <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/>.
            </exception>
        </member>
        <member name="M:Raven.Client.LinqExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the first element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            
            <param name="source">
            The <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/> to return the first element of.
            </param>
            
            <returns>
            default(TSource) if source is empty; otherwise,
            the first element in source.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
            source is not of type <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/>.
            </exception>
        </member>
        <member name="M:Raven.Client.LinqExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the first element of a sequence that satisfies a specified
            condition or a default value if no such element is found.
            </summary>
            
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            
            <param name="source">
            The <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/> to return the first element of.
            </param>
            
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            
            <returns>
            default(TSource) if source is empty or
            if no element passes the test specified by predicate;
            otherwise, the first element in source that passes
            the test specified by predicate.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
            source is not of type <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/>.
            </exception>
        </member>
        <member name="M:Raven.Client.LinqExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the only element of a sequence, and throws an exception if there
            is not exactly one element in the sequence.
            </summary>
            
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            
            <param name="source">
            The <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/> to return the single element of.
            </param>
            
            <returns>
            The single element of the input sequence.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
            The source sequence is empty, has more than one element or
            is not of type <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/>.
            </exception>
        </member>
        <member name="M:Raven.Client.LinqExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the only element of a sequence, and throws an exception if there
            is not exactly one element in the sequence.
            </summary>
            
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            
            <param name="source">
            The <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/> to return the single element of.
            </param>
            
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            
            <returns>
            The single element of the input sequence that satisfies the condition in predicate.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
            No element satisfies the condition in predicate, more than
            one element satisfies the condition, the source sequence is empty or
            source is not of type <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/>.
            </exception>
        </member>
        <member name="M:Raven.Client.LinqExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the only element of a sequence, or a default value if the
            sequence is empty; this method throws an exception if there is more than one
            element in the sequence.
            </summary>
            
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            
            <param name="source">
            The <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/> to return the first element of.
            </param>
            
            <returns>
            The single element of the input sequence, or default(TSource)
            if the sequence contains no elements.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
            source has more than one element or
            is not of type <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/>.
            </exception>
        </member>
        <member name="M:Raven.Client.LinqExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the only element of a sequence that satisfies a specified
            condition or a default value if no such element exists; this method throws an
            exception if more than one element satisfies the condition.
            </summary>
            
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            
            <param name="source">
            The <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/> to return the first element of.
            </param>
            
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            
            <returns>
            The single element of the input sequence that satisfies the condition in predicate,
            or default(TSource) if no such element is found.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
            More than one element satisfies the condition in predicate
            or source is not of type <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/>.
            </exception>
        </member>
        <member name="M:Raven.Client.LinqExtensions.Search``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Decimal,Raven.Client.SearchOptions,Raven.Client.EscapeQueryOptions)">
            <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.OrderByScore``1(System.Linq.IQueryable{``0})">
            <summary>
            Perform an initial sort by lucene score.
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.OrderByScoreDescending``1(System.Linq.IQueryable{``0})">
            <summary>
            Perform an initial sort by lucene score descending.
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.RavenQueryProvider`1">
            <summary>
            An implementation of <see cref="T:Raven.Client.Linq.IRavenQueryProvider"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.#ctor(Raven.Client.Linq.IDocumentQueryGenerator,System.String,Raven.Client.RavenQueryStatistics,Raven.Client.RavenQueryHighlightings,Raven.Client.Connection.IDatabaseCommands,Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Linq.RavenQueryProvider`1"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.For``1">
            <summary>
            Change the result type for the query provider
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>
            The value that results from executing the specified query.
            </returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Executes the specified expression.
            </summary>
            <typeparam name="S"></typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>
            The value that results from executing the specified query.
            </returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.AfterQueryExecuted(System.Action{Raven.Abstractions.Data.QueryResult})">
            <summary>
            Callback to get the results of the query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.Customize(System.Action{Raven.Client.IDocumentQueryCustomization})">
            <summary>
            Customizes the query using the specified action
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.MoveAfterQueryExecuted``1(Raven.Client.IAsyncDocumentQuery{``0})">
            <summary>
            Move the registered after query actions
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.ToAsyncLuceneQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Convert the expression to a Lucene query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.ToAsyncDocumentQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Convert the expression to a Lucene query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.Lazily``1(System.Linq.Expressions.Expression,System.Action{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.LazilyAsync``1(System.Linq.Expressions.Expression,System.Action{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Register the query as a lazy async query in the session and return a lazy async 
            instance that will evaluate the query only when needed
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.CountLazily``1(System.Linq.Expressions.Expression)">
            <summary>
            Register the query as a lazy-count query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.CountLazilyAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
            <summary>
            Register the query as a lazy-count query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.ToLuceneQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Convert the expression to a Lucene query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.ToDocumentQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Convert the expression to a Lucene query
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProvider`1.CustomizedQuery">
            <summary>
            Gets the actions for customizing the generated lucene query
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProvider`1.IndexName">
            <summary>
            Gets the name of the index.
            </summary>
            <value>The name of the index.</value>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProvider`1.QueryGenerator">
            <summary>
            Get the query generator
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProvider`1.FieldsToFetch">
            <summary>
            Set the fields to fetch
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProvider`1.ResultTransformer">
            <summary>
            Gets the results transformer to use
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProvider`1.FieldsToRename">
            <summary>
            Set the fields to rename
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.RavenQueryProviderProcessor`1">
            <summary>
            Process a Linq expression to a Lucene query
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.queryGenerator">
            <summary>
            The query generator
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.indexName">
            <summary>
            The index name
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.#ctor(Raven.Client.Linq.IDocumentQueryGenerator,System.Action{Raven.Client.IDocumentQueryCustomization},System.Action{Raven.Abstractions.Data.QueryResult},System.String,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.List{Raven.Client.Linq.RenamedField},System.Boolean,System.String,System.Collections.Generic.Dictionary{System.String,Raven.Json.Linq.RavenJToken})">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Linq.RavenQueryProviderProcessor`1"/> class.
            </summary>
            <param name="queryGenerator">The document query generator.</param>
            <param name="customizeQuery">The customize query.</param>
            <param name="afterQueryExecuted">Executed after the query run, allow access to the query results</param>
            <param name="indexName">The name of the index the query is executed against.</param>
            <param name="fieldsToFetch">The fields to fetch in this query</param>
            <param name="fieldsTRename">The fields to rename for the results of this query</param>
            <param name="isMapReduce"></param>
            <param name="resultsTransformer"></param>
            <param name="transformerParameters"></param>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.VisitExpression(System.Linq.Expressions.Expression)">
            <summary>
            Visits the expression and generate the lucene query
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetMember(System.Linq.Expressions.Expression)">
            <summary>
            Gets member info for the specified expression and the path to that expression
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetLuceneQueryFor(System.Linq.Expressions.Expression)">
            <summary>
            Gets the lucene query.
            </summary>
            <value>The lucene query.</value>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetDocumentQueryFor(System.Linq.Expressions.Expression)">
            <summary>
            Gets the lucene query.
            </summary>
            <value>The lucene query.</value>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetDocumentQueryForAsync(System.Linq.Expressions.Expression)">
            <summary>
            Gets the lucene query.
            </summary>
            <value>The lucene query.</value>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetAsyncLuceneQueryFor(System.Linq.Expressions.Expression)">
            <summary>
            Gets the lucene query.
            </summary>
            <value>The lucene query.</value>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetAsyncDocumentQueryFor(System.Linq.Expressions.Expression)">
            <summary>
            Gets the lucene query.
            </summary>
            <value>The lucene query.</value>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProviderProcessor`1.CurrentPath">
            <summary>
            Gets the current path in the case of expressions within collections
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProviderProcessor`1.FieldsToFetch">
            <summary>
            Gets or sets the fields to fetch.
            </summary>
            <value>The fields to fetch.</value>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProviderProcessor`1.FieldsToRename">
            <summary>
            Rename the fields from one name to another
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType">
            <summary>
            Different query types 
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.Any">
            <summary>
            
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.Count">
            <summary>
            Get count of items for the query
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.LongCount">
            <summary>
            Get count of items for the query as an Int64
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.First">
            <summary>
            Get only the first item
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.FirstOrDefault">
            <summary>
            Get only the first item (or null)
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.Single">
            <summary>
            Get only the first item (or throw if there are more than one)
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.SingleOrDefault">
            <summary>
            Get only the first item (or throw if there are more than one) or null if empty
            </summary>
        </member>
        <member name="T:Raven.Client.RavenQueryStatistics">
            <summary>
            Statistics about a raven query.
            Such as how many records match the query
            </summary>
        </member>
        <member name="M:Raven.Client.RavenQueryStatistics.UpdateQueryStats(Raven.Abstractions.Data.QueryResult)">
            <summary>
            Update the query stats from the query results
            </summary>
        </member>
        <member name="P:Raven.Client.RavenQueryStatistics.IsStale">
            <summary>
            Whatever the query returned potentially stale results
            </summary>
        </member>
        <member name="P:Raven.Client.RavenQueryStatistics.DurationMilliseconds">
            <summary>
            The duration of the query _server side_
            </summary>
        </member>
        <member name="P:Raven.Client.RavenQueryStatistics.TotalResults">
            <summary>
            What was the total count of the results that matched the query
            </summary>
        </member>
        <member name="P:Raven.Client.RavenQueryStatistics.SkippedResults">
            <summary>
            Gets or sets the skipped results
            </summary>
        </member>
        <member name="P:Raven.Client.RavenQueryStatistics.Timestamp">
            <summary>
            The time when the query results were unstale.
            </summary>
        </member>
        <member name="P:Raven.Client.RavenQueryStatistics.IndexName">
            <summary>
            The name of the index queried
            </summary>
        </member>
        <member name="P:Raven.Client.RavenQueryStatistics.IndexTimestamp">
            <summary>
            The timestamp of the queried index
            </summary>
        </member>
        <member name="P:Raven.Client.RavenQueryStatistics.IndexEtag">
            <summary>
            The etag of the queried index
            </summary>
        </member>
        <member name="P:Raven.Client.RavenQueryStatistics.NonAuthoritativeInformation">
            <summary>
            Gets or sets a value indicating whether any of the documents returned by this query
            are non authoritative (modified by uncommitted transaction).
            </summary>
        </member>
        <member name="P:Raven.Client.RavenQueryStatistics.LastQueryTime">
            <summary>
            The timestamp of the last time the index was queried
            </summary>
        </member>
        <member name="P:Raven.Client.RavenQueryStatistics.TimingsInMilliseconds">
            <summary>
            Detailed timings for various parts of a query (Lucene search, loading documents, transforming results)
            </summary>
        </member>
        <member name="P:Raven.Client.RavenQueryStatistics.ResultSize">
            <summary>
            The size of the request which were sent from the server.
            This value is the _uncompressed_ size. 
            </summary>
        </member>
        <member name="P:Raven.Client.RavenQueryStatistics.ScoreExplanations">
            <summary>
            Gets or sets explanations of document scores 
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.BaseShardedDocumentSession`1.StoreRecoveryInformation(System.Guid,System.Guid,System.Byte[])">
            <summary>
            Stores the recovery information for the specified transaction
            </summary>
            <param name="resourceManagerId">The resource manager Id for this transaction</param>
            <param name="txId">The tx id.</param>
            <param name="recoveryInformation">The recovery information.</param>
        </member>
        <member name="M:Raven.Client.Shard.BaseShardedDocumentSession`1.Query``1(System.String,System.Boolean)">
            <summary>
            Queries the specified index using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <param name="indexName">Name of the index.</param>
            <param name="isMapReduce">Whatever we are querying a map/reduce index (modify how we treat identifier properties)</param>
        </member>
        <member name="M:Raven.Client.Shard.BaseShardedDocumentSession`1.Query``1">
            <summary>
            Query RavenDB dynamically using LINQ
            </summary>
            <typeparam name="T">The result of the query</typeparam>
        </member>
        <member name="M:Raven.Client.Shard.BaseShardedDocumentSession`1.Query``2">
            <summary>
            Queries the index specified by <typeparamref name="TIndexCreator"/> using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.BaseShardedDocumentSession`1.DocumentQueryGeneratorQuery``1(System.String,System.Boolean)">
            <summary>
            Implements IDocumentQueryGenerator.Query
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.BaseShardedDocumentSession`1.DocumentQueryGeneratorAsyncQuery``1(System.String,System.Boolean)">
            <summary>
            Implements IDocumentQueryGenerator.AsyncQuery
            </summary>
        </member>
        <member name="T:Raven.Client.Shard.AsyncShardedDocumentSession">
            <summary>
            Implements Unit of Work for accessing a set of sharded RavenDB servers
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.AsyncShardedDocumentSession.AsyncLuceneQuery``2">
            <summary>
            Queries the index specified by <typeparamref name="TIndexCreator"/> using lucene syntax.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.AsyncShardedDocumentSession.AsyncDocumentQuery``2">
            <summary>
            Queries the index specified by <typeparamref name="TIndexCreator"/> using lucene syntax.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.AsyncShardedDocumentSession.Raven#Client#IAsyncDocumentSession#SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            Saves all the changes to the Raven server.
            </summary>
        </member>
        <member name="T:Raven.Client.Shard.IShardResolutionStrategy">
            <summary>
            Implementers of this interface provide a way to decide which shards will be queried
            for a specified operation
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.IShardResolutionStrategy.GenerateShardIdFor(System.Object,Raven.Client.ITransactionalDocumentSession)">
            <summary>
             Generate a shard id for the specified entity
             </summary>
        </member>
        <member name="M:Raven.Client.Shard.IShardResolutionStrategy.MetadataShardIdFor(System.Object)">
            <summary>
             The shard id for the server that contains the metadata (such as the HiLo documents)
             for the given entity
             </summary>
        </member>
        <member name="M:Raven.Client.Shard.IShardResolutionStrategy.PotentialShardsFor(Raven.Client.Shard.ShardRequestData)">
            <summary>
             Selects the shard ids appropriate for the specified data.
             </summary><returns>Return a list of shards ids that will be search. Returning null means search all shards.</returns>
        </member>
        <member name="T:Raven.Client.Shard.ShardedDocumentSession">
            <summary>
            Implements Unit of Work for accessing a set of sharded RavenDB servers
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.#ctor(System.String,Raven.Client.Shard.ShardedDocumentStore,Raven.Client.Document.DocumentSessionListeners,System.Guid,Raven.Client.Shard.ShardStrategy,System.Collections.Generic.IDictionary{System.String,Raven.Client.Connection.IDatabaseCommands})">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Shard.ShardedDocumentSession"/> class.
            </summary>
            <param name="shardStrategy">The shard strategy.</param>
            <param name="shardDbCommands">The shard IDatabaseCommands.</param>
            <param name="id"></param>
            <param name="documentStore"></param>
            <param name="listeners"></param>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Raven#Client#Document#Batches#ILazySessionOperations#Load``1(System.Collections.Generic.IEnumerable{System.String},System.Action{``0[]})">
            <summary>
            Loads the specified ids and a function to call when it is evaluated
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Raven#Client#Document#Batches#ILazySessionOperations#Load``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the specified ids.
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Raven#Client#Document#Batches#ILazySessionOperations#Load``1(System.String)">
            <summary>
            Loads the specified id.
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Raven#Client#Document#Batches#ILazySessionOperations#Load``1(System.String,System.Action{``0})">
            <summary>
            Loads the specified id and a function to call when it is evaluated
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Raven#Client#Document#Batches#ILazySessionOperations#Load``1(System.ValueType)">
            <summary>
            Loads the specified entity with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Raven#Client#Document#Batches#ILazySessionOperations#Load``1(System.ValueType,System.Action{``0})">
            <summary>
            Loads the specified entity with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Raven#Client#Document#Batches#ILazySessionOperations#Include(System.String)">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Raven#Client#Document#Batches#ILazySessionOperations#Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.LazyLoadInternal``1(System.String[],System.Collections.Generic.KeyValuePair{System.String,System.Type}[],System.Action{``0[]})">
            <summary>
            Register to lazily load documents and include
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Raven#Client#IDocumentSession#SaveChanges">
            <summary>
            Saves all the changes to the Raven server.
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentSession.Lazily">
            <summary>
            Access the lazy operations
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentSession.Raven#Client#ISyncAdvancedSessionOperation#Eagerly">
            <summary>
            Access the eager operations
            </summary>
        </member>
        <member name="T:Raven.Client.Shard.ShardedDocumentStore">
            <summary>
            Implements a sharded document store
            Hiding most sharding details behind this and the <see cref="T:Raven.Client.Shard.ShardedDocumentSession"/> gives you the ability to use
            sharding without really thinking about this too much
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.#ctor(Raven.Client.Shard.ShardStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Shard.ShardedDocumentStore"/> class.
            </summary>
            <param name="shardStrategy">The shard strategy.</param>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.OpenAsyncSession">
            <summary>
            Opens the async session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.OpenAsyncSession(System.String)">
            <summary>
            Opens the async session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.AggressivelyCacheFor(System.TimeSpan)">
            <summary>
            Setup the context for aggressive caching.
            </summary>
            <param name="cacheDuration">Specify the aggressive cache duration</param>
            <remarks>
            aggressive caching means that we will not check the server to see whatever the response
            we provide is current or not, but will serve the information directly from the local cache
            without touching the server.
            </remarks>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.DisableAggressiveCaching">
            <summary>
            Setup the context for no aggressive caching
            </summary>
            <remarks>
            This is mainly useful for internal use inside RavenDB, when we are executing
            queries that has been marked with WaitForNonStaleResults, we temporarily disable
            aggressive caching.
            </remarks>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.SetRequestsTimeoutFor(System.TimeSpan)">
            <summary>
            Setup the WebRequest timeout for the session
            </summary>
            <param name="timeout">Specify the timeout duration</param>
            <remarks>
            Sets the timeout for the JsonRequest.  Scoped to the Current Thread.
            </remarks>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.OpenSession">
            <summary>
            Opens the session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.OpenSession(System.String)">
            <summary>
            Opens the session for a particular database
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.OpenSession(Raven.Client.Document.OpenSessionOptions)">
            <summary>
            Opens the session with the specified options.
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.GetLastWrittenEtag">
            <summary>
             Gets the etag of the last document written by any session belonging to this 
             document store
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.Initialize">
            <summary>
            Initializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.ExecuteTransformer(Raven.Client.Indexes.AbstractTransformerCreationTask)">
            <summary>
            Executes the transformer creation
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.ExecuteIndex(Raven.Client.Indexes.AbstractIndexCreationTask)">
            <summary>
            Executes the index creation against each of the shards.
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.ExecuteIndexAsync(Raven.Client.Indexes.AbstractIndexCreationTask)">
            <summary>
            Executes the index creation against each of the shards Async.
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentStore.SharedOperationsHeaders">
            <summary>
            Gets the shared operations headers.
            </summary>
            <value>The shared operations headers.</value>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentStore.HasJsonRequestFactory">
            <summary>
            Whatever this instance has json request factory available
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentStore.JsonRequestFactory">
            <summary>
            Get the <see cref="T:Raven.Client.Connection.HttpJsonRequestFactory"/> for this store
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentStore.Identifier">
            <summary>
            Gets or sets the identifier for this store.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="E:Raven.Client.Shard.ShardedDocumentStore.AfterDispose">
            <summary>
            Called after dispose is completed
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentStore.AsyncDatabaseCommands">
            <summary>
            Gets the async database commands.
            </summary>
            <value>The async database commands.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentStore.DatabaseCommands">
            <summary>
            Gets the database commands.
            </summary>
            <value>The database commands.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentStore.Url">
            <summary>
            Gets or sets the URL.
            </summary>
        </member>
        <member name="T:Raven.Client.Shard.IShardAccessStrategy">
            <summary>
            Apply an operation to all the shard session
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.IShardAccessStrategy.Apply``1(System.Collections.Generic.IList{Raven.Client.Connection.IDatabaseCommands},Raven.Client.Shard.ShardRequestData,System.Func{Raven.Client.Connection.IDatabaseCommands,System.Int32,``0})">
            <summary>
            Applies the specified action to all shard sessions.
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.IShardAccessStrategy.ApplyAsync``1(System.Collections.Generic.IList{Raven.Client.Connection.Async.IAsyncDatabaseCommands},Raven.Client.Shard.ShardRequestData,System.Func{Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.Int32,System.Threading.Tasks.Task{``0}})">
            <summary>
            Applies the specified action to all shard sessions.
            </summary>
        </member>
        <member name="E:Raven.Client.Shard.IShardAccessStrategy.OnError">
            <summary>
            Occurs on error, allows to handle an error one (or more) of the nodes
            is failing
            </summary>
        </member>
        <member name="E:Raven.Client.Shard.IShardAccessStrategy.OnAsyncError">
            <summary>
            Occurs on error, allows to handle an error one (or more) of the nodes
            is failing
            </summary>
        </member>
        <member name="T:Raven.Client.Shard.ParallelShardAccessStrategy">
            <summary>
            Apply an operation to all the shard session in parallel
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ParallelShardAccessStrategy.Apply``1(System.Collections.Generic.IList{Raven.Client.Connection.IDatabaseCommands},Raven.Client.Shard.ShardRequestData,System.Func{Raven.Client.Connection.IDatabaseCommands,System.Int32,``0})">
            <summary>
            Applies the specified action to all shard sessions in parallel
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ParallelShardAccessStrategy.ApplyAsync``1(System.Collections.Generic.IList{Raven.Client.Connection.Async.IAsyncDatabaseCommands},Raven.Client.Shard.ShardRequestData,System.Func{Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.Int32,System.Threading.Tasks.Task{``0}})">
            <summary>
            Applies the specified action to all shard sessions in parallel
            </summary>
        </member>
        <member name="T:Raven.Client.Shard.SequentialShardAccessStrategy">
            <summary>
            Apply an operation to all the shard session in sequence
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.SequentialShardAccessStrategy.Apply``1(System.Collections.Generic.IList{Raven.Client.Connection.IDatabaseCommands},Raven.Client.Shard.ShardRequestData,System.Func{Raven.Client.Connection.IDatabaseCommands,System.Int32,``0})">
            <summary>
            Applies the specified action for all shard sessions.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="commands">The shard sessions.</param>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.DefaultShardResolutionStrategy.GenerateShardIdFor(System.Object,Raven.Client.ITransactionalDocumentSession)">
            <summary>
             Generate a shard id for the specified entity
             </summary>
        </member>
        <member name="M:Raven.Client.Shard.DefaultShardResolutionStrategy.MetadataShardIdFor(System.Object)">
            <summary>
             The shard id for the server that contains the metadata (such as the HiLo documents)
             for the given entity
             </summary>
        </member>
        <member name="M:Raven.Client.Shard.DefaultShardResolutionStrategy.PotentialShardsFor(Raven.Client.Shard.ShardRequestData)">
            <summary>
             Selects the shard ids appropriate for the specified data.
             </summary><returns>Return a list of shards ids that will be search. Returning null means search all shards.</returns>
        </member>
        <member name="T:Raven.Client.Shard.ShardRequestData">
            <summary>
            Information required to resolve the appropriate shard for an entity / entity and key
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardRequestData.Keys">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardRequestData.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>The type of the entity.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardRequestData.Query">
            <summary>
            Gets or sets the query being executed
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardRequestData.IndexName">
            <summary>
            The index name for this query
            </summary>
        </member>
        <member name="T:Raven.Client.Shard.ShardStrategy">
            <summary>
            Default shard strategy for the sharding document store
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.DefaultMergeQueryResults(Raven.Abstractions.Data.IndexQuery,System.Collections.Generic.IList{Raven.Abstractions.Data.QueryResult})">
            <summary>
            Merge the query results from all the shards into a single query results object by simply
            concatenating all of the values
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardingOn``1">
            <summary>
            Instructs the sharding strategy to shard the <typeparamref name="TEntity"/> instances based on 
            round robin strategy.
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardingOn``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Func{System.String,System.String})">
            <summary>
            Instructs the sharding strategy to shard the <typeparamref name="TEntity"/> instances based on 
            the property specified in <paramref name="shardingProperty"/>, with an optional translation to
            the shard id.
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardingOn``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``1,System.String},System.Func{System.String,System.String})">
            <summary>
            Instructs the sharding strategy to shard the <typeparamref name="TEntity"/> instances based on 
            the property specified in <paramref name="shardingProperty"/>, with an optional translation of the value
            from a non string representation to a string and from a string to the shard id.
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardStrategy.MergeQueryResults">
            <summary>
            Merge the query results from all the shards into a single query results object
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardStrategy.ShardResolutionStrategy">
            <summary>
            Gets or sets the shard resolution strategy.
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardStrategy.ShardAccessStrategy">
            <summary>
            Gets or sets the shard access strategy.
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardStrategy.ModifyDocumentId">
            <summary>
            Get or sets the modification for the document id for sharding
            </summary>
        </member>
        <member name="T:Raven.Client.Util.JSBeautify">
            <summary>
            Original code taken from:
            https://raw.github.com/einars/js-beautify/master/attic/unmaintained/c-sharp/JSBeautify.cs
            Used under the BSD license: https://github.com/einars/js-beautify/blob/master/license.txt
            </summary>
        </member>
        <member name="T:Raven.Client.Util.Inflector">
            <summary>
            The Inflector class transforms words from one 
            form to another. For example, from singular to plural.
            </summary>
        </member>
        <member name="M:Raven.Client.Util.Inflector.Pluralize(System.String)">
            <summary>
            Return the plural of a word.
            </summary>
            <param name="word">The singular form</param>
            <returns>The plural form of <paramref name="word"/></returns>
        </member>
        <member name="M:Raven.Client.Util.Inflector.Singularize(System.String)">
            <summary>
            Return the singular of a word.
            </summary>
            <param name="word">The plural form</param>
            <returns>The singular form of <paramref name="word"/></returns>
        </member>
        <member name="M:Raven.Client.Util.Inflector.Capitalize(System.String)">
            <summary>
            Capitalizes a word.
            </summary>
            <param name="word">The word to be capitalized.</param>
            <returns><paramref name="word"/> capitalized.</returns>
        </member>
        <member name="T:Raven.Client.Util.ObjectReferenceEqualityComparer`1">
            <summary>
            A generic object comparer that would only use object's reference, 
            ignoring any <see cref="T:System.IEquatable`1"/> or <see cref="M:System.Object.Equals(System.Object)"/>  overrides.
            </summary>
        </member>
        <member name="F:Raven.Client.Util.ObjectReferenceEqualityComparer`1.Default">
            <summary>
            The default ObjectReferenceEqualityComparer instance
            </summary>
        </member>
        <member name="M:Raven.Client.Util.ObjectReferenceEqualityComparer`1.Equals(`0,`0)">
            <summary>
            When overridden in a derived class, determines whether two objects of type <typeparamref name="T"/> are equal.
            </summary>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            <param name="x">The first object to compare.</param><param name="y">The second object to compare.</param>
        </member>
        <member name="M:Raven.Client.Util.ObjectReferenceEqualityComparer`1.GetHashCode(`0)">
            <summary>
            When overridden in a derived class, serves as a hash function for the specified object for hashing algorithms and data structures, such as a hash table.
            </summary>
            <returns>
            A hash code for the specified object.
            </returns>
            <param name="obj">The object for which to get a hash code.</param><exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:Raven.Client.WhereParams">
            <summary>
            Parameters for the Where Equals call
            </summary>
        </member>
        <member name="M:Raven.Client.WhereParams.#ctor">
            <summary>
            Create a new instance 
            </summary>
        </member>
        <member name="P:Raven.Client.WhereParams.FieldName">
            <summary>
            The field name
            </summary>
        </member>
        <member name="P:Raven.Client.WhereParams.Value">
            <summary>
            The field value
            </summary>
        </member>
        <member name="P:Raven.Client.WhereParams.IsAnalyzed">
            <summary>
            Should the field be analyzed
            </summary>
        </member>
        <member name="P:Raven.Client.WhereParams.AllowWildcards">
            <summary>
            Should the field allow wildcards
            </summary>
        </member>
        <member name="P:Raven.Client.WhereParams.IsNestedPath">
            <summary>
            Is this a root property or not?
            </summary>
        </member>
    </members>
</doc>
