<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Polly</name>
    </assembly>
    <members>
        <member name="T:Polly.CircuitBreakerSyntax">
            <summary>
            Fluent API for defining a Circuit Breaker <see cref="T:Polly.Policy"/>. 
            </summary>
        </member>
        <member name="M:Polly.CircuitBreakerSyntax.CircuitBreaker(Polly.PolicyBuilder,System.Int32,System.TimeSpan)">
            <summary>
            <para> Builds a <see cref="T:Polly.Policy"/> that will function like a Circuit Breaker.</para>
            <para>The circuit will break after <paramref name="exceptionsAllowedBeforeBreaking"/>
            exceptions that are handled by this policy are raised. The circuit will stay
            broken for the <paramref name="durationOfBreak"/>. Any attempt to execute this policy
            while the circuit is broken, will immediately throw a <see cref="T:Polly.CircuitBreaker.BrokenCircuitException"/> containing the exception 
            that broke the cicuit.
            </para>
            <para>If the first action after the break duration period results in an exception, the circuit will break
            again for another <paramref name="durationOfBreak"/>, otherwise it will reset.
            </para>
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="exceptionsAllowedBeforeBreaking">The number of exceptions that are allowed before opening the circuit.</param>
            <param name="durationOfBreak">The duration the circuit will stay open before resetting.</param>
            <returns>The policy instance.</returns>
            <remarks>(see "Release It!" by Michael T. Nygard fi)</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">exceptionsAllowedBeforeBreaking;Value must be greater than zero.</exception>
        </member>
        <member name="T:Polly.CircuitBreaker.BrokenCircuitException">
            <summary>
            Exception thrown when a circuit is broken.
            </summary>
        </member>
        <member name="M:Polly.CircuitBreaker.BrokenCircuitException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Polly.CircuitBreaker.BrokenCircuitException"/> class.
            </summary>
        </member>
        <member name="M:Polly.CircuitBreaker.BrokenCircuitException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Polly.CircuitBreaker.BrokenCircuitException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Polly.CircuitBreaker.BrokenCircuitException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Polly.CircuitBreaker.BrokenCircuitException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:Polly.ContextualPolicy">
            <summary>
            Transient exception handling policies that can be applied to delegates.
            These policies can be called with arbitrary context data.
            </summary>
        </member>
        <member name="M:Polly.ContextualPolicy.Execute(System.Action,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes the specified action within the policy.
            </summary>
            <param name="action">The action to perform.</param>
            <param name="contextData">Arbitrary data that is passed to the exception policy.</param>
            <exception cref="T:System.ArgumentNullException">contextData</exception>
        </member>
        <member name="M:Polly.ContextualPolicy.Execute(System.Action)">
            <summary>
            Executes the specified action within the policy.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Polly.ContextualPolicy.Execute``1(System.Func{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes the specified action within the policy and returns the Result.
            </summary>
            <typeparam name="TResult">The type of the Result.</typeparam>
            <param name="action">The action to perform.</param>
            <param name="contextData">Arbitrary data that is passed to the exception policy.</param>
            <returns>
            The value returned by the action
            </returns>
            <exception cref="T:System.ArgumentNullException">contextData</exception>
        </member>
        <member name="M:Polly.ContextualPolicy.Execute``1(System.Func{``0})">
            <summary>
            Executes the specified action within the policy and returns the Result.
            </summary>
            <typeparam name="TResult">The type of the Result.</typeparam>
            <param name="action">The action to perform.</param>
            <returns>
            The value returned by the action
            </returns>
        </member>
        <member name="T:Polly.OrSyntax">
            <summary>
            Fluent API for chaining exceptions that will be handled by a <see cref="T:Polly.Policy"/>. 
            </summary>
        </member>
        <member name="M:Polly.OrSyntax.Or``1(Polly.PolicyBuilder)">
            <summary>
            Specifies the type of exception that this policy can handle.
            </summary>
            <typeparam name="TException">The type of the exception to handle.</typeparam>
            <param name="policyBuilder">The current builder to chain off.</param>
            <returns>The PolicyBuilder instance.</returns>
        </member>
        <member name="M:Polly.OrSyntax.Or``1(Polly.PolicyBuilder,System.Func{``0,System.Boolean})">
            <summary>
            Specifies the type of exception that this policy can handle with addition filters on this exception type.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="policyBuilder">The current builder to chain off.</param>
            <param name="exceptionPredicate">The exception predicate to filter the type of exception this policy can handle.</param>
            <returns>The PolicyBuilder instance.</returns>
        </member>
        <member name="T:Polly.Policy">
            <summary>
            Transient exception handling policies that can
            be applied to delegates
            </summary>
        </member>
        <member name="M:Polly.Policy.Execute(System.Action)">
            <summary>
            Executes the specified action within the policy.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Polly.Policy.ExecuteAndCapture(System.Action)">
            <summary>
            Executes the specified action within the policy and returns the captured result
            </summary>
            <param name="action">The action to perform.</param>
            <returns>The captured result</returns>
        </member>
        <member name="M:Polly.Policy.Execute``1(System.Func{``0})">
            <summary>
            Executes the specified action within the policy and returns the result.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="action">The action to perform.</param>
            <returns>The value returned by the action</returns>
        </member>
        <member name="M:Polly.Policy.ExecuteAndCapture``1(System.Func{``0})">
            <summary>
            Executes the specified action within the policy and returns the captured result
            </summary>
            <param name="action">The action to perform.</param>
            <returns>The captured result</returns>
        </member>
        <member name="M:Polly.Policy.Handle``1">
            <summary>
            Specifies the type of exception that this policy can handle.
            </summary>
            <typeparam name="TException">The type of the exception to handle.</typeparam>
            <returns>The PolicyBuilder instance.</returns>
        </member>
        <member name="M:Polly.Policy.Handle``1(System.Func{``0,System.Boolean})">
            <summary>
            Specifies the type of exception that this policy can handle with addition filters on this exception type.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="exceptionPredicate">The exception predicate to filter the type of exception this policy can handle.</param>
            <returns>The PolicyBuilder instance.</returns>
        </member>
        <member name="M:Polly.Policy.ExecuteAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Executes the specified asynchronous action within the policy.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Polly.Policy.ExecuteAndCaptureAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Executes the specified asynchronous action within the policy and returns the captured result.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Polly.Policy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
                Executes the specified asynchronous action within the policy and returns the result.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="action">The action to perform.</param>
            <returns>The value returned by the action</returns>
        </member>
        <member name="M:Polly.Policy.ExecuteAndCaptureAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
                Executes the specified asynchronous action within the policy and returns the result.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="action">The action to perform.</param>
            <returns>The value returned by the action</returns>
        </member>
        <member name="T:Polly.PolicyBuilder">
            <summary>
            Builder class that holds the list of current exception predicates.
            </summary>
        </member>
        <member name="M:Polly.PolicyBuilder.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Polly.PolicyBuilder.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Polly.PolicyBuilder.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Polly.PolicyBuilder.GetType">
            <summary>
            Gets the <see cref="T:System.Type" /> of the current instance.
            </summary>
            <returns>
            The <see cref="T:System.Type" /> instance that represents the exact runtime type of the current instance.
            </returns>
        </member>
        <member name="T:Polly.PolicyResult">
            <summary>
            The captured result of executing a policy
            </summary>
        </member>
        <member name="P:Polly.PolicyResult.Outcome">
            <summary>
              The outcome of executing the policy
            </summary>
        </member>
        <member name="P:Polly.PolicyResult.FinalException">
            <summary>
             The final exception captured. Will be null if policy executed successfully
            </summary>
        </member>
        <member name="P:Polly.PolicyResult.ExceptionType">
            <summary>
             The exception type of the final exception captured. Will be null if policy executed successfully
            </summary>
        </member>
        <member name="T:Polly.PolicyResult`1">
            <summary>
            The captured result of executing a policy
            </summary>
        </member>
        <member name="P:Polly.PolicyResult`1.Outcome">
            <summary>
              The outcome of executing the policy
            </summary>
        </member>
        <member name="P:Polly.PolicyResult`1.FinalException">
            <summary>
             The final exception captured. Will be null if policy executed successfully
            </summary>
        </member>
        <member name="P:Polly.PolicyResult`1.ExceptionType">
            <summary>
             The exception type of the final exception captured. Will be null if policy executed successfully
            </summary>
        </member>
        <member name="P:Polly.PolicyResult`1.Result">
            <summary>
            The result of executing the policy. Will be default(TResult) is the policy failed
            </summary>
        </member>
        <member name="T:Polly.OutcomeType">
            <summary>
            Represents the outcome of executing a policy
            </summary>
        </member>
        <member name="F:Polly.OutcomeType.Successful">
            <summary>
            Indicates that the policy ultimately executed successfully
            </summary>
        </member>
        <member name="F:Polly.OutcomeType.Failure">
            <summary>
            Indicates that the policy ultimately failed
            </summary>
        </member>
        <member name="T:Polly.ExceptionType">
            <summary>
            Represents the type of exception resulting from a failed policy
            </summary>
        </member>
        <member name="F:Polly.ExceptionType.HandledByThisPolicy">
            <summary>
            An exception type that has been defined to be handled by this policy
            </summary>
        </member>
        <member name="F:Polly.ExceptionType.Unhandled">
            <summary>
            An exception type that has been not been defined to be handled by this policy
            </summary>
        </member>
        <member name="T:Polly.RetrySyntax">
            <summary>
            Fluent API for defining a Retry <see cref="T:Polly.Policy"/>. 
            </summary>
            <summary>
                Fluent API for defining a Retry <see cref="T:Polly.Policy"/>.
            </summary>
        </member>
        <member name="M:Polly.RetrySyntax.Retry(Polly.PolicyBuilder)">
            <summary>
            Builds a <see cref="T:Polly.Policy"/> that will retry once.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <returns>The policy instance.</returns>
        </member>
        <member name="M:Polly.RetrySyntax.Retry(Polly.PolicyBuilder,System.Int32)">
            <summary>
            Builds a <see cref="T:Polly.Policy"/> that will retry <paramref name="retryCount"/> times.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="retryCount">The retry count.</param>
            <returns>The policy instance.</returns>
        </member>
        <member name="M:Polly.RetrySyntax.Retry(Polly.PolicyBuilder,System.Action{System.Exception,System.Int32})">
            <summary>
            Builds a <see cref="T:Polly.Policy"/> that will retry once
            calling <paramref name="onRetry"/> on retry with the raised exception and retry count.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="onRetry">The action to call on each retry.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">retryCount;Value must be greater than zero.</exception>
            <exception cref="T:System.ArgumentNullException">onRetry</exception>
        </member>
        <member name="M:Polly.RetrySyntax.Retry(Polly.PolicyBuilder,System.Int32,System.Action{System.Exception,System.Int32})">
            <summary>
            Builds a <see cref="T:Polly.Policy"/> that will retry <paramref name="retryCount"/> times
            calling <paramref name="onRetry"/> on each retry with the raised exception and retry count.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="retryCount">The retry count.</param>
            <param name="onRetry">The action to call on each retry.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">retryCount;Value must be greater than zero.</exception>
            <exception cref="T:System.ArgumentNullException">onRetry</exception>
        </member>
        <member name="M:Polly.RetrySyntax.Retry(Polly.PolicyBuilder,System.Action{System.Exception,System.Int32,Polly.Context})">
            <summary>
            Builds a <see cref="T:Polly.Policy"/> that will retry once
            calling <paramref name="onRetry"/> on retry with the raised exception, retry count and 
            execution context.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="onRetry">The action to call on each retry.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">retryCount;Value must be greater than zero.</exception>
            <exception cref="T:System.ArgumentNullException">onRetry</exception>
        </member>
        <member name="M:Polly.RetrySyntax.Retry(Polly.PolicyBuilder,System.Int32,System.Action{System.Exception,System.Int32,Polly.Context})">
            <summary>
            Builds a <see cref="T:Polly.Policy"/> that will retry <paramref name="retryCount"/> times
            calling <paramref name="onRetry"/> on each retry with the raised exception, retry count and 
            execution context.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="retryCount">The retry count.</param>
            <param name="onRetry">The action to call on each retry.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">retryCount;Value must be greater than zero.</exception>
            <exception cref="T:System.ArgumentNullException">onRetry</exception>
        </member>
        <member name="M:Polly.RetrySyntax.RetryForever(Polly.PolicyBuilder)">
            <summary>
            Builds a <see cref="T:Polly.Policy"/> that will retry indefinitely.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <returns>The policy instance.</returns>
        </member>
        <member name="M:Polly.RetrySyntax.RetryForever(Polly.PolicyBuilder,System.Action{System.Exception})">
            <summary>
            Builds a <see cref="T:Polly.Policy"/> that will retry indefinitely
            calling <paramref name="onRetry"/> on each retry with the raised exception.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="onRetry">The action to call on each retry.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentNullException">onRetry</exception>
        </member>
        <member name="M:Polly.RetrySyntax.RetryForever(Polly.PolicyBuilder,System.Action{System.Exception,Polly.Context})">
            <summary>
            Builds a <see cref="T:Polly.Policy"/> that will retry indefinitely
            calling <paramref name="onRetry"/> on each retry with the raised exception and
            execution context.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="onRetry">The action to call on each retry.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentNullException">onRetry</exception>
        </member>
        <member name="M:Polly.RetrySyntax.WaitAndRetry(Polly.PolicyBuilder,System.Int32,System.Func{System.Int32,System.TimeSpan})">
            <summary>
            Builds a <see cref="T:Polly.Policy"/> that will wait and retry <paramref name="retryCount"/> times.
            On each retry, the duration to wait is calculated by calling <paramref name="sleepDurationProvider"/> with
            the current retry attempt allowing an exponentially increasing wait time (exponential backoff).
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="retryCount">The retry count.</param>
            <param name="sleepDurationProvider">The function that provides the duration to wait for for a particular retry attempt.</param>
            <returns>The policy instance.</returns>
        </member>
        <member name="M:Polly.RetrySyntax.WaitAndRetry(Polly.PolicyBuilder,System.Int32,System.Func{System.Int32,System.TimeSpan},System.Action{System.Exception,System.TimeSpan})">
            <summary>
            Builds a <see cref="T:Polly.Policy"/> that will wait and retry <paramref name="retryCount"/> times
            calling <paramref name="onRetry"/> on each retry with the raised exception and the current sleep duration.
            On each retry, the duration to wait is calculated by calling <paramref name="sleepDurationProvider"/> with
            the current retry attempt allowing an exponentially increasing wait time (exponential backoff).
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="retryCount">The retry count.</param>
            <param name="sleepDurationProvider">The function that provides the duration to wait for for a particular retry attempt.</param>
            <param name="onRetry">The action to call on each retry.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">retryCount;Value must be greater than zero.</exception>
            <exception cref="T:System.ArgumentNullException">
            timeSpanProvider
            or
            onRetry
            </exception>
        </member>
        <member name="M:Polly.RetrySyntax.WaitAndRetry(Polly.PolicyBuilder,System.Int32,System.Func{System.Int32,System.TimeSpan},System.Action{System.Exception,System.TimeSpan,Polly.Context})">
            <summary>
            Builds a <see cref="T:Polly.Policy"/> that will wait and retry <paramref name="retryCount"/> times
            calling <paramref name="onRetry"/> on each retry with the raised exception, current sleep duration and
            execution context.
            On each retry, the duration to wait is calculated by calling <paramref name="sleepDurationProvider"/> with
            the current retry attempt allowing an exponentially increasing wait time (exponential backoff).
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="retryCount">The retry count.</param>
            <param name="sleepDurationProvider">The function that provides the duration to wait for for a particular retry attempt.</param>
            <param name="onRetry">The action to call on each retry.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">retryCount;Value must be greater than zero.</exception>
            <exception cref="T:System.ArgumentNullException">
            timeSpanProvider
            or
            onRetry
            </exception>
        </member>
        <member name="M:Polly.RetrySyntax.WaitAndRetry(Polly.PolicyBuilder,System.Collections.Generic.IEnumerable{System.TimeSpan})">
            <summary>
            Builds a <see cref="T:Polly.Policy"/> that will wait and retry as many times as there are provided <paramref name="sleepDurations"/>
            On each retry, the duration to wait is the current <paramref name="sleepDurations"/> item.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="sleepDurations">The sleep durations to wait for on each retry.</param>
            <returns>The policy instance.</returns>
        </member>
        <member name="M:Polly.RetrySyntax.WaitAndRetry(Polly.PolicyBuilder,System.Collections.Generic.IEnumerable{System.TimeSpan},System.Action{System.Exception,System.TimeSpan})">
            <summary>
            Builds a <see cref="T:Polly.Policy"/> that will wait and retry as many times as there are provided <paramref name="sleepDurations"/>
            calling <paramref name="onRetry"/> on each retry with the raised exception and the current sleep duration.
            On each retry, the duration to wait is the current <paramref name="sleepDurations"/> item.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="sleepDurations">The sleep durations to wait for on each retry.</param>
            <param name="onRetry">The action to call on each retry.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            sleepDurations
            or
            onRetry
            </exception>
        </member>
        <member name="M:Polly.RetrySyntax.WaitAndRetry(Polly.PolicyBuilder,System.Collections.Generic.IEnumerable{System.TimeSpan},System.Action{System.Exception,System.TimeSpan,Polly.Context})">
            <summary>
            Builds a <see cref="T:Polly.Policy"/> that will wait and retry as many times as there are provided <paramref name="sleepDurations"/>
            calling <paramref name="onRetry"/> on each retry with the raised exception, current sleep duration and
            execution context.
            On each retry, the duration to wait is the current <paramref name="sleepDurations"/> item.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="sleepDurations">The sleep durations to wait for on each retry.</param>
            <param name="onRetry">The action to call on each retry.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            sleepDurations
            or
            onRetry
            </exception>
        </member>
        <member name="M:Polly.RetrySyntax.RetryAsync(Polly.PolicyBuilder)">
            <summary>
            Builds a <see cref="T:Polly.Policy"/> that will retry once.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <returns>The policy instance.</returns>
        </member>
        <member name="M:Polly.RetrySyntax.RetryAsync(Polly.PolicyBuilder,System.Int32)">
            <summary>
                Builds a <see cref="T:Polly.Policy"/> that will retry <paramref name="retryCount"/> times.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="retryCount">The retry count.</param>
            <returns>The policy instance.</returns>
        </member>
        <member name="M:Polly.RetrySyntax.RetryAsync(Polly.PolicyBuilder,System.Action{System.Exception,System.Int32})">
            <summary>
                Builds a <see cref="T:Polly.Policy"/> that will retry once
                calling <paramref name="onRetry"/> on retry with the raised exception and retry count.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="onRetry">The action to call on each retry.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">retryCount;Value must be greater than zero.</exception>
            <exception cref="T:System.ArgumentNullException">onRetry</exception>
        </member>
        <member name="M:Polly.RetrySyntax.RetryAsync(Polly.PolicyBuilder,System.Int32,System.Action{System.Exception,System.Int32})">
            <summary>
                Builds a <see cref="T:Polly.Policy"/> that will retry <paramref name="retryCount"/> times
                calling <paramref name="onRetry"/> on each retry with the raised exception and retry count.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="retryCount">The retry count.</param>
            <param name="onRetry">The action to call on each retry.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">retryCount;Value must be greater than zero.</exception>
            <exception cref="T:System.ArgumentNullException">onRetry</exception>
        </member>
        <member name="M:Polly.RetrySyntax.RetryForeverAsync(Polly.PolicyBuilder)">
            <summary>
                Builds a <see cref="T:Polly.Policy"/> that will retry indefinitely.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <returns>The policy instance.</returns>
        </member>
        <member name="M:Polly.RetrySyntax.RetryForeverAsync(Polly.PolicyBuilder,System.Action{System.Exception})">
            <summary>
                Builds a <see cref="T:Polly.Policy"/> that will retry indefinitely
                calling <paramref name="onRetry"/> on each retry with the raised exception.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="onRetry">The action to call on each retry.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentNullException">onRetry</exception>
        </member>
        <member name="M:Polly.RetrySyntax.WaitAndRetryAsync(Polly.PolicyBuilder,System.Collections.Generic.IEnumerable{System.TimeSpan})">
            <summary>
                Builds a <see cref="T:Polly.Policy"/> that will wait and retry as many times as there are provided
                <paramref name="sleepDurations"/>
                On each retry, the duration to wait is the current <paramref name="sleepDurations"/> item.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="sleepDurations">The sleep durations to wait for on each retry.</param>
            <returns>The policy instance.</returns>
        </member>
        <member name="M:Polly.RetrySyntax.WaitAndRetryAsync(Polly.PolicyBuilder,System.Int32,System.Func{System.Int32,System.TimeSpan})">
            <summary>
                Builds a <see cref="T:Polly.Policy"/> that will wait and retry <paramref name="retryCount"/> times.
                On each retry, the duration to wait is calculated by calling <paramref name="sleepDurationProvider"/> with
                the current retry attempt allowing an exponentially increasing wait time (exponential backoff).
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="retryCount">The retry count.</param>
            <param name="sleepDurationProvider">The function that provides the duration to wait for for a particular retry attempt.</param>
            <returns>The policy instance.</returns>
        </member>
        <member name="M:Polly.RetrySyntax.WaitAndRetryAsync(Polly.PolicyBuilder,System.Int32,System.Func{System.Int32,System.TimeSpan},System.Action{System.Exception,System.TimeSpan})">
            <summary>
                Builds a <see cref="T:Polly.Policy"/> that will wait and retry <paramref name="retryCount"/> times
                calling <paramref name="onRetry"/> on each retry with the raised exception and the current sleep duration.
                On each retry, the duration to wait is calculated by calling <paramref name="sleepDurationProvider"/> with
                the current retry attempt allowing an exponentially increasing wait time (exponential backoff).
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="retryCount">The retry count.</param>
            <param name="sleepDurationProvider">The function that provides the duration to wait for for a particular retry attempt.</param>
            <param name="onRetry">The action to call on each retry.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">retryCount;Value must be greater than zero.</exception>
            <exception cref="T:System.ArgumentNullException">
                timeSpanProvider
                or
                onRetry
            </exception>
        </member>
        <member name="M:Polly.RetrySyntax.WaitAndRetryAsync(Polly.PolicyBuilder,System.Collections.Generic.IEnumerable{System.TimeSpan},System.Action{System.Exception,System.TimeSpan})">
            <summary>
                Builds a <see cref="T:Polly.Policy"/> that will wait and retry as many times as there are provided
                <paramref name="sleepDurations"/>
                calling <paramref name="onRetry"/> on each retry with the raised exception and the current sleep duration.
                On each retry, the duration to wait is the current <paramref name="sleepDurations"/> item.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="sleepDurations">The sleep durations to wait for on each retry.</param>
            <param name="onRetry">The action to call on each retry.</param>
            <returns>The policy instance.</returns>
            <exception cref="T:System.ArgumentNullException">
                sleepDurations
                or
                onRetry
            </exception>
        </member>
        <member name="T:Polly.Utilities.SystemClock">
            <summary>
            Time related delegates used to improve testability of the code
            </summary>
        </member>
        <member name="F:Polly.Utilities.SystemClock.Sleep">
            <summary>
            Allows the setting of a custom Thread.Sleep implementation for testing.
            By default this will be a call to <see cref="M:ManualResetEvent.WaitOne"/>
            </summary>
        </member>
        <member name="F:Polly.Utilities.SystemClock.UtcNow">
            <summary>
            Allows the setting of a custom DateTime.UtcNow implementation for testing.
            By default this will be a call to <see cref="P:System.DateTime.UtcNow"/>
            </summary>
        </member>
        <member name="M:Polly.Utilities.SystemClock.Reset">
            <summary>
            Resets the custom implementations to their defaults. 
            Should be called during test teardowns.
            </summary>
        </member>
        <member name="T:Polly.Context">
            <summary>
            A readonly dictionary of string key / object value pairs
            </summary>
        </member>
        <member name="T:Polly.CircuitBreakerSyntaxAsync">
            <summary>
            Fluent API for defining a Circuit Breaker <see cref="T:Polly.Policy"/>. 
            </summary>
        </member>
        <member name="M:Polly.CircuitBreakerSyntaxAsync.CircuitBreakerAsync(Polly.PolicyBuilder,System.Int32,System.TimeSpan)">
            <summary>
            <para> Builds a <see cref="T:Polly.Policy"/> that will function like a Circuit Breaker.</para>
            <para>The circuit will break after <paramref name="exceptionsAllowedBeforeBreaking"/>
            exceptions that are handled by this policy are raised. The circuit will stay
            broken for the <paramref name="durationOfBreak"/>. Any attempt to execute this policy
            while the circuit is broken, will immediately throw a <see cref="T:Polly.CircuitBreaker.BrokenCircuitException"/> containing the exception 
            that broke the cicuit.
            </para>
            <para>If the first action after the break duration period results in an exception, the circuit will break
            again for another <paramref name="durationOfBreak"/>, otherwise it will reset.
            </para>
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="exceptionsAllowedBeforeBreaking">The number of exceptions that are allowed before opening the circuit.</param>
            <param name="durationOfBreak">The duration the circuit will stay open before resetting.</param>
            <returns>The policy instance.</returns>
            <remarks>(see "Release It!" by Michael T. Nygard fi)</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">exceptionsAllowedBeforeBreaking;Value must be greater than zero.</exception>
        </member>
    </members>
</doc>
