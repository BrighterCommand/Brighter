<?xml version="1.0"?>
<doc>
  <assembly>
    <name>EventStore.ClientAPI.Embedded</name>
  </assembly>
  <members>
    <member name="T:EventStore.ClientAPI.Embedded.EmbeddedEventStoreConnection">
      <summary>
            Contains factory methods to build a connection to an in-process EventStore
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedEventStoreConnection.Create(EventStore.Core.ClusterVNode,System.String)">
      <summary>
            Creates a new embedded <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> to single node with default connection settings
            </summary>
      <param name="eventStore">The <see cref="T:EventStore.Core.ClusterVNode" /> to connect to. The node must already be running.</param>
      <param name="connectionName">Optional name of connection (will be generated automatically, if not provided)</param>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedEventStoreConnection.Create(EventStore.Core.ClusterVNode,EventStore.ClientAPI.ConnectionSettings,System.String)">
      <summary>
            Creates a new embedded <see cref="T:EventStore.ClientAPI.IEventStoreConnection" /> to single node using specific <see cref="T:EventStore.ClientAPI.ConnectionSettings" /></summary>
      <param name="eventStore">The <see cref="T:EventStore.Core.ClusterVNode" /> to connect to. The node must already be running.</param>
      <param name="connectionSettings">The <see cref="T:EventStore.ClientAPI.ConnectionSettings" /> to apply to the new connection</param>
      <param name="connectionName">Optional name of connection (will be generated automatically, if not provided)</param>
      <returns>
      </returns>
    </member>
    <member name="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder">
      <summary>
            Allows a client to build a <see cref="T:EventStore.Core.ClusterVNode" /> for use with the Embedded client API by specifying
            high level options rather than using the constructor of <see cref="T:EventStore.Core.ClusterVNode" /> directly.
            </summary>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.AsSingleNode">
      <summary>
            Returns a builder set to construct options for a single node instance
            </summary>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.AsClusterMember(System.Int32)">
      <summary>
            Returns a builder set to construct options for a cluster node instance with a cluster size 
            </summary>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.StartStandardProjections">
      <summary>
            Start standard projections.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.DisableHTTPCaching">
      <summary>
            Disable HTTP Caching.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.RunProjections(EventStore.ClientAPI.Embedded.ProjectionsMode,System.Int32)">
      <summary>
            Sets the mode and the number of threads on which to run projections.
            </summary>
      <param name="projectionsMode">The mode in which to run the projections system</param>
      <param name="numberOfThreads">The number of threads to use for projections. Defaults to 3.</param>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.AddCustomSubsystem(EventStore.Core.ISubsystem)">
      <summary>
            Adds a custom subsystem to the builder. NOTE: This is an advanced use case that most people will never need!
            </summary>
      <param name="subsystem">The subsystem to add</param>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.RunInMemory">
      <summary>
            Returns a builder set to run in memory only
            </summary>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.RunOnDisk(System.String)">
      <summary>
            Returns a builder set to write database files to the specified path
            </summary>
      <param name="path">The path on disk in which to write the database files</param>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.OnDefaultEndpoints">
      <summary>
            Sets the default endpoints on localhost (1113 tcp, 2113 http)
            </summary>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.WithInternalHttpOn(System.Net.IPEndPoint)">
      <summary>
            Sets the internal http endpoint to the specified value
            </summary>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.WithClusterGossipPort(System.Int32)">
      <summary>
            Sets the internal gossip port (used when using cluster dns, this should point to a known port gossip will be running on)
            </summary>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.WithExternalHttpOn(System.Net.IPEndPoint)">
      <summary>
            Sets the external http endpoint to the specified value
            </summary>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.WithInternalTcpOn(System.Net.IPEndPoint)">
      <summary>
            Sets the internal tcp endpoint to the specified value
            </summary>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.WithInternalSecureTcpOn(System.Net.IPEndPoint)">
      <summary>
            Sets the internal tcp endpoint to the specified value
            </summary>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.WithExternalTcpOn(System.Net.IPEndPoint)">
      <summary>
            Sets the external tcp endpoint to the specified value
            </summary>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.WithExternalSecureTcpOn(System.Net.IPEndPoint)">
      <summary>
            Sets the external tcp endpoint to the specified value
            </summary>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.EnableSsl">
      <summary>
            Sets that SSL should be used on connections
            </summary>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.WithGossipSeeds(System.Net.IPEndPoint[])">
      <summary>
            Sets the gossip seeds this node should talk to
            </summary>
      <param name="endpoints">The gossip seeds this node should try to talk to</param>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.MaximumMemoryTableSizeOf(System.Int32)">
      <summary>
            Sets the maximum size a memtable is allowed to reach (in count) before being moved to be a ptable
            </summary>
      <param name="size">The maximum count</param>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.DoNotVerifyDbHashes">
      <summary>
            Marks that the existing database files should not be checked for checksums on startup.
            </summary>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.NoGossipOnPublicInterface">
      <summary>
            Disables gossip on the public (client) interface
            </summary>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.NoAdminOnPublicInterface">
      <summary>
            Disables the admin interface on the public (client) interface
            </summary>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.NoStatsOnPublicInterface">
      <summary>
            Disables statistics screens on the public (client) interface
            </summary>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.VerifyDbHashes">
      <summary>
            Marks that the existing database files should be checked for checksums on startup.
            </summary>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.WithClusterDnsName(System.String)">
      <summary>
            Sets the dns name used for the discovery of other cluster nodes
            </summary>
      <param name="name">The dns name the node should use to discover gossip partners</param>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.WithWorkerThreads(System.Int32)">
      <summary>
            Sets the number of worker threads to use in shared threadpool
            </summary>
      <param name="count">The number of worker threads</param>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.AddInternalHttpPrefix(System.String)">
      <summary>
            Adds a http prefix for the internal http endpoint
            </summary>
      <param name="prefix">The prefix to add</param>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.AddExternalHttpPrefix(System.String)">
      <summary>
            Adds a http prefix for the external http endpoint
            </summary>
      <param name="prefix">The prefix to add</param>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.WithServerCertificateFromFile(System.String,System.String)">
      <summary>
            Sets the Server SSL Certificate to be loaded from a file
            </summary>
      <param name="path">The path to the certificate file</param>
      <param name="password">The password for the certificate</param>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.WithInternalHeartbeatInterval(System.TimeSpan)">
      <summary>
            Sets the heartbeat interval for the internal network interface.
            </summary>
      <param name="heartbeatInterval">The heartbeat interval</param>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.WithExternalHeartbeatInterval(System.TimeSpan)">
      <summary>
            Sets the heartbeat interval for the external network interface.
            </summary>
      <param name="heartbeatInterval">The heartbeat interval</param>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.WithInternalHeartbeatTimeout(System.TimeSpan)">
      <summary>
            Sets the heartbeat timeout for the internal network interface.
            </summary>
      <param name="heartbeatTimeout">The heartbeat timeout</param>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.WithExternalHeartbeatTimeout(System.TimeSpan)">
      <summary>
            Sets the heartbeat timeout for the external network interface.
            </summary>
      <param name="heartbeatTimeout">The heartbeat timeout</param>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.WithServerCertificateFromStore(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.String,System.String)">
      <summary>
            Sets the Server SSL Certificate to be loaded from a certificate store
            </summary>
      <param name="storeLocation">The location of the certificate store</param>
      <param name="storeName">The name of the certificate store</param>
      <param name="certificateSubjectName">The subject name of the certificate</param>
      <param name="certificateThumbprint">The thumbpreint of the certificate</param>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.WithTfChunkSize(System.Int32)">
      <summary>
            Sets the transaction file chunk size. Default is <see cref="F:EventStore.Core.TransactionLog.Chunks.TFConsts.ChunkSize" /></summary>
      <param name="chunkSize">The size of the chunk, in bytes</param>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.WithTfChunksCacheSize(System.Int64)">
      <summary>
            Sets the transaction file chunk cache size. Default is <see cref="F:EventStore.Core.TransactionLog.Chunks.TFConsts.ChunksCacheSize" /></summary>
      <param name="chunksCacheSize">The size of the cache</param>
      <returns>A <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> with the options set</returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.op_Implicit(EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder)~EventStore.Core.ClusterVNode">
      <summary>
            Converts an <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> to a <see cref="T:EventStore.Core.ClusterVNode" />.
            </summary>
      <param name="builder">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder.Build">
      <summary>
            Converts an <see cref="T:EventStore.ClientAPI.Embedded.EmbeddedVNodeBuilder" /> to a <see cref="T:EventStore.Core.ClusterVNode" />.
            </summary>
    </member>
    <member name="T:EventStore.ClientAPI.Embedded.ProjectionsMode">
      <summary>
            Enumerates possible modes for running projections
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Embedded.ProjectionsMode.None">
      <summary>
            Run no projections
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Embedded.ProjectionsMode.System">
      <summary>
            Run only system projections
            </summary>
    </member>
    <member name="F:EventStore.ClientAPI.Embedded.ProjectionsMode.All">
      <summary>
            Run user and system projections
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonReader.State">
      <summary>
            Specifies the state of the reader.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader" /> class with the specified <see cref="T:System.IO.TextReader" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>true if the next token was read successfully; false if there are no more tokens to read.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Skip">
      <summary>
            Skips the children of the current token.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken)">
      <summary>
            Sets the current token.
            </summary>
      <param name="newToken">The new token.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken,System.Object)">
      <summary>
            Sets the current token and value.
            </summary>
      <param name="newToken">The new token.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetStateBasedOnCurrent">
      <summary>
            Sets the state based on current token type.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Close">
      <summary>
            Changes the <see cref="T:Newtonsoft.Json.JsonReader.State" /> to Closed. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.CurrentState">
      <summary>
            Gets the current reader state.
            </summary>
      <value>The current reader state.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.CloseInput">
      <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader" /> should be closed when the reader is closed.
            </summary>
      <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader" /> when
            the reader is closed; otherwise false. The default is true.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.SupportMultipleContent">
      <summary>
            Gets or sets a value indicating whether multiple pieces of JSON content can
            be read from a continuous stream without erroring.
            </summary>
      <value>
            true to support reading multiple pieces of JSON content; otherwise false. The default is false.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.QuoteChar">
      <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.DateTimeZoneHandling">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> time zones are handling when reading JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.DateParseHandling">
      <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.FloatParseHandling">
      <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.MaxDepth">
      <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.TokenType">
      <summary>
            Gets the type of the current JSON token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Value">
      <summary>
            Gets the text value of the current JSON token.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.ValueType">
      <summary>
            Gets The Common Language Runtime (CLR) type for the current JSON token.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Depth">
      <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
      <value>The depth of the current token in the JSON document.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Path">
      <summary>
            Gets the path of the current JSON token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Culture">
      <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="reader">The reader.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="stream">The stream.</param>
      <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
      <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader,System.Boolean,System.DateTimeKind)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="reader">The reader.</param>
      <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
      <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>
            A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.Close">
      <summary>
            Changes the <see cref="T:Newtonsoft.Json.JsonReader.State" /> to Closed.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.JsonNet35BinaryCompatibility">
      <summary>
            Gets or sets a value indicating whether binary data reading should compatible with incorrect Json.NET 3.5 written binary.
            </summary>
      <value>
        <c>true</c> if binary data reading will be compatible with incorrect Json.NET 3.5 written binary; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.ReadRootValueAsArray">
      <summary>
            Gets or sets a value indicating whether the root object will be read as a JSON array.
            </summary>
      <value>
        <c>true</c> if the root object will be read as a JSON array; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.DateTimeKindHandling">
      <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.
            </summary>
      <value>The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.#ctor">
      <summary>
            Creates an instance of the <c>JsonWriter</c> class. 
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndObject">
      <summary>
            Writes the end of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndArray">
      <summary>
            Writes the end of an array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndConstructor">
      <summary>
            Writes the end constructor.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String,System.Boolean)">
      <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd">
      <summary>
            Writes the end of the current Json object or array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader)">
      <summary>
            Writes the current <see cref="T:Newtonsoft.Json.JsonReader" /> token and its children.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read the token from.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader,System.Boolean)">
      <summary>
            Writes the current <see cref="T:Newtonsoft.Json.JsonReader" /> token.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read the token from.</param>
      <param name="writeChildren">A flag indicating whether the current token's children should be written.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the specified end token.
            </summary>
      <param name="token">The end token to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteIndent">
      <summary>
            Writes indent characters.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueDelimiter">
      <summary>
            Writes the JSON value delimiter.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteIndentSpace">
      <summary>
            Writes an indent space.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON without changing the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteRawValue(System.String)">
      <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Single})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Double})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Char})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Guid})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.TimeSpan})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Object)">
      <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)">
      <summary>
            Writes out the given white space.
            </summary>
      <param name="ws">The string of white space characters.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.SetWriteState(Newtonsoft.Json.JsonToken,System.Object)">
      <summary>
            Sets the state of the JsonWriter,
            </summary>
      <param name="token">The JsonToken being written.</param>
      <param name="value">The value being written.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.CloseOutput">
      <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader" /> should be closed when the writer is closed.
            </summary>
      <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader" /> when
            the writer is closed; otherwise false. The default is true.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Top">
      <summary>
            Gets the top.
            </summary>
      <value>The top.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.WriteState">
      <summary>
            Gets the state of the writer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Path">
      <summary>
            Gets the path of the writer. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Formatting">
      <summary>
            Indicates how JSON text output is formatted.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.DateFormatHandling">
      <summary>
            Get or set how dates are written to JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.DateTimeZoneHandling">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> time zones are handling when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.StringEscapeHandling">
      <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.FloatFormatHandling">
      <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written to JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.DateFormatString">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatting when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Culture">
      <summary>
            Gets or sets the culture used when writing JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter" /> class.
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.BinaryWriter)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter" /> class.
            </summary>
      <param name="writer">The writer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the end.
            </summary>
      <param name="token">The token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRawValue(System.String)">
      <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Object)">
      <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteObjectId(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value that represents a BSON object id.
            </summary>
      <param name="value">The Object ID value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRegex(System.String,System.String)">
      <summary>
            Writes a BSON regex.
            </summary>
      <param name="pattern">The regex pattern.</param>
      <param name="options">The regex options.</param>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonWriter.DateTimeKindHandling">
      <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime" /> values to BSON.
            When set to <see cref="F:System.DateTimeKind.Unspecified" /> no conversion will occur.
            </summary>
      <value>The <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime" /> values to BSON.</value>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonObjectId">
      <summary>
            Represents a BSON Oid (object id).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonObjectId.#ctor(System.Byte[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonObjectId" /> class.
            </summary>
      <param name="value">The Oid value.</param>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonObjectId.Value">
      <summary>
            Gets or sets the value of the Oid.
            </summary>
      <value>The value of the Oid.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverter">
      <summary>
            Converts an object to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.GetSchema">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of the JSON produced by the JsonConverter.
            </summary>
      <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of the JSON produced by the JsonConverter.</returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverter.CanRead">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverter.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.BinaryConverter">
      <summary>
            Converts a binary value to and from a base 64 string value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DataSetConverter">
      <summary>
            Converts a <see cref="T:System.Data.DataSet" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
      <param name="valueType">Type of the value.</param>
      <returns>
        <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DataTableConverter">
      <summary>
            Converts a <see cref="T:System.Data.DataTable" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
      <param name="valueType">Type of the value.</param>
      <returns>
        <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.CustomCreationConverter`1">
      <summary>
            Create a custom object
            </summary>
      <typeparam name="T">The object type to convert.</typeparam>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)">
      <summary>
            Creates an object which will then be populated by the serializer.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>The created object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DateTimeConverterBase">
      <summary>
            Provides a base class for converting a <see cref="T:System.DateTime" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DiscriminatedUnionConverter">
      <summary>
            Converts a F# discriminated union type to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.EntityKeyMemberConverter">
      <summary>
            Converts an Entity Framework EntityKey to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.ExpandoObjectConverter">
      <summary>
            Converts an ExpandoObject to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.KeyValuePairConverter">
      <summary>
            Converts a <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.BsonObjectIdConverter">
      <summary>
            Converts a <see cref="T:Newtonsoft.Json.Bson.BsonObjectId" /> to and from JSON and BSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.RegexConverter">
      <summary>
            Converts a <see cref="T:System.Text.RegularExpressions.Regex" /> to and from JSON and BSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.StringEnumConverter">
      <summary>
            Converts an <see cref="T:System.Enum" /> to and from its name string value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Converters.StringEnumConverter" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.CamelCaseText">
      <summary>
            Gets or sets a value indicating whether the written enum text should be camel case.
            </summary>
      <value>
        <c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.AllowIntegerValues">
      <summary>
            Gets or sets a value indicating whether integer values are allowed.
            </summary>
      <value>
        <c>true</c> if integers are allowed; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.ConstructorHandling">
      <summary>
            Specifies how constructors are used when initializing objects during deserialization by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ConstructorHandling.Default">
      <summary>
            First attempt to use the public default constructor, then fall back to single paramatized constructor, then the non-public default constructor.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ConstructorHandling.AllowNonPublicDefaultConstructor">
      <summary>
            Json.NET will use a non-public default constructor before falling back to a paramatized constructor.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Converters.VersionConverter">
      <summary>
            Converts a <see cref="T:System.Version" /> to and from a string (e.g. "1.2.3.4").
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.VersionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.VersionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing property value of the JSON that is being converted.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.VersionConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.FloatFormatHandling">
      <summary>
            Specifies float format handling options when writing special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" /> with <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatFormatHandling.String">
      <summary>
            Write special floating point values as strings in JSON, e.g. "NaN", "Infinity", "-Infinity".
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatFormatHandling.Symbol">
      <summary>
            Write special floating point values as symbols in JSON, e.g. NaN, Infinity, -Infinity.
            Note that this will produce non-valid JSON.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatFormatHandling.DefaultValue">
      <summary>
            Write special floating point values as the property's default value in JSON, e.g. 0.0 for a <see cref="T:System.Double" /> property, null for a <see cref="T:System.Nullable`1" /> property.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.FloatParseHandling">
      <summary>
            Specifies how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatParseHandling.Double">
      <summary>
            Floating point numbers are parsed to <see cref="F:Newtonsoft.Json.FloatParseHandling.Double" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatParseHandling.Decimal">
      <summary>
            Floating point numbers are parsed to <see cref="F:Newtonsoft.Json.FloatParseHandling.Decimal" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonContainerAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Id">
      <summary>
            Gets or sets the id.
            </summary>
      <value>The id.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Title">
      <summary>
            Gets or sets the title.
            </summary>
      <value>The title.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Description">
      <summary>
            Gets or sets the description.
            </summary>
      <value>The description.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemConverterType">
      <summary>
            Gets the collection's items converter.
            </summary>
      <value>The collection's items converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.IsReference">
      <summary>
            Gets or sets a value that indicates whether to preserve object references.
            </summary>
      <value>
        <c>true</c> to keep object reference; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemIsReference">
      <summary>
            Gets or sets a value that indicates whether to preserve collection's items references.
            </summary>
      <value>
        <c>true</c> to keep collection's items object references; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemReferenceLoopHandling">
      <summary>
            Gets or sets the reference loop handling used when serializing the collection's items.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemTypeNameHandling">
      <summary>
            Gets or sets the type name handling used when serializing the collection's items.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonDictionaryAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the collection.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="T:Newtonsoft.Json.JsonException">
      <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="T:Newtonsoft.Json.DateFormatHandling">
      <summary>
            Specifies how dates are formatted when writing JSON text.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateFormatHandling.IsoDateFormat">
      <summary>
            Dates are written in the ISO 8601 format, e.g. "2012-03-21T05:40Z".
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateFormatHandling.MicrosoftDateFormat">
      <summary>
            Dates are written in the Microsoft JSON format, e.g. "\/Date(1198908717056)\/".
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.DateParseHandling">
      <summary>
            Specifies how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON text.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateParseHandling.None">
      <summary>
            Date formatted strings are not parsed to a date type and are read as strings.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateParseHandling.DateTime">
      <summary>
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:Newtonsoft.Json.DateParseHandling.DateTime" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset">
      <summary>
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.DateTimeZoneHandling">
      <summary>
            Specifies how to treat the time value when converting between string and <see cref="T:System.DateTime" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Local">
      <summary>
            Treat as local time. If the <see cref="T:System.DateTime" /> object represents a Coordinated Universal Time (UTC), it is converted to the local time.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Utc">
      <summary>
            Treat as a UTC. If the <see cref="T:System.DateTime" /> object represents a local time, it is converted to a UTC.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Unspecified">
      <summary>
            Treat as a local time if a <see cref="T:System.DateTime" /> is being converted to a string.
            If a string is being converted to <see cref="T:System.DateTime" />, convert to a local time if a time zone is specified.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind">
      <summary>
            Time zone information should be preserved when converting.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Formatting">
      <summary>
            Specifies formatting options for the <see cref="T:Newtonsoft.Json.JsonTextWriter" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Formatting.None">
      <summary>
            No special formatting is applied. This is the default.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Formatting.Indented">
      <summary>
            Causes child objects to be indented according to the <see cref="P:Newtonsoft.Json.JsonTextWriter.Indentation" /> and <see cref="P:Newtonsoft.Json.JsonTextWriter.IndentChar" /> settings.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConstructorAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to use the specified constructor when deserializing that object.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonExtensionDataAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to deserialize properties with no matching class member into the specified collection
            and write values during serialization.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonExtensionDataAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonExtensionDataAttribute" /> class.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonExtensionDataAttribute.WriteData">
      <summary>
            Gets or sets a value that indicates whether to write extension data when serializing the object.
            </summary>
      <value>
        <c>true</c> to write extension data when serializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonExtensionDataAttribute.ReadData">
      <summary>
            Gets or sets a value that indicates whether to read extension data when deserializing the object.
            </summary>
      <value>
        <c>true</c> to read extension data when deserializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ITraceWriter">
      <summary>
            Represents a trace writer.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ITraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
      <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
      <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
      <param name="message">The trace message.</param>
      <param name="ex">The trace exception. This parameter is optional.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ITraceWriter.LevelFilter">
      <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
      <value>The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter">
      <summary>
            Represents a trace writer that writes to the application's <see cref="T:System.Diagnostics.TraceListener" /> instances.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
      <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
      <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
      <param name="message">The trace message.</param>
      <param name="ex">The trace exception. This parameter is optional.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.LevelFilter">
      <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
      <value>
            The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IValueProvider">
      <summary>
            Provides methods to get and set values.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ExpressionValueProvider">
      <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using dynamic methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.#ctor(System.Reflection.MemberInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ExpressionValueProvider" /> class.
            </summary>
      <param name="memberInfo">The member info.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.UnderlyingType">
      <summary>
            Gets the underlying type for the contract.
            </summary>
      <value>The underlying type for the contract.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.CreatedType">
      <summary>
            Gets or sets the type created during deserialization.
            </summary>
      <value>The type created during deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.IsReference">
      <summary>
            Gets or sets whether this type contract is serialized as a reference.
            </summary>
      <value>Whether this type contract is serialized as a reference.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.Converter">
      <summary>
            Gets or sets the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for this contract.
            </summary>
      <value>The converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializedCallbacks">
      <summary>
            Gets or sets all methods called immediately after deserialization of the object.
            </summary>
      <value>The methods called immediately after deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializingCallbacks">
      <summary>
            Gets or sets all methods called during deserialization of the object.
            </summary>
      <value>The methods called during deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializedCallbacks">
      <summary>
            Gets or sets all methods called after serialization of the object graph.
            </summary>
      <value>The methods called after serialization of the object graph.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializingCallbacks">
      <summary>
            Gets or sets all methods called before serialization of the object.
            </summary>
      <value>The methods called before serialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnErrorCallbacks">
      <summary>
            Gets or sets all method called when an error is thrown during the serialization of the object.
            </summary>
      <value>The methods called when an error is thrown during the serialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserialized">
      <summary>
            Gets or sets the method called immediately after deserialization of the object.
            </summary>
      <value>The method called immediately after deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializing">
      <summary>
            Gets or sets the method called during deserialization of the object.
            </summary>
      <value>The method called during deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerialized">
      <summary>
            Gets or sets the method called after serialization of the object graph.
            </summary>
      <value>The method called after serialization of the object graph.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializing">
      <summary>
            Gets or sets the method called before serialization of the object.
            </summary>
      <value>The method called before serialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnError">
      <summary>
            Gets or sets the method called when an error is thrown during the serialization of the object.
            </summary>
      <value>The method called when an error is thrown during the serialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator">
      <summary>
            Gets or sets the default creator method used to create the object.
            </summary>
      <value>The default creator method used to create the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreatorNonPublic">
      <summary>
            Gets or sets a value indicating whether the default creator is non public.
            </summary>
      <value>
        <c>true</c> if the default object creator is non-public; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonContainerContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonContainerContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonContainerContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemConverter">
      <summary>
            Gets or sets the default collection items <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <value>The converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemIsReference">
      <summary>
            Gets or sets a value indicating whether the collection items preserve object references.
            </summary>
      <value>
        <c>true</c> if collection items preserve object references; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemReferenceLoopHandling">
      <summary>
            Gets or sets the collection item reference loop handling.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemTypeNameHandling">
      <summary>
            Gets or sets the collection item type name handling.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.MemoryTraceWriter">
      <summary>
            Represents a trace writer that writes to memory. When the trace message limit is
            reached then old trace messages will be removed as new messages are added.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.MemoryTraceWriter" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
      <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
      <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
      <param name="message">The trace message.</param>
      <param name="ex">The trace exception. This parameter is optional.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.GetTraceMessages">
      <summary>
            Returns an enumeration of the most recent trace messages.
            </summary>
      <returns>An enumeration of the most recent trace messages.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> of the most recent trace messages.
            </summary>
      <returns>
            A <see cref="T:System.String" /> of the most recent trace messages.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.MemoryTraceWriter.LevelFilter">
      <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
      <value>
            The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.IJsonLineInfo">
      <summary>
            Provides an interface to enable a class to return line and position information.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.IJsonLineInfo.HasLineInfo">
      <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
      <returns>
        <c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.IJsonLineInfo.LineNumber">
      <summary>
            Gets the current line number.
            </summary>
      <value>The current line number or 0 if no line information is available (for example, HasLineInfo returns false).</value>
    </member>
    <member name="P:Newtonsoft.Json.IJsonLineInfo.LinePosition">
      <summary>
            Gets the current line position.
            </summary>
      <value>The current line position or 0 if no line information is available (for example, HasLineInfo returns false).</value>
    </member>
    <member name="T:Newtonsoft.Json.StringEscapeHandling">
      <summary>
            Specifies how strings are escaped when writing JSON text.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.StringEscapeHandling.Default">
      <summary>
            Only control characters (e.g. newline) are escaped.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeNonAscii">
      <summary>
            All non-ASCII and control characters (e.g. newline) are escaped.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeHtml">
      <summary>
            HTML (&lt;, &gt;, &amp;, ', ") and control characters (e.g. newline) are escaped.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.IJEnumerable`1">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
      <typeparam name="T">The type of token</typeparam>
    </member>
    <member name="P:Newtonsoft.Json.Linq.IJEnumerable`1.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> with the specified key.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JToken">
      <summary>
            Represents an abstract JSON token.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
      <param name="t1">The first <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <param name="t2">The second <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <returns>true if the tokens are equal; otherwise false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AddAfterSelf(System.Object)">
      <summary>
            Adds the specified content immediately after this token.
            </summary>
      <param name="content">A content object that contains simple content or a collection of content objects to be added after this token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AddBeforeSelf(System.Object)">
      <summary>
            Adds the specified content immediately before this token.
            </summary>
      <param name="content">A content object that contains simple content or a collection of content objects to be added before this token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Ancestors">
      <summary>
            Returns a collection of the ancestor tokens of this token.
            </summary>
      <returns>A collection of the ancestor tokens of this token.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AfterSelf">
      <summary>
            Returns a collection of the sibling tokens after this token, in document order.
            </summary>
      <returns>A collection of the sibling tokens after this tokens, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.BeforeSelf">
      <summary>
            Returns a collection of the sibling tokens before this token, in document order.
            </summary>
      <returns>A collection of the sibling tokens before this token, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Value``1(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key converted to the specified type.
            </summary>
      <typeparam name="T">The type to convert the token to.</typeparam>
      <param name="key">The token key.</param>
      <returns>The converted token value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Children">
      <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Children``1">
      <summary>
            Returns a collection of the child tokens of this token, in document order, filtered by the specified type.
            </summary>
      <typeparam name="T">The type to filter the child tokens on.</typeparam>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Values``1">
      <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
      <typeparam name="T">The type to convert the values to.</typeparam>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Remove">
      <summary>
            Removes this token from its parent.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Replace(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Replaces this token with the specified token.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToString">
      <summary>
            Returns the indented JSON for this token.
            </summary>
      <returns>
            The indented JSON for this token.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
      <returns>The JSON for this token using the given formatting and converters.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Boolean">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Boolean" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTimeOffset">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.DateTimeOffset" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Boolean}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int64">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int64" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTime}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Decimal}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Double}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Char}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int32">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int32" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int16">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int16" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt16">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt16" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Char">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Char" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Byte" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.SByte">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.SByte" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int32}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int16}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt16}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Byte}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.SByte}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTime">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.DateTime" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int64}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Single}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Decimal">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Decimal" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt32}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt64}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Double">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Double" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Single">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Single" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.String">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.String" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt32">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt64">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt64" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte[]">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Byte[]" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Guid">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Guid" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Guid}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Guid" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.TimeSpan">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.TimeSpan" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.TimeSpan}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.TimeSpan" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Uri">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Uri" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Boolean)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTimeOffset)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Byte" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Byte})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.SByte)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.SByte" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.SByte})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int64)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int16)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Int16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt16)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int32)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Int32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTime)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Decimal)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Double)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Double" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Single)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Single" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.String)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.String" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt32)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt64)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte[])~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Byte[]" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Uri)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Uri" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.TimeSpan)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.TimeSpan" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.TimeSpan})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Guid)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Guid" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Guid})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.CreateReader">
      <summary>
            Creates an <see cref="T:Newtonsoft.Json.JsonReader" /> for this token.
            </summary>
      <returns>An <see cref="T:Newtonsoft.Json.JsonReader" /> that can be used to read this token and its descendants.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the value of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from an object using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when reading the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the value of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1">
      <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type)">
      <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="objectType">The object type that the token will be deserialized to.</param>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1(Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" /> using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when creating the object.</param>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" /> using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <param name="objectType">The object type that the token will be deserialized to.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when creating the object.</param>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>
            An <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>
            An <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String)">
      <summary>
            Selects a <see cref="T:Newtonsoft.Json.Linq.JToken" /> using a JPath expression. Selects the token that matches the object path.
            </summary>
      <param name="path">
            A <see cref="T:System.String" /> that contains a JPath expression.
            </param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" />, or null.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String,System.Boolean)">
      <summary>
            Selects a <see cref="T:Newtonsoft.Json.Linq.JToken" /> using a JPath expression. Selects the token that matches the object path.
            </summary>
      <param name="path">
            A <see cref="T:System.String" /> that contains a JPath expression.
            </param>
      <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectTokens(System.String)">
      <summary>
            Selects a collection of elements using a JPath expression.
            </summary>
      <param name="path">
            A <see cref="T:System.String" /> that contains a JPath expression.
            </param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the selected elements.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectTokens(System.String,System.Boolean)">
      <summary>
            Selects a collection of elements using a JPath expression.
            </summary>
      <param name="path">
            A <see cref="T:System.String" /> that contains a JPath expression.
            </param>
      <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the selected elements.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.DeepClone">
      <summary>
            Creates a new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken" />. All child tokens are recursively cloned.
            </summary>
      <returns>A new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.EqualityComparer">
      <summary>
            Gets a comparer that can compare two tokens for value equality.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JTokenEqualityComparer" /> that can compare two nodes for value equality.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Parent">
      <summary>
            Gets or sets the parent.
            </summary>
      <value>The parent.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Root">
      <summary>
            Gets the root <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The root <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.HasValues">
      <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Next">
      <summary>
            Gets the next sibling token of this node.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the next sibling token.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Previous">
      <summary>
            Gets the previous sibling token of this node.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the previous sibling token.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Path">
      <summary>
            Gets the path of the JSON token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.First">
      <summary>
            Get the first child token of this token.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Last">
      <summary>
            Get the last child token of this token.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JValue">
      <summary>
            Represents a value in JSON (string, integer, date, etc).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(Newtonsoft.Json.Linq.JValue)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class from another <see cref="T:Newtonsoft.Json.Linq.JValue" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JValue" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Decimal)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Char)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.UInt64)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTimeOffset)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Uri)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.TimeSpan)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CreateComment(System.String)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> comment with the given value.
            </summary>
      <param name="value">The value.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> comment with the given value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CreateString(System.String)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> string with the given value.
            </summary>
      <param name="value">The value.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> string with the given value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.Equals(Newtonsoft.Json.Linq.JValue)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="format">The format.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.IFormatProvider)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="formatProvider">The format provider.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String,System.IFormatProvider)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="format">The format.</param>
      <param name="formatProvider">The format provider.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CompareTo(Newtonsoft.Json.Linq.JValue)">
      <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj" />.
            Zero
            This instance is equal to <paramref name="obj" />.
            Greater than zero
            This instance is greater than <paramref name="obj" />.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance.
            </exception>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.HasValues">
      <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.Value">
      <summary>
            Gets or sets the underlying token value.
            </summary>
      <value>The underlying token value.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JRaw">
      <summary>
            Represents a raw JSON string.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(Newtonsoft.Json.Linq.JRaw)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw" /> class from another <see cref="T:Newtonsoft.Json.Linq.JRaw" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JRaw" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw" /> class.
            </summary>
      <param name="rawJson">The raw json.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.Create(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates an instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.
            </summary>
      <param name="reader">The reader.</param>
      <returns>An instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Required">
      <summary>
            Indicating whether a property is required.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.Default">
      <summary>
            The property is not required. The default state.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.AllowNull">
      <summary>
            The property must be defined in JSON but can be a null value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.Always">
      <summary>
            The property must be defined in JSON and cannot be a null value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonDynamicContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonDynamicContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.Properties">
      <summary>
            Gets the object's properties.
            </summary>
      <value>The object's properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.PropertyNameResolver">
      <summary>
            Gets or sets the property name resolver.
            </summary>
      <value>The property name resolver.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonISerializableContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonISerializableContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonISerializableContract.ISerializableCreator">
      <summary>
            Gets or sets the ISerializable object constructor.
            </summary>
      <value>The ISerializable object constructor.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonLinqContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonLinqContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DynamicValueProvider">
      <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using dynamic methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.#ctor(System.Reflection.MemberInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DynamicValueProvider" /> class.
            </summary>
      <param name="memberInfo">The member info.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ErrorEventArgs">
      <summary>
            Provides data for the Error event.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ErrorEventArgs.#ctor(System.Object,Newtonsoft.Json.Serialization.ErrorContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ErrorEventArgs" /> class.
            </summary>
      <param name="currentObject">The current object.</param>
      <param name="errorContext">The error context.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.CurrentObject">
      <summary>
            Gets the current object the error event is being raised against.
            </summary>
      <value>The current object the error event is being raised against.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorContext">
      <summary>
            Gets the error context.
            </summary>
      <value>The error context.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JPropertyDescriptor">
      <summary>
            Represents a view of a <see cref="T:Newtonsoft.Json.Linq.JProperty" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JPropertyDescriptor" /> class.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.CanResetValue(System.Object)">
      <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
      <returns>
            true if resetting the component changes its value; otherwise, false.
            </returns>
      <param name="component">The component to test for reset capability. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.GetValue(System.Object)">
      <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
      <returns>
            The value of a property for a given component.
            </returns>
      <param name="component">The component with the property for which to retrieve the value. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ResetValue(System.Object)">
      <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
      <param name="component">The component with the property value that is to be reset to the default value. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
      <param name="component">The component with the property value that is to be set. 
                            </param>
      <param name="value">The new value. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
      <returns>
            true if the property should be persisted; otherwise, false.
            </returns>
      <param name="component">The component with the property to be examined for persistence. 
                            </param>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.ComponentType">
      <summary>
            When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
      <returns>
            A <see cref="T:System.Type" /> that represents the type of component this property is bound to. When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> or <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> methods are invoked, the object specified might be an instance of this type.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.IsReadOnly">
      <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
      <returns>
            true if the property is read-only; otherwise, false.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.PropertyType">
      <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
      <returns>
            A <see cref="T:System.Type" /> that represents the type of the property.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.NameHashCode">
      <summary>
            Gets the hash code for the name of the member.
            </summary>
      <value>
      </value>
      <returns>
            The hash code for the name of the member.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IReferenceResolver">
      <summary>
            Used to resolve references when serializing and deserializing JSON by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(System.Object,System.String)">
      <summary>
            Resolves a reference to its object.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="reference">The reference to resolve.</param>
      <returns>The object that</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(System.Object,System.Object)">
      <summary>
            Gets the reference for the sepecified object.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="value">The object to get a reference for.</param>
      <returns>The reference to the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.IsReferenced(System.Object,System.Object)">
      <summary>
            Determines whether the specified object is referenced.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="value">The object to test for a reference.</param>
      <returns>
        <c>true</c> if the specified object is referenced; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.AddReference(System.Object,System.String,System.Object)">
      <summary>
            Adds a reference to the specified object.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="reference">The reference.</param>
      <param name="value">The object to reference.</param>
    </member>
    <member name="T:Newtonsoft.Json.PreserveReferencesHandling">
      <summary>
            Specifies reference handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            Note that references cannot be preserved when a value is set via a non-default constructor such as types that implement ISerializable.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="PreservingObjectReferencesOn" title="Preserve Object References" />
      </example>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.None">
      <summary>
            Do not preserve references when serializing types.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Objects">
      <summary>
            Preserve references when serializing into a JSON object structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Arrays">
      <summary>
            Preserve references when serializing into a JSON array structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.All">
      <summary>
            Preserve references when serializing.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonArrayAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the collection.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with a flag indicating whether the array can contain null items
            </summary>
      <param name="allowNullItems">A flag indicating whether the array can contain null items.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonArrayAttribute.AllowNullItems">
      <summary>
            Gets or sets a value indicating whether null items are allowed in the collection.
            </summary>
      <value>
        <c>true</c> if null items are allowed in the collection; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.DefaultValueHandling">
      <summary>
            Specifies default value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingObject" title="DefaultValueHandling Class" />
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingExample" title="DefaultValueHandling Ignore Example" />
      </example>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Include">
      <summary>
            Include members where the member value is the same as the member's default value when serializing objects.
            Included members are written to JSON. Has no effect when deserializing.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Ignore">
      <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            so that is is not written to JSON.
            This option will ignore all default values (e.g. <c>null</c> for objects and nullable typesl; <c>0</c> for integers,
            decimals and floating point numbers; and <c>false</c> for booleans). The default value ignored can be changed by
            placing the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> on the property.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Populate">
      <summary>
            Members with a default value but no JSON will be set to their default value when deserializing.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.IgnoreAndPopulate">
      <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            and sets members to their default value when deserializing.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverterAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to use the specified <see cref="T:Newtonsoft.Json.JsonConverter" /> when serializing the member or class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonConverterAttribute" /> class.
            </summary>
      <param name="converterType">Type of the converter.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverterAttribute.ConverterType">
      <summary>
            Gets the type of the converter.
            </summary>
      <value>The type of the converter.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonObjectAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(Newtonsoft.Json.MemberSerialization)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with the specified member serialization.
            </summary>
      <param name="memberSerialization">The member serialization.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonObjectAttribute.MemberSerialization">
      <summary>
            Gets or sets the member serialization.
            </summary>
      <value>The member serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonObjectAttribute.ItemRequired">
      <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
      <value>
            	A value indicating whether the object's properties are required.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializerSettings">
      <summary>
            Specifies the settings on a <see cref="T:Newtonsoft.Json.JsonSerializer" /> object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializerSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> class.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceLoopHandling">
      <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) is handled.
            </summary>
      <value>Reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.MissingMemberHandling">
      <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
      <value>Missing member handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ObjectCreationHandling">
      <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.NullValueHandling">
      <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            </summary>
      <value>Null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DefaultValueHandling">
      <summary>
            Gets or sets how null default are handled during serialization and deserialization.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Converters">
      <summary>
            Gets or sets a collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.
            </summary>
      <value>The converters.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.PreserveReferencesHandling">
      <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
      <value>The preserve references handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling">
      <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormat">
      <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
      <value>The type name assembly format.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ConstructorHandling">
      <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
      <value>The constructor handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ContractResolver">
      <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
      <value>The contract resolver.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceResolver">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
      <value>The reference resolver.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TraceWriter">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter" /> used by the serializer when writing trace messages.
            </summary>
      <value>The trace writer.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Binder">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> used by the serializer when resolving type names.
            </summary>
      <value>The binder.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Error">
      <summary>
            Gets or sets the error handler called during serialization and deserialization.
            </summary>
      <value>The error handler called during serialization and deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Context">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used by the serializer when invoking serialization callback methods.
            </summary>
      <value>The context.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatString">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatting when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.MaxDepth">
      <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Formatting">
      <summary>
            Indicates how JSON text output is formatted.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatHandling">
      <summary>
            Get or set how dates are written to JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateTimeZoneHandling">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> time zones are handling during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateParseHandling">
      <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.FloatFormatHandling">
      <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written as JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.FloatParseHandling">
      <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.StringEscapeHandling">
      <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Culture">
      <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.CheckAdditionalContent">
      <summary>
            Gets a value indicating whether there will be a check for additional content after deserializing an object.
            </summary>
      <value>
        <c>true</c> if there will be a check for additional content after deserializing an object; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonValidatingReader">
      <summary>
            Represents a reader that provides <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> validation.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.#ctor(Newtonsoft.Json.JsonReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonValidatingReader" /> class that
            validates the content returned from the given <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from while validating.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Value">
      <summary>
            Gets the text value of the current JSON token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Depth">
      <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
      <value>The depth of the current token in the JSON document.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Path">
      <summary>
            Gets the path of the current JSON token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.QuoteChar">
      <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.TokenType">
      <summary>
            Gets the type of the current JSON token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.ValueType">
      <summary>
            Gets the Common Language Runtime (CLR) type for the current JSON token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Schema">
      <summary>
            Gets or sets the schema.
            </summary>
      <value>The schema.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Reader">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.JsonReader" /> used to construct this <see cref="T:Newtonsoft.Json.JsonValidatingReader" />.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.JsonReader" /> specified in the constructor.</value>
    </member>
    <member name="E:Newtonsoft.Json.JsonValidatingReader.ValidationEventHandler">
      <summary>
            Sets an event handler for receiving schema validation errors.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenEqualityComparer">
      <summary>
            Compares tokens to determine whether they are equal.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.Equals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines whether the specified objects are equal.
            </summary>
      <param name="x">The first object of type <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <param name="y">The second object of type <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.GetHashCode(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Returns a hash code for the specified object.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <returns>A hash code for the specified object.</returns>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.</exception>
    </member>
    <member name="T:Newtonsoft.Json.MemberSerialization">
      <summary>
            Specifies the member serialization options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.OptOut">
      <summary>
            All public members are serialized by default. Members can be excluded using <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute" /> or <see cref="T:System.NonSerializedAttribute" />.
            This is the default member serialization mode.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.OptIn">
      <summary>
            Only members must be marked with <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> or <see cref="T:System.Runtime.Serialization.DataMemberAttribute" /> are serialized.
            This member serialization mode can also be set by marking the class with <see cref="T:System.Runtime.Serialization.DataContractAttribute" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.Fields">
      <summary>
            All public and private fields are serialized. Members can be excluded using <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute" /> or <see cref="T:System.NonSerializedAttribute" />.
            This member serialization mode can also be set by marking the class with <see cref="T:System.SerializableAttribute" />
            and setting IgnoreSerializableAttribute on <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> to false.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.ObjectCreationHandling">
      <summary>
            Specifies how object creation is handled by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Auto">
      <summary>
            Reuse existing objects, create new objects when needed.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Reuse">
      <summary>
            Only reuse existing objects.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Replace">
      <summary>
            Always create new objects.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Converters.IsoDateTimeConverter">
      <summary>
            Converts a <see cref="T:System.DateTime" /> to and from the ISO 8601 date format (e.g. 2008-04-12T12:53Z).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeStyles">
      <summary>
            Gets or sets the date time styles used when converting a date to and from JSON.
            </summary>
      <value>The date time styles used when converting a date to and from JSON.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeFormat">
      <summary>
            Gets or sets the date time format used when converting a date to and from JSON.
            </summary>
      <value>The date time format used when converting a date to and from JSON.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.Culture">
      <summary>
            Gets or sets the culture used when converting a date to and from JSON.
            </summary>
      <value>The culture used when converting a date to and from JSON.</value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter">
      <summary>
            Converts a <see cref="T:System.DateTime" /> to and from a JavaScript date constructor (e.g. new Date(52231943)).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing property value of the JSON that is being converted.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.XmlNodeConverter">
      <summary>
            Converts XML to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="serializer">The calling serializer.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
      <summary>
            Checks if the attributeName is a namespace attribute.
            </summary>
      <param name="attributeName">Attribute name to test.</param>
      <param name="prefix">The attribute name prefix if it has one, otherwise an empty string.</param>
      <returns>True if attribute name is for a namespace attribute, otherwise false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
      <param name="valueType">Type of the value.</param>
      <returns>
        <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeRootElementName">
      <summary>
            Gets or sets the name of the root element to insert when deserializing to XML if the JSON structure has produces multiple root elements.
            </summary>
      <value>The name of the deserialize root element.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.WriteArrayAttribute">
      <summary>
            Gets or sets a flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </summary>
      <value>
        <c>true</c> if the array attibute is written to the XML; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.OmitRootObject">
      <summary>
            Gets or sets a value indicating whether to write the root JSON object.
            </summary>
      <value>
        <c>true</c> if the JSON root object is omitted; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonTextReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to JSON text data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.#ctor(System.IO.TextReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader" /> class with the specified <see cref="T:System.IO.TextReader" />.
            </summary>
      <param name="reader">The <c>TextReader</c> containing the XML data to read.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.DateTimeOffset" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.Close">
      <summary>
            Changes the state to closed. 
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.HasLineInfo">
      <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
      <returns>
        <c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextReader.LineNumber">
      <summary>
            Gets the current line number.
            </summary>
      <value>
            The current line number or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextReader.LinePosition">
      <summary>
            Gets the current line position.
            </summary>
      <value>
            The current line position or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonPropertyAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to always serialize the member with the specified name.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> class with the specified name.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemConverterType">
      <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
      <value>The collection's items converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NullValueHandling">
      <summary>
            Gets or sets the null value handling used when serializing this property.
            </summary>
      <value>The null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.DefaultValueHandling">
      <summary>
            Gets or sets the default value handling used when serializing this property.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ReferenceLoopHandling">
      <summary>
            Gets or sets the reference loop handling used when serializing this property.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ObjectCreationHandling">
      <summary>
            Gets or sets the object creation handling used when deserializing this property.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.TypeNameHandling">
      <summary>
            Gets or sets the type name handling used when serializing this property.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.IsReference">
      <summary>
            Gets or sets whether this property's value is serialized as a reference.
            </summary>
      <value>Whether this property's value is serialized as a reference.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Order">
      <summary>
            Gets or sets the order of serialization and deserialization of a member.
            </summary>
      <value>The numeric order of serialization or deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Required">
      <summary>
            Gets or sets a value indicating whether this property is required.
            </summary>
      <value>
            	A value indicating whether this property is required.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.PropertyName">
      <summary>
            Gets or sets the name of the property.
            </summary>
      <value>The name of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemReferenceLoopHandling">
      <summary>
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </summary>
      <value>The collection's items reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemTypeNameHandling">
      <summary>
            Gets or sets the the type name handling used when serializing the property's collection items.
            </summary>
      <value>The collection's items type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemIsReference">
      <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
      <value>Whether this property's collection items are serialized as a reference.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonIgnoreAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> not to serialize the public field or public read/write property value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonTextWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
      <summary>
            Creates an instance of the <c>JsonWriter</c> class using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
      <param name="textWriter">The <c>TextWriter</c> to write to.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the specified end token.
            </summary>
      <param name="token">The end token to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String,System.Boolean)">
      <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndent">
      <summary>
            Writes indent characters.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueDelimiter">
      <summary>
            Writes the JSON value delimiter.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndentSpace">
      <summary>
            Writes an indent space.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Object)">
      <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Single})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Double})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteWhitespace(System.String)">
      <summary>
            Writes out the given white space.
            </summary>
      <param name="ws">The string of white space characters.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.Indentation">
      <summary>
            Gets or sets how many IndentChars to write for each level in the hierarchy when <see cref="T:Newtonsoft.Json.Formatting" /> is set to <c>Formatting.Indented</c>.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteChar">
      <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.IndentChar">
      <summary>
            Gets or sets which character to use for indenting when <see cref="T:Newtonsoft.Json.Formatting" /> is set to <c>Formatting.Indented</c>.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteName">
      <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonWriterException">
      <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriterException.Path">
      <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
      <value>The path to the JSON where the error occurred.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonReaderException">
      <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.LineNumber">
      <summary>
            Gets the line number indicating where the error occurred.
            </summary>
      <value>The line number indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.LinePosition">
      <summary>
            Gets the line position indicating where the error occurred.
            </summary>
      <value>The line position indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.Path">
      <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
      <value>The path to the JSON where the error occurred.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverterCollection">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConvert">
      <summary>
            Provides methods for converting between common language runtime types and JSON types.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="SerializeObject" title="Serializing and Deserializing JSON with JsonConvert" />
      </example>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.True">
      <summary>
            Represents JavaScript's boolean value true as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.False">
      <summary>
            Represents JavaScript's boolean value false as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.Null">
      <summary>
            Represents JavaScript's null as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.Undefined">
      <summary>
            Represents JavaScript's undefined as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.PositiveInfinity">
      <summary>
            Represents JavaScript's positive infinity as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.NegativeInfinity">
      <summary>
            Represents JavaScript's negative infinity as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.NaN">
      <summary>
            Represents JavaScript's NaN as a string. This field is read-only.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime)">
      <summary>
            Converts the <see cref="T:System.DateTime" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime,Newtonsoft.Json.DateFormatHandling,Newtonsoft.Json.DateTimeZoneHandling)">
      <summary>
            Converts the <see cref="T:System.DateTime" /> to its JSON string representation using the <see cref="T:Newtonsoft.Json.DateFormatHandling" /> specified.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="format">The format the date will be converted to.</param>
      <param name="timeZoneHandling">The time zone handling when the date is converted to a string.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)">
      <summary>
            Converts the <see cref="T:System.DateTimeOffset" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset,Newtonsoft.Json.DateFormatHandling)">
      <summary>
            Converts the <see cref="T:System.DateTimeOffset" /> to its JSON string representation using the <see cref="T:Newtonsoft.Json.DateFormatHandling" /> specified.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="format">The format the date will be converted to.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Boolean)">
      <summary>
            Converts the <see cref="T:System.Boolean" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Char)">
      <summary>
            Converts the <see cref="T:System.Char" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Char" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Enum)">
      <summary>
            Converts the <see cref="T:System.Enum" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Enum" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int32)">
      <summary>
            Converts the <see cref="T:System.Int32" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int16)">
      <summary>
            Converts the <see cref="T:System.Int16" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt16)">
      <summary>
            Converts the <see cref="T:System.UInt16" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt32)">
      <summary>
            Converts the <see cref="T:System.UInt32" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int64)">
      <summary>
            Converts the <see cref="T:System.Int64" />  to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt64)">
      <summary>
            Converts the <see cref="T:System.UInt64" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Single)">
      <summary>
            Converts the <see cref="T:System.Single" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Double)">
      <summary>
            Converts the <see cref="T:System.Double" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Byte)">
      <summary>
            Converts the <see cref="T:System.Byte" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.SByte)">
      <summary>
            Converts the <see cref="T:System.SByte" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Decimal)">
      <summary>
            Converts the <see cref="T:System.Decimal" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Guid)">
      <summary>
            Converts the <see cref="T:System.Guid" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Guid" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan)">
      <summary>
            Converts the <see cref="T:System.TimeSpan" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.TimeSpan" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Uri)">
      <summary>
            Converts the <see cref="T:System.Uri" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Uri" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String)">
      <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char)">
      <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="delimiter">The string delimiter character.</param>
      <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Object)">
      <summary>
            Converts the <see cref="T:System.Object" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object)">
      <summary>
            Serializes the specified object to a JSON string.
            </summary>
      <param name="value">The object to serialize.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting)">
      <summary>
            Serializes the specified object to a JSON string using formatting.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="converters">A collection converters used while serializing.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Serializes the specified object to a JSON string using formatting and a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="converters">A collection converters used while serializing.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Serializes the specified object to a JSON string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
      <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="T:Newtonsoft.Json.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Serializes the specified object to a JSON string using formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
      <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="T:Newtonsoft.Json.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object)">
      <summary>
            Asynchronously serializes the specified object to a JSON string.
            Serialization will happen on a new thread.
            </summary>
      <param name="value">The object to serialize.</param>
      <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object,Newtonsoft.Json.Formatting)">
      <summary>
            Asynchronously serializes the specified object to a JSON string using formatting.
            Serialization will happen on a new thread.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Asynchronously serializes the specified object to a JSON string using formatting and a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            Serialization will happen on a new thread.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
      <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String)">
      <summary>
            Deserializes the JSON to a .NET object.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <returns>The deserialized object from the Json string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to a .NET object using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The deserialized object from the Json string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String)">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <returns>The deserialized object from the Json string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
      <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
      <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="anonymousTypeObject">The anonymous type object.</param>
      <returns>The deserialized anonymous type from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to the given anonymous type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="anonymousTypeObject">The anonymous type object.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>The deserialized anonymous type from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="converters">Converters to use while deserializing.</param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The object to deserialize.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The type of the object to deserialize.</param>
      <param name="converters">Converters to use while deserializing.</param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The type of the object to deserialize to.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync``1(System.String)">
      <summary>
            Asynchronously deserializes the JSON to the specified .NET type.
            Deserialization will happen on a new thread.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Asynchronously deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            Deserialization will happen on a new thread.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(System.String)">
      <summary>
            Asynchronously deserializes the JSON to the specified .NET type.
            Deserialization will happen on a new thread.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Asynchronously deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            Deserialization will happen on a new thread.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The type of the object to deserialize to.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object)">
      <summary>
            Populates the object with values from the JSON string.
            </summary>
      <param name="value">The JSON to populate values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Populates the object with values from the JSON string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The JSON to populate values from.</param>
      <param name="target">The target object to populate values onto.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObjectAsync(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Asynchronously populates the object with values from the JSON string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The JSON to populate values from.</param>
      <param name="target">The target object to populate values onto.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>
            A task that represents the asynchronous populate operation.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode)">
      <summary>
            Serializes the XML node to a JSON string.
            </summary>
      <param name="node">The node to serialize.</param>
      <returns>A JSON string of the XmlNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting)">
      <summary>
            Serializes the XML node to a JSON string using formatting.
            </summary>
      <param name="node">The node to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>A JSON string of the XmlNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting,System.Boolean)">
      <summary>
            Serializes the XML node to a JSON string using formatting and omits the root object if <paramref name="omitRootObject" /> is <c>true</c>.
            </summary>
      <param name="node">The node to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="omitRootObject">Omits writing the root object.</param>
      <returns>A JSON string of the XmlNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String)">
      <summary>
            Deserializes the XmlNode from a JSON string.
            </summary>
      <param name="value">The JSON string.</param>
      <returns>The deserialized XmlNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String)">
      <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName" />.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <returns>The deserialized XmlNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String,System.Boolean)">
      <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName" />
            and writes a .NET array attribute for collections.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
      <returns>The deserialized XmlNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject)">
      <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string.
            </summary>
      <param name="node">The node to convert to JSON.</param>
      <returns>A JSON string of the XNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting)">
      <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string using formatting.
            </summary>
      <param name="node">The node to convert to JSON.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>A JSON string of the XNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting,System.Boolean)">
      <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string using formatting and omits the root object if <paramref name="omitRootObject" /> is <c>true</c>.
            </summary>
      <param name="node">The node to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="omitRootObject">Omits writing the root object.</param>
      <returns>A JSON string of the XNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String)">
      <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string.
            </summary>
      <param name="value">The JSON string.</param>
      <returns>The deserialized XNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String)">
      <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName" />.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <returns>The deserialized XNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String,System.Boolean)">
      <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName" />
            and writes a .NET array attribute for collections.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
      <returns>The deserialized XNode</returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonConvert.DefaultSettings">
      <summary>
            Gets or sets a function that creates default <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            Default settings are automatically used by serialization methods on <see cref="T:Newtonsoft.Json.JsonConvert" />,
            and <see cref="M:Newtonsoft.Json.Linq.JToken.ToObject``1" /> and <see cref="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)" /> on <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            To serialize without using any default settings create a <see cref="T:Newtonsoft.Json.JsonSerializer" /> with
            <see cref="M:Newtonsoft.Json.JsonSerializer.Create" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializationException">
      <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializer">
      <summary>
            Serializes and deserializes objects into and from the JSON format.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> enables you to control how objects are encoded into JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializer" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Create">
      <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings.
            </summary>
      <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Create(Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings.
            </summary>
      <param name="settings">The settings to be applied to the <see cref="T:Newtonsoft.Json.JsonSerializer" />.</param>
      <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.CreateDefault">
      <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings.
            </summary>
      <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.CreateDefault(Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings.
            </summary>
      <param name="settings">The settings to be applied to the <see cref="T:Newtonsoft.Json.JsonSerializer" />.</param>
      <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
      <summary>
            Populates the JSON values onto the target object.
            </summary>
      <param name="reader">The <see cref="T:System.IO.TextReader" /> that contains the JSON structure to reader values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Populate(Newtonsoft.Json.JsonReader,System.Object)">
      <summary>
            Populates the JSON values onto the target object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> that contains the JSON structure to reader values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> that contains the JSON structure to deserialize.</param>
      <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:System.IO.StringReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:System.IO.TextReader" /> containing the object.</param>
      <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The instance of <paramref name="objectType" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize``1(Newtonsoft.Json.JsonReader)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the object.</param>
      <typeparam name="T">The type of the object to deserialize.</typeparam>
      <returns>The instance of <typeparamref name="T" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader,System.Type)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the object.</param>
      <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The instance of <paramref name="objectType" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the Json structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object,System.Type)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
      <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter" /> used to write the Json structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
      <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object,System.Type)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the Json structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
      <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:Newtonsoft.Json.JsonWriter" />. 
            </summary>
      <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter" /> used to write the Json structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceResolver">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Binder">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> used by the serializer when resolving type names.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TraceWriter">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter" /> used by the serializer when writing trace messages.
            </summary>
      <value>The trace writer.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling">
      <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormat">
      <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
      <value>The type name assembly format.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.PreserveReferencesHandling">
      <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling">
      <summary>
            Get or set how reference loops (e.g. a class referencing itself) is handled.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.MissingMemberHandling">
      <summary>
            Get or set how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.NullValueHandling">
      <summary>
            Get or set how null values are handled during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DefaultValueHandling">
      <summary>
            Get or set how null default are handled during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ObjectCreationHandling">
      <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ConstructorHandling">
      <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
      <value>The constructor handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Converters">
      <summary>
            Gets a collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.
            </summary>
      <value>Collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ContractResolver">
      <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Context">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used by the serializer when invoking serialization callback methods.
            </summary>
      <value>The context.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Formatting">
      <summary>
            Indicates how JSON text output is formatted.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatHandling">
      <summary>
            Get or set how dates are written to JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateTimeZoneHandling">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> time zones are handling during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateParseHandling">
      <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.FloatParseHandling">
      <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.FloatFormatHandling">
      <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written as JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.StringEscapeHandling">
      <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatString">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatting when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Culture">
      <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.MaxDepth">
      <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.CheckAdditionalContent">
      <summary>
            Gets a value indicating whether there will be a check for additional JSON content after deserializing an object.
            </summary>
      <value>
        <c>true</c> if there will be a check for additional JSON content after deserializing an object; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="E:Newtonsoft.Json.JsonSerializer.Error">
      <summary>
            Occurs when the <see cref="T:Newtonsoft.Json.JsonSerializer" /> errors during serialization and deserialization.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.Extensions">
      <summary>
            Contains the LINQ to JSON extension methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of tokens that contains the ancestors of every token in the source collection.
            </summary>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JToken" />.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the ancestors of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of tokens that contains the descendants of every token in the source collection.
            </summary>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JContainer" />.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the descendants of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JObject})">
      <summary>
            Returns a collection of child properties of every object in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the properties of every object in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
      <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <param name="key">The token key.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection with the given key.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
      <summary>
            Returns a collection of converted child values of every object in the source collection with the given key.
            </summary>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <param name="key">The token key.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection with the given key.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Converts the value.
            </summary>
      <typeparam name="U">The type to convert the value to.</typeparam>
      <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Converts the value.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <typeparam name="U">The type to convert the value to.</typeparam>
      <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of child tokens of every array in the source collection.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of converted child tokens of every array in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <typeparam name="T">The source collection type.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JContainer">
      <summary>
            Represents a token that can contain other tokens.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.AddingNew" /> event.
            </summary>
      <param name="e">The <see cref="T:System.ComponentModel.AddingNewEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.ListChanged" /> event.
            </summary>
      <param name="e">The <see cref="T:System.ComponentModel.ListChangedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged" /> event.
            </summary>
      <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Children">
      <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Values``1">
      <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
      <typeparam name="T">The type to convert the values to.</typeparam>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Descendants">
      <summary>
            Returns a collection of the descendant tokens for this token in document order.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the descendant tokens of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Add(System.Object)">
      <summary>
            Adds the specified content as children of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="content">The content to be added.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.AddFirst(System.Object)">
      <summary>
            Adds the specified content as the first children of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="content">The content to be added.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.CreateWriter">
      <summary>
            Creates an <see cref="T:Newtonsoft.Json.JsonWriter" /> that can be used to add tokens to the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <returns>An <see cref="T:Newtonsoft.Json.JsonWriter" /> that is ready to have content written to it.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.ReplaceAll(System.Object)">
      <summary>
            Replaces the children nodes of this token with the specified content.
            </summary>
      <param name="content">The content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.RemoveAll">
      <summary>
            Removes the child nodes from this token.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.HasValues">
      <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.First">
      <summary>
            Get the first child token of this token.
            </summary>
      <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.Last">
      <summary>
            Get the last child token of this token.
            </summary>
      <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.Count">
      <summary>
            Gets the count of child JSON tokens.
            </summary>
      <value>The count of child JSON tokens</value>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.ListChanged">
      <summary>
            Occurs when the list changes or an item in the list changes.
            </summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.AddingNew">
      <summary>
            Occurs before an item is added to the collection.
            </summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged">
      <summary>
            Occurs when the items list of the collection has changed, or the collection is reset.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JConstructor">
      <summary>
            Represents a JSON constructor.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(Newtonsoft.Json.Linq.JConstructor)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class from another <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name and content.
            </summary>
      <param name="name">The constructor name.</param>
      <param name="content">The contents of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name and content.
            </summary>
      <param name="name">The constructor name.</param>
      <param name="content">The contents of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name.
            </summary>
      <param name="name">The constructor name.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Name">
      <summary>
            Gets or sets the name of this constructor.
            </summary>
      <value>The constructor name.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JEnumerable`1">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
      <typeparam name="T">The type of token</typeparam>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JEnumerable`1.Empty">
      <summary>
            An empty collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> struct.
            </summary>
      <param name="enumerable">The enumerable.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JEnumerable`1.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> with the specified key.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JObject">
      <summary>
            Represents a JSON object.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(Newtonsoft.Json.Linq.JObject)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class from another <see cref="T:Newtonsoft.Json.Linq.JObject" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JObject" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class with the specified content.
            </summary>
      <param name="content">The contents of the object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class with the specified content.
            </summary>
      <param name="content">The contents of the object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Properties">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of this object's properties.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of this object's properties.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Property(System.String)">
      <summary>
            Gets a <see cref="T:Newtonsoft.Json.Linq.JProperty" /> the specified name.
            </summary>
      <param name="name">The property name.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> with the specified name or null.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.PropertyValues">
      <summary>
            Gets an <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> of this object's property values.
            </summary>
      <returns>An <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> of this object's property values.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> populated from the string that contains JSON.</returns>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String,System.StringComparison)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison" /> will be used to match a property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,System.StringComparison,Newtonsoft.Json.Linq.JToken@)">
      <summary>
            Tries to get the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison" /> will be used to match a property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
      <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
      <returns>true if a value was successfully retrieved; otherwise, false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Add(System.String,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Adds the specified property name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Remove(System.String)">
      <summary>
            Removes the property with the specified name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>true if item was successfully removed; otherwise, false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,Newtonsoft.Json.Linq.JToken@)">
      <summary>
            Tries the get value.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
      <returns>true if a value was successfully retrieved; otherwise, false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanged(System.String)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanged" /> event with the provided arguments.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanging(System.String)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanging" /> event with the provided arguments.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.String)">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            </summary>
      <value>
      </value>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanging">
      <summary>
            Occurs when a property value is changing.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JArray">
      <summary>
            Represents a JSON array.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(Newtonsoft.Json.Linq.JArray)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class from another <see cref="T:Newtonsoft.Json.Linq.JArray" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JArray" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class with the specified content.
            </summary>
      <param name="content">The contents of the array.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class with the specified content.
            </summary>
      <param name="content">The contents of the array.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> populated from the string that contains JSON.</returns>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.IndexOf(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Insert(System.Int32,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.RemoveAt(System.Int32)">
      <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Add(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Clear">
      <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Contains(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.CopyTo(Newtonsoft.Json.Linq.JToken[],System.Int32)">
      <summary>
            Copies to.
            </summary>
      <param name="array">The array.</param>
      <param name="arrayIndex">Index of the array.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Remove(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> at the specified index.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.#ctor(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenReader" /> class.
            </summary>
      <param name="token">The token to read from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor(Newtonsoft.Json.Linq.JContainer)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> class writing to the given <see cref="T:Newtonsoft.Json.Linq.JContainer" />.
            </summary>
      <param name="container">The container being written to.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the end.
            </summary>
      <param name="token">The token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Object)">
      <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JTokenWriter.Token">
      <summary>
            Gets the token being writen.
            </summary>
      <value>The token being writen.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JProperty">
      <summary>
            Represents a JSON property.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(Newtonsoft.Json.Linq.JProperty)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class from another <see cref="T:Newtonsoft.Json.Linq.JProperty" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class.
            </summary>
      <param name="name">The property name.</param>
      <param name="content">The property content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class.
            </summary>
      <param name="name">The property name.</param>
      <param name="content">The property content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JProperty" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JProperty" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Name">
      <summary>
            Gets the property name.
            </summary>
      <value>The property name.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Value">
      <summary>
            Gets or sets the property value.
            </summary>
      <value>The property value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenType">
      <summary>
            Specifies the type of token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.None">
      <summary>
            No token type has been set.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Object">
      <summary>
            A JSON object.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Array">
      <summary>
            A JSON array.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Constructor">
      <summary>
            A JSON constructor.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Property">
      <summary>
            A JSON object property.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Comment">
      <summary>
            A comment.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Integer">
      <summary>
            An integer value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Float">
      <summary>
            A float value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.String">
      <summary>
            A string value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Boolean">
      <summary>
            A boolean value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Null">
      <summary>
            A null value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Undefined">
      <summary>
            An undefined value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Date">
      <summary>
            A date value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Raw">
      <summary>
            A raw JSON value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Bytes">
      <summary>
            A collection of bytes value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Guid">
      <summary>
            A Guid value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Uri">
      <summary>
            A Uri value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.TimeSpan">
      <summary>
            A TimeSpan value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.Extensions">
      <summary>
            Contains the JSON schema extension methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
      <summary>
            Determines whether the <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,System.Collections.Generic.IList{System.String}@)">
      <summary>
            Determines whether the <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
      <param name="errorMessages">When this method returns, contains any error messages generated while validating. </param>
      <returns>
        <c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
      <summary>
            Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Schema.ValidationEventHandler)">
      <summary>
            Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
      <param name="validationEventHandler">The validation event handler.</param>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaException">
      <summary>
            Returns detailed information about the schema exception.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LineNumber">
      <summary>
            Gets the line number indicating where the error occurred.
            </summary>
      <value>The line number indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LinePosition">
      <summary>
            Gets the line position indicating where the error occurred.
            </summary>
      <value>The line position indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.Path">
      <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
      <value>The path to the JSON where the error occurred.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaResolver">
      <summary>
            Resolves <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from an id.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(System.String)">
      <summary>
            Gets a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> for the specified reference.
            </summary>
      <param name="reference">The id.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> for the specified reference.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaResolver.LoadedSchemas">
      <summary>
            Gets or sets the loaded schemas.
            </summary>
      <value>The loaded schemas.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling">
      <summary>
            Specifies undefined schema Id handling options for the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaGenerator" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.None">
      <summary>
            Do not infer a schema Id.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseTypeName">
      <summary>
            Use the .NET type name as the schema Id.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseAssemblyQualifiedName">
      <summary>
            Use the assembly qualified .NET type name as the schema Id.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.ValidationEventArgs">
      <summary>
            Returns detailed information related to the <see cref="T:Newtonsoft.Json.Schema.ValidationEventHandler" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Exception">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> associated with the validation error.
            </summary>
      <value>The JsonSchemaException associated with the validation error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Path">
      <summary>
            Gets the path of the JSON location where the validation error occurred.
            </summary>
      <value>The path of the JSON location where the validation error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Message">
      <summary>
            Gets the text description corresponding to the validation error.
            </summary>
      <value>The text description.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.ValidationEventHandler">
      <summary>
            Represents the callback method that will handle JSON schema validation events and the <see cref="T:Newtonsoft.Json.Schema.ValidationEventArgs" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IContractResolver">
      <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer" /> to resolves a <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for a given <see cref="T:System.Type" />.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverObject" title="IContractResolver Class" />
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverExample" title="IContractResolver Example" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
      <summary>
            Resolves the contract for a given type.
            </summary>
      <param name="type">The type to resolve a contract for.</param>
      <returns>The contract for a given type.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DefaultContractResolver">
      <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer" /> to resolves a <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for a given <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> class.
            </summary>
      <param name="shareCache">
            If set to <c>true</c> the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> will use a cached shared with other resolvers of the same type.
            Sharing the cache will significantly performance because expensive reflection will only happen once but could cause unexpected
            behavior if different instances of the resolver are suppose to produce different results. When set to false it is highly
            recommended to reuse <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> instances with the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
      <summary>
            Resolves the contract for a given type.
            </summary>
      <param name="type">The type to resolve a contract for.</param>
      <returns>The contract for a given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
      <summary>
            Gets the serializable members for the type.
            </summary>
      <param name="objectType">The type to get serializable members for.</param>
      <returns>The serializable members for the type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,Newtonsoft.Json.Serialization.JsonPropertyCollection)">
      <summary>
            Creates the constructor parameters.
            </summary>
      <param name="constructor">The constructor to create properties for.</param>
      <param name="memberProperties">The type's member properties.</param>
      <returns>Properties for the given <see cref="T:System.Reflection.ConstructorInfo" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.
            </summary>
      <param name="matchingMemberProperty">The matching member property.</param>
      <param name="parameterInfo">The constructor parameter.</param>
      <returns>A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
      <summary>
            Resolves the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for the contract.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>The contract's default <see cref="T:Newtonsoft.Json.JsonConverter" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDynamicContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
      <summary>
            Determines which contract type is created for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
      <summary>
            Creates properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.
            </summary>
      <param name="type">The type to create properties for.</param>
            /// <param name="memberSerialization">The member serialization mode for the type.</param><returns>Properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.</returns></member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
      <summary>
            Creates the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> used by the serializer to get and set values from a member.
            </summary>
      <param name="member">The member.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> used by the serializer to get and set values from a member.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
      <param name="memberSerialization">The member's parent <see cref="T:Newtonsoft.Json.MemberSerialization" />.</param>
      <param name="member">The member to create a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for.</param>
      <returns>A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
      <summary>
            Resolves the name of the property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>Name of the property.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(System.String)">
      <summary>
            Gets the resolved name of the property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>Name of the property.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
      <summary>
            Gets a value indicating whether members are being get and set using dynamic code generation.
            This value is determined by the runtime permissions available.
            </summary>
      <value>
        <c>true</c> if using dynamic code generation; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
      <summary>
            Gets or sets the default members search flags.
            </summary>
      <value>The default members search flags.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
      <summary>
            Gets or sets a value indicating whether compiler generated members should be serialized.
            </summary>
      <value>
        <c>true</c> if serialized compiler generated members; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableInterface">
      <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface when serializing and deserializing types.
            </summary>
      <value>
        <c>true</c> if the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableAttribute">
      <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.SerializableAttribute" /> attribute when serializing and deserializing types.
            </summary>
      <value>
        <c>true</c> if the <see cref="T:System.SerializableAttribute" /> attribute will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver">
      <summary>
            Resolves member mappings for a type, camel casing property names.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.ResolvePropertyName(System.String)">
      <summary>
            Resolves the name of the property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>The property name camel cased.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DefaultSerializationBinder">
      <summary>
            The default serialization binder used when resolving and loading classes from type names.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
      <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
      <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object.</param>
      <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object.</param>
      <returns>
            The type of the object the formatter creates a new instance of.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
      <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
      <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
      <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object. </param>
      <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object. </param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ErrorContext">
      <summary>
            Provides information surrounding an error.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Error">
      <summary>
            Gets the error.
            </summary>
      <value>The error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.OriginalObject">
      <summary>
            Gets the original object that caused the error.
            </summary>
      <value>The original object that caused the error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Member">
      <summary>
            Gets the member that caused the error.
            </summary>
      <value>The member that caused the error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Path">
      <summary>
            Gets the path of the JSON location where the error occurred.
            </summary>
      <value>The path of the JSON location where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Handled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.ErrorContext" /> is handled.
            </summary>
      <value>
        <c>true</c> if handled; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonArrayContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonArrayContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.CollectionItemType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the collection items.
            </summary>
      <value>The <see cref="T:System.Type" /> of the collection items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.IsMultidimensionalArray">
      <summary>
            Gets a value indicating whether the collection type is a multidimensional array.
            </summary>
      <value>
        <c>true</c> if the collection type is a multidimensional array; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.SerializationCallback">
      <summary>
            Handles <see cref="T:Newtonsoft.Json.JsonSerializer" /> serialization callback events.
            </summary>
      <param name="o">The object that raised the callback event.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.SerializationErrorCallback">
      <summary>
            Handles <see cref="T:Newtonsoft.Json.JsonSerializer" /> serialization error callback events.
            </summary>
      <param name="o">The object that raised the callback event.</param>
      <param name="context">The streaming context.</param>
      <param name="errorContext">The error context.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ExtensionDataSetter">
      <summary>
            Sets extension data for an object during deserialization.
            </summary>
      <param name="o">The object to set extension data on.</param>
      <param name="key">The extension data key.</param>
      <param name="value">The extension data value.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ExtensionDataGetter">
      <summary>
            Gets extension data for an object during serialization.
            </summary>
      <param name="o">The object to set extension data on.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonDictionaryContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.PropertyNameResolver">
      <summary>
            Gets or sets the property name resolver.
            </summary>
      <value>The property name resolver.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the dictionary keys.
            </summary>
      <value>The <see cref="T:System.Type" /> of the dictionary keys.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryValueType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the dictionary values.
            </summary>
      <value>The <see cref="T:System.Type" /> of the dictionary values.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonProperty">
      <summary>
            Maps a JSON property to a .NET member or constructor parameter.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonProperty.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyName">
      <summary>
            Gets or sets the name of the property.
            </summary>
      <value>The name of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DeclaringType">
      <summary>
            Gets or sets the type that declared this property.
            </summary>
      <value>The type that declared this property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Order">
      <summary>
            Gets or sets the order of serialization and deserialization of a member.
            </summary>
      <value>The numeric order of serialization or deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.UnderlyingName">
      <summary>
            Gets or sets the name of the underlying member or parameter.
            </summary>
      <value>The name of the underlying member or parameter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ValueProvider">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> during serialization.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> during serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyType">
      <summary>
            Gets or sets the type of the property.
            </summary>
      <value>The type of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Converter">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.JsonConverter" /> for the property.
            If set this converter takes presidence over the contract converter for the property type.
            </summary>
      <value>The converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.MemberConverter">
      <summary>
            Gets or sets the member converter.
            </summary>
      <value>The member converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Ignored">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is ignored.
            </summary>
      <value>
        <c>true</c> if ignored; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Readable">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is readable.
            </summary>
      <value>
        <c>true</c> if readable; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Writable">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is writable.
            </summary>
      <value>
        <c>true</c> if writable; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.HasMemberAttribute">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> has a member attribute.
            </summary>
      <value>
        <c>true</c> if has a member attribute; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValue">
      <summary>
            Gets the default value.
            </summary>
      <value>The default value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Required">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is required.
            </summary>
      <value>A value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is required.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.IsReference">
      <summary>
            Gets or sets a value indicating whether this property preserves object references.
            </summary>
      <value>
        <c>true</c> if this instance is reference; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.NullValueHandling">
      <summary>
            Gets or sets the property null value handling.
            </summary>
      <value>The null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValueHandling">
      <summary>
            Gets or sets the property default value handling.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ReferenceLoopHandling">
      <summary>
            Gets or sets the property reference loop handling.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ObjectCreationHandling">
      <summary>
            Gets or sets the property object creation handling.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.TypeNameHandling">
      <summary>
            Gets or sets or sets the type name handling.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ShouldSerialize">
      <summary>
            Gets or sets a predicate used to determine whether the property should be serialize.
            </summary>
      <value>A predicate used to determine whether the property should be serialize.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.GetIsSpecified">
      <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
      <value>A predicate used to determine whether the property should be serialized.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.SetIsSpecified">
      <summary>
            Gets or sets an action used to set whether the property has been deserialized.
            </summary>
      <value>An action used to set whether the property has been deserialized.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemConverter">
      <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
      <value>The collection's items converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemIsReference">
      <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
      <value>Whether this property's collection items are serialized as a reference.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemTypeNameHandling">
      <summary>
            Gets or sets the the type name handling used when serializing the property's collection items.
            </summary>
      <value>The collection's items type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemReferenceLoopHandling">
      <summary>
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </summary>
      <value>The collection's items reference loop handling.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonPropertyCollection">
      <summary>
            A collection of <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> objects.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPropertyCollection" /> class.
            </summary>
      <param name="type">The type.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetKeyForItem(Newtonsoft.Json.Serialization.JsonProperty)">
      <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
      <param name="item">The element from which to extract the key.</param>
      <returns>The key for the specified element.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.AddProperty(Newtonsoft.Json.Serialization.JsonProperty)">
      <summary>
            Adds a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> object.
            </summary>
      <param name="property">The property to add to the collection.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
      <summary>
            Gets the closest matching <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> object.
            First attempts to get an exact case match of propertyName and then
            a case insensitive match.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>A matching property if found.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
      <summary>
            Gets a property by property name.
            </summary>
      <param name="propertyName">The name of the property to get.</param>
      <param name="comparisonType">Type property name string comparison.</param>
      <returns>A matching property if found.</returns>
    </member>
    <member name="T:Newtonsoft.Json.MissingMemberHandling">
      <summary>
            Specifies missing member handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MissingMemberHandling.Ignore">
      <summary>
            Ignore a missing member and do not attempt to deserialize it.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MissingMemberHandling.Error">
      <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException" /> when a missing member is encountered during deserialization.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.NullValueHandling">
      <summary>
            Specifies null value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingObject" title="NullValueHandling Class" />
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingExample" title="NullValueHandling Ignore Example" />
      </example>
    </member>
    <member name="F:Newtonsoft.Json.NullValueHandling.Include">
      <summary>
            Include null values when serializing and deserializing objects.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.NullValueHandling.Ignore">
      <summary>
            Ignore null values when serializing and deserializing objects.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.ReferenceLoopHandling">
      <summary>
            Specifies reference loop handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Error">
      <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException" /> when a loop is encountered.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Ignore">
      <summary>
            Ignore loop references and do not serialize.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Serialize">
      <summary>
            Serialize loop references.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchema">
      <summary>
            An in-memory representation of a JSON Schema.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader)">
      <summary>
            Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the JSON Schema to read.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> object representing the JSON Schema.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the JSON Schema to read.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> to use when resolving schema references.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> object representing the JSON Schema.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from a string that contains schema JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Parses the specified json.
            </summary>
      <param name="json">The json.</param>
      <param name="resolver">The resolver.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter)">
      <summary>
            Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter" /> using the specified <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="resolver">The resolver used.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Id">
      <summary>
            Gets or sets the id.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Title">
      <summary>
            Gets or sets the title.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Required">
      <summary>
            Gets or sets whether the object is required.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ReadOnly">
      <summary>
            Gets or sets whether the object is read only.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Hidden">
      <summary>
            Gets or sets whether the object is visible to users.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Transient">
      <summary>
            Gets or sets whether the object is transient.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Description">
      <summary>
            Gets or sets the description of the object.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Type">
      <summary>
            Gets or sets the types of values allowed by the object.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Pattern">
      <summary>
            Gets or sets the pattern.
            </summary>
      <value>The pattern.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumLength">
      <summary>
            Gets or sets the minimum length.
            </summary>
      <value>The minimum length.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumLength">
      <summary>
            Gets or sets the maximum length.
            </summary>
      <value>The maximum length.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.DivisibleBy">
      <summary>
            Gets or sets a number that the value should be divisble by.
            </summary>
      <value>A number that the value should be divisble by.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Minimum">
      <summary>
            Gets or sets the minimum.
            </summary>
      <value>The minimum.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Maximum">
      <summary>
            Gets or sets the maximum.
            </summary>
      <value>The maximum.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMinimum">
      <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "minimum" attribute.
            </summary>
      <value>A flag indicating whether the value can not equal the number defined by the "minimum" attribute.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMaximum">
      <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "maximum" attribute.
            </summary>
      <value>A flag indicating whether the value can not equal the number defined by the "maximum" attribute.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumItems">
      <summary>
            Gets or sets the minimum number of items.
            </summary>
      <value>The minimum number of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumItems">
      <summary>
            Gets or sets the maximum number of items.
            </summary>
      <value>The maximum number of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Items">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of items.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.PositionalItemsValidation">
      <summary>
            Gets or sets a value indicating whether items in an array are validated using the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> instance at their array position from <see cref="P:Newtonsoft.Json.Schema.JsonSchema.Items" />.
            </summary>
      <value>
        <c>true</c> if items are validated using their array position; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalItems">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional items.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalItems">
      <summary>
            Gets or sets a value indicating whether additional items are allowed.
            </summary>
      <value>
        <c>true</c> if additional items are allowed; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.UniqueItems">
      <summary>
            Gets or sets whether the array items must be unique.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Properties">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of properties.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalProperties">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional properties.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.PatternProperties">
      <summary>
            Gets or sets the pattern properties.
            </summary>
      <value>The pattern properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalProperties">
      <summary>
            Gets or sets a value indicating whether additional properties are allowed.
            </summary>
      <value>
        <c>true</c> if additional properties are allowed; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Requires">
      <summary>
            Gets or sets the required property if this property is present.
            </summary>
      <value>The required property if this property is present.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Enum">
      <summary>
            Gets or sets the a collection of valid enum values allowed.
            </summary>
      <value>A collection of valid enum values allowed.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Disallow">
      <summary>
            Gets or sets disallowed types.
            </summary>
      <value>The disallow types.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Default">
      <summary>
            Gets or sets the default value.
            </summary>
      <value>The default value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Extends">
      <summary>
            Gets or sets the collection of <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> that this schema extends.
            </summary>
      <value>The collection of <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> that this schema extends.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Format">
      <summary>
            Gets or sets the format.
            </summary>
      <value>The format.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaGenerator">
      <summary>
            Generates a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from a specified <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> used to resolve schema references.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,System.Boolean)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> will be nullable.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver,System.Boolean)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> used to resolve schema references.</param>
      <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> will be nullable.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.UndefinedSchemaIdHandling">
      <summary>
            Gets or sets how undefined schemas are handled by the serializer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.ContractResolver">
      <summary>
            Gets or sets the contract resolver.
            </summary>
      <value>The contract resolver.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaType">
      <summary>
            The value types allowed by the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.None">
      <summary>
            No type specified.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.String">
      <summary>
            String type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Float">
      <summary>
            Float type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Integer">
      <summary>
            Integer type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Boolean">
      <summary>
            Boolean type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Object">
      <summary>
            Object type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Array">
      <summary>
            Array type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Null">
      <summary>
            Null type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Any">
      <summary>
            Any type.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonObjectContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonObjectContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.MemberSerialization">
      <summary>
            Gets or sets the object member serialization.
            </summary>
      <value>The member object serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ItemRequired">
      <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
      <value>
            	A value indicating whether the object's properties are required.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.Properties">
      <summary>
            Gets the object's properties.
            </summary>
      <value>The object's properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ConstructorParameters">
      <summary>
            Gets the constructor parameters required for any non-default constructor
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideConstructor">
      <summary>
            Gets or sets the override constructor used to create the object.
            This is set when a constructor is marked up using the
            JsonConstructor attribute.
            </summary>
      <value>The override constructor.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ParametrizedConstructor">
      <summary>
            Gets or sets the parametrized constructor used to create the object.
            </summary>
      <value>The parametrized constructor.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataSetter">
      <summary>
            Gets or sets the extension data setter.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataGetter">
      <summary>
            Gets or sets the extension data getter.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonStringContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonStringContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ReflectionValueProvider">
      <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using reflection.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ReflectionValueProvider" /> class.
            </summary>
      <param name="memberInfo">The member info.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.OnErrorAttribute">
      <summary>
            When applied to a method, specifies that the method is called when an error occurs serializing an object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodWithResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback,Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
      <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic that returns a result
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodReturnLast(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
      <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodNoResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
      <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.GetRestrictions">
      <summary>
            Returns a Restrictions object which includes our current restrictions merged
            with a restriction limiting our type
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ObjectConstructor`1">
      <summary>
            Represents a method that constructs an object.
            </summary>
      <typeparam name="T">The object type to create.</typeparam>
    </member>
    <member name="T:Newtonsoft.Json.TypeNameHandling">
      <summary>
            Specifies type name handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.None">
      <summary>
            Do not include the .NET type name when serializing types.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Objects">
      <summary>
            Include the .NET type name when serializing into a JSON object structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Arrays">
      <summary>
            Include the .NET type name when serializing into a JSON array structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.All">
      <summary>
            Always include the .NET type name when serializing.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Auto">
      <summary>
            Include the .NET type name when the type of the object being serialized is not the same as its declared type.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.Convert(System.Object,System.Globalization.CultureInfo,System.Type)">
      <summary>
            Converts the value to the specified type.
            </summary>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="targetType">The type to convert the value to.</param>
      <returns>The converted type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.TryConvert(System.Object,System.Globalization.CultureInfo,System.Type,System.Object@)">
      <summary>
            Converts the value to the specified type.
            </summary>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="targetType">The type to convert the value to.</param>
      <param name="convertedValue">The converted value if the conversion was successful or the default value of <c>T</c> if it failed.</param>
      <returns>
        <c>true</c> if <c>initialValue</c> was converted successfully; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
      <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="targetType">The type to convert or cast the value to.</param>
      <returns>
            The converted type. If conversion was unsuccessful, the initial value
            is returned if assignable to the target type.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1">
      <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1(System.Type)">
      <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
      <param name="enumType">The enum type to get names and values for.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Newtonsoft.Json.JsonToken">
      <summary>
            Specifies the type of Json token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.None">
      <summary>
            This is returned by the <see cref="T:Newtonsoft.Json.JsonReader" /> if a <see cref="M:Newtonsoft.Json.JsonReader.Read" /> method has not been called. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartObject">
      <summary>
            An object start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartArray">
      <summary>
            An array start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartConstructor">
      <summary>
            A constructor start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.PropertyName">
      <summary>
            An object property name.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Comment">
      <summary>
            A comment.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Raw">
      <summary>
            Raw JSON.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Integer">
      <summary>
            An integer.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Float">
      <summary>
            A float.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.String">
      <summary>
            A string.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Boolean">
      <summary>
            A boolean.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Null">
      <summary>
            A null token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Undefined">
      <summary>
            An undefined token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndObject">
      <summary>
            An object end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndArray">
      <summary>
            An array end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndConstructor">
      <summary>
            A constructor end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Date">
      <summary>
            A Date.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Bytes">
      <summary>
            Byte data.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Utilities.StringBuffer">
      <summary>
            Builds a string. Unlike StringBuilder this class lets you reuse it's internal buffer.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
      <summary>
            Determines whether the collection is null or empty.
            </summary>
      <param name="collection">The collection.</param>
      <returns>
        <c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Adds the elements of the specified collection to the specified generic IList.
            </summary>
      <param name="initial">The list to add to.</param>
      <param name="collection">The collection of elements to add.</param>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Returns the index of the first occurrence in a sequence by using a specified IEqualityComparer.
            </summary>
      <typeparam name="TSource">The type of the elements of source.</typeparam>
      <param name="list">A sequence in which to locate a value.</param>
      <param name="value">The object to locate in the sequence</param>
      <param name="comparer">An equality comparer to compare values.</param>
      <returns>The zero-based index of the first occurrence of value within the entire sequence, if found; otherwise, –1.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
      <summary>
            Gets the type of the typed collection's items.
            </summary>
      <param name="type">The type.</param>
      <returns>The type of the typed collection's items.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
      <summary>
            Gets the member's underlying type.
            </summary>
      <param name="member">The member.</param>
      <returns>The underlying type of the member.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
      <summary>
            Determines whether the member is an indexed property.
            </summary>
      <param name="member">The member.</param>
      <returns>
        <c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
      <summary>
            Determines whether the property is an indexed property.
            </summary>
      <param name="property">The property.</param>
      <returns>
        <c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
      <summary>
            Gets the member's value on the object.
            </summary>
      <param name="member">The member.</param>
      <param name="target">The target object.</param>
      <returns>The member's value on the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
      <summary>
            Sets the member's value on the target object.
            </summary>
      <param name="member">The member.</param>
      <param name="target">The target.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
      <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
      <param name="member">The MemberInfo to determine whether can be read.</param>
            /// <param name="nonPublic">if set to <c>true</c> then allow the member to be gotten non-publicly.</param><returns><c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns></member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
      <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
      <param name="member">The MemberInfo to determine whether can be set.</param>
      <param name="nonPublic">if set to <c>true</c> then allow the member to be set non-publicly.</param>
      <param name="canSetReadOnly">if set to <c>true</c> then allow the member to be set if read-only.</param>
      <returns>
        <c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
      <summary>
            Determines whether the string is all white space. Empty string will return false.
            </summary>
      <param name="s">The string to test whether it is all white space.</param>
      <returns>
        <c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.NullEmptyString(System.String)">
      <summary>
            Nulls an empty string.
            </summary>
      <param name="s">The string.</param>
      <returns>Null if the string was null, otherwise the string unchanged.</returns>
    </member>
    <member name="T:Newtonsoft.Json.WriteState">
      <summary>
            Specifies the state of the <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Error">
      <summary>
            An exception has been thrown, which has left the <see cref="T:Newtonsoft.Json.JsonWriter" /> in an invalid state.
            You may call the <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> method to put the <see cref="T:Newtonsoft.Json.JsonWriter" /> in the <c>Closed</c> state.
            Any other <see cref="T:Newtonsoft.Json.JsonWriter" /> method calls results in an <see cref="T:System.InvalidOperationException" /> being thrown. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Closed">
      <summary>
            The <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> method has been called. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Object">
      <summary>
            An object is being written. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Array">
      <summary>
            A array is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Constructor">
      <summary>
            A constructor is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Property">
      <summary>
            A property is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Start">
      <summary>
            A write method has not been called.
            </summary>
    </member>
    <member name="T:JetBrains.Annotations.CanBeNullAttribute">
      <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
      <example>
        <code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code>
      </example>
    </member>
    <member name="T:JetBrains.Annotations.NotNullAttribute">
      <summary>
            Indicates that the value of the marked element could never be <c>null</c></summary>
      <example>
        <code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code>
      </example>
    </member>
    <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
      <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" />-like form
            </summary>
      <example>
        <code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code>
      </example>
    </member>
    <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
    </member>
    <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
      <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException" /></summary>
      <example>
        <code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code>
      </example>
    </member>
    <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
      <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> interface
             and this method is used to notify that some property value changed
             </summary>
      <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list><item><c>NotifyChanged(string)</c></item><item><c>NotifyChanged(params string[])</c></item><item><c>NotifyChanged{T}(Expression{Func{T}})</c></item><item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item><item><c>SetProperty{T}(ref T, T, string)</c></item></list></remarks>
      <example>
        <code>
             internal class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list><item><c>NotifyChanged("Property")</c></item><item><c>NotifyChanged(() =&gt; Property)</c></item><item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item><item><c>SetProperty(ref myField, value, "Property")</c></item></list></example>
    </member>
    <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
      <summary>
            Describes dependency between method input and output
            </summary>
      <syntax>
        <p>Function Definition Table syntax:</p>
        <list>
          <item>FDT      ::= FDTRow [;FDTRow]*</item>
          <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
          <item>Input    ::= ParameterName: Value [, Input]*</item>
          <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
          <item>Value    ::= true | false | null | notnull | canbenull</item>
        </list>
            If method has single input parameter, it's name could be omitted.<br />
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br /><c>canbenull</c> annotation is only applicable for output parameters.<br />
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br /></syntax>
      <examples>
        <list>
          <item>
            <code>
            [ContractAnnotation("=&gt; halt")]
            public void TerminationMethod()
            </code>
          </item>
          <item>
            <code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code>
          </item>
          <item>
            <code>
            [ContractAnnotation("s:null =&gt; true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code>
          </item>
          <item>
            <code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            public object Transform(object data) 
            </code>
          </item>
          <item>
            <code>
            [ContractAnnotation("s:null=&gt;false; =&gt;true,result:notnull; =&gt;false, result:null")]
            public bool TryParse(string s, out Person result)
            </code>
          </item>
        </list>
      </examples>
    </member>
    <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
      <summary>
            Indicates that marked element should be localized or not
            </summary>
      <example>
        <code>
            [LocalizationRequiredAttribute(true)]
            internal class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code>
      </example>
    </member>
    <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
      <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
      <example>
        <code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code>
      </example>
    </member>
    <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
      <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
      <example>
        <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            internal class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            internal class MyComponent : IComponent { }
            </code>
      </example>
    </member>
    <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
      <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
    </member>
    <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
      <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
    </member>
    <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
      <summary>Only entity marked with attribute considered used</summary>
    </member>
    <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
      <summary>Indicates implicit assignment to a member</summary>
    </member>
    <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
      <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
    </member>
    <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
      <summary>Indicates implicit instantiation of a type</summary>
    </member>
    <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
      <summary>
            Specify what is considered used implicitly
            when marked with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute" />
            or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute" /></summary>
    </member>
    <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
      <summary>Members of entity marked with attribute are considered used</summary>
    </member>
    <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
      <summary>Entity marked with attribute and all its members considered used</summary>
    </member>
    <member name="T:JetBrains.Annotations.PublicAPIAttribute">
      <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
    </member>
    <member name="T:JetBrains.Annotations.InstantHandleAttribute">
      <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
    </member>
    <member name="T:JetBrains.Annotations.PureAttribute">
      <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c></summary>
      <example>
        <code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code>
      </example>
    </member>
    <member name="T:JetBrains.Annotations.PathReferenceAttribute">
      <summary>
            Indicates that a parameter is a path to a file or a folder
            within a web project. Path can be relative or absolute,
            starting from web root (~)
            </summary>
    </member>
    <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
      <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c></summary>
    </member>
    <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
      <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c></summary>
    </member>
    <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
      <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC controller. If applied to a method,
            the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c></summary>
    </member>
    <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
      <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, String)</c></summary>
    </member>
    <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
      <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, Object)</c></summary>
    </member>
    <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
      <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC partial view. If applied to a method,
            the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c></summary>
    </member>
    <member name="T:JetBrains.Annotations.AspMvcSupressViewErrorAttribute">
      <summary>
            ASP.NET MVC attribute. Allows disabling all inspections
            for MVC views within a class or a method.
            </summary>
    </member>
    <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
      <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c></summary>
    </member>
    <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
      <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c></summary>
    </member>
    <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
      <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c></summary>
    </member>
    <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
      <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c></summary>
    </member>
    <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
      <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
      <example>
        <code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code>
      </example>
    </member>
    <member name="T:JetBrains.Annotations.RazorSectionAttribute">
      <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c></summary>
    </member>
    <member name="T:NLog.Common.AsyncContinuation">
      <summary>
            Asynchronous continuation delegate - function invoked at the end of asynchronous
            processing.
            </summary>
      <param name="exception">Exception during asynchronous processing or null if no exception
            was thrown.</param>
    </member>
    <member name="T:NLog.Common.AsyncHelpers">
      <summary>
            Helpers for asynchronous operations.
            </summary>
    </member>
    <member name="M:NLog.Common.AsyncHelpers.ForEachItemSequentially``1(System.Collections.Generic.IEnumerable{``0},NLog.Common.AsyncContinuation,NLog.Common.AsynchronousAction{``0})">
      <summary>
            Iterates over all items in the given collection and runs the specified action
            in sequence (each action executes only after the preceding one has completed without an error).
            </summary>
      <typeparam name="T">Type of each item.</typeparam>
      <param name="items">The items to iterate.</param>
      <param name="asyncContinuation">The asynchronous continuation to invoke once all items
            have been iterated.</param>
      <param name="action">The action to invoke for each item.</param>
    </member>
    <member name="M:NLog.Common.AsyncHelpers.Repeat(System.Int32,NLog.Common.AsyncContinuation,NLog.Common.AsynchronousAction)">
      <summary>
            Repeats the specified asynchronous action multiple times and invokes asynchronous continuation at the end.
            </summary>
      <param name="repeatCount">The repeat count.</param>
      <param name="asyncContinuation">The asynchronous continuation to invoke at the end.</param>
      <param name="action">The action to invoke.</param>
    </member>
    <member name="M:NLog.Common.AsyncHelpers.PrecededBy(NLog.Common.AsyncContinuation,NLog.Common.AsynchronousAction)">
      <summary>
            Modifies the continuation by pre-pending given action to execute just before it.
            </summary>
      <param name="asyncContinuation">The async continuation.</param>
      <param name="action">The action to pre-pend.</param>
      <returns>Continuation which will execute the given action before forwarding to the actual continuation.</returns>
    </member>
    <member name="M:NLog.Common.AsyncHelpers.WithTimeout(NLog.Common.AsyncContinuation,System.TimeSpan)">
      <summary>
            Attaches a timeout to a continuation which will invoke the continuation when the specified
            timeout has elapsed.
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
      <param name="timeout">The timeout.</param>
      <returns>Wrapped continuation.</returns>
    </member>
    <member name="M:NLog.Common.AsyncHelpers.ForEachItemInParallel``1(System.Collections.Generic.IEnumerable{``0},NLog.Common.AsyncContinuation,NLog.Common.AsynchronousAction{``0})">
      <summary>
            Iterates over all items in the given collection and runs the specified action
            in parallel (each action executes on a thread from thread pool).
            </summary>
      <typeparam name="T">Type of each item.</typeparam>
      <param name="values">The items to iterate.</param>
      <param name="asyncContinuation">The asynchronous continuation to invoke once all items
            have been iterated.</param>
      <param name="action">The action to invoke for each item.</param>
    </member>
    <member name="M:NLog.Common.AsyncHelpers.RunSynchronously(NLog.Common.AsynchronousAction)">
      <summary>
            Runs the specified asynchronous action synchronously (blocks until the continuation has
            been invoked).
            </summary>
      <param name="action">The action.</param>
      <remarks>
            Using this method is not recommended because it will block the calling thread.
            </remarks>
    </member>
    <member name="M:NLog.Common.AsyncHelpers.PreventMultipleCalls(NLog.Common.AsyncContinuation)">
      <summary>
            Wraps the continuation with a guard which will only make sure that the continuation function
            is invoked only once.
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
      <returns>Wrapped asynchronous continuation.</returns>
    </member>
    <member name="M:NLog.Common.AsyncHelpers.GetCombinedException(System.Collections.Generic.IList{System.Exception})">
      <summary>
            Gets the combined exception from all exceptions in the list.
            </summary>
      <param name="exceptions">The exceptions.</param>
      <returns>Combined exception or null if no exception was thrown.</returns>
    </member>
    <member name="T:NLog.Common.AsynchronousAction">
      <summary>
            Asynchronous action.
            </summary>
      <param name="asyncContinuation">Continuation to be invoked at the end of action.</param>
    </member>
    <member name="T:NLog.Common.AsynchronousAction`1">
      <summary>
            Asynchronous action with one argument.
            </summary>
      <typeparam name="T">Type of the argument.</typeparam>
      <param name="argument">Argument to the action.</param>
      <param name="asyncContinuation">Continuation to be invoked at the end of action.</param>
    </member>
    <member name="T:NLog.Common.AsyncLogEventInfo">
      <summary>
            Represents the logging event with asynchronous continuation.
            </summary>
    </member>
    <member name="M:NLog.Common.AsyncLogEventInfo.#ctor(NLog.LogEventInfo,NLog.Common.AsyncContinuation)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Common.AsyncLogEventInfo" /> struct.
            </summary>
      <param name="logEvent">The log event.</param>
      <param name="continuation">The continuation.</param>
    </member>
    <member name="M:NLog.Common.AsyncLogEventInfo.op_Equality(NLog.Common.AsyncLogEventInfo,NLog.Common.AsyncLogEventInfo)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="eventInfo1">The event info1.</param>
      <param name="eventInfo2">The event info2.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:NLog.Common.AsyncLogEventInfo.op_Inequality(NLog.Common.AsyncLogEventInfo,NLog.Common.AsyncLogEventInfo)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="eventInfo1">The event info1.</param>
      <param name="eventInfo2">The event info2.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:NLog.Common.AsyncLogEventInfo.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
            A value of <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NLog.Common.AsyncLogEventInfo.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="P:NLog.Common.AsyncLogEventInfo.LogEvent">
      <summary>
            Gets the log event.
            </summary>
    </member>
    <member name="P:NLog.Common.AsyncLogEventInfo.Continuation">
      <summary>
            Gets the continuation.
            </summary>
    </member>
    <member name="T:NLog.Common.InternalLogger">
      <summary>
            NLog internal logger.
            </summary>
    </member>
    <member name="M:NLog.Common.InternalLogger.Log(NLog.LogLevel,System.String,System.Object[])">
      <summary>
            Logs the specified message at the specified level.
            </summary>
      <param name="level">Log level.</param>
      <param name="message">Message which may include positional parameters.</param>
      <param name="args">Arguments to the message.</param>
    </member>
    <member name="M:NLog.Common.InternalLogger.Log(NLog.LogLevel,System.String)">
      <summary>
            Logs the specified message at the specified level.
            </summary>
      <param name="level">Log level.</param>
      <param name="message">Log message.</param>
    </member>
    <member name="M:NLog.Common.InternalLogger.Trace(System.String,System.Object[])">
      <summary>
            Logs the specified message at the Trace level.
            </summary>
      <param name="message">Message which may include positional parameters.</param>
      <param name="args">Arguments to the message.</param>
    </member>
    <member name="M:NLog.Common.InternalLogger.Trace(System.String)">
      <summary>
            Logs the specified message at the Trace level.
            </summary>
      <param name="message">Log message.</param>
    </member>
    <member name="M:NLog.Common.InternalLogger.Debug(System.String,System.Object[])">
      <summary>
            Logs the specified message at the Debug level.
            </summary>
      <param name="message">Message which may include positional parameters.</param>
      <param name="args">Arguments to the message.</param>
    </member>
    <member name="M:NLog.Common.InternalLogger.Debug(System.String)">
      <summary>
            Logs the specified message at the Debug level.
            </summary>
      <param name="message">Log message.</param>
    </member>
    <member name="M:NLog.Common.InternalLogger.Info(System.String,System.Object[])">
      <summary>
            Logs the specified message at the Info level.
            </summary>
      <param name="message">Message which may include positional parameters.</param>
      <param name="args">Arguments to the message.</param>
    </member>
    <member name="M:NLog.Common.InternalLogger.Info(System.String)">
      <summary>
            Logs the specified message at the Info level.
            </summary>
      <param name="message">Log message.</param>
    </member>
    <member name="M:NLog.Common.InternalLogger.Warn(System.String,System.Object[])">
      <summary>
            Logs the specified message at the Warn level.
            </summary>
      <param name="message">Message which may include positional parameters.</param>
      <param name="args">Arguments to the message.</param>
    </member>
    <member name="M:NLog.Common.InternalLogger.Warn(System.String)">
      <summary>
            Logs the specified message at the Warn level.
            </summary>
      <param name="message">Log message.</param>
    </member>
    <member name="M:NLog.Common.InternalLogger.Error(System.String,System.Object[])">
      <summary>
            Logs the specified message at the Error level.
            </summary>
      <param name="message">Message which may include positional parameters.</param>
      <param name="args">Arguments to the message.</param>
    </member>
    <member name="M:NLog.Common.InternalLogger.Error(System.String)">
      <summary>
            Logs the specified message at the Error level.
            </summary>
      <param name="message">Log message.</param>
    </member>
    <member name="M:NLog.Common.InternalLogger.Fatal(System.String,System.Object[])">
      <summary>
            Logs the specified message at the Fatal level.
            </summary>
      <param name="message">Message which may include positional parameters.</param>
      <param name="args">Arguments to the message.</param>
    </member>
    <member name="M:NLog.Common.InternalLogger.Fatal(System.String)">
      <summary>
            Logs the specified message at the Fatal level.
            </summary>
      <param name="message">Log message.</param>
    </member>
    <member name="P:NLog.Common.InternalLogger.LogLevel">
      <summary>
            Gets or sets the internal log level.
            </summary>
    </member>
    <member name="P:NLog.Common.InternalLogger.LogToConsole">
      <summary>
            Gets or sets a value indicating whether internal messages should be written to the console output stream.
            </summary>
    </member>
    <member name="P:NLog.Common.InternalLogger.LogToConsoleError">
      <summary>
            Gets or sets a value indicating whether internal messages should be written to the console error stream.
            </summary>
    </member>
    <member name="P:NLog.Common.InternalLogger.LogFile">
      <summary>
            Gets or sets the name of the internal log file.
            </summary>
      <remarks>A value of <see langword="null" /> value disables internal logging to a file.</remarks>
    </member>
    <member name="P:NLog.Common.InternalLogger.LogWriter">
      <summary>
            Gets or sets the text writer that will receive internal logs.
            </summary>
    </member>
    <member name="P:NLog.Common.InternalLogger.IncludeTimestamp">
      <summary>
            Gets or sets a value indicating whether timestamp should be included in internal log output.
            </summary>
    </member>
    <member name="P:NLog.Common.InternalLogger.IsTraceEnabled">
      <summary>
            Gets a value indicating whether internal log includes Trace messages.
            </summary>
    </member>
    <member name="P:NLog.Common.InternalLogger.IsDebugEnabled">
      <summary>
            Gets a value indicating whether internal log includes Debug messages.
            </summary>
    </member>
    <member name="P:NLog.Common.InternalLogger.IsInfoEnabled">
      <summary>
            Gets a value indicating whether internal log includes Info messages.
            </summary>
    </member>
    <member name="P:NLog.Common.InternalLogger.IsWarnEnabled">
      <summary>
            Gets a value indicating whether internal log includes Warn messages.
            </summary>
    </member>
    <member name="P:NLog.Common.InternalLogger.IsErrorEnabled">
      <summary>
            Gets a value indicating whether internal log includes Error messages.
            </summary>
    </member>
    <member name="P:NLog.Common.InternalLogger.IsFatalEnabled">
      <summary>
            Gets a value indicating whether internal log includes Fatal messages.
            </summary>
    </member>
    <member name="T:NLog.Common.LogEventInfoBuffer">
      <summary>
            A cyclic buffer of <see cref="T:NLog.LogEventInfo" /> object.
            </summary>
    </member>
    <member name="M:NLog.Common.LogEventInfoBuffer.#ctor(System.Int32,System.Boolean,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Common.LogEventInfoBuffer" /> class.
            </summary>
      <param name="size">Buffer size.</param>
      <param name="growAsNeeded">Whether buffer should grow as it becomes full.</param>
      <param name="growLimit">The maximum number of items that the buffer can grow to.</param>
    </member>
    <member name="M:NLog.Common.LogEventInfoBuffer.Append(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Adds the specified log event to the buffer.
            </summary>
      <param name="eventInfo">Log event.</param>
      <returns>The number of items in the buffer.</returns>
    </member>
    <member name="M:NLog.Common.LogEventInfoBuffer.GetEventsAndClear">
      <summary>
            Gets the array of events accumulated in the buffer and clears the buffer as one atomic operation.
            </summary>
      <returns>Events in the buffer.</returns>
    </member>
    <member name="P:NLog.Common.LogEventInfoBuffer.Size">
      <summary>
            Gets the number of items in the array.
            </summary>
    </member>
    <member name="T:NLog.Conditions.ConditionExpression">
      <summary>
            Base class for representing nodes in condition expression trees.
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionExpression.op_Implicit(System.String)~NLog.Conditions.ConditionExpression">
      <summary>
            Converts condition text to a condition expression tree.
            </summary>
      <param name="conditionExpressionText">Condition text to be converted.</param>
      <returns>Condition expression tree.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionExpression.Evaluate(NLog.LogEventInfo)">
      <summary>
            Evaluates the expression.
            </summary>
      <param name="context">Evaluation context.</param>
      <returns>Expression result.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionExpression.ToString">
      <summary>
            Returns a string representation of the expression.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the condition expression.
            </returns>
    </member>
    <member name="M:NLog.Conditions.ConditionExpression.EvaluateNode(NLog.LogEventInfo)">
      <summary>
            Evaluates the expression.
            </summary>
      <param name="context">Evaluation context.</param>
      <returns>Expression result.</returns>
    </member>
    <member name="T:NLog.Conditions.ConditionAndExpression">
      <summary>
            Condition <b>and</b> expression.
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionAndExpression.#ctor(NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionExpression)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionAndExpression" /> class.
            </summary>
      <param name="left">Left hand side of the AND expression.</param>
      <param name="right">Right hand side of the AND expression.</param>
    </member>
    <member name="M:NLog.Conditions.ConditionAndExpression.ToString">
      <summary>
            Returns a string representation of this expression.
            </summary>
      <returns>A concatenated '(Left) and (Right)' string.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionAndExpression.EvaluateNode(NLog.LogEventInfo)">
      <summary>
            Evaluates the expression by evaluating <see cref="P:NLog.Conditions.ConditionAndExpression.Left" /> and <see cref="P:NLog.Conditions.ConditionAndExpression.Right" /> recursively.
            </summary>
      <param name="context">Evaluation context.</param>
      <returns>The value of the conjunction operator.</returns>
    </member>
    <member name="P:NLog.Conditions.ConditionAndExpression.Left">
      <summary>
            Gets the left hand side of the AND expression.
            </summary>
    </member>
    <member name="P:NLog.Conditions.ConditionAndExpression.Right">
      <summary>
            Gets the right hand side of the AND expression.
            </summary>
    </member>
    <member name="T:NLog.Conditions.ConditionEvaluationException">
      <summary>
            Exception during evaluation of condition expression.
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionEvaluationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionEvaluationException" /> class.
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionEvaluationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionEvaluationException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:NLog.Conditions.ConditionEvaluationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionEvaluationException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:NLog.Conditions.ConditionEvaluationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionEvaluationException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="T:NLog.Conditions.ConditionLayoutExpression">
      <summary>
            Condition layout expression (represented by a string literal
            with embedded ${}).
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionLayoutExpression.#ctor(NLog.Layouts.Layout)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionLayoutExpression" /> class.
            </summary>
      <param name="layout">The layout.</param>
    </member>
    <member name="M:NLog.Conditions.ConditionLayoutExpression.ToString">
      <summary>
            Returns a string representation of this expression.
            </summary>
      <returns>String literal in single quotes.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionLayoutExpression.EvaluateNode(NLog.LogEventInfo)">
      <summary>
            Evaluates the expression by calculating the value
            of the layout in the specified evaluation context.
            </summary>
      <param name="context">Evaluation context.</param>
      <returns>The value of the layout.</returns>
    </member>
    <member name="P:NLog.Conditions.ConditionLayoutExpression.Layout">
      <summary>
            Gets the layout.
            </summary>
      <value>The layout.</value>
    </member>
    <member name="T:NLog.Conditions.ConditionLevelExpression">
      <summary>
            Condition level expression (represented by the <b>level</b> keyword).
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionLevelExpression.ToString">
      <summary>
            Returns a string representation of the expression.
            </summary>
      <returns>The '<b>level</b>' string.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionLevelExpression.EvaluateNode(NLog.LogEventInfo)">
      <summary>
            Evaluates to the current log level.
            </summary>
      <param name="context">Evaluation context. Ignored.</param>
      <returns>The <see cref="T:NLog.LogLevel" /> object representing current log level.</returns>
    </member>
    <member name="T:NLog.Conditions.ConditionLiteralExpression">
      <summary>
            Condition literal expression (numeric, <b>LogLevel.XXX</b>, <b>true</b> or <b>false</b>).
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionLiteralExpression.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionLiteralExpression" /> class.
            </summary>
      <param name="literalValue">Literal value.</param>
    </member>
    <member name="M:NLog.Conditions.ConditionLiteralExpression.ToString">
      <summary>
            Returns a string representation of the expression.
            </summary>
      <returns>The literal value.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionLiteralExpression.EvaluateNode(NLog.LogEventInfo)">
      <summary>
            Evaluates the expression.
            </summary>
      <param name="context">Evaluation context.</param>
      <returns>The literal value as passed in the constructor.</returns>
    </member>
    <member name="P:NLog.Conditions.ConditionLiteralExpression.LiteralValue">
      <summary>
            Gets the literal value.
            </summary>
      <value>The literal value.</value>
    </member>
    <member name="T:NLog.Conditions.ConditionLoggerNameExpression">
      <summary>
            Condition logger name expression (represented by the <b>logger</b> keyword).
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionLoggerNameExpression.ToString">
      <summary>
            Returns a string representation of this expression.
            </summary>
      <returns>A <b>logger</b> string.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionLoggerNameExpression.EvaluateNode(NLog.LogEventInfo)">
      <summary>
            Evaluates to the logger name.
            </summary>
      <param name="context">Evaluation context.</param>
      <returns>The logger name.</returns>
    </member>
    <member name="T:NLog.Conditions.ConditionMessageExpression">
      <summary>
            Condition message expression (represented by the <b>message</b> keyword).
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionMessageExpression.ToString">
      <summary>
            Returns a string representation of this expression.
            </summary>
      <returns>The '<b>message</b>' string.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionMessageExpression.EvaluateNode(NLog.LogEventInfo)">
      <summary>
            Evaluates to the logger message.
            </summary>
      <param name="context">Evaluation context.</param>
      <returns>The logger message.</returns>
    </member>
    <member name="T:NLog.Config.NameBaseAttribute">
      <summary>
            Attaches a simple name to an item (such as <see cref="T:NLog.Targets.Target" />, 
            <see cref="T:NLog.LayoutRenderers.LayoutRenderer" />, <see cref="T:NLog.Layouts.Layout" />, etc.).
            </summary>
    </member>
    <member name="M:NLog.Config.NameBaseAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.NameBaseAttribute" /> class.
            </summary>
      <param name="name">The name of the item.</param>
    </member>
    <member name="P:NLog.Config.NameBaseAttribute.Name">
      <summary>
            Gets the name of the item.
            </summary>
      <value>The name of the item.</value>
    </member>
    <member name="T:NLog.Conditions.ConditionMethodAttribute">
      <summary>
            Marks class as a log event Condition and assigns a name to it.
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionMethodAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionMethodAttribute" /> class.
            </summary>
      <param name="name">Condition method name.</param>
    </member>
    <member name="T:NLog.Conditions.ConditionMethodExpression">
      <summary>
            Condition method invocation expression (represented by <b>method(p1,p2,p3)</b> syntax).
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionMethodExpression.#ctor(System.String,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{NLog.Conditions.ConditionExpression})">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionMethodExpression" /> class.
            </summary>
      <param name="conditionMethodName">Name of the condition method.</param>
      <param name="methodInfo">
        <see cref="P:NLog.Conditions.ConditionMethodExpression.MethodInfo" /> of the condition method.</param>
      <param name="methodParameters">The method parameters.</param>
    </member>
    <member name="M:NLog.Conditions.ConditionMethodExpression.ToString">
      <summary>
            Returns a string representation of the expression.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the condition expression.
            </returns>
    </member>
    <member name="M:NLog.Conditions.ConditionMethodExpression.EvaluateNode(NLog.LogEventInfo)">
      <summary>
            Evaluates the expression.
            </summary>
      <param name="context">Evaluation context.</param>
      <returns>Expression result.</returns>
    </member>
    <member name="P:NLog.Conditions.ConditionMethodExpression.MethodInfo">
      <summary>
            Gets the method info.
            </summary>
    </member>
    <member name="P:NLog.Conditions.ConditionMethodExpression.MethodParameters">
      <summary>
            Gets the method parameters.
            </summary>
      <value>The method parameters.</value>
    </member>
    <member name="T:NLog.Conditions.ConditionMethods">
      <summary>
            A bunch of utility methods (mostly predicates) which can be used in
            condition expressions. Parially inspired by XPath 1.0.
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionMethods.Equals2(System.Object,System.Object)">
      <summary>
            Compares two values for equality.
            </summary>
      <param name="firstValue">The first value.</param>
      <param name="secondValue">The second value.</param>
      <returns>
        <b>true</b> when two objects are equal, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionMethods.Equals2(System.String,System.String,System.Boolean)">
      <summary>
            Compares two strings for equality.
            </summary>
      <param name="firstValue">The first string.</param>
      <param name="secondValue">The second string.</param>
      <param name="ignoreCase">Optional. If <c>true</c>, case is ignored; if <c>false</c> (default), case is significant.</param>
      <returns>
        <b>true</b> when two strings are equal, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionMethods.Contains(System.String,System.String,System.Boolean)">
      <summary>
            Gets or sets a value indicating whether the second string is a substring of the first one.
            </summary>
      <param name="haystack">The first string.</param>
      <param name="needle">The second string.</param>
      <param name="ignoreCase">Optional. If <c>true</c> (default), case is ignored; if <c>false</c>, case is significant.</param>
      <returns>
        <b>true</b> when the second string is a substring of the first string, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionMethods.StartsWith(System.String,System.String,System.Boolean)">
      <summary>
            Gets or sets a value indicating whether the second string is a prefix of the first one.
            </summary>
      <param name="haystack">The first string.</param>
      <param name="needle">The second string.</param>
      <param name="ignoreCase">Optional. If <c>true</c> (default), case is ignored; if <c>false</c>, case is significant.</param>
      <returns>
        <b>true</b> when the second string is a prefix of the first string, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionMethods.EndsWith(System.String,System.String,System.Boolean)">
      <summary>
            Gets or sets a value indicating whether the second string is a suffix of the first one.
            </summary>
      <param name="haystack">The first string.</param>
      <param name="needle">The second string.</param>
      <param name="ignoreCase">Optional. If <c>true</c> (default), case is ignored; if <c>false</c>, case is significant.</param>
      <returns>
        <b>true</b> when the second string is a prefix of the first string, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionMethods.Length(System.String)">
      <summary>
            Returns the length of a string.
            </summary>
      <param name="text">A string whose lengths is to be evaluated.</param>
      <returns>The length of the string.</returns>
    </member>
    <member name="T:NLog.Conditions.ConditionMethodsAttribute">
      <summary>
            Marks the class as containing condition methods.
            </summary>
    </member>
    <member name="T:NLog.Conditions.ConditionNotExpression">
      <summary>
            Condition <b>not</b> expression.
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionNotExpression.#ctor(NLog.Conditions.ConditionExpression)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionNotExpression" /> class.
            </summary>
      <param name="expression">The expression.</param>
    </member>
    <member name="M:NLog.Conditions.ConditionNotExpression.ToString">
      <summary>
            Returns a string representation of the expression.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the condition expression.
            </returns>
    </member>
    <member name="M:NLog.Conditions.ConditionNotExpression.EvaluateNode(NLog.LogEventInfo)">
      <summary>
            Evaluates the expression.
            </summary>
      <param name="context">Evaluation context.</param>
      <returns>Expression result.</returns>
    </member>
    <member name="P:NLog.Conditions.ConditionNotExpression.Expression">
      <summary>
            Gets the expression to be negated.
            </summary>
      <value>The expression.</value>
    </member>
    <member name="T:NLog.Conditions.ConditionOrExpression">
      <summary>
            Condition <b>or</b> expression.
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionOrExpression.#ctor(NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionExpression)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionOrExpression" /> class.
            </summary>
      <param name="left">Left hand side of the OR expression.</param>
      <param name="right">Right hand side of the OR expression.</param>
    </member>
    <member name="M:NLog.Conditions.ConditionOrExpression.ToString">
      <summary>
            Returns a string representation of the expression.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the condition expression.
            </returns>
    </member>
    <member name="M:NLog.Conditions.ConditionOrExpression.EvaluateNode(NLog.LogEventInfo)">
      <summary>
            Evaluates the expression by evaluating <see cref="P:NLog.Conditions.ConditionOrExpression.LeftExpression" /> and <see cref="P:NLog.Conditions.ConditionOrExpression.RightExpression" /> recursively.
            </summary>
      <param name="context">Evaluation context.</param>
      <returns>The value of the alternative operator.</returns>
    </member>
    <member name="P:NLog.Conditions.ConditionOrExpression.LeftExpression">
      <summary>
            Gets the left expression.
            </summary>
      <value>The left expression.</value>
    </member>
    <member name="P:NLog.Conditions.ConditionOrExpression.RightExpression">
      <summary>
            Gets the right expression.
            </summary>
      <value>The right expression.</value>
    </member>
    <member name="T:NLog.Conditions.ConditionParseException">
      <summary>
            Exception during parsing of condition expression.
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionParseException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParseException" /> class.
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionParseException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParseException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:NLog.Conditions.ConditionParseException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParseException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:NLog.Conditions.ConditionParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParseException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="T:NLog.Conditions.ConditionParser">
      <summary>
            Condition parser. Turns a string representation of condition expression
            into an expression tree.
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionParser.#ctor(NLog.Internal.SimpleStringReader,NLog.Config.ConfigurationItemFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParser" /> class.
            </summary>
      <param name="stringReader">The string reader.</param>
      <param name="configurationItemFactory">Instance of <see cref="T:NLog.Config.ConfigurationItemFactory" /> used to resolve references to condition methods and layout renderers.</param>
    </member>
    <member name="M:NLog.Conditions.ConditionParser.ParseExpression(System.String)">
      <summary>
            Parses the specified condition string and turns it into
            <see cref="T:NLog.Conditions.ConditionExpression" /> tree.
            </summary>
      <param name="expressionText">The expression to be parsed.</param>
      <returns>The root of the expression syntax tree which can be used to get the value of the condition in a specified context.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionParser.ParseExpression(System.String,NLog.Config.ConfigurationItemFactory)">
      <summary>
            Parses the specified condition string and turns it into
            <see cref="T:NLog.Conditions.ConditionExpression" /> tree.
            </summary>
      <param name="expressionText">The expression to be parsed.</param>
      <param name="configurationItemFactories">Instance of <see cref="T:NLog.Config.ConfigurationItemFactory" /> used to resolve references to condition methods and layout renderers.</param>
      <returns>The root of the expression syntax tree which can be used to get the value of the condition in a specified context.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionParser.ParseExpression(NLog.Internal.SimpleStringReader,NLog.Config.ConfigurationItemFactory)">
      <summary>
            Parses the specified condition string and turns it into
            <see cref="T:NLog.Conditions.ConditionExpression" /> tree.
            </summary>
      <param name="stringReader">The string reader.</param>
      <param name="configurationItemFactories">Instance of <see cref="T:NLog.Config.ConfigurationItemFactory" /> used to resolve references to condition methods and layout renderers.</param>
      <returns>
            The root of the expression syntax tree which can be used to get the value of the condition in a specified context.
            </returns>
    </member>
    <member name="T:NLog.Conditions.ConditionRelationalExpression">
      <summary>
            Condition relational (<b>==</b>, <b>!=</b>, <b>&lt;</b>, <b>&lt;=</b>,
            <b>&gt;</b> or <b>&gt;=</b>) expression.
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionRelationalExpression.#ctor(NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionRelationalOperator)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionRelationalExpression" /> class.
            </summary>
      <param name="leftExpression">The left expression.</param>
      <param name="rightExpression">The right expression.</param>
      <param name="relationalOperator">The relational operator.</param>
    </member>
    <member name="M:NLog.Conditions.ConditionRelationalExpression.ToString">
      <summary>
            Returns a string representation of the expression.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the condition expression.
            </returns>
    </member>
    <member name="M:NLog.Conditions.ConditionRelationalExpression.EvaluateNode(NLog.LogEventInfo)">
      <summary>
            Evaluates the expression.
            </summary>
      <param name="context">Evaluation context.</param>
      <returns>Expression result.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionRelationalExpression.Compare(System.Object,System.Object,NLog.Conditions.ConditionRelationalOperator)">
      <summary>
            Compares the specified values using specified relational operator.
            </summary>
      <param name="leftValue">The first value.</param>
      <param name="rightValue">The second value.</param>
      <param name="relationalOperator">The relational operator.</param>
      <returns>Result of the given relational operator.</returns>
    </member>
    <member name="P:NLog.Conditions.ConditionRelationalExpression.LeftExpression">
      <summary>
            Gets the left expression.
            </summary>
      <value>The left expression.</value>
    </member>
    <member name="P:NLog.Conditions.ConditionRelationalExpression.RightExpression">
      <summary>
            Gets the right expression.
            </summary>
      <value>The right expression.</value>
    </member>
    <member name="P:NLog.Conditions.ConditionRelationalExpression.RelationalOperator">
      <summary>
            Gets the relational operator.
            </summary>
      <value>The operator.</value>
    </member>
    <member name="T:NLog.Conditions.ConditionRelationalOperator">
      <summary>
            Relational operators used in conditions.
            </summary>
    </member>
    <member name="F:NLog.Conditions.ConditionRelationalOperator.Equal">
      <summary>
            Equality (==).
            </summary>
    </member>
    <member name="F:NLog.Conditions.ConditionRelationalOperator.NotEqual">
      <summary>
            Inequality (!=).
            </summary>
    </member>
    <member name="F:NLog.Conditions.ConditionRelationalOperator.Less">
      <summary>
            Less than (&lt;).
            </summary>
    </member>
    <member name="F:NLog.Conditions.ConditionRelationalOperator.Greater">
      <summary>
            Greater than (&gt;).
            </summary>
    </member>
    <member name="F:NLog.Conditions.ConditionRelationalOperator.LessOrEqual">
      <summary>
            Less than or equal (&lt;=).
            </summary>
    </member>
    <member name="F:NLog.Conditions.ConditionRelationalOperator.GreaterOrEqual">
      <summary>
            Greater than or equal (&gt;=).
            </summary>
    </member>
    <member name="T:NLog.Conditions.ConditionTokenizer">
      <summary>
            Hand-written tokenizer for conditions.
            </summary>
    </member>
    <member name="T:NLog.Conditions.ConditionTokenizer.CharToTokenType">
      <summary>
            Mapping between characters and token types for punctuations.
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionTokenizer.CharToTokenType.#ctor(System.Char,NLog.Conditions.ConditionTokenType)">
      <summary>
            Initializes a new instance of the CharToTokenType struct.
            </summary>
      <param name="character">The character.</param>
      <param name="tokenType">Type of the token.</param>
    </member>
    <member name="M:NLog.Conditions.ConditionTokenizer.#ctor(NLog.Internal.SimpleStringReader)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionTokenizer" /> class.
            </summary>
      <param name="stringReader">The string reader.</param>
    </member>
    <member name="M:NLog.Conditions.ConditionTokenizer.Expect(NLog.Conditions.ConditionTokenType)">
      <summary>
            Asserts current token type and advances to the next token.
            </summary>
      <param name="tokenType">Expected token type.</param>
      <remarks>If token type doesn't match, an exception is thrown.</remarks>
    </member>
    <member name="M:NLog.Conditions.ConditionTokenizer.EatKeyword">
      <summary>
            Asserts that current token is a keyword and returns its value and advances to the next token.
            </summary>
      <returns>Keyword value.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionTokenizer.IsKeyword(System.String)">
      <summary>
            Gets or sets a value indicating whether current keyword is equal to the specified value.
            </summary>
      <param name="keyword">The keyword.</param>
      <returns>
            A value of <c>true</c> if current keyword is equal to the specified value; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NLog.Conditions.ConditionTokenizer.IsEOF">
      <summary>
            Gets or sets a value indicating whether the tokenizer has reached the end of the token stream.
            </summary>
      <returns>
            A value of <c>true</c> if the tokenizer has reached the end of the token stream; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NLog.Conditions.ConditionTokenizer.IsNumber">
      <summary>
            Gets or sets a value indicating whether current token is a number.
            </summary>
      <returns>
            A value of <c>true</c> if current token is a number; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NLog.Conditions.ConditionTokenizer.IsToken(NLog.Conditions.ConditionTokenType)">
      <summary>
            Gets or sets a value indicating whether the specified token is of specified type.
            </summary>
      <param name="tokenType">The token type.</param>
      <returns>
            A value of <c>true</c> if current token is of specified type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NLog.Conditions.ConditionTokenizer.GetNextToken">
      <summary>
            Gets the next token and sets <see cref="P:NLog.Conditions.ConditionTokenizer.TokenType" /> and <see cref="P:NLog.Conditions.ConditionTokenizer.TokenValue" /> properties.
            </summary>
    </member>
    <member name="P:NLog.Conditions.ConditionTokenizer.TokenPosition">
      <summary>
            Gets the token position.
            </summary>
      <value>The token position.</value>
    </member>
    <member name="P:NLog.Conditions.ConditionTokenizer.TokenType">
      <summary>
            Gets the type of the token.
            </summary>
      <value>The type of the token.</value>
    </member>
    <member name="P:NLog.Conditions.ConditionTokenizer.TokenValue">
      <summary>
            Gets the token value.
            </summary>
      <value>The token value.</value>
    </member>
    <member name="P:NLog.Conditions.ConditionTokenizer.StringTokenValue">
      <summary>
            Gets the value of a string token.
            </summary>
      <value>The string token value.</value>
    </member>
    <member name="T:NLog.Conditions.ConditionTokenType">
      <summary>
            Token types for condition expressions.
            </summary>
    </member>
    <member name="T:NLog.Config.AdvancedAttribute">
      <summary>
            Marks the class or a member as advanced. Advanced classes and members are hidden by 
            default in generated documentation.
            </summary>
    </member>
    <member name="M:NLog.Config.AdvancedAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.AdvancedAttribute" /> class.
            </summary>
    </member>
    <member name="T:NLog.Config.AppDomainFixedOutputAttribute">
      <summary>
            Identifies that the output of layout or layout render does not change for the lifetime of the current appdomain.
            </summary>
    </member>
    <member name="T:NLog.Config.ArrayParameterAttribute">
      <summary>
            Used to mark configurable parameters which are arrays. 
            Specifies the mapping between XML elements and .NET types.
            </summary>
    </member>
    <member name="M:NLog.Config.ArrayParameterAttribute.#ctor(System.Type,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.ArrayParameterAttribute" /> class.
            </summary>
      <param name="itemType">The type of the array item.</param>
      <param name="elementName">The XML element name that represents the item.</param>
    </member>
    <member name="P:NLog.Config.ArrayParameterAttribute.ItemType">
      <summary>
            Gets the .NET type of the array item.
            </summary>
    </member>
    <member name="P:NLog.Config.ArrayParameterAttribute.ElementName">
      <summary>
            Gets the XML element name.
            </summary>
    </member>
    <member name="T:NLog.Config.ConfigSectionHandler">
      <summary>
            NLog configuration section handler class for configuring NLog from App.config.
            </summary>
    </member>
    <member name="T:NLog.Config.ConfigurationItemCreator">
      <summary>
            Constructs a new instance the configuration item (target, layout, layout renderer, etc.) given its type.
            </summary>
      <param name="itemType">Type of the item.</param>
      <returns>Created object of the specified type.</returns>
    </member>
    <member name="T:NLog.Config.ConfigurationItemFactory">
      <summary>
            Provides registration information for named items (targets, layouts, layout renderers, etc.) managed by NLog.
            </summary>
    </member>
    <member name="M:NLog.Config.ConfigurationItemFactory.#ctor(System.Reflection.Assembly[])">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.ConfigurationItemFactory" /> class.
            </summary>
      <param name="assemblies">The assemblies to scan for named items.</param>
    </member>
    <member name="M:NLog.Config.ConfigurationItemFactory.RegisterItemsFromAssembly(System.Reflection.Assembly)">
      <summary>
            Registers named items from the assembly.
            </summary>
      <param name="assembly">The assembly.</param>
    </member>
    <member name="M:NLog.Config.ConfigurationItemFactory.RegisterItemsFromAssembly(System.Reflection.Assembly,System.String)">
      <summary>
            Registers named items from the assembly.
            </summary>
      <param name="assembly">The assembly.</param>
      <param name="itemNamePrefix">Item name prefix.</param>
    </member>
    <member name="M:NLog.Config.ConfigurationItemFactory.Clear">
      <summary>
            Clears the contents of all factories.
            </summary>
    </member>
    <member name="M:NLog.Config.ConfigurationItemFactory.RegisterType(System.Type,System.String)">
      <summary>
            Registers the type.
            </summary>
      <param name="type">The type to register.</param>
      <param name="itemNamePrefix">The item name prefix.</param>
    </member>
    <member name="M:NLog.Config.ConfigurationItemFactory.BuildDefaultFactory">
      <summary>
            Builds the default configuration item factory.
            </summary>
      <returns>Default factory.</returns>
    </member>
    <member name="M:NLog.Config.ConfigurationItemFactory.RegisterExtendedItems">
      <summary>
            Registers items in NLog.Extended.dll using late-bound types, so that we don't need a reference to NLog.Extended.dll.
            </summary>
    </member>
    <member name="P:NLog.Config.ConfigurationItemFactory.Default">
      <summary>
            Gets or sets default singleton instance of <see cref="T:NLog.Config.ConfigurationItemFactory" />.
            </summary>
    </member>
    <member name="P:NLog.Config.ConfigurationItemFactory.CreateInstance">
      <summary>
            Gets or sets the creator delegate used to instantiate configuration objects.
            </summary>
      <remarks>
            By overriding this property, one can enable dependency injection or interception for created objects.
            </remarks>
    </member>
    <member name="P:NLog.Config.ConfigurationItemFactory.Targets">
      <summary>
            Gets the <see cref="T:NLog.Targets.Target" /> factory.
            </summary>
      <value>The target factory.</value>
    </member>
    <member name="P:NLog.Config.ConfigurationItemFactory.Filters">
      <summary>
            Gets the <see cref="T:NLog.Filters.Filter" /> factory.
            </summary>
      <value>The filter factory.</value>
    </member>
    <member name="P:NLog.Config.ConfigurationItemFactory.LayoutRenderers">
      <summary>
            Gets the <see cref="T:NLog.LayoutRenderers.LayoutRenderer" /> factory.
            </summary>
      <value>The layout renderer factory.</value>
    </member>
    <member name="P:NLog.Config.ConfigurationItemFactory.Layouts">
      <summary>
            Gets the <see cref="T:NLog.LayoutRenderers.LayoutRenderer" /> factory.
            </summary>
      <value>The layout factory.</value>
    </member>
    <member name="P:NLog.Config.ConfigurationItemFactory.AmbientProperties">
      <summary>
            Gets the ambient property factory.
            </summary>
      <value>The ambient property factory.</value>
    </member>
    <member name="P:NLog.Config.ConfigurationItemFactory.TimeSources">
      <summary>
            Gets the time source factory.
            </summary>
      <value>The time source factory.</value>
    </member>
    <member name="P:NLog.Config.ConfigurationItemFactory.ConditionMethods">
      <summary>
            Gets the condition method factory.
            </summary>
      <value>The condition method factory.</value>
    </member>
    <member name="T:NLog.Config.DefaultParameterAttribute">
      <summary>
            Attribute used to mark the default parameters for layout renderers.
            </summary>
    </member>
    <member name="M:NLog.Config.DefaultParameterAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.DefaultParameterAttribute" /> class.
            </summary>
    </member>
    <member name="T:NLog.Config.INamedItemFactory`2">
      <summary>
            Represents a factory of named items (such as targets, layouts, layout renderers, etc.).
            </summary>
      <typeparam name="TInstanceType">Base type for each item instance.</typeparam>
      <typeparam name="TDefinitionType">Item definition type (typically <see cref="T:System.Type" /> or <see cref="T:System.Reflection.MethodInfo" />).</typeparam>
    </member>
    <member name="M:NLog.Config.INamedItemFactory`2.RegisterDefinition(System.String,`1)">
      <summary>
            Registers new item definition.
            </summary>
      <param name="itemName">Name of the item.</param>
      <param name="itemDefinition">Item definition.</param>
    </member>
    <member name="M:NLog.Config.INamedItemFactory`2.TryGetDefinition(System.String,`1@)">
      <summary>
            Tries to get registed item definition.
            </summary>
      <param name="itemName">Name of the item.</param>
      <param name="result">Reference to a variable which will store the item definition.</param>
      <returns>Item definition.</returns>
    </member>
    <member name="M:NLog.Config.INamedItemFactory`2.CreateInstance(System.String)">
      <summary>
            Creates item instance.
            </summary>
      <param name="itemName">Name of the item.</param>
      <returns>Newly created item instance.</returns>
    </member>
    <member name="M:NLog.Config.INamedItemFactory`2.TryCreateInstance(System.String,`0@)">
      <summary>
            Tries to create an item instance.
            </summary>
      <param name="itemName">Name of the item.</param>
      <param name="result">The result.</param>
      <returns>True if instance was created successfully, false otherwise.</returns>
    </member>
    <member name="T:NLog.Config.IFactory">
      <summary>
            Provides means to populate factories of named items (such as targets, layouts, layout renderers, etc.).
            </summary>
    </member>
    <member name="T:NLog.Config.Factory`2">
      <summary>
            Factory for class-based items.
            </summary>
      <typeparam name="TBaseType">The base type of each item.</typeparam>
      <typeparam name="TAttributeType">The type of the attribute used to annotate itemss.</typeparam>
    </member>
    <member name="M:NLog.Config.Factory`2.ScanTypes(System.Type[],System.String)">
      <summary>
            Scans the assembly.
            </summary>
      <param name="types">The types to scane.</param>
      <param name="prefix">The prefix.</param>
    </member>
    <member name="M:NLog.Config.Factory`2.RegisterType(System.Type,System.String)">
      <summary>
            Registers the type.
            </summary>
      <param name="type">The type to register.</param>
      <param name="itemNamePrefix">The item name prefix.</param>
    </member>
    <member name="M:NLog.Config.Factory`2.RegisterNamedType(System.String,System.String)">
      <summary>
            Registers the item based on a type name.
            </summary>
      <param name="itemName">Name of the item.</param>
      <param name="typeName">Name of the type.</param>
    </member>
    <member name="M:NLog.Config.Factory`2.Clear">
      <summary>
            Clears the contents of the factory.
            </summary>
    </member>
    <member name="M:NLog.Config.Factory`2.RegisterDefinition(System.String,System.Type)">
      <summary>
            Registers a single type definition.
            </summary>
      <param name="name">The item name.</param>
      <param name="type">The type of the item.</param>
    </member>
    <member name="M:NLog.Config.Factory`2.TryGetDefinition(System.String,System.Type@)">
      <summary>
            Tries to get registed item definition.
            </summary>
      <param name="itemName">Name of the item.</param>
      <param name="result">Reference to a variable which will store the item definition.</param>
      <returns>Item definition.</returns>
    </member>
    <member name="M:NLog.Config.Factory`2.TryCreateInstance(System.String,`0@)">
      <summary>
            Tries to create an item instance.
            </summary>
      <param name="itemName">Name of the item.</param>
      <param name="result">The result.</param>
      <returns>True if instance was created successfully, false otherwise.</returns>
    </member>
    <member name="M:NLog.Config.Factory`2.CreateInstance(System.String)">
      <summary>
            Creates an item instance.
            </summary>
      <param name="name">The name of the item.</param>
      <returns>Created item.</returns>
    </member>
    <member name="T:NLog.Config.IInstallable">
      <summary>
            Implemented by objects which support installation and uninstallation.
            </summary>
    </member>
    <member name="M:NLog.Config.IInstallable.Install(NLog.Config.InstallationContext)">
      <summary>
            Performs installation which requires administrative permissions.
            </summary>
      <param name="installationContext">The installation context.</param>
    </member>
    <member name="M:NLog.Config.IInstallable.Uninstall(NLog.Config.InstallationContext)">
      <summary>
            Performs uninstallation which requires administrative permissions.
            </summary>
      <param name="installationContext">The installation context.</param>
    </member>
    <member name="M:NLog.Config.IInstallable.IsInstalled(NLog.Config.InstallationContext)">
      <summary>
            Determines whether the item is installed.
            </summary>
      <param name="installationContext">The installation context.</param>
      <returns>
            Value indicating whether the item is installed or null if it is not possible to determine.
            </returns>
    </member>
    <member name="T:NLog.Config.InstallationContext">
      <summary>
            Provides context for install/uninstall operations.
            </summary>
    </member>
    <member name="F:NLog.Config.InstallationContext.logLevel2ConsoleColor">
      <summary>
            Mapping between log levels and console output colors.
            </summary>
    </member>
    <member name="M:NLog.Config.InstallationContext.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.InstallationContext" /> class.
            </summary>
    </member>
    <member name="M:NLog.Config.InstallationContext.#ctor(System.IO.TextWriter)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.InstallationContext" /> class.
            </summary>
      <param name="logOutput">The log output.</param>
    </member>
    <member name="M:NLog.Config.InstallationContext.Trace(System.String,System.Object[])">
      <summary>
            Logs the specified trace message.
            </summary>
      <param name="message">The message.</param>
      <param name="arguments">The arguments.</param>
    </member>
    <member name="M:NLog.Config.InstallationContext.Debug(System.String,System.Object[])">
      <summary>
            Logs the specified debug message.
            </summary>
      <param name="message">The message.</param>
      <param name="arguments">The arguments.</param>
    </member>
    <member name="M:NLog.Config.InstallationContext.Info(System.String,System.Object[])">
      <summary>
            Logs the specified informational message.
            </summary>
      <param name="message">The message.</param>
      <param name="arguments">The arguments.</param>
    </member>
    <member name="M:NLog.Config.InstallationContext.Warning(System.String,System.Object[])">
      <summary>
            Logs the specified warning message.
            </summary>
      <param name="message">The message.</param>
      <param name="arguments">The arguments.</param>
    </member>
    <member name="M:NLog.Config.InstallationContext.Error(System.String,System.Object[])">
      <summary>
            Logs the specified error message.
            </summary>
      <param name="message">The message.</param>
      <param name="arguments">The arguments.</param>
    </member>
    <member name="M:NLog.Config.InstallationContext.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:NLog.Config.InstallationContext.CreateLogEvent">
      <summary>
            Creates the log event which can be used to render layouts during installation/uninstallations.
            </summary>
      <returns>Log event info object.</returns>
    </member>
    <member name="P:NLog.Config.InstallationContext.LogLevel">
      <summary>
            Gets or sets the installation log level.
            </summary>
    </member>
    <member name="P:NLog.Config.InstallationContext.IgnoreFailures">
      <summary>
            Gets or sets a value indicating whether to ignore failures during installation.
            </summary>
    </member>
    <member name="P:NLog.Config.InstallationContext.Parameters">
      <summary>
            Gets the installation parameters.
            </summary>
    </member>
    <member name="P:NLog.Config.InstallationContext.LogOutput">
      <summary>
            Gets or sets the log output.
            </summary>
    </member>
    <member name="T:NLog.Config.LoggingConfiguration">
      <summary>
            Keeps logging configuration and provides simple API
            to modify it.
            </summary>
    </member>
    <member name="M:NLog.Config.LoggingConfiguration.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingConfiguration" /> class.
            </summary>
    </member>
    <member name="M:NLog.Config.LoggingConfiguration.AddTarget(System.String,NLog.Targets.Target)">
      <summary>
            Registers the specified target object under a given name.
            </summary>
      <param name="name">
            Name of the target.
            </param>
      <param name="target">
            The target object.
            </param>
    </member>
    <member name="M:NLog.Config.LoggingConfiguration.FindTargetByName(System.String)">
      <summary>
            Finds the target with the specified name.
            </summary>
      <param name="name">
            The name of the target to be found.
            </param>
      <returns>
            Found target or <see langword="null" /> when the target is not found.
            </returns>
    </member>
    <member name="M:NLog.Config.LoggingConfiguration.Reload">
      <summary>
            Called by LogManager when one of the log configuration files changes.
            </summary>
      <returns>
            A new instance of <see cref="T:NLog.Config.LoggingConfiguration" /> that represents the updated configuration.
            </returns>
    </member>
    <member name="M:NLog.Config.LoggingConfiguration.RemoveTarget(System.String)">
      <summary>
            Removes the specified named target.
            </summary>
      <param name="name">
            Name of the target.
            </param>
    </member>
    <member name="M:NLog.Config.LoggingConfiguration.Install(NLog.Config.InstallationContext)">
      <summary>
            Installs target-specific objects on current system.
            </summary>
      <param name="installationContext">The installation context.</param>
      <remarks>
            Installation typically runs with administrative permissions.
            </remarks>
    </member>
    <member name="M:NLog.Config.LoggingConfiguration.Uninstall(NLog.Config.InstallationContext)">
      <summary>
            Uninstalls target-specific objects from current system.
            </summary>
      <param name="installationContext">The installation context.</param>
      <remarks>
            Uninstallation typically runs with administrative permissions.
            </remarks>
    </member>
    <member name="M:NLog.Config.LoggingConfiguration.Close">
      <summary>
            Closes all targets and releases any unmanaged resources.
            </summary>
    </member>
    <member name="M:NLog.Config.LoggingConfiguration.FlushAllTargets(NLog.Common.AsyncContinuation)">
      <summary>
            Flushes any pending log messages on all appenders.
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
    </member>
    <member name="M:NLog.Config.LoggingConfiguration.ValidateConfig">
      <summary>
            Validates the configuration.
            </summary>
    </member>
    <member name="P:NLog.Config.LoggingConfiguration.Variables">
      <summary>
            Gets the variables defined in the configuration.
            </summary>
      <remarks>
            Returns null if not configured using XML configuration.
            </remarks>
    </member>
    <member name="P:NLog.Config.LoggingConfiguration.ConfiguredNamedTargets">
      <summary>
            Gets a collection of named targets specified in the configuration.
            </summary>
      <returns>
            A list of named targets.
            </returns>
      <remarks>
            Unnamed targets (such as those wrapped by other targets) are not returned.
            </remarks>
    </member>
    <member name="P:NLog.Config.LoggingConfiguration.FileNamesToWatch">
      <summary>
            Gets the collection of file names which should be watched for changes by NLog.
            </summary>
    </member>
    <member name="P:NLog.Config.LoggingConfiguration.LoggingRules">
      <summary>
            Gets the collection of logging rules.
            </summary>
    </member>
    <member name="P:NLog.Config.LoggingConfiguration.DefaultCultureInfo">
      <summary>
            Gets or sets the default culture info use.
            </summary>
    </member>
    <member name="P:NLog.Config.LoggingConfiguration.AllTargets">
      <summary>
            Gets all targets.
            </summary>
    </member>
    <member name="T:NLog.Config.LoggingConfigurationChangedEventArgs">
      <summary>
            Arguments for <see cref="E:NLog.LogFactory.ConfigurationChanged" /> events.
            </summary>
    </member>
    <member name="M:NLog.Config.LoggingConfigurationChangedEventArgs.#ctor(NLog.Config.LoggingConfiguration,NLog.Config.LoggingConfiguration)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingConfigurationChangedEventArgs" /> class.
            </summary>
      <param name="oldConfiguration">The old configuration.</param>
      <param name="newConfiguration">The new configuration.</param>
    </member>
    <member name="P:NLog.Config.LoggingConfigurationChangedEventArgs.OldConfiguration">
      <summary>
            Gets the old configuration.
            </summary>
      <value>The old configuration.</value>
    </member>
    <member name="P:NLog.Config.LoggingConfigurationChangedEventArgs.NewConfiguration">
      <summary>
            Gets the new configuration.
            </summary>
      <value>The new configuration.</value>
    </member>
    <member name="T:NLog.Config.LoggingConfigurationReloadedEventArgs">
      <summary>
            Arguments for <see cref="E:NLog.LogFactory.ConfigurationReloaded" />.
            </summary>
    </member>
    <member name="M:NLog.Config.LoggingConfigurationReloadedEventArgs.#ctor(System.Boolean,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingConfigurationReloadedEventArgs" /> class.
            </summary>
      <param name="succeeded">Whether configuration reload has succeeded.</param>
      <param name="exception">The exception during configuration reload.</param>
    </member>
    <member name="P:NLog.Config.LoggingConfigurationReloadedEventArgs.Succeeded">
      <summary>
            Gets a value indicating whether configuration reload has succeeded.
            </summary>
      <value>A value of <c>true</c> if succeeded; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:NLog.Config.LoggingConfigurationReloadedEventArgs.Exception">
      <summary>
            Gets the exception which occurred during configuration reload.
            </summary>
      <value>The exception.</value>
    </member>
    <member name="T:NLog.Config.LoggingRule">
      <summary>
            Represents a logging rule. An equivalent of &lt;logger /&gt; configuration element.
            </summary>
    </member>
    <member name="M:NLog.Config.LoggingRule.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingRule" /> class.
            </summary>
    </member>
    <member name="M:NLog.Config.LoggingRule.#ctor(System.String,NLog.LogLevel,NLog.Targets.Target)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingRule" /> class.
            </summary>
      <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
      <param name="minLevel">Minimum log level needed to trigger this rule.</param>
      <param name="target">Target to be written to when the rule matches.</param>
    </member>
    <member name="M:NLog.Config.LoggingRule.#ctor(System.String,NLog.Targets.Target)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingRule" /> class.
            </summary>
      <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
      <param name="target">Target to be written to when the rule matches.</param>
      <remarks>By default no logging levels are defined. You should call <see cref="M:NLog.Config.LoggingRule.EnableLoggingForLevel(NLog.LogLevel)" /> and <see cref="M:NLog.Config.LoggingRule.DisableLoggingForLevel(NLog.LogLevel)" /> to set them.</remarks>
    </member>
    <member name="M:NLog.Config.LoggingRule.EnableLoggingForLevel(NLog.LogLevel)">
      <summary>
            Enables logging for a particular level.
            </summary>
      <param name="level">Level to be enabled.</param>
    </member>
    <member name="M:NLog.Config.LoggingRule.DisableLoggingForLevel(NLog.LogLevel)">
      <summary>
            Disables logging for a particular level.
            </summary>
      <param name="level">Level to be disabled.</param>
    </member>
    <member name="M:NLog.Config.LoggingRule.ToString">
      <summary>
            Returns a string representation of <see cref="T:NLog.Config.LoggingRule" />. Used for debugging.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:NLog.Config.LoggingRule.IsLoggingEnabledForLevel(NLog.LogLevel)">
      <summary>
            Checks whether te particular log level is enabled for this rule.
            </summary>
      <param name="level">Level to be checked.</param>
      <returns>A value of <see langword="true" /> when the log level is enabled, <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:NLog.Config.LoggingRule.NameMatches(System.String)">
      <summary>
            Checks whether given name matches the logger name pattern.
            </summary>
      <param name="loggerName">String to be matched.</param>
      <returns>A value of <see langword="true" /> when the name matches, <see langword="false" /> otherwise.</returns>
    </member>
    <member name="P:NLog.Config.LoggingRule.Targets">
      <summary>
            Gets a collection of targets that should be written to when this rule matches.
            </summary>
    </member>
    <member name="P:NLog.Config.LoggingRule.ChildRules">
      <summary>
            Gets a collection of child rules to be evaluated when this rule matches.
            </summary>
    </member>
    <member name="P:NLog.Config.LoggingRule.Filters">
      <summary>
            Gets a collection of filters to be checked before writing to targets.
            </summary>
    </member>
    <member name="P:NLog.Config.LoggingRule.Final">
      <summary>
            Gets or sets a value indicating whether to quit processing any further rule when this one matches.
            </summary>
    </member>
    <member name="P:NLog.Config.LoggingRule.LoggerNamePattern">
      <summary>
            Gets or sets logger name pattern.
            </summary>
      <remarks>
            Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends but not anywhere else.
            </remarks>
    </member>
    <member name="P:NLog.Config.LoggingRule.Levels">
      <summary>
            Gets the collection of log levels enabled by this rule.
            </summary>
    </member>
    <member name="T:NLog.Config.MethodFactory`2">
      <summary>
            Factory for locating methods.
            </summary>
      <typeparam name="TClassAttributeType">The type of the class marker attribute.</typeparam>
      <typeparam name="TMethodAttributeType">The type of the method marker attribute.</typeparam>
    </member>
    <member name="M:NLog.Config.MethodFactory`2.ScanTypes(System.Type[],System.String)">
      <summary>
            Scans the assembly for classes marked with <typeparamref name="TClassAttributeType" />
            and methods marked with <typeparamref name="TMethodAttributeType" /> and adds them 
            to the factory.
            </summary>
      <param name="types">The types to scan.</param>
      <param name="prefix">The prefix to use for names.</param>
    </member>
    <member name="M:NLog.Config.MethodFactory`2.RegisterType(System.Type,System.String)">
      <summary>
            Registers the type.
            </summary>
      <param name="type">The type to register.</param>
      <param name="itemNamePrefix">The item name prefix.</param>
    </member>
    <member name="M:NLog.Config.MethodFactory`2.Clear">
      <summary>
            Clears contents of the factory.
            </summary>
    </member>
    <member name="M:NLog.Config.MethodFactory`2.RegisterDefinition(System.String,System.Reflection.MethodInfo)">
      <summary>
            Registers the definition of a single method.
            </summary>
      <param name="name">The method name.</param>
      <param name="methodInfo">The method info.</param>
    </member>
    <member name="M:NLog.Config.MethodFactory`2.TryCreateInstance(System.String,System.Reflection.MethodInfo@)">
      <summary>
            Tries to retrieve method by name.
            </summary>
      <param name="name">The method name.</param>
      <param name="result">The result.</param>
      <returns>A value of <c>true</c> if the method was found, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:NLog.Config.MethodFactory`2.CreateInstance(System.String)">
      <summary>
            Retrieves method by name.
            </summary>
      <param name="name">Method name.</param>
      <returns>MethodInfo object.</returns>
    </member>
    <member name="M:NLog.Config.MethodFactory`2.TryGetDefinition(System.String,System.Reflection.MethodInfo@)">
      <summary>
            Tries to get method definition.
            </summary>
      <param name="name">The method .</param>
      <param name="result">The result.</param>
      <returns>A value of <c>true</c> if the method was found, <c>false</c> otherwise.</returns>
    </member>
    <member name="P:NLog.Config.MethodFactory`2.AllRegisteredItems">
      <summary>
            Gets a collection of all registered items in the factory.
            </summary>
      <returns>
            Sequence of key/value pairs where each key represents the name
            of the item and value is the <see cref="T:System.Reflection.MethodInfo" /> of
            the item.
            </returns>
    </member>
    <member name="T:NLog.Config.NLogConfigurationIgnorePropertyAttribute">
      <summary>
            Indicates NLog should not scan this property during configuration.
            </summary>
    </member>
    <member name="M:NLog.Config.NLogConfigurationIgnorePropertyAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.NLogConfigurationIgnorePropertyAttribute" /> class.
            </summary>
    </member>
    <member name="T:NLog.Config.NLogConfigurationItemAttribute">
      <summary>
            Marks the object as configuration item for NLog.
            </summary>
    </member>
    <member name="M:NLog.Config.NLogConfigurationItemAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.NLogConfigurationItemAttribute" /> class.
            </summary>
    </member>
    <member name="T:NLog.Config.NLogXmlElement">
      <summary>
            Represents simple XML element with case-insensitive attribute semantics.
            </summary>
    </member>
    <member name="M:NLog.Config.NLogXmlElement.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.NLogXmlElement" /> class.
            </summary>
      <param name="inputUri">The input URI.</param>
    </member>
    <member name="M:NLog.Config.NLogXmlElement.#ctor(System.Xml.XmlReader)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.NLogXmlElement" /> class.
            </summary>
      <param name="reader">The reader to initialize element from.</param>
    </member>
    <member name="M:NLog.Config.NLogXmlElement.#ctor">
      <summary>
            Prevents a default instance of the <see cref="T:NLog.Config.NLogXmlElement" /> class from being created.
            </summary>
    </member>
    <member name="M:NLog.Config.NLogXmlElement.Elements(System.String)">
      <summary>
            Returns children elements with the specified element name.
            </summary>
      <param name="elementName">Name of the element.</param>
      <returns>Children elements with the specified element name.</returns>
    </member>
    <member name="M:NLog.Config.NLogXmlElement.GetRequiredAttribute(System.String)">
      <summary>
            Gets the required attribute.
            </summary>
      <param name="attributeName">Name of the attribute.</param>
      <returns>Attribute value.</returns>
      <remarks>Throws if the attribute is not specified.</remarks>
    </member>
    <member name="M:NLog.Config.NLogXmlElement.GetOptionalBooleanAttribute(System.String,System.Boolean)">
      <summary>
            Gets the optional boolean attribute value.
            </summary>
      <param name="attributeName">Name of the attribute.</param>
      <param name="defaultValue">Default value to return if the attribute is not found.</param>
      <returns>Boolean attribute value or default.</returns>
    </member>
    <member name="M:NLog.Config.NLogXmlElement.GetOptionalAttribute(System.String,System.String)">
      <summary>
            Gets the optional attribute value.
            </summary>
      <param name="attributeName">Name of the attribute.</param>
      <param name="defaultValue">The default value.</param>
      <returns>Value of the attribute or default value.</returns>
    </member>
    <member name="M:NLog.Config.NLogXmlElement.AssertName(System.String[])">
      <summary>
            Asserts that the name of the element is among specified element names.
            </summary>
      <param name="allowedNames">The allowed names.</param>
    </member>
    <member name="P:NLog.Config.NLogXmlElement.LocalName">
      <summary>
            Gets the element name.
            </summary>
    </member>
    <member name="P:NLog.Config.NLogXmlElement.AttributeValues">
      <summary>
            Gets the dictionary of attribute values.
            </summary>
    </member>
    <member name="P:NLog.Config.NLogXmlElement.Children">
      <summary>
            Gets the collection of child elements.
            </summary>
    </member>
    <member name="P:NLog.Config.NLogXmlElement.Value">
      <summary>
            Gets the value of the element.
            </summary>
    </member>
    <member name="T:NLog.Config.RequiredParameterAttribute">
      <summary>
            Attribute used to mark the required parameters for targets,
            layout targets and filters.
            </summary>
    </member>
    <member name="T:NLog.Config.SimpleConfigurator">
      <summary>
            Provides simple programmatic configuration API used for trivial logging cases.
            </summary>
    </member>
    <member name="M:NLog.Config.SimpleConfigurator.ConfigureForConsoleLogging">
      <summary>
            Configures NLog for console logging so that all messages above and including
            the <see cref="F:NLog.LogLevel.Info" /> level are output to the console.
            </summary>
    </member>
    <member name="M:NLog.Config.SimpleConfigurator.ConfigureForConsoleLogging(NLog.LogLevel)">
      <summary>
            Configures NLog for console logging so that all messages above and including
            the specified level are output to the console.
            </summary>
      <param name="minLevel">The minimal logging level.</param>
    </member>
    <member name="M:NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(NLog.Targets.Target)">
      <summary>
            Configures NLog for to log to the specified target so that all messages 
            above and including the <see cref="F:NLog.LogLevel.Info" /> level are output.
            </summary>
      <param name="target">The target to log all messages to.</param>
    </member>
    <member name="M:NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(NLog.Targets.Target,NLog.LogLevel)">
      <summary>
            Configures NLog for to log to the specified target so that all messages 
            above and including the specified level are output.
            </summary>
      <param name="target">The target to log all messages to.</param>
      <param name="minLevel">The minimal logging level.</param>
    </member>
    <member name="M:NLog.Config.SimpleConfigurator.ConfigureForFileLogging(System.String)">
      <summary>
            Configures NLog for file logging so that all messages above and including
            the <see cref="F:NLog.LogLevel.Info" /> level are written to the specified file.
            </summary>
      <param name="fileName">Log file name.</param>
    </member>
    <member name="M:NLog.Config.SimpleConfigurator.ConfigureForFileLogging(System.String,NLog.LogLevel)">
      <summary>
            Configures NLog for file logging so that all messages above and including
            the specified level are written to the specified file.
            </summary>
      <param name="fileName">Log file name.</param>
      <param name="minLevel">The minimal logging level.</param>
    </member>
    <member name="T:NLog.Config.StackTraceUsage">
      <summary>
            Value indicating how stack trace should be captured when processing the log event.
            </summary>
    </member>
    <member name="F:NLog.Config.StackTraceUsage.None">
      <summary>
            Stack trace should not be captured.
            </summary>
    </member>
    <member name="F:NLog.Config.StackTraceUsage.WithoutSource">
      <summary>
            Stack trace should be captured without source-level information.
            </summary>
    </member>
    <member name="F:NLog.Config.StackTraceUsage.WithSource">
      <summary>
            Stack trace should be captured including source-level information such as line numbers.
            </summary>
    </member>
    <member name="F:NLog.Config.StackTraceUsage.Max">
      <summary>
            Capture maximum amount of the stack trace information supported on the plaform.
            </summary>
    </member>
    <member name="T:NLog.Config.ThreadAgnosticAttribute">
      <summary>
            Marks the layout or layout renderer as producing correct results regardless of the thread
            it's running on.
            </summary>
    </member>
    <member name="T:NLog.Config.XmlLoggingConfiguration">
      <summary>
            A class for configuring NLog through an XML configuration file 
            (App.config style or App.nlog style).
            </summary>
    </member>
    <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
      <param name="fileName">Configuration file to be read.</param>
    </member>
    <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
      <param name="fileName">Configuration file to be read.</param>
      <param name="ignoreErrors">Ignore any errors during configuration.</param>
    </member>
    <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlReader,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> containing the configuration section.</param>
      <param name="fileName">Name of the file that contains the element (to be used as a base for including other files).</param>
    </member>
    <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlReader,System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> containing the configuration section.</param>
      <param name="fileName">Name of the file that contains the element (to be used as a base for including other files).</param>
      <param name="ignoreErrors">Ignore any errors during configuration.</param>
    </member>
    <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlElement,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
      <param name="element">The XML element.</param>
      <param name="fileName">Name of the XML file.</param>
    </member>
    <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlElement,System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
      <param name="element">The XML element.</param>
      <param name="fileName">Name of the XML file.</param>
      <param name="ignoreErrors">If set to <c>true</c> errors will be ignored during file processing.</param>
    </member>
    <member name="M:NLog.Config.XmlLoggingConfiguration.Reload">
      <summary>
            Re-reads the original configuration file and returns the new <see cref="T:NLog.Config.LoggingConfiguration" /> object.
            </summary>
      <returns>The new <see cref="T:NLog.Config.XmlLoggingConfiguration" /> object.</returns>
    </member>
    <member name="M:NLog.Config.XmlLoggingConfiguration.Initialize(System.Xml.XmlReader,System.String,System.Boolean)">
      <summary>
            Initializes the configuration.
            </summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> containing the configuration section.</param>
      <param name="fileName">Name of the file that contains the element (to be used as a base for including other files).</param>
      <param name="ignoreErrors">Ignore any errors during configuration.</param>
    </member>
    <member name="P:NLog.Config.XmlLoggingConfiguration.AppConfig">
      <summary>
            Gets the default <see cref="T:NLog.Config.LoggingConfiguration" /> object by parsing 
            the application configuration file (<c>app.exe.config</c>).
            </summary>
    </member>
    <member name="P:NLog.Config.XmlLoggingConfiguration.Variables">
      <summary>
            Gets the variables defined in the configuration.
            </summary>
    </member>
    <member name="P:NLog.Config.XmlLoggingConfiguration.AutoReload">
      <summary>
            Gets or sets a value indicating whether the configuration files
            should be watched for changes and reloaded automatically when changed.
            </summary>
    </member>
    <member name="P:NLog.Config.XmlLoggingConfiguration.FileNamesToWatch">
      <summary>
            Gets the collection of file names which should be watched for changes by NLog.
            This is the list of configuration files processed.
            If the <c>autoReload</c> attribute is not set it returns empty collection.
            </summary>
    </member>
    <member name="T:NLog.Filters.Filter">
      <summary>
            An abstract filter class. Provides a way to eliminate log messages
            based on properties other than logger name and log level.
            </summary>
    </member>
    <member name="M:NLog.Filters.Filter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Filters.Filter" /> class.
            </summary>
    </member>
    <member name="M:NLog.Filters.Filter.GetFilterResult(NLog.LogEventInfo)">
      <summary>
            Gets the result of evaluating filter against given log event.
            </summary>
      <param name="logEvent">The log event.</param>
      <returns>Filter result.</returns>
    </member>
    <member name="M:NLog.Filters.Filter.Check(NLog.LogEventInfo)">
      <summary>
            Checks whether log event should be logged or not.
            </summary>
      <param name="logEvent">Log event.</param>
      <returns>
        <see cref="F:NLog.Filters.FilterResult.Ignore" /> - if the log event should be ignored<br /><see cref="F:NLog.Filters.FilterResult.Neutral" /> - if the filter doesn't want to decide<br /><see cref="F:NLog.Filters.FilterResult.Log" /> - if the log event should be logged<br />
            .</returns>
    </member>
    <member name="P:NLog.Filters.Filter.Action">
      <summary>
            Gets or sets the action to be taken when filter matches.
            </summary>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="T:NLog.Filters.ConditionBasedFilter">
      <summary>
            Matches when the specified condition is met.
            </summary>
      <remarks>
            Conditions are expressed using a simple language 
            described <a href="conditions.html">here</a>.
            </remarks>
    </member>
    <member name="M:NLog.Filters.ConditionBasedFilter.Check(NLog.LogEventInfo)">
      <summary>
            Checks whether log event should be logged or not.
            </summary>
      <param name="logEvent">Log event.</param>
      <returns>
        <see cref="F:NLog.Filters.FilterResult.Ignore" /> - if the log event should be ignored<br /><see cref="F:NLog.Filters.FilterResult.Neutral" /> - if the filter doesn't want to decide<br /><see cref="F:NLog.Filters.FilterResult.Log" /> - if the log event should be logged<br />
            .</returns>
    </member>
    <member name="P:NLog.Filters.ConditionBasedFilter.Condition">
      <summary>
            Gets or sets the condition expression.
            </summary>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="T:NLog.Filters.FilterAttribute">
      <summary>
            Marks class as a layout renderer and assigns a name to it.
            </summary>
    </member>
    <member name="M:NLog.Filters.FilterAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Filters.FilterAttribute" /> class.
            </summary>
      <param name="name">Name of the filter.</param>
    </member>
    <member name="T:NLog.Filters.FilterResult">
      <summary>
            Filter result.
            </summary>
    </member>
    <member name="F:NLog.Filters.FilterResult.Neutral">
      <summary>
            The filter doesn't want to decide whether to log or discard the message.
            </summary>
    </member>
    <member name="F:NLog.Filters.FilterResult.Log">
      <summary>
            The message should be logged.
            </summary>
    </member>
    <member name="F:NLog.Filters.FilterResult.Ignore">
      <summary>
            The message should not be logged.
            </summary>
    </member>
    <member name="F:NLog.Filters.FilterResult.LogFinal">
      <summary>
            The message should be logged and processing should be finished.
            </summary>
    </member>
    <member name="F:NLog.Filters.FilterResult.IgnoreFinal">
      <summary>
            The message should not be logged and processing should be finished.
            </summary>
    </member>
    <member name="T:NLog.Filters.LayoutBasedFilter">
      <summary>
            A base class for filters that are based on comparing a value to a layout.
            </summary>
    </member>
    <member name="M:NLog.Filters.LayoutBasedFilter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Filters.LayoutBasedFilter" /> class.
            </summary>
    </member>
    <member name="P:NLog.Filters.LayoutBasedFilter.Layout">
      <summary>
            Gets or sets the layout to be used to filter log messages.
            </summary>
      <value>The layout.</value>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="T:NLog.Filters.WhenContainsFilter">
      <summary>
            Matches when the calculated layout contains the specified substring. 
            This filter is deprecated in favour of <c>&lt;when /&gt;</c> which is based on <a href="conditions.html">contitions</a>.
            </summary>
    </member>
    <member name="M:NLog.Filters.WhenContainsFilter.Check(NLog.LogEventInfo)">
      <summary>
            Checks whether log event should be logged or not.
            </summary>
      <param name="logEvent">Log event.</param>
      <returns>
        <see cref="F:NLog.Filters.FilterResult.Ignore" /> - if the log event should be ignored<br /><see cref="F:NLog.Filters.FilterResult.Neutral" /> - if the filter doesn't want to decide<br /><see cref="F:NLog.Filters.FilterResult.Log" /> - if the log event should be logged<br />
            .</returns>
    </member>
    <member name="P:NLog.Filters.WhenContainsFilter.IgnoreCase">
      <summary>
            Gets or sets a value indicating whether to ignore case when comparing strings.
            </summary>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="P:NLog.Filters.WhenContainsFilter.Substring">
      <summary>
            Gets or sets the substring to be matched.
            </summary>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="T:NLog.Filters.WhenEqualFilter">
      <summary>
            Matches when the calculated layout is equal to the specified substring.
            This filter is deprecated in favour of <c>&lt;when /&gt;</c> which is based on <a href="conditions.html">contitions</a>.
            </summary>
    </member>
    <member name="M:NLog.Filters.WhenEqualFilter.Check(NLog.LogEventInfo)">
      <summary>
            Checks whether log event should be logged or not.
            </summary>
      <param name="logEvent">Log event.</param>
      <returns>
        <see cref="F:NLog.Filters.FilterResult.Ignore" /> - if the log event should be ignored<br /><see cref="F:NLog.Filters.FilterResult.Neutral" /> - if the filter doesn't want to decide<br /><see cref="F:NLog.Filters.FilterResult.Log" /> - if the log event should be logged<br />
            .</returns>
    </member>
    <member name="P:NLog.Filters.WhenEqualFilter.IgnoreCase">
      <summary>
            Gets or sets a value indicating whether to ignore case when comparing strings.
            </summary>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="P:NLog.Filters.WhenEqualFilter.CompareTo">
      <summary>
            Gets or sets a string to compare the layout to.
            </summary>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="T:NLog.Filters.WhenNotContainsFilter">
      <summary>
            Matches when the calculated layout does NOT contain the specified substring.
            This filter is deprecated in favour of <c>&lt;when /&gt;</c> which is based on <a href="conditions.html">contitions</a>.
            </summary>
    </member>
    <member name="M:NLog.Filters.WhenNotContainsFilter.Check(NLog.LogEventInfo)">
      <summary>
            Checks whether log event should be logged or not.
            </summary>
      <param name="logEvent">Log event.</param>
      <returns>
        <see cref="F:NLog.Filters.FilterResult.Ignore" /> - if the log event should be ignored<br /><see cref="F:NLog.Filters.FilterResult.Neutral" /> - if the filter doesn't want to decide<br /><see cref="F:NLog.Filters.FilterResult.Log" /> - if the log event should be logged<br />
            .</returns>
    </member>
    <member name="P:NLog.Filters.WhenNotContainsFilter.Substring">
      <summary>
            Gets or sets the substring to be matched.
            </summary>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="P:NLog.Filters.WhenNotContainsFilter.IgnoreCase">
      <summary>
            Gets or sets a value indicating whether to ignore case when comparing strings.
            </summary>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="T:NLog.Filters.WhenNotEqualFilter">
      <summary>
            Matches when the calculated layout is NOT equal to the specified substring.
            This filter is deprecated in favour of <c>&lt;when /&gt;</c> which is based on <a href="conditions.html">contitions</a>.
            </summary>
    </member>
    <member name="M:NLog.Filters.WhenNotEqualFilter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Filters.WhenNotEqualFilter" /> class.
            </summary>
    </member>
    <member name="M:NLog.Filters.WhenNotEqualFilter.Check(NLog.LogEventInfo)">
      <summary>
            Checks whether log event should be logged or not.
            </summary>
      <param name="logEvent">Log event.</param>
      <returns>
        <see cref="F:NLog.Filters.FilterResult.Ignore" /> - if the log event should be ignored<br /><see cref="F:NLog.Filters.FilterResult.Neutral" /> - if the filter doesn't want to decide<br /><see cref="F:NLog.Filters.FilterResult.Log" /> - if the log event should be logged<br />
            .</returns>
    </member>
    <member name="P:NLog.Filters.WhenNotEqualFilter.CompareTo">
      <summary>
            Gets or sets a string to compare the layout to.
            </summary>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="P:NLog.Filters.WhenNotEqualFilter.IgnoreCase">
      <summary>
            Gets or sets a value indicating whether to ignore case when comparing strings.
            </summary>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="T:NLog.Fluent.LogBuilder">
      <summary>
            A fluent class to build log events for NLog.
            </summary>
    </member>
    <member name="M:NLog.Fluent.LogBuilder.#ctor(NLog.Logger)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Fluent.LogBuilder" /> class.
            </summary>
      <param name="logger">The <see cref="T:NLog.Logger" /> to send the log event.</param>
    </member>
    <member name="M:NLog.Fluent.LogBuilder.#ctor(NLog.Logger,NLog.LogLevel)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Fluent.LogBuilder" /> class.
            </summary>
      <param name="logger">The <see cref="T:NLog.Logger" /> to send the log event.</param>
      <param name="logLevel">The <see cref="T:NLog.LogLevel" /> for the log event.</param>
    </member>
    <member name="M:NLog.Fluent.LogBuilder.Exception(System.Exception)">
      <summary>
            Sets the <paramref name="exception" /> information of the logging event.
            </summary>
      <param name="exception">The exception information of the logging event.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NLog.Fluent.LogBuilder.Level(NLog.LogLevel)">
      <summary>
            Sets the level of the logging event.
            </summary>
      <param name="logLevel">The level of the logging event.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NLog.Fluent.LogBuilder.LoggerName(System.String)">
      <summary>
            Sets the logger name of the logging event.
            </summary>
      <param name="loggerName">The logger name of the logging event.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NLog.Fluent.LogBuilder.Message(System.String)">
      <summary>
            Sets the log message on the logging event.
            </summary>
      <param name="message">The log message for the logging event.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NLog.Fluent.LogBuilder.Message(System.String,System.Object)">
      <summary>
            Sets the log message and parameters for formating on the logging event.
            </summary>
      <param name="format">A composite format string.</param>
      <param name="arg0">The object to format.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NLog.Fluent.LogBuilder.Message(System.String,System.Object,System.Object)">
      <summary>
            Sets the log message and parameters for formating on the logging event.
            </summary>
      <param name="format">A composite format string.</param>
      <param name="arg0">The first object to format.</param>
      <param name="arg1">The second object to format.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NLog.Fluent.LogBuilder.Message(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Sets the log message and parameters for formating on the logging event.
            </summary>
      <param name="format">A composite format string.</param>
      <param name="arg0">The first object to format.</param>
      <param name="arg1">The second object to format.</param>
      <param name="arg2">The third object to format.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NLog.Fluent.LogBuilder.Message(System.String,System.Object,System.Object,System.Object,System.Object)">
      <summary>
            Sets the log message and parameters for formating on the logging event.
            </summary>
      <param name="format">A composite format string.</param>
      <param name="arg0">The first object to format.</param>
      <param name="arg1">The second object to format.</param>
      <param name="arg2">The third object to format.</param>
      <param name="arg3">The fourth object to format.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NLog.Fluent.LogBuilder.Message(System.String,System.Object[])">
      <summary>
            Sets the log message and parameters for formating on the logging event.
            </summary>
      <param name="format">A composite format string.</param>
      <param name="args">An object array that contains zero or more objects to format.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NLog.Fluent.LogBuilder.Message(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Sets the log message and parameters for formating on the logging event.
            </summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <param name="format">A composite format string.</param>
      <param name="args">An object array that contains zero or more objects to format.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NLog.Fluent.LogBuilder.Property(System.Object,System.Object)">
      <summary>
            Sets a per-event context property on the logging event.
            </summary>
      <param name="name">The name of the context property.</param>
      <param name="value">The value of the context property.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NLog.Fluent.LogBuilder.TimeStamp(System.DateTime)">
      <summary>
            Sets the timestamp of the logging event.
            </summary>
      <param name="timeStamp">The timestamp of the logging event.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NLog.Fluent.LogBuilder.StackTrace(System.Diagnostics.StackTrace,System.Int32)">
      <summary>
            Sets the stack trace for the event info.
            </summary>
      <param name="stackTrace">The stack trace.</param>
      <param name="userStackFrame">Index of the first user stack frame within the stack trace.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NLog.Fluent.LogBuilder.Write">
      <summary>
            Writes the log event to the underlying logger.
            </summary>
    </member>
    <member name="M:NLog.Fluent.LogBuilder.WriteIf(System.Func{System.Boolean})">
      <summary>
            Writes the log event to the underlying logger.
            </summary>
      <param name="condition">If condition is true, write log event; otherwise ignore event.</param>
    </member>
    <member name="M:NLog.Fluent.LogBuilder.WriteIf(System.Boolean)">
      <summary>
            Writes the log event to the underlying logger.
            </summary>
      <param name="condition">If condition is true, write log event; otherwise ignore event.</param>
    </member>
    <member name="P:NLog.Fluent.LogBuilder.LogEventInfo">
      <summary>
            Gets the <see cref="P:NLog.Fluent.LogBuilder.LogEventInfo" /> created by the builder.
            </summary>
    </member>
    <member name="T:NLog.Fluent.LoggerExtensions">
      <summary>
            Extension methods for NLog <see cref="T:NLog.Logger" />.
            </summary>
    </member>
    <member name="M:NLog.Fluent.LoggerExtensions.Log(NLog.Logger,NLog.LogLevel)">
      <summary>
            Starts building a log event with the specified <see cref="T:NLog.LogLevel" />.
            </summary>
      <param name="logger">The logger to write the log event to.</param>
      <param name="logLevel">The log level.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NLog.Fluent.LoggerExtensions.Trace(NLog.Logger)">
      <summary>
            Starts building a log event at the <c>Trace</c> level.
            </summary>
      <param name="logger">The logger to write the log event to.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NLog.Fluent.LoggerExtensions.Debug(NLog.Logger)">
      <summary>
            Starts building a log event at the <c>Debug</c> level.
            </summary>
      <param name="logger">The logger to write the log event to.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NLog.Fluent.LoggerExtensions.Info(NLog.Logger)">
      <summary>
            Starts building a log event at the <c>Info</c> level.
            </summary>
      <param name="logger">The logger to write the log event to.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NLog.Fluent.LoggerExtensions.Warn(NLog.Logger)">
      <summary>
            Starts building a log event at the <c>Warn</c> level.
            </summary>
      <param name="logger">The logger to write the log event to.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NLog.Fluent.LoggerExtensions.Error(NLog.Logger)">
      <summary>
            Starts building a log event at the <c>Error</c> level.
            </summary>
      <param name="logger">The logger to write the log event to.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NLog.Fluent.LoggerExtensions.Fatal(NLog.Logger)">
      <summary>
            Starts building a log event at the <c>Fatal</c> level.
            </summary>
      <param name="logger">The logger to write the log event to.</param>
      <returns>
      </returns>
    </member>
    <member name="T:NLog.GDC">
      <summary>
            Global Diagnostics Context - used for log4net compatibility.
            </summary>
    </member>
    <member name="M:NLog.GDC.Set(System.String,System.String)">
      <summary>
            Sets the Global Diagnostics Context item to the specified value.
            </summary>
      <param name="item">Item name.</param>
      <param name="value">Item value.</param>
    </member>
    <member name="M:NLog.GDC.Get(System.String)">
      <summary>
            Gets the Global Diagnostics Context named item.
            </summary>
      <param name="item">Item name.</param>
      <returns>The item value of string.Empty if the value is not present.</returns>
    </member>
    <member name="M:NLog.GDC.Contains(System.String)">
      <summary>
            Checks whether the specified item exists in the Global Diagnostics Context.
            </summary>
      <param name="item">Item name.</param>
      <returns>A boolean indicating whether the specified item exists in current thread GDC.</returns>
    </member>
    <member name="M:NLog.GDC.Remove(System.String)">
      <summary>
            Removes the specified item from the Global Diagnostics Context.
            </summary>
      <param name="item">Item name.</param>
    </member>
    <member name="M:NLog.GDC.Clear">
      <summary>
            Clears the content of the GDC.
            </summary>
    </member>
    <member name="T:NLog.GlobalDiagnosticsContext">
      <summary>
            Global Diagnostics Context - a dictionary structure to hold per-application-instance values.
            </summary>
    </member>
    <member name="M:NLog.GlobalDiagnosticsContext.Set(System.String,System.String)">
      <summary>
            Sets the Global Diagnostics Context item to the specified value.
            </summary>
      <param name="item">Item name.</param>
      <param name="value">Item value.</param>
    </member>
    <member name="M:NLog.GlobalDiagnosticsContext.Get(System.String)">
      <summary>
            Gets the Global Diagnostics Context named item.
            </summary>
      <param name="item">Item name.</param>
      <returns>The item value of string.Empty if the value is not present.</returns>
    </member>
    <member name="M:NLog.GlobalDiagnosticsContext.Contains(System.String)">
      <summary>
            Checks whether the specified item exists in the Global Diagnostics Context.
            </summary>
      <param name="item">Item name.</param>
      <returns>A boolean indicating whether the specified item exists in current thread GDC.</returns>
    </member>
    <member name="M:NLog.GlobalDiagnosticsContext.Remove(System.String)">
      <summary>
            Removes the specified item from the Global Diagnostics Context.
            </summary>
      <param name="item">Item name.</param>
    </member>
    <member name="M:NLog.GlobalDiagnosticsContext.Clear">
      <summary>
            Clears the content of the GDC.
            </summary>
    </member>
    <member name="T:NLog.Internal.AspHelper">
      <summary>
            Various helper methods for accessing state of ASP application.
            </summary>
    </member>
    <member name="T:NLog.Internal.IConfigurationManager">
      <summary>
            Interface for the wrapper around System.Configuration.ConfigurationManager.
            </summary>
    </member>
    <member name="P:NLog.Internal.IConfigurationManager.AppSettings">
      <summary>
            Gets the wrapper around ConfigurationManager.AppSettings.
            </summary>
    </member>
    <member name="T:NLog.Internal.ConfigurationManager">
      <summary>
            Internal configuration manager used to read .NET configuration files.
            Just a wrapper around the BCL ConfigurationManager, but used to enable
            unit testing.
            </summary>
    </member>
    <member name="P:NLog.Internal.ConfigurationManager.AppSettings">
      <summary>
            Gets the wrapper around ConfigurationManager.AppSettings.
            </summary>
    </member>
    <member name="T:NLog.Internal.DictionaryAdapter`2">
      <summary>
            Provides untyped IDictionary interface on top of generic IDictionary.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="T:NLog.Internal.DictionaryAdapter`2.MyEnumerator">
      <summary>
            Wrapper IDictionaryEnumerator.
            </summary>
    </member>
    <member name="M:NLog.Internal.DictionaryAdapter`2.MyEnumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
      <returns>
            True if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
    </member>
    <member name="M:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
    </member>
    <member name="P:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Entry">
      <summary>
            Gets both the key and the value of the current dictionary entry.
            </summary>
      <value>
      </value>
      <returns>
            A <see cref="T:System.Collections.DictionaryEntry" /> containing both the key and the value of the current dictionary entry.
            </returns>
    </member>
    <member name="P:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Key">
      <summary>
            Gets the key of the current dictionary entry.
            </summary>
      <value>
      </value>
      <returns>
            The key of the current element of the enumeration.
            </returns>
    </member>
    <member name="P:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Value">
      <summary>
            Gets the value of the current dictionary entry.
            </summary>
      <value>
      </value>
      <returns>
            The value of the current element of the enumeration.
            </returns>
    </member>
    <member name="P:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Current">
      <summary>
            Gets the current element in the collection.
            </summary>
      <value>
      </value>
      <returns>
            The current element in the collection.
            </returns>
    </member>
    <member name="M:NLog.Internal.DictionaryAdapter`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>
            Initializes a new instance of the DictionaryAdapter class.
            </summary>
      <param name="implementation">The implementation.</param>
    </member>
    <member name="M:NLog.Internal.DictionaryAdapter`2.Add(System.Object,System.Object)">
      <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
      <param name="key">The <see cref="T:System.Object" /> to use as the key of the element to add.</param>
      <param name="value">The <see cref="T:System.Object" /> to use as the value of the element to add.</param>
    </member>
    <member name="M:NLog.Internal.DictionaryAdapter`2.Clear">
      <summary>
            Removes all elements from the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
    </member>
    <member name="M:NLog.Internal.DictionaryAdapter`2.Contains(System.Object)">
      <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary" /> object contains an element with the specified key.
            </summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary" /> object.</param>
      <returns>
            True if the <see cref="T:System.Collections.IDictionary" /> contains an element with the key; otherwise, false.
            </returns>
    </member>
    <member name="M:NLog.Internal.DictionaryAdapter`2.GetEnumerator">
      <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.
            </returns>
    </member>
    <member name="M:NLog.Internal.DictionaryAdapter`2.Remove(System.Object)">
      <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
      <param name="key">The key of the element to remove.</param>
    </member>
    <member name="M:NLog.Internal.DictionaryAdapter`2.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:NLog.Internal.DictionaryAdapter`2.Values">
      <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
      <value>
      </value>
      <returns>
            An <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.IDictionary" /> object.
            </returns>
    </member>
    <member name="P:NLog.Internal.DictionaryAdapter`2.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.
            </summary>
      <value>
      </value>
      <returns>
            The number of elements contained in the <see cref="T:System.Collections.ICollection" />.
            </returns>
    </member>
    <member name="P:NLog.Internal.DictionaryAdapter`2.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).
            </summary>
      <value>
      </value>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.
            </returns>
    </member>
    <member name="P:NLog.Internal.DictionaryAdapter`2.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </summary>
      <value>
      </value>
      <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </returns>
    </member>
    <member name="P:NLog.Internal.DictionaryAdapter`2.IsFixedSize">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object has a fixed size.
            </summary>
      <value>
      </value>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> object has a fixed size; otherwise, false.
            </returns>
    </member>
    <member name="P:NLog.Internal.DictionaryAdapter`2.IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object is read-only.
            </summary>
      <value>
      </value>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> object is read-only; otherwise, false.
            </returns>
    </member>
    <member name="P:NLog.Internal.DictionaryAdapter`2.Keys">
      <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
      <value>
      </value>
      <returns>
            An <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Collections.IDictionary" /> object.
            </returns>
    </member>
    <member name="P:NLog.Internal.DictionaryAdapter`2.Item(System.Object)">
      <summary>
            Gets or sets the <see cref="T:System.Object" /> with the specified key.
            </summary>
      <param name="key">Dictionary key.</param>
      <returns>Value corresponding to key or null if not found</returns>
    </member>
    <member name="T:NLog.Internal.EnvironmentHelper">
      <summary>
            Safe way to get environment variables.
            </summary>
    </member>
    <member name="T:NLog.Internal.ExceptionHelper">
      <summary>
            Helper class for dealing with exceptions.
            </summary>
    </member>
    <member name="M:NLog.Internal.ExceptionHelper.MustBeRethrown(System.Exception)">
      <summary>
            Determines whether the exception must be rethrown.
            </summary>
      <param name="exception">The exception.</param>
      <returns>True if the exception must be rethrown, false otherwise.</returns>
    </member>
    <member name="T:NLog.Internal.FactoryHelper">
      <summary>
            Object construction helper.
            </summary>
    </member>
    <member name="T:NLog.Internal.Fakeables.IAppDomain">
      <summary>
            Interface for fakeable the current <see cref="T:System.AppDomain" />. Not fully implemented, please methods/properties as necessary.
            </summary>
    </member>
    <member name="P:NLog.Internal.Fakeables.IAppDomain.BaseDirectory">
      <summary>
            Gets or sets the base directory that the assembly resolver uses to probe for assemblies.
            </summary>
    </member>
    <member name="P:NLog.Internal.Fakeables.IAppDomain.ConfigurationFile">
      <summary>
            Gets or sets the name of the configuration file for an application domain.
            </summary>
    </member>
    <member name="P:NLog.Internal.Fakeables.IAppDomain.PrivateBinPath">
      <summary>
            Gets or sets the list of directories under the application base directory that are probed for private assemblies.
            </summary>
    </member>
    <member name="P:NLog.Internal.Fakeables.IAppDomain.FriendlyName">
      <summary>
            Gets or set the friendly name.
            </summary>
    </member>
    <member name="E:NLog.Internal.Fakeables.IAppDomain.ProcessExit">
      <summary>
            Process exit event.
            </summary>
    </member>
    <member name="E:NLog.Internal.Fakeables.IAppDomain.DomainUnload">
      <summary>
            Domain unloaded event.
            </summary>
    </member>
    <member name="T:NLog.Internal.Fakeables.AppDomainWrapper">
      <summary>
            Adapter for <see cref="T:System.AppDomain" /> to <see cref="T:NLog.Internal.Fakeables.IAppDomain" /></summary>
    </member>
    <member name="M:NLog.Internal.Fakeables.AppDomainWrapper.#ctor(System.AppDomain)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.Fakeables.AppDomainWrapper" /> class.
            </summary>
      <param name="appDomain">The <see cref="T:System.AppDomain" /> to wrap.</param>
    </member>
    <member name="P:NLog.Internal.Fakeables.AppDomainWrapper.CurrentDomain">
      <summary>
            Gets a the current <see cref="T:System.AppDomain" /> wrappered in a <see cref="T:NLog.Internal.Fakeables.AppDomainWrapper" />.
            </summary>
    </member>
    <member name="P:NLog.Internal.Fakeables.AppDomainWrapper.BaseDirectory">
      <summary>
            Gets or sets the base directory that the assembly resolver uses to probe for assemblies.
            </summary>
    </member>
    <member name="P:NLog.Internal.Fakeables.AppDomainWrapper.ConfigurationFile">
      <summary>
            Gets or sets the name of the configuration file for an application domain.
            </summary>
    </member>
    <member name="P:NLog.Internal.Fakeables.AppDomainWrapper.PrivateBinPath">
      <summary>
            Gets or sets the list of directories under the application base directory that are probed for private assemblies.
            </summary>
    </member>
    <member name="P:NLog.Internal.Fakeables.AppDomainWrapper.FriendlyName">
      <summary>
            Gets or set the friendly name.
            </summary>
    </member>
    <member name="E:NLog.Internal.Fakeables.AppDomainWrapper.ProcessExit">
      <summary>
            Process exit event.
            </summary>
    </member>
    <member name="E:NLog.Internal.Fakeables.AppDomainWrapper.DomainUnload">
      <summary>
            Domain unloaded event.
            </summary>
    </member>
    <member name="T:NLog.Internal.FileAppenders.BaseFileAppender">
      <summary>
            Base class for optimized file appenders.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender" /> class.
            </summary>
      <param name="fileName">Name of the file.</param>
      <param name="createParameters">The create parameters.</param>
    </member>
    <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.Write(System.Byte[])">
      <summary>
            Writes the specified bytes.
            </summary>
      <param name="bytes">The bytes.</param>
    </member>
    <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.Flush">
      <summary>
            Flushes this instance.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.Close">
      <summary>
            Closes this instance.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.GetFileInfo(System.DateTime@,System.Int64@)">
      <summary>
            Gets the file info.
            </summary>
      <param name="lastWriteTime">The last write time.</param>
      <param name="fileLength">Length of the file.</param>
      <returns>True if the operation succeeded, false otherwise.</returns>
    </member>
    <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
      <param name="disposing">True to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.FileTouched">
      <summary>
            Records the last write time for a file.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.FileTouched(System.DateTime)">
      <summary>
            Records the last write time for a file to be specific date.
            </summary>
      <param name="dateTime">Date and time when the last write occurred.</param>
    </member>
    <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.CreateFileStream(System.Boolean)">
      <summary>
            Creates the file stream.
            </summary>
      <param name="allowConcurrentWrite">If set to <c>true</c> allow concurrent writes.</param>
      <returns>A <see cref="T:System.IO.FileStream" /> object which can be used to write to the file.</returns>
    </member>
    <member name="P:NLog.Internal.FileAppenders.BaseFileAppender.FileName">
      <summary>
            Gets the name of the file.
            </summary>
      <value>The name of the file.</value>
    </member>
    <member name="P:NLog.Internal.FileAppenders.BaseFileAppender.LastWriteTime">
      <summary>
            Gets the last write time.
            </summary>
      <value>The last write time.</value>
    </member>
    <member name="P:NLog.Internal.FileAppenders.BaseFileAppender.OpenTime">
      <summary>
            Gets the open time of the file.
            </summary>
      <value>The open time.</value>
    </member>
    <member name="P:NLog.Internal.FileAppenders.BaseFileAppender.CreateFileParameters">
      <summary>
            Gets the file creation parameters.
            </summary>
      <value>The file creation parameters.</value>
    </member>
    <member name="T:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender">
      <summary>
            Implementation of <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender" /> which caches 
            file information.
            </summary>
    </member>
    <member name="T:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.Factory">
      <summary>
            Factory class which creates <see cref="T:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender" /> objects.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender" /> class.
            </summary>
      <param name="fileName">Name of the file.</param>
      <param name="parameters">The parameters.</param>
    </member>
    <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.Close">
      <summary>
            Closes this instance of the appender.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.Flush">
      <summary>
            Flushes this current appender.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.GetFileInfo(System.DateTime@,System.Int64@)">
      <summary>
            Gets the file info.
            </summary>
      <param name="lastWriteTime">The last write time.</param>
      <param name="fileLength">Length of the file.</param>
      <returns>True if the operation succeeded, false otherwise.</returns>
    </member>
    <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.Write(System.Byte[])">
      <summary>
            Writes the specified bytes to a file.
            </summary>
      <param name="bytes">The bytes to be written.</param>
    </member>
    <member name="T:NLog.Internal.FileAppenders.IFileAppenderFactory">
      <summary>
            Interface implemented by all factories capable of creating file appenders.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.IFileAppenderFactory.Open(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
      <summary>
            Opens the appender for given file name and parameters.
            </summary>
      <param name="fileName">Name of the file.</param>
      <param name="parameters">Creation parameters.</param>
      <returns>Instance of <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender" /> which can be used to write to the file.</returns>
    </member>
    <member name="T:NLog.Internal.FileAppenders.ICreateFileParameters">
      <summary>
            Interface that provides parameters for create file function.
            </summary>
    </member>
    <member name="T:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender">
      <summary>
            Provides a multiprocess-safe atomic file appends while
            keeping the files open.
            </summary>
      <remarks>
            On Unix you can get all the appends to be atomic, even when multiple 
            processes are trying to write to the same file, because setting the file
            pointer to the end of the file and appending can be made one operation.
            On Win32 we need to maintain some synchronization between processes
            (global named mutex is used for this)
            </remarks>
    </member>
    <member name="T:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.Factory">
      <summary>
            Factory class.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender" /> class.
            </summary>
      <param name="fileName">Name of the file.</param>
      <param name="parameters">The parameters.</param>
    </member>
    <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.Write(System.Byte[])">
      <summary>
            Writes the specified bytes.
            </summary>
      <param name="bytes">The bytes to be written.</param>
    </member>
    <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.Close">
      <summary>
            Closes this instance.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.Flush">
      <summary>
            Flushes this instance.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.GetFileInfo(System.DateTime@,System.Int64@)">
      <summary>
            Gets the file info.
            </summary>
      <param name="lastWriteTime">The last write time.</param>
      <param name="fileLength">Length of the file.</param>
      <returns>
            True if the operation succeeded, false otherwise.
            </returns>
    </member>
    <member name="T:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender">
      <summary>
            Multi-process and multi-host file appender which attempts
            to get exclusive write access and retries if it's not available.
            </summary>
    </member>
    <member name="T:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.Factory">
      <summary>
            Factory class.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender" /> class.
            </summary>
      <param name="fileName">Name of the file.</param>
      <param name="parameters">The parameters.</param>
    </member>
    <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.Write(System.Byte[])">
      <summary>
            Writes the specified bytes.
            </summary>
      <param name="bytes">The bytes.</param>
    </member>
    <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.Flush">
      <summary>
            Flushes this instance.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.Close">
      <summary>
            Closes this instance.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.GetFileInfo(System.DateTime@,System.Int64@)">
      <summary>
            Gets the file info.
            </summary>
      <param name="lastWriteTime">The last write time.</param>
      <param name="fileLength">Length of the file.</param>
      <returns>
            True if the operation succeeded, false otherwise.
            </returns>
    </member>
    <member name="T:NLog.Internal.FileAppenders.SingleProcessFileAppender">
      <summary>
            Optimized single-process file appender which keeps the file open for exclusive write.
            </summary>
    </member>
    <member name="T:NLog.Internal.FileAppenders.SingleProcessFileAppender.Factory">
      <summary>
            Factory class.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.SingleProcessFileAppender" /> class.
            </summary>
      <param name="fileName">Name of the file.</param>
      <param name="parameters">The parameters.</param>
    </member>
    <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.Write(System.Byte[])">
      <summary>
            Writes the specified bytes.
            </summary>
      <param name="bytes">The bytes.</param>
    </member>
    <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.Flush">
      <summary>
            Flushes this instance.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.Close">
      <summary>
            Closes this instance.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.GetFileInfo(System.DateTime@,System.Int64@)">
      <summary>
            Gets the file info.
            </summary>
      <param name="lastWriteTime">The last write time.</param>
      <param name="fileLength">Length of the file.</param>
      <returns>
            True if the operation succeeded, false otherwise.
            </returns>
    </member>
    <member name="T:NLog.Internal.FileInfoHelper">
      <summary>
            Optimized routines to get the size and last write time of the specified file.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileInfoHelper.GetFileInfo(System.String,System.IntPtr,System.DateTime@,System.Int64@)">
      <summary>
            Gets the information about a file.
            </summary>
      <param name="fileName">Name of the file.</param>
      <param name="fileHandle">The file handle.</param>
      <param name="lastWriteTime">The last write time of the file.</param>
      <param name="fileLength">Length of the file.</param>
      <returns>A value of <c>true</c> if file information was retrieved successfully, <c>false</c> otherwise.</returns>
    </member>
    <member name="T:NLog.Internal.IRenderable">
      <summary>
            Interface implemented by layouts and layout renderers.
            </summary>
    </member>
    <member name="M:NLog.Internal.IRenderable.Render(NLog.LogEventInfo)">
      <summary>
            Renders the the value of layout or layout renderer in the context of the specified log event.
            </summary>
      <param name="logEvent">The log event.</param>
      <returns>String representation of a layout.</returns>
    </member>
    <member name="T:NLog.Internal.ISmtpClient">
      <summary>
            Supports mocking of SMTP Client code.
            </summary>
    </member>
    <member name="T:NLog.Internal.ISupportsInitialize">
      <summary>
            Supports object initialization and termination.
            </summary>
    </member>
    <member name="M:NLog.Internal.ISupportsInitialize.Initialize(NLog.Config.LoggingConfiguration)">
      <summary>
            Initializes this instance.
            </summary>
      <param name="configuration">The configuration.</param>
    </member>
    <member name="M:NLog.Internal.ISupportsInitialize.Close">
      <summary>
            Closes this instance.
            </summary>
    </member>
    <member name="T:NLog.Internal.IUsesStackTrace">
      <summary>
            Allows components to request stack trace information to be provided in the <see cref="T:NLog.LogEventInfo" />.
            </summary>
    </member>
    <member name="P:NLog.Internal.IUsesStackTrace.StackTraceUsage">
      <summary>
            Gets the level of stack trace information required by the implementing class.
            </summary>
    </member>
    <member name="T:NLog.Internal.LoggerConfiguration">
      <summary>
            Logger configuration.
            </summary>
    </member>
    <member name="M:NLog.Internal.LoggerConfiguration.#ctor(NLog.Internal.TargetWithFilterChain[])">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.LoggerConfiguration" /> class.
            </summary>
      <param name="targetsByLevel">The targets by level.</param>
    </member>
    <member name="M:NLog.Internal.LoggerConfiguration.GetTargetsForLevel(NLog.LogLevel)">
      <summary>
            Gets targets for the specified level.
            </summary>
      <param name="level">The level.</param>
      <returns>Chain of targets with attached filters.</returns>
    </member>
    <member name="M:NLog.Internal.LoggerConfiguration.IsEnabled(NLog.LogLevel)">
      <summary>
            Determines whether the specified level is enabled.
            </summary>
      <param name="level">The level.</param>
      <returns>
            A value of <c>true</c> if the specified level is enabled; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:NLog.Internal.MultiFileWatcher">
      <summary>
            Watches multiple files at the same time and raises an event whenever 
            a single change is detected in any of those files.
            </summary>
    </member>
    <member name="M:NLog.Internal.MultiFileWatcher.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:NLog.Internal.MultiFileWatcher.StopWatching">
      <summary>
            Stops the watching.
            </summary>
    </member>
    <member name="M:NLog.Internal.MultiFileWatcher.Watch(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Watches the specified files for changes.
            </summary>
      <param name="fileNames">The file names.</param>
    </member>
    <member name="E:NLog.Internal.MultiFileWatcher.OnChange">
      <summary>
            Occurs when a change is detected in one of the monitored files.
            </summary>
    </member>
    <member name="T:NLog.Internal.MySmtpClient">
      <summary>
            Supports mocking of SMTP Client code.
            </summary>
    </member>
    <member name="T:NLog.Internal.NetworkSenders.NetworkSender">
      <summary>
            A base class for all network senders. Supports one-way sending of messages
            over various protocols.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.NetworkSender.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.NetworkSender" /> class.
            </summary>
      <param name="url">The network URL.</param>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Finalize">
      <summary>
            Finalizes an instance of the NetworkSender class.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Initialize">
      <summary>
            Initializes this network sender.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Close(NLog.Common.AsyncContinuation)">
      <summary>
            Closes the sender and releases any unmanaged resources.
            </summary>
      <param name="continuation">The continuation.</param>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.NetworkSender.FlushAsync(NLog.Common.AsyncContinuation)">
      <summary>
            Flushes any pending messages and invokes a continuation.
            </summary>
      <param name="continuation">The continuation.</param>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Send(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
      <summary>
            Send the given text over the specified protocol.
            </summary>
      <param name="bytes">Bytes to be sent.</param>
      <param name="offset">Offset in buffer.</param>
      <param name="length">Number of bytes to send.</param>
      <param name="asyncContinuation">The asynchronous continuation.</param>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Dispose">
      <summary>
            Closes the sender and releases any unmanaged resources.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.NetworkSender.DoInitialize">
      <summary>
            Performs sender-specific initialization.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.NetworkSender.DoClose(NLog.Common.AsyncContinuation)">
      <summary>
            Performs sender-specific close operation.
            </summary>
      <param name="continuation">The continuation.</param>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.NetworkSender.DoFlush(NLog.Common.AsyncContinuation)">
      <summary>
            Performs sender-specific flush.
            </summary>
      <param name="continuation">The continuation.</param>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.NetworkSender.DoSend(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
      <summary>
            Actually sends the given text over the specified protocol.
            </summary>
      <param name="bytes">The bytes to be sent.</param>
      <param name="offset">Offset in buffer.</param>
      <param name="length">Number of bytes to send.</param>
      <param name="asyncContinuation">The async continuation to be invoked after the buffer has been sent.</param>
      <remarks>To be overridden in inheriting classes.</remarks>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.NetworkSender.ParseEndpointAddress(System.Uri,System.Net.Sockets.AddressFamily)">
      <summary>
            Parses the URI into an endpoint address.
            </summary>
      <param name="uri">The URI to parse.</param>
      <param name="addressFamily">The address family.</param>
      <returns>Parsed endpoint.</returns>
    </member>
    <member name="P:NLog.Internal.NetworkSenders.NetworkSender.Address">
      <summary>
            Gets the address of the network endpoint.
            </summary>
    </member>
    <member name="P:NLog.Internal.NetworkSenders.NetworkSender.LastSendTime">
      <summary>
            Gets the last send time.
            </summary>
    </member>
    <member name="T:NLog.Internal.NetworkSenders.HttpNetworkSender">
      <summary>
            Network sender which uses HTTP or HTTPS POST.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.HttpNetworkSender.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.HttpNetworkSender" /> class.
            </summary>
      <param name="url">The network URL.</param>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.HttpNetworkSender.DoSend(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
      <summary>
            Actually sends the given text over the specified protocol.
            </summary>
      <param name="bytes">The bytes to be sent.</param>
      <param name="offset">Offset in buffer.</param>
      <param name="length">Number of bytes to send.</param>
      <param name="asyncContinuation">The async continuation to be invoked after the buffer has been sent.</param>
      <remarks>To be overridden in inheriting classes.</remarks>
    </member>
    <member name="T:NLog.Internal.NetworkSenders.INetworkSenderFactory">
      <summary>
            Creates instances of <see cref="T:NLog.Internal.NetworkSenders.NetworkSender" /> objects for given URLs.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.INetworkSenderFactory.Create(System.String,System.Int32)">
      <summary>
            Creates a new instance of the network sender based on a network URL.
            </summary>
      <param name="url">
            URL that determines the network sender to be created.
            </param>
      <param name="maxQueueSize">
            The maximum queue size.
            </param>
      <returns>
            A newly created network sender.
            </returns>
    </member>
    <member name="T:NLog.Internal.NetworkSenders.ISocket">
      <summary>
            Interface for mocking socket calls.
            </summary>
    </member>
    <member name="T:NLog.Internal.NetworkSenders.NetworkSenderFactory">
      <summary>
            Default implementation of <see cref="T:NLog.Internal.NetworkSenders.INetworkSenderFactory" />.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.NetworkSenderFactory.Create(System.String,System.Int32)">
      <summary>
            Creates a new instance of the network sender based on a network URL:.
            </summary>
      <param name="url">
            URL that determines the network sender to be created.
            </param>
      <param name="maxQueueSize">
            The maximum queue size.
            </param>
            /// <returns>
            A newly created network sender.
            </returns></member>
    <member name="T:NLog.Internal.NetworkSenders.SocketProxy">
      <summary>
            Socket proxy for mocking Socket code.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.SocketProxy.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.SocketProxy" /> class.
            </summary>
      <param name="addressFamily">The address family.</param>
      <param name="socketType">Type of the socket.</param>
      <param name="protocolType">Type of the protocol.</param>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.SocketProxy.Close">
      <summary>
            Closes the wrapped socket.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.SocketProxy.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>
            Invokes ConnectAsync method on the wrapped socket.
            </summary>
      <param name="args">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instance containing the event data.</param>
      <returns>Result of original method.</returns>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.SocketProxy.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>
            Invokes SendAsync method on the wrapped socket.
            </summary>
      <param name="args">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instance containing the event data.</param>
      <returns>Result of original method.</returns>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.SocketProxy.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>
            Invokes SendToAsync method on the wrapped socket.
            </summary>
      <param name="args">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instance containing the event data.</param>
      <returns>Result of original method.</returns>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.SocketProxy.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="P:NLog.Internal.NetworkSenders.SocketProxy.UnderlyingSocket">
      <summary>
            Gets underlying socket instance.
            </summary>
    </member>
    <member name="T:NLog.Internal.NetworkSenders.TcpNetworkSender">
      <summary>
            Sends messages over a TCP network connection.
            </summary>
    </member>
    <member name="T:NLog.Internal.NetworkSenders.TcpNetworkSender.MySocketAsyncEventArgs">
      <summary>
            Facilitates mocking of <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> class.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.MySocketAsyncEventArgs.RaiseCompleted">
      <summary>
            Raises the Completed event.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.#ctor(System.String,System.Net.Sockets.AddressFamily)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.TcpNetworkSender" /> class.
            </summary>
      <param name="url">URL. Must start with tcp://.</param>
      <param name="addressFamily">The address family.</param>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.CreateSocket(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
      <summary>
            Creates the socket with given parameters. 
            </summary>
      <param name="addressFamily">The address family.</param>
      <param name="socketType">Type of the socket.</param>
      <param name="protocolType">Type of the protocol.</param>
      <returns>Instance of <see cref="T:NLog.Internal.NetworkSenders.ISocket" /> which represents the socket.</returns>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.DoInitialize">
      <summary>
            Performs sender-specific initialization.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.DoClose(NLog.Common.AsyncContinuation)">
      <summary>
            Closes the socket.
            </summary>
      <param name="continuation">The continuation.</param>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.DoFlush(NLog.Common.AsyncContinuation)">
      <summary>
            Performs sender-specific flush.
            </summary>
      <param name="continuation">The continuation.</param>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.DoSend(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
      <summary>
            Sends the specified text over the connected socket.
            </summary>
      <param name="bytes">The bytes to be sent.</param>
      <param name="offset">Offset in buffer.</param>
      <param name="length">Number of bytes to send.</param>
      <param name="asyncContinuation">The async continuation to be invoked after the buffer has been sent.</param>
      <remarks>To be overridden in inheriting classes.</remarks>
    </member>
    <member name="T:NLog.Internal.NetworkSenders.UdpNetworkSender">
      <summary>
            Sends messages over the network as UDP datagrams.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.#ctor(System.String,System.Net.Sockets.AddressFamily)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.UdpNetworkSender" /> class.
            </summary>
      <param name="url">URL. Must start with udp://.</param>
      <param name="addressFamily">The address family.</param>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.CreateSocket(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
      <summary>
            Creates the socket.
            </summary>
      <param name="addressFamily">The address family.</param>
      <param name="socketType">Type of the socket.</param>
      <param name="protocolType">Type of the protocol.</param>
      <returns>Implementation of <see cref="T:NLog.Internal.NetworkSenders.ISocket" /> to use.</returns>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.DoInitialize">
      <summary>
            Performs sender-specific initialization.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.DoClose(NLog.Common.AsyncContinuation)">
      <summary>
            Closes the socket.
            </summary>
      <param name="continuation">The continuation.</param>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.DoSend(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
      <summary>
            Sends the specified text as a UDP datagram.
            </summary>
      <param name="bytes">The bytes to be sent.</param>
      <param name="offset">Offset in buffer.</param>
      <param name="length">Number of bytes to send.</param>
      <param name="asyncContinuation">The async continuation to be invoked after the buffer has been sent.</param>
      <remarks>To be overridden in inheriting classes.</remarks>
    </member>
    <member name="T:NLog.Internal.ObjectGraphScanner">
      <summary>
            Scans (breadth-first) the object graph following all the edges whose are 
            instances have <see cref="T:NLog.Config.NLogConfigurationItemAttribute" /> attached and returns 
            all objects implementing a specified interfaces.
            </summary>
    </member>
    <member name="M:NLog.Internal.ObjectGraphScanner.FindReachableObjects``1(System.Object[])">
      <summary>
            Finds the objects which have attached <see cref="T:NLog.Config.NLogConfigurationItemAttribute" /> which are reachable
            from any of the given root objects when traversing the object graph over public properties.
            </summary>
      <typeparam name="T">Type of the objects to return.</typeparam>
      <param name="rootObjects">The root objects.</param>
      <returns>Ordered list of objects implementing T.</returns>
    </member>
    <member name="T:NLog.Internal.ParameterUtils">
      <summary>
            Parameter validation utilities.
            </summary>
    </member>
    <member name="M:NLog.Internal.ParameterUtils.AssertNotNull(System.Object,System.String)">
      <summary>
            Asserts that the value is not null and throws <see cref="T:System.ArgumentNullException" /> otherwise.
            </summary>
      <param name="value">The value to check.</param>
      <param name="parameterName">Name of the parameter.</param>
    </member>
    <member name="T:NLog.Internal.PlatformDetector">
      <summary>
            Detects the platform the NLog is running on.
            </summary>
    </member>
    <member name="P:NLog.Internal.PlatformDetector.CurrentOS">
      <summary>
            Gets the current runtime OS.
            </summary>
    </member>
    <member name="P:NLog.Internal.PlatformDetector.IsDesktopWin32">
      <summary>
            Gets a value indicating whether current OS is a desktop version of Windows.
            </summary>
    </member>
    <member name="P:NLog.Internal.PlatformDetector.IsWin32">
      <summary>
            Gets a value indicating whether current OS is Win32-based (desktop or mobile).
            </summary>
    </member>
    <member name="P:NLog.Internal.PlatformDetector.IsUnix">
      <summary>
            Gets a value indicating whether current OS is Unix-based.
            </summary>
    </member>
    <member name="T:NLog.Internal.PortableFileInfoHelper">
      <summary>
            Portable implementation of <see cref="T:NLog.Internal.FileInfoHelper" />.
            </summary>
    </member>
    <member name="M:NLog.Internal.PortableFileInfoHelper.GetFileInfo(System.String,System.IntPtr,System.DateTime@,System.Int64@)">
      <summary>
            Gets the information about a file.
            </summary>
      <param name="fileName">Name of the file.</param>
      <param name="fileHandle">The file handle.</param>
      <param name="lastWriteTime">The last write time of the file.</param>
      <param name="fileLength">Length of the file.</param>
      <returns>
            A value of <c>true</c> if file information was retrieved successfully, <c>false</c> otherwise.
            </returns>
    </member>
    <member name="T:NLog.Internal.ThreadIDHelper">
      <summary>
            Returns details about current process and thread in a portable manner.
            </summary>
    </member>
    <member name="P:NLog.Internal.ThreadIDHelper.Instance">
      <summary>
            Gets the singleton instance of PortableThreadIDHelper or
            Win32ThreadIDHelper depending on runtime environment.
            </summary>
      <value>The instance.</value>
    </member>
    <member name="P:NLog.Internal.ThreadIDHelper.CurrentThreadID">
      <summary>
            Gets current thread ID.
            </summary>
    </member>
    <member name="P:NLog.Internal.ThreadIDHelper.CurrentProcessID">
      <summary>
            Gets current process ID.
            </summary>
    </member>
    <member name="P:NLog.Internal.ThreadIDHelper.CurrentProcessName">
      <summary>
            Gets current process name.
            </summary>
    </member>
    <member name="P:NLog.Internal.ThreadIDHelper.CurrentProcessBaseName">
      <summary>
            Gets current process name (excluding filename extension, if any).
            </summary>
    </member>
    <member name="T:NLog.Internal.PortableThreadIDHelper">
      <summary>
            Portable implementation of <see cref="T:NLog.Internal.ThreadIDHelper" />.
            </summary>
    </member>
    <member name="M:NLog.Internal.PortableThreadIDHelper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.PortableThreadIDHelper" /> class.
            </summary>
    </member>
    <member name="M:NLog.Internal.PortableThreadIDHelper.GetProcessName">
      <summary>
            Gets the name of the process.
            </summary>
    </member>
    <member name="P:NLog.Internal.PortableThreadIDHelper.CurrentThreadID">
      <summary>
            Gets current thread ID.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:NLog.Internal.PortableThreadIDHelper.CurrentProcessID">
      <summary>
            Gets current process ID.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:NLog.Internal.PortableThreadIDHelper.CurrentProcessName">
      <summary>
            Gets current process name.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:NLog.Internal.PortableThreadIDHelper.CurrentProcessBaseName">
      <summary>
            Gets current process name (excluding filename extension, if any).
            </summary>
      <value>
      </value>
    </member>
    <member name="T:NLog.Internal.PropertyHelper">
      <summary>
            Reflection helpers for accessing properties.
            </summary>
    </member>
    <member name="T:NLog.Internal.ReflectionHelpers">
      <summary>
            Reflection helpers.
            </summary>
    </member>
    <member name="M:NLog.Internal.ReflectionHelpers.SafeGetTypes(System.Reflection.Assembly)">
      <summary>
            Gets all usable exported types from the given assembly.
            </summary>
      <param name="assembly">Assembly to scan.</param>
      <returns>Usable types from the given assembly.</returns>
      <remarks>Types which cannot be loaded are skipped.</remarks>
    </member>
    <member name="T:NLog.Internal.RuntimeOS">
      <summary>
            Supported operating systems.
            </summary>
      <remarks>
            If you add anything here, make sure to add the appropriate detection
            code to <see cref="T:NLog.Internal.PlatformDetector" /></remarks>
    </member>
    <member name="F:NLog.Internal.RuntimeOS.Any">
      <summary>
            Any operating system.
            </summary>
    </member>
    <member name="F:NLog.Internal.RuntimeOS.Unix">
      <summary>
            Unix/Linux operating systems.
            </summary>
    </member>
    <member name="F:NLog.Internal.RuntimeOS.WindowsCE">
      <summary>
            Windows CE.
            </summary>
    </member>
    <member name="F:NLog.Internal.RuntimeOS.Windows">
      <summary>
            Desktop versions of Windows (95,98,ME).
            </summary>
    </member>
    <member name="F:NLog.Internal.RuntimeOS.WindowsNT">
      <summary>
            Windows NT, 2000, 2003 and future versions based on NT technology.
            </summary>
    </member>
    <member name="F:NLog.Internal.RuntimeOS.Unknown">
      <summary>
            Unknown operating system.
            </summary>
    </member>
    <member name="T:NLog.Internal.SimpleStringReader">
      <summary>
            Simple character tokenizer.
            </summary>
    </member>
    <member name="M:NLog.Internal.SimpleStringReader.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.SimpleStringReader" /> class.
            </summary>
      <param name="text">The text to be tokenized.</param>
    </member>
    <member name="T:NLog.Internal.SingleCallContinuation">
      <summary>
            Implements a single-call guard around given continuation function.
            </summary>
    </member>
    <member name="M:NLog.Internal.SingleCallContinuation.#ctor(NLog.Common.AsyncContinuation)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.SingleCallContinuation" /> class.
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
    </member>
    <member name="M:NLog.Internal.SingleCallContinuation.Function(System.Exception)">
      <summary>
            Continuation function which implements the single-call guard.
            </summary>
      <param name="exception">The exception.</param>
    </member>
    <member name="T:NLog.Internal.SortHelpers">
      <summary>
            Provides helpers to sort log events and associated continuations.
            </summary>
    </member>
    <member name="T:NLog.Internal.SortHelpers.KeySelector`2">
      <summary>
            Key selector delegate.
            </summary>
      <typeparam name="TValue">The type of the value.</typeparam>
      <typeparam name="TKey">The type of the key.</typeparam>
      <param name="value">Value to extract key information from.</param>
      <returns>Key selected from log event.</returns>
    </member>
    <member name="M:NLog.Internal.SortHelpers.BucketSort``2(System.Collections.Generic.IEnumerable{``0},NLog.Internal.SortHelpers.KeySelector{``0,``1})">
      <summary>
            Performs bucket sort (group by) on an array of items and returns a dictionary for easy traversal of the result set.
            </summary>
      <typeparam name="TValue">The type of the value.</typeparam>
      <typeparam name="TKey">The type of the key.</typeparam>
      <param name="inputs">The inputs.</param>
      <param name="keySelector">The key selector function.</param>
      <returns>
            Dictonary where keys are unique input keys, and values are lists of <see cref="T:NLog.Common.AsyncLogEventInfo" />.
            </returns>
    </member>
    <member name="T:NLog.Internal.StackTraceUsageUtils">
      <summary>
            Utilities for dealing with <see cref="T:NLog.Config.StackTraceUsage" /> values.
            </summary>
    </member>
    <member name="T:NLog.Internal.TargetWithFilterChain">
      <summary>
            Represents target with a chain of filters which determine
            whether logging should happen.
            </summary>
    </member>
    <member name="M:NLog.Internal.TargetWithFilterChain.#ctor(NLog.Targets.Target,System.Collections.Generic.IList{NLog.Filters.Filter})">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.TargetWithFilterChain" /> class.
            </summary>
      <param name="target">The target.</param>
      <param name="filterChain">The filter chain.</param>
    </member>
    <member name="M:NLog.Internal.TargetWithFilterChain.GetStackTraceUsage">
      <summary>
            Gets the stack trace usage.
            </summary>
      <returns>A <see cref="T:NLog.Config.StackTraceUsage" /> value that determines stack trace handling.</returns>
    </member>
    <member name="P:NLog.Internal.TargetWithFilterChain.Target">
      <summary>
            Gets the target.
            </summary>
      <value>The target.</value>
    </member>
    <member name="P:NLog.Internal.TargetWithFilterChain.FilterChain">
      <summary>
            Gets the filter chain.
            </summary>
      <value>The filter chain.</value>
    </member>
    <member name="P:NLog.Internal.TargetWithFilterChain.NextInChain">
      <summary>
            Gets or sets the next <see cref="T:NLog.Internal.TargetWithFilterChain" /> item in the chain.
            </summary>
      <value>The next item in the chain.</value>
    </member>
    <member name="T:NLog.Internal.ThreadLocalStorageHelper">
      <summary>
            Helper for dealing with thread-local storage.
            </summary>
    </member>
    <member name="M:NLog.Internal.ThreadLocalStorageHelper.AllocateDataSlot">
      <summary>
            Allocates the data slot for storing thread-local information.
            </summary>
      <returns>Allocated slot key.</returns>
    </member>
    <member name="M:NLog.Internal.ThreadLocalStorageHelper.GetDataForSlot``1(System.Object)">
      <summary>
            Gets the data for a slot in thread-local storage.
            </summary>
      <typeparam name="T">Type of the data.</typeparam>
      <param name="slot">The slot to get data for.</param>
      <returns>
            Slot data (will create T if null).
            </returns>
    </member>
    <member name="T:NLog.Internal.TimeoutContinuation">
      <summary>
            Wraps <see cref="T:NLog.Common.AsyncContinuation" /> with a timeout.
            </summary>
    </member>
    <member name="M:NLog.Internal.TimeoutContinuation.#ctor(NLog.Common.AsyncContinuation,System.TimeSpan)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.TimeoutContinuation" /> class.
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
      <param name="timeout">The timeout.</param>
    </member>
    <member name="M:NLog.Internal.TimeoutContinuation.Function(System.Exception)">
      <summary>
            Continuation function which implements the timeout logic.
            </summary>
      <param name="exception">The exception.</param>
    </member>
    <member name="M:NLog.Internal.TimeoutContinuation.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:NLog.Internal.UrlHelper">
      <summary>
            URL Encoding helper.
            </summary>
    </member>
    <member name="T:NLog.Internal.Win32FileInfoHelper">
      <summary>
            Win32-optimized implementation of <see cref="T:NLog.Internal.FileInfoHelper" />.
            </summary>
    </member>
    <member name="M:NLog.Internal.Win32FileInfoHelper.GetFileInfo(System.String,System.IntPtr,System.DateTime@,System.Int64@)">
      <summary>
            Gets the information about a file.
            </summary>
      <param name="fileName">Name of the file.</param>
      <param name="fileHandle">The file handle.</param>
      <param name="lastWriteTime">The last write time of the file.</param>
      <param name="fileLength">Length of the file.</param>
      <returns>
            A value of <c>true</c> if file information was retrieved successfully, <c>false</c> otherwise.
            </returns>
    </member>
    <member name="T:NLog.Internal.Win32ThreadIDHelper">
      <summary>
            Win32-optimized implementation of <see cref="T:NLog.Internal.ThreadIDHelper" />.
            </summary>
    </member>
    <member name="M:NLog.Internal.Win32ThreadIDHelper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.Win32ThreadIDHelper" /> class.
            </summary>
    </member>
    <member name="P:NLog.Internal.Win32ThreadIDHelper.CurrentThreadID">
      <summary>
            Gets current thread ID.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:NLog.Internal.Win32ThreadIDHelper.CurrentProcessID">
      <summary>
            Gets current process ID.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:NLog.Internal.Win32ThreadIDHelper.CurrentProcessName">
      <summary>
            Gets current process name.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:NLog.Internal.Win32ThreadIDHelper.CurrentProcessBaseName">
      <summary>
            Gets current process name (excluding filename extension, if any).
            </summary>
      <value>
      </value>
    </member>
    <member name="T:NLog.Internal.XmlHelper">
      <summary>
             Helper class for XML
            </summary>
    </member>
    <member name="M:NLog.Internal.XmlHelper.RemoveInvalidXmlChars(System.String)">
      <summary>
            removes any unusual unicode characters that can't be encoded into XML
            </summary>
    </member>
    <member name="M:NLog.Internal.XmlHelper.WriteAttributeSafeString(System.Xml.XmlWriter,System.String,System.String,System.String,System.String)">
      <summary>
            Safe version of WriteAttributeString
            </summary>
      <param name="writer">
      </param>
      <param name="prefix">
      </param>
      <param name="localName">
      </param>
      <param name="ns">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:NLog.Internal.XmlHelper.WriteAttributeSafeString(System.Xml.XmlWriter,System.String,System.String)">
      <summary>
            Safe version of WriteAttributeString
            </summary>
      <param name="writer">
      </param>
      <param name="thread">
      </param>
      <param name="localName">
      </param>
    </member>
    <member name="M:NLog.Internal.XmlHelper.WriteElementSafeString(System.Xml.XmlWriter,System.String,System.String,System.String,System.String)">
      <summary>
            Safe version of WriteElementSafeString
            </summary>
      <param name="writer">
      </param>
      <param name="prefix">
      </param>
      <param name="localName">
      </param>
      <param name="ns">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:NLog.Internal.XmlHelper.WriteSafeCData(System.Xml.XmlWriter,System.String)">
      <summary>
            Safe version of WriteCData
            </summary>
      <param name="writer">
      </param>
      <param name="text">
      </param>
    </member>
    <member name="T:NLog.LayoutRenderers.AmbientPropertyAttribute">
      <summary>
            Designates a property of the class as an ambient property.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.AmbientPropertyAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.AmbientPropertyAttribute" /> class.
            </summary>
      <param name="name">Ambient property name.</param>
    </member>
    <member name="T:NLog.LayoutRenderers.LayoutRenderer">
      <summary>
            Render environmental information related to logging events.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.LayoutRenderer.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:NLog.LayoutRenderers.LayoutRenderer.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.LayoutRenderer.Render(NLog.LogEventInfo)">
      <summary>
            Renders the the value of layout renderer in the context of the specified log event.
            </summary>
      <param name="logEvent">The log event.</param>
      <returns>String representation of a layout renderer.</returns>
    </member>
    <member name="M:NLog.LayoutRenderers.LayoutRenderer.Initialize(NLog.Config.LoggingConfiguration)">
      <summary>
            Initializes this instance.
            </summary>
      <param name="configuration">The configuration.</param>
    </member>
    <member name="M:NLog.LayoutRenderers.LayoutRenderer.Close">
      <summary>
            Closes this instance.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.LayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified environmental information and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="M:NLog.LayoutRenderers.LayoutRenderer.InitializeLayoutRenderer">
      <summary>
            Initializes the layout renderer.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.LayoutRenderer.CloseLayoutRenderer">
      <summary>
            Closes the layout renderer.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.LayoutRenderer.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
      <param name="disposing">True to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.LayoutRenderer.LoggingConfiguration">
      <summary>
            Gets the logging configuration this target is part of.
            </summary>
    </member>
    <member name="T:NLog.LayoutRenderers.AspApplicationValueLayoutRenderer">
      <summary>
            ASP Application variable.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.AspApplicationValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified ASP Application variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.AspApplicationValueLayoutRenderer.Variable">
      <summary>
            Gets or sets the ASP Application variable name.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.AspRequestValueLayoutRenderer">
      <summary>
            ASP Request variable.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified ASP Request variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.Item">
      <summary>
            Gets or sets the item name. The QueryString, Form, Cookies, or ServerVariables collection variables having the specified name are rendered.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.QueryString">
      <summary>
            Gets or sets the QueryString variable to be rendered.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.Form">
      <summary>
            Gets or sets the form variable to be rendered.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.Cookie">
      <summary>
            Gets or sets the cookie to be rendered.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.ServerVariable">
      <summary>
            Gets or sets the ServerVariables item to be rendered.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.AspSessionValueLayoutRenderer">
      <summary>
            ASP Session variable.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.AspSessionValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified ASP Session variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.AspSessionValueLayoutRenderer.Variable">
      <summary>
            Gets or sets the session variable name.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.AssemblyVersionLayoutRenderer">
      <summary>
            Assembly version.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.AssemblyVersionLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders assembly version and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="T:NLog.LayoutRenderers.BaseDirLayoutRenderer">
      <summary>
            The current application domain's base directory.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.BaseDirLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.BaseDirLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.BaseDirLayoutRenderer.#ctor(NLog.Internal.Fakeables.IAppDomain)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.BaseDirLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.BaseDirLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the application base directory and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.BaseDirLayoutRenderer.File">
      <summary>
            Gets or sets the name of the file to be Path.Combine()'d with with the base directory.
            </summary>
      <docgen category="Advanced Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.BaseDirLayoutRenderer.Dir">
      <summary>
            Gets or sets the name of the directory to be Path.Combine()'d with with the base directory.
            </summary>
      <docgen category="Advanced Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.CallSiteLayoutRenderer">
      <summary>
            The call site (class name, method name and source information).
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.CallSiteLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.CallSiteLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.CallSiteLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the call site and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.ClassName">
      <summary>
            Gets or sets a value indicating whether to render the class name.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.MethodName">
      <summary>
            Gets or sets a value indicating whether to render the method name.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.CleanNamesOfAnonymousDelegates">
      <summary>
            Gets or sets a value indicating whether the method name will be cleaned up if it is detected as an anonymous delegate.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.SkipFrames">
      <summary>
            Gets or sets the number of frames to skip.
            </summary>
    </member>
    <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.FileName">
      <summary>
            Gets or sets a value indicating whether to render the source file name and line number.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.IncludeSourcePath">
      <summary>
            Gets or sets a value indicating whether to include source file path.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.CounterLayoutRenderer">
      <summary>
            A counter value (increases on each layout rendering).
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.CounterLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.CounterLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.CounterLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified counter value and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.CounterLayoutRenderer.Value">
      <summary>
            Gets or sets the initial value of the counter.
            </summary>
      <docgen category="Counter Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.CounterLayoutRenderer.Increment">
      <summary>
            Gets or sets the value to be added to the counter after each layout rendering.
            </summary>
      <docgen category="Counter Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.CounterLayoutRenderer.Sequence">
      <summary>
            Gets or sets the name of the sequence. Different named sequences can have individual values.
            </summary>
      <docgen category="Counter Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.DateLayoutRenderer">
      <summary>
            Current date and time.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.DateLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.DateLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.DateLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the current date and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.DateLayoutRenderer.Culture">
      <summary>
            Gets or sets the culture used for rendering. 
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.DateLayoutRenderer.Format">
      <summary>
            Gets or sets the date format. Can be any argument accepted by DateTime.ToString(format).
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.DateLayoutRenderer.UniversalTime">
      <summary>
            Gets or sets a value indicating whether to output UTC time instead of local time.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.EnvironmentLayoutRenderer">
      <summary>
            The environment variable.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.EnvironmentLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified environment variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.EnvironmentLayoutRenderer.Variable">
      <summary>
            Gets or sets the name of the environment variable.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.EnvironmentLayoutRenderer.Default">
      <summary>
            Gets or sets the default value to be used when the environment variable is not set.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.EventContextLayoutRenderer">
      <summary>
            Log event context data.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.EventContextLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified log event context item and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.EventContextLayoutRenderer.Item">
      <summary>
            Gets or sets the name of the item.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.EventPropertiesLayoutRenderer">
      <summary>
            Log event context data.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.EventPropertiesLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified log event context item and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.EventPropertiesLayoutRenderer.Item">
      <summary>
            Gets or sets the name of the item.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.ExceptionLayoutRenderer">
      <summary>
            Exception information provided through 
            a call to one of the Logger.*Exception() methods.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.ExceptionLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified exception information and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.AppendMessage(System.Text.StringBuilder,System.Exception)">
      <summary>
            Appends the Message of an Exception to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="ex">The exception containing the Message to append.</param>
    </member>
    <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.AppendMethod(System.Text.StringBuilder,System.Exception)">
      <summary>
            Appends the method name from Exception's stack trace to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="ex">The Exception whose method name should be appended.</param>
    </member>
    <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.AppendStackTrace(System.Text.StringBuilder,System.Exception)">
      <summary>
            Appends the stack trace from an Exception to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="ex">The Exception whose stack trace should be appended.</param>
    </member>
    <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.AppendToString(System.Text.StringBuilder,System.Exception)">
      <summary>
            Appends the result of calling ToString() on an Exception to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="ex">The Exception whose call to ToString() should be appended.</param>
    </member>
    <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.AppendType(System.Text.StringBuilder,System.Exception)">
      <summary>
            Appends the type of an Exception to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="ex">The Exception whose type should be appended.</param>
    </member>
    <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.AppendShortType(System.Text.StringBuilder,System.Exception)">
      <summary>
            Appends the short type of an Exception to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="ex">The Exception whose short type should be appended.</param>
    </member>
    <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.AppendData(System.Text.StringBuilder,System.Exception)">
      <summary>
            Appends the contents of an Exception's Data property to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="ex">The Exception whose Data property elements should be appended.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.Format">
      <summary>
            Gets or sets the format of the output. Must be a comma-separated list of exception
            properties: Message, Type, ShortType, ToString, Method, StackTrace.
            This parameter value is case-insensitive.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.InnerFormat">
      <summary>
            Gets or sets the format of the output of inner exceptions. Must be a comma-separated list of exception
            properties: Message, Type, ShortType, ToString, Method, StackTrace.
            This parameter value is case-insensitive.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.Separator">
      <summary>
            Gets or sets the separator used to concatenate parts specified in the Format.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.MaxInnerExceptionLevel">
      <summary>
            Gets or sets the maximum number of inner exceptions to include in the output.
            By default inner exceptions are not enabled for compatibility with NLog 1.0.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.InnerExceptionSeparator">
      <summary>
            Gets or sets the separator between inner exceptions.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.FileContentsLayoutRenderer">
      <summary>
            Renders contents of the specified file.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.FileContentsLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.FileContentsLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.FileContentsLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the contents of the specified file and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.FileContentsLayoutRenderer.FileName">
      <summary>
            Gets or sets the name of the file.
            </summary>
      <docgen category="File Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.FileContentsLayoutRenderer.Encoding">
      <summary>
            Gets or sets the encoding used in the file.
            </summary>
      <value>The encoding.</value>
      <docgen category="File Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer">
      <summary>
            The information about the garbage collector.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the selected process information.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer.Property">
      <summary>
            Gets or sets the property to retrieve.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.GarbageCollectorProperty">
      <summary>
            Gets or sets the property of System.GC to retrieve.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.TotalMemory">
      <summary>
            Total memory allocated.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.TotalMemoryForceCollection">
      <summary>
            Total memory allocated (perform full garbage collection first).
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.CollectionCount0">
      <summary>
            Gets the number of Gen0 collections.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.CollectionCount1">
      <summary>
            Gets the number of Gen1 collections.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.CollectionCount2">
      <summary>
            Gets the number of Gen2 collections.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.MaxGeneration">
      <summary>
            Maximum generation number supported by GC.
            </summary>
    </member>
    <member name="T:NLog.LayoutRenderers.GdcLayoutRenderer">
      <summary>
            Global Diagnostics Context item. Provided for compatibility with log4net.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.GdcLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified Global Diagnostics Context item and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.GdcLayoutRenderer.Item">
      <summary>
            Gets or sets the name of the item.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.GuidLayoutRenderer">
      <summary>
            Globally-unique identifier (GUID).
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.GuidLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.GuidLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.GuidLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders a newly generated GUID string and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.GuidLayoutRenderer.Format">
      <summary>
            Gets or sets the GUID format as accepted by Guid.ToString() method.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.IdentityLayoutRenderer">
      <summary>
            Thread identity information (name and authentication information).
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.IdentityLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.IdentityLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.IdentityLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified identity information and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.Separator">
      <summary>
            Gets or sets the separator to be used when concatenating 
            parts of identity information.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.Name">
      <summary>
            Gets or sets a value indicating whether to render Thread.CurrentPrincipal.Identity.Name.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.AuthType">
      <summary>
            Gets or sets a value indicating whether to render Thread.CurrentPrincipal.Identity.AuthenticationType.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.IsAuthenticated">
      <summary>
            Gets or sets a value indicating whether to render Thread.CurrentPrincipal.Identity.IsAuthenticated.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.InstallContextLayoutRenderer">
      <summary>
            Installation parameter (passed to InstallNLogConfig).
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.InstallContextLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified installation parameter and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.InstallContextLayoutRenderer.Parameter">
      <summary>
            Gets or sets the name of the parameter.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.LayoutRendererAttribute">
      <summary>
            Marks class as a layout renderer and assigns a format string to it.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.LayoutRendererAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.LayoutRendererAttribute" /> class.
            </summary>
      <param name="name">Name of the layout renderer.</param>
    </member>
    <member name="T:NLog.LayoutRenderers.LevelLayoutRenderer">
      <summary>
            The log level.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.LevelLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the current log level and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="T:NLog.LayoutRenderers.LiteralLayoutRenderer">
      <summary>
            A string literal.
            </summary>
      <remarks>
            This is used to escape '${' sequence 
            as ;${literal:text=${}'
            </remarks>
    </member>
    <member name="M:NLog.LayoutRenderers.LiteralLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.LiteralLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.LiteralLayoutRenderer.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.LiteralLayoutRenderer" /> class.
            </summary>
      <param name="text">The literal text value.</param>
      <remarks>This is used by the layout compiler.</remarks>
    </member>
    <member name="M:NLog.LayoutRenderers.LiteralLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified string literal and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.LiteralLayoutRenderer.Text">
      <summary>
            Gets or sets the literal text.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer">
      <summary>
            XML event description compatible with log4j, Chainsaw and NLogViewer.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.#ctor(NLog.Internal.Fakeables.IAppDomain)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the XML logging event and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeNLogData">
      <summary>
            Gets or sets a value indicating whether to include NLog-specific extensions to log4j schema.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IndentXml">
      <summary>
            Gets or sets a value indicating whether the XML should use spaces for indentation.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.AppInfo">
      <summary>
            Gets or sets the AppInfo field. By default it's the friendly name of the current AppDomain.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeCallSite">
      <summary>
            Gets or sets a value indicating whether to include call site (class and method name) in the information sent over the network.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeSourceInfo">
      <summary>
            Gets or sets a value indicating whether to include source info (file name and line number) in the information sent over the network.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeMdc">
      <summary>
            Gets or sets a value indicating whether to include contents of the <see cref="T:NLog.MappedDiagnosticsContext" /> dictionary.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeNdc">
      <summary>
            Gets or sets a value indicating whether to include contents of the <see cref="T:NLog.NestedDiagnosticsContext" /> stack.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.NdcItemSeparator">
      <summary>
            Gets or sets the NDC item separator.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.LoggerNameLayoutRenderer">
      <summary>
            The logger name.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.LoggerNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the logger name and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.LoggerNameLayoutRenderer.ShortName">
      <summary>
            Gets or sets a value indicating whether to render short logger name (the part after the trailing dot character).
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.LongDateLayoutRenderer">
      <summary>
            The date and time in a long, sortable format yyyy-MM-dd HH:mm:ss.mmm.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.LongDateLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the date in the long format (yyyy-MM-dd HH:mm:ss.mmm) and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.LongDateLayoutRenderer.UniversalTime">
      <summary>
            Gets or sets a value indicating whether to output UTC time instead of local time.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.MachineNameLayoutRenderer">
      <summary>
            The machine name that the process is running on.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.MachineNameLayoutRenderer.InitializeLayoutRenderer">
      <summary>
            Initializes the layout renderer.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.MachineNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the machine name and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="T:NLog.LayoutRenderers.MdcLayoutRenderer">
      <summary>
            Mapped Diagnostic Context item. Provided for compatibility with log4net.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.MdcLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified MDC item and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.MdcLayoutRenderer.Item">
      <summary>
            Gets or sets the name of the item.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.MessageLayoutRenderer">
      <summary>
            The formatted log message.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.MessageLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.MessageLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.MessageLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the log message including any positional parameters and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.MessageLayoutRenderer.WithException">
      <summary>
            Gets or sets a value indicating whether to log exception along with message.
            </summary>
      <docgen category="Layout Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.MessageLayoutRenderer.ExceptionSeparator">
      <summary>
            Gets or sets the string that separates message from the exception.
            </summary>
      <docgen category="Layout Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.NdcLayoutRenderer">
      <summary>
            Nested Diagnostic Context item. Provided for compatibility with log4net.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.NdcLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.NdcLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.NdcLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified Nested Diagnostics Context item and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.NdcLayoutRenderer.TopFrames">
      <summary>
            Gets or sets the number of top stack frames to be rendered.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.NdcLayoutRenderer.BottomFrames">
      <summary>
            Gets or sets the number of bottom stack frames to be rendered.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.NdcLayoutRenderer.Separator">
      <summary>
            Gets or sets the separator to be used for concatenating nested diagnostics context output.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.NewLineLayoutRenderer">
      <summary>
            A newline literal.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.NewLineLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified string literal and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="T:NLog.LayoutRenderers.NLogDirLayoutRenderer">
      <summary>
            The directory where NLog.dll is located.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.NLogDirLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the directory where NLog is located and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.NLogDirLayoutRenderer.File">
      <summary>
            Gets or sets the name of the file to be Path.Combine()'d with the directory name.
            </summary>
      <docgen category="Advanced Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.NLogDirLayoutRenderer.Dir">
      <summary>
            Gets or sets the name of the directory to be Path.Combine()'d with the directory name.
            </summary>
      <docgen category="Advanced Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer">
      <summary>
            The performance counter.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.InitializeLayoutRenderer">
      <summary>
            Initializes the layout renderer.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.CloseLayoutRenderer">
      <summary>
            Closes the layout renderer.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified environment variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Category">
      <summary>
            Gets or sets the name of the counter category.
            </summary>
      <docgen category="Performance Counter Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Counter">
      <summary>
            Gets or sets the name of the performance counter.
            </summary>
      <docgen category="Performance Counter Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Instance">
      <summary>
            Gets or sets the name of the performance counter instance (e.g. this.Global_).
            </summary>
      <docgen category="Performance Counter Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.MachineName">
      <summary>
            Gets or sets the name of the machine to read the performance counter from.
            </summary>
      <docgen category="Performance Counter Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.ProcessIdLayoutRenderer">
      <summary>
            The identifier of the current process.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.ProcessIdLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the current process ID.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="T:NLog.LayoutRenderers.ProcessInfoLayoutRenderer">
      <summary>
            The information about the running process.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.ProcessInfoLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.InitializeLayoutRenderer">
      <summary>
            Initializes the layout renderer.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.CloseLayoutRenderer">
      <summary>
            Closes the layout renderer.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the selected process information.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.Property">
      <summary>
            Gets or sets the property to retrieve.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.ProcessInfoProperty">
      <summary>
            Property of System.Diagnostics.Process to retrieve.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.BasePriority">
      <summary>
            Base Priority.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.ExitCode">
      <summary>
            Exit Code.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.ExitTime">
      <summary>
            Exit Time.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.Handle">
      <summary>
            Process Handle.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.HandleCount">
      <summary>
            Handle Count.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.HasExited">
      <summary>
            Whether process has exited.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.Id">
      <summary>
            Process ID.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.MachineName">
      <summary>
            Machine name.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.MainWindowHandle">
      <summary>
            Handle of the main window.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.MainWindowTitle">
      <summary>
            Title of the main window.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.MaxWorkingSet">
      <summary>
            Maximum Working Set.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.MinWorkingSet">
      <summary>
            Minimum Working Set.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.NonPagedSystemMemorySize">
      <summary>
            Non-paged System Memory Size.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.NonPagedSystemMemorySize64">
      <summary>
            Non-paged System Memory Size (64-bit).
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PagedMemorySize">
      <summary>
            Paged Memory Size.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PagedMemorySize64">
      <summary>
            Paged Memory Size (64-bit)..
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PagedSystemMemorySize">
      <summary>
            Paged System Memory Size.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PagedSystemMemorySize64">
      <summary>
            Paged System Memory Size (64-bit).
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakPagedMemorySize">
      <summary>
            Peak Paged Memory Size.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakPagedMemorySize64">
      <summary>
            Peak Paged Memory Size (64-bit).
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakVirtualMemorySize">
      <summary>
            Peak Vitual Memory Size.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakVirtualMemorySize64">
      <summary>
            Peak Virtual Memory Size (64-bit)..
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakWorkingSet">
      <summary>
            Peak Working Set Size.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakWorkingSet64">
      <summary>
            Peak Working Set Size (64-bit).
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PriorityBoostEnabled">
      <summary>
            Whether priority boost is enabled.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PriorityClass">
      <summary>
            Priority Class.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PrivateMemorySize">
      <summary>
            Private Memory Size.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PrivateMemorySize64">
      <summary>
            Private Memory Size (64-bit).
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PrivilegedProcessorTime">
      <summary>
            Privileged Processor Time.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.ProcessName">
      <summary>
            Process Name.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.Responding">
      <summary>
            Whether process is responding.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.SessionId">
      <summary>
            Session ID.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.StartTime">
      <summary>
            Process Start Time.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.TotalProcessorTime">
      <summary>
            Total Processor Time.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.UserProcessorTime">
      <summary>
            User Processor Time.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.VirtualMemorySize">
      <summary>
            Virtual Memory Size.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.VirtualMemorySize64">
      <summary>
            Virtual Memory Size (64-bit).
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.WorkingSet">
      <summary>
            Working Set Size.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.WorkingSet64">
      <summary>
            Working Set Size (64-bit).
            </summary>
    </member>
    <member name="T:NLog.LayoutRenderers.ProcessNameLayoutRenderer">
      <summary>
            The name of the current process.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.ProcessNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the current process name (optionally with a full path).
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.ProcessNameLayoutRenderer.FullName">
      <summary>
            Gets or sets a value indicating whether to write the full path to the process executable.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.ProcessTimeLayoutRenderer">
      <summary>
            The process time in format HH:mm:ss.mmm.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.ProcessTimeLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the current process running time and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="T:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer">
      <summary>
            High precision timer, based on the value returned from QueryPerformanceCounter() optionally converted to seconds.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.InitializeLayoutRenderer">
      <summary>
            Initializes the layout renderer.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the ticks value of current time and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.Normalize">
      <summary>
            Gets or sets a value indicating whether to normalize the result by subtracting 
            it from the result of the first call (so that it's effectively zero-based).
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.Difference">
      <summary>
            Gets or sets a value indicating whether to output the difference between the result 
            of QueryPerformanceCounter and the previous one.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.Seconds">
      <summary>
            Gets or sets a value indicating whether to convert the result to seconds by dividing 
            by the result of QueryPerformanceFrequency().
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.Precision">
      <summary>
            Gets or sets the number of decimal digits to be included in output.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.AlignDecimalPoint">
      <summary>
            Gets or sets a value indicating whether to align decimal point (emit non-significant zeros).
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.RegistryLayoutRenderer">
      <summary>
            A value from the Registry.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.RegistryLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Reads the specified registry key and value and appends it to
            the passed <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event. Ignored.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.RegistryLayoutRenderer.Value">
      <summary>
            Gets or sets the registry value name.
            </summary>
      <docgen category="Registry Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.RegistryLayoutRenderer.DefaultValue">
      <summary>
            Gets or sets the value to be output when the specified registry key or value is not found.
            </summary>
      <docgen category="Registry Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.RegistryLayoutRenderer.Key">
      <summary>
            Gets or sets the registry key.
            </summary>
      <remarks>
            Must have one of the forms:
            <ul><li>HKLM\Key\Full\Name</li><li>HKEY_LOCAL_MACHINE\Key\Full\Name</li><li>HKCU\Key\Full\Name</li><li>HKEY_CURRENT_USER\Key\Full\Name</li></ul></remarks>
      <docgen category="Registry Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.ShortDateLayoutRenderer">
      <summary>
            The short date in a sortable format yyyy-MM-dd.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.ShortDateLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the current short date string (yyyy-MM-dd) and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.ShortDateLayoutRenderer.UniversalTime">
      <summary>
            Gets or sets a value indicating whether to output UTC time instead of local time.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.SpecialFolderLayoutRenderer">
      <summary>
            System special folder path (includes My Documents, My Music, Program Files, Desktop, and more).
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the directory where NLog is located and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.Folder">
      <summary>
            Gets or sets the system special folder to use.
            </summary>
      <remarks>
            Full list of options is available at <a href="http://msdn2.microsoft.com/en-us/system.environment.specialfolder.aspx">MSDN</a>.
            The most common ones are:
            <ul><li><b>ApplicationData</b> - roaming application data for current user.</li><li><b>CommonApplicationData</b> - application data for all users.</li><li><b>MyDocuments</b> - My Documents</li><li><b>DesktopDirectory</b> - Desktop directory</li><li><b>LocalApplicationData</b> - non roaming application data</li><li><b>Personal</b> - user profile directory</li><li><b>System</b> - System directory</li></ul></remarks>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.File">
      <summary>
            Gets or sets the name of the file to be Path.Combine()'d with the directory name.
            </summary>
      <docgen category="Advanced Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.Dir">
      <summary>
            Gets or sets the name of the directory to be Path.Combine()'d with the directory name.
            </summary>
      <docgen category="Advanced Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.StackTraceFormat">
      <summary>
            Format of the ${stacktrace} layout renderer output.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.StackTraceFormat.Raw">
      <summary>
            Raw format (multiline - as returned by StackFrame.ToString() method).
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.StackTraceFormat.Flat">
      <summary>
            Flat format (class and method names displayed in a single line).
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.StackTraceFormat.DetailedFlat">
      <summary>
            Detailed flat format (method signatures displayed in a single line).
            </summary>
    </member>
    <member name="T:NLog.LayoutRenderers.StackTraceLayoutRenderer">
      <summary>
            Stack trace renderer.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.StackTraceLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.StackTraceLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.StackTraceLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the call site and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.StackTraceLayoutRenderer.Format">
      <summary>
            Gets or sets the output format of the stack trace.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.StackTraceLayoutRenderer.TopFrames">
      <summary>
            Gets or sets the number of top stack frames to be rendered.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.StackTraceLayoutRenderer.Separator">
      <summary>
            Gets or sets the stack frame separator string.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.TempDirLayoutRenderer">
      <summary>
            A temporary directory.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.TempDirLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the directory where NLog is located and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.TempDirLayoutRenderer.File">
      <summary>
            Gets or sets the name of the file to be Path.Combine()'d with the directory name.
            </summary>
      <docgen category="Advanced Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.TempDirLayoutRenderer.Dir">
      <summary>
            Gets or sets the name of the directory to be Path.Combine()'d with the directory name.
            </summary>
      <docgen category="Advanced Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.ThreadIdLayoutRenderer">
      <summary>
            The identifier of the current thread.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.ThreadIdLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the current thread identifier and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="T:NLog.LayoutRenderers.ThreadNameLayoutRenderer">
      <summary>
            The name of the current thread.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.ThreadNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the current thread name and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="T:NLog.LayoutRenderers.TicksLayoutRenderer">
      <summary>
            The Ticks value of current date and time.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.TicksLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the ticks value of current time and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="T:NLog.LayoutRenderers.TimeLayoutRenderer">
      <summary>
            The time in a 24-hour, sortable format HH:mm:ss.mmm.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.TimeLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders time in the 24-h format (HH:mm:ss.mmm) and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.TimeLayoutRenderer.UniversalTime">
      <summary>
            Gets or sets a value indicating whether to output UTC time instead of local time.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer">
      <summary>
            Thread Windows identity information (username).
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the current thread windows identity information and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer.Domain">
      <summary>
            Gets or sets a value indicating whether domain name should be included.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer.UserName">
      <summary>
            Gets or sets a value indicating whether username should be included.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase">
      <summary>
            Decodes text "encrypted" with ROT-13.
            </summary>
      <remarks>
            See <a href="http://en.wikipedia.org/wiki/ROT13">http://en.wikipedia.org/wiki/ROT13</a>.
            </remarks>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the inner message, processes it and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.Transform(System.String)">
      <summary>
            Transforms the output of another layout.
            </summary>
      <param name="text">Output to be transform.</param>
      <returns>Transformed text.</returns>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.RenderInner(NLog.LogEventInfo)">
      <summary>
            Renders the inner layout contents.
            </summary>
      <param name="logEvent">The log event.</param>
      <returns>Contents of inner layout.</returns>
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.Inner">
      <summary>
            Gets or sets the wrapped layout.
            </summary>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper">
      <summary>
            Applies caching to another layout output.
            </summary>
      <remarks>
            The value of the inner layout will be rendered only once and reused subsequently.
            </remarks>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.InitializeLayoutRenderer">
      <summary>
            Initializes the layout renderer.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.CloseLayoutRenderer">
      <summary>
            Closes the layout renderer.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.Transform(System.String)">
      <summary>
            Transforms the output of another layout.
            </summary>
      <param name="text">Output to be transform.</param>
      <returns>Transformed text.</returns>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.RenderInner(NLog.LogEventInfo)">
      <summary>
            Renders the inner layout contents.
            </summary>
      <param name="logEvent">The log event.</param>
      <returns>Contents of inner layout.</returns>
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.Cached">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper" /> is enabled.
            </summary>
      <docgen category="Caching Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper">
      <summary>
            Filters characters not allowed in the file names by replacing them with safe character.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper.Transform(System.String)">
      <summary>
            Post-processes the rendered message. 
            </summary>
      <param name="text">The text to be post-processed.</param>
      <returns>Padded and trimmed string.</returns>
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper.FSNormalize">
      <summary>
            Gets or sets a value indicating whether to modify the output of this renderer so it can be used as a part of file path
            (illegal characters are replaced with '_').
            </summary>
      <docgen category="Advanced Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper">
      <summary>
            Escapes output of another layout using JSON rules.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper.Transform(System.String)">
      <summary>
            Post-processes the rendered message. 
            </summary>
      <param name="text">The text to be post-processed.</param>
      <returns>JSON-encoded string.</returns>
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper.JsonEncode">
      <summary>
            Gets or sets a value indicating whether to apply JSON encoding.
            </summary>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper">
      <summary>
            Converts the result of another layout output to lower case.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper.Transform(System.String)">
      <summary>
            Post-processes the rendered message. 
            </summary>
      <param name="text">The text to be post-processed.</param>
      <returns>Padded and trimmed string.</returns>
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper.Lowercase">
      <summary>
            Gets or sets a value indicating whether lower case conversion should be applied.
            </summary>
      <value>A value of <c>true</c> if lower case conversion should be applied; otherwise, <c>false</c>.</value>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper.Culture">
      <summary>
            Gets or sets the culture used for rendering. 
            </summary>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.OnExceptionLayoutRendererWrapper">
      <summary>
            Only outputs the inner layout when exception has been defined for log message.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.OnExceptionLayoutRendererWrapper.Transform(System.String)">
      <summary>
            Transforms the output of another layout.
            </summary>
      <param name="text">Output to be transform.</param>
      <returns>Transformed text.</returns>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.OnExceptionLayoutRendererWrapper.RenderInner(NLog.LogEventInfo)">
      <summary>
            Renders the inner layout contents.
            </summary>
      <param name="logEvent">The log event.</param>
      <returns>
            Contents of inner layout.
            </returns>
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper">
      <summary>
            Applies padding to another layout output.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.Transform(System.String)">
      <summary>
            Transforms the output of another layout.
            </summary>
      <param name="text">Output to be transform.</param>
      <returns>Transformed text.</returns>
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.Padding">
      <summary>
            Gets or sets the number of characters to pad the output to. 
            </summary>
      <remarks>
            Positive padding values cause left padding, negative values 
            cause right padding to the desired width.
            </remarks>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.PadCharacter">
      <summary>
            Gets or sets the padding character.
            </summary>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.FixedLength">
      <summary>
            Gets or sets a value indicating whether to trim the 
            rendered text to the absolute value of the padding length.
            </summary>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper">
      <summary>
            Replaces a string in the output of another layout with another string.
            </summary>
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.Replacer">
      <summary>
            This class was created instead of simply using a lambda expression so that the "ThreadAgnosticAttributeTest" will pass
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.InitializeLayoutRenderer">
      <summary>
            Initializes the layout renderer.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.Transform(System.String)">
      <summary>
            Post-processes the rendered message. 
            </summary>
      <param name="text">The text to be post-processed.</param>
      <returns>Post-processed text.</returns>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.ReplaceNamedGroup(System.String,System.String,System.String,System.Text.RegularExpressions.Match)">
      <summary>
            A match evaluator for Regular Expression based replacing
            </summary>
      <param name="input">
      </param>
      <param name="groupName">
      </param>
      <param name="replacement">
      </param>
      <param name="match">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.SearchFor">
      <summary>
            Gets or sets the text to search for.
            </summary>
      <value>The text search for.</value>
      <docgen category="Search/Replace Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.Regex">
      <summary>
            Gets or sets a value indicating whether regular expressions should be used.
            </summary>
      <value>A value of <c>true</c> if regular expressions should be used otherwise, <c>false</c>.</value>
      <docgen category="Search/Replace Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.ReplaceWith">
      <summary>
            Gets or sets the replacement string.
            </summary>
      <value>The replacement string.</value>
      <docgen category="Search/Replace Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.ReplaceGroupName">
      <summary>
            Gets or sets the group name to replace when using regular expressions.
            Leave null or empty to replace without using group name.
            </summary>
      <value>The group name.</value>
      <docgen category="Search/Replace Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.IgnoreCase">
      <summary>
            Gets or sets a value indicating whether to ignore case.
            </summary>
      <value>A value of <c>true</c> if case should be ignored when searching; otherwise, <c>false</c>.</value>
      <docgen category="Search/Replace Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.WholeWords">
      <summary>
            Gets or sets a value indicating whether to search for whole words.
            </summary>
      <value>A value of <c>true</c> if whole words should be searched for; otherwise, <c>false</c>.</value>
      <docgen category="Search/Replace Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.Rot13LayoutRendererWrapper">
      <summary>
            Decodes text "encrypted" with ROT-13.
            </summary>
      <remarks>
            See <a href="http://en.wikipedia.org/wiki/ROT13">http://en.wikipedia.org/wiki/ROT13</a>.
            </remarks>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.Rot13LayoutRendererWrapper.DecodeRot13(System.String)">
      <summary>
            Encodes/Decodes ROT-13-encoded string.
            </summary>
      <param name="encodedValue">The string to be encoded/decoded.</param>
      <returns>Encoded/Decoded text.</returns>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.Rot13LayoutRendererWrapper.Transform(System.String)">
      <summary>
            Transforms the output of another layout.
            </summary>
      <param name="text">Output to be transform.</param>
      <returns>Transformed text.</returns>
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.Rot13LayoutRendererWrapper.Text">
      <summary>
            Gets or sets the layout to be wrapped.
            </summary>
      <value>The layout to be wrapped.</value>
      <remarks>This variable is for backwards compatibility</remarks>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper">
      <summary>
            Trims the whitespace from the result of another layout renderer.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper.Transform(System.String)">
      <summary>
            Post-processes the rendered message. 
            </summary>
      <param name="text">The text to be post-processed.</param>
      <returns>Trimmed string.</returns>
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper.TrimWhiteSpace">
      <summary>
            Gets or sets a value indicating whether lower case conversion should be applied.
            </summary>
      <value>A value of <c>true</c> if lower case conversion should be applied; otherwise, <c>false</c>.</value>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper">
      <summary>
            Converts the result of another layout output to upper case.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper.Transform(System.String)">
      <summary>
            Post-processes the rendered message. 
            </summary>
      <param name="text">The text to be post-processed.</param>
      <returns>Padded and trimmed string.</returns>
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper.Uppercase">
      <summary>
            Gets or sets a value indicating whether upper case conversion should be applied.
            </summary>
      <value>A value of <c>true</c> if upper case conversion should be applied otherwise, <c>false</c>.</value>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper.Culture">
      <summary>
            Gets or sets the culture used for rendering. 
            </summary>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper">
      <summary>
            Encodes the result of another layout output for use with URLs.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper.Transform(System.String)">
      <summary>
            Transforms the output of another layout.
            </summary>
      <param name="text">Output to be transform.</param>
      <returns>Transformed text.</returns>
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper.SpaceAsPlus">
      <summary>
            Gets or sets a value indicating whether spaces should be translated to '+' or '%20'.
            </summary>
      <value>A value of <c>true</c> if space should be translated to '+'; otherwise, <c>false</c>.</value>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.WhenEmptyLayoutRendererWrapper">
      <summary>
            Outputs alternative layout when the inner layout produces empty result.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.WhenEmptyLayoutRendererWrapper.Transform(System.String)">
      <summary>
            Transforms the output of another layout.
            </summary>
      <param name="text">Output to be transform.</param>
      <returns>Transformed text.</returns>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.WhenEmptyLayoutRendererWrapper.RenderInner(NLog.LogEventInfo)">
      <summary>
            Renders the inner layout contents.
            </summary>
      <param name="logEvent">The log event.</param>
      <returns>
            Contents of inner layout.
            </returns>
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.WhenEmptyLayoutRendererWrapper.WhenEmpty">
      <summary>
            Gets or sets the layout to be rendered when original layout produced empty result.
            </summary>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.WhenLayoutRendererWrapper">
      <summary>
            Only outputs the inner layout when the specified condition has been met.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.WhenLayoutRendererWrapper.Transform(System.String)">
      <summary>
            Transforms the output of another layout.
            </summary>
      <param name="text">Output to be transform.</param>
      <returns>Transformed text.</returns>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.WhenLayoutRendererWrapper.RenderInner(NLog.LogEventInfo)">
      <summary>
            Renders the inner layout contents.
            </summary>
      <param name="logEvent">The log event.</param>
      <returns>
            Contents of inner layout.
            </returns>
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.WhenLayoutRendererWrapper.When">
      <summary>
            Gets or sets the condition that must be met for the inner layout to be printed.
            </summary>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper">
      <summary>
            Converts the result of another layout output to be XML-compliant.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper.Transform(System.String)">
      <summary>
            Post-processes the rendered message. 
            </summary>
      <param name="text">The text to be post-processed.</param>
      <returns>Padded and trimmed string.</returns>
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper.XmlEncode">
      <summary>
            Gets or sets a value indicating whether to apply XML encoding.
            </summary>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="T:NLog.Layouts.CsvColumn">
      <summary>
            A column in the CSV.
            </summary>
    </member>
    <member name="M:NLog.Layouts.CsvColumn.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.CsvColumn" /> class.
            </summary>
    </member>
    <member name="M:NLog.Layouts.CsvColumn.#ctor(System.String,NLog.Layouts.Layout)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.CsvColumn" /> class.
            </summary>
      <param name="name">The name of the column.</param>
      <param name="layout">The layout of the column.</param>
    </member>
    <member name="P:NLog.Layouts.CsvColumn.Name">
      <summary>
            Gets or sets the name of the column.
            </summary>
      <docgen category="CSV Column Options" order="10" />
    </member>
    <member name="P:NLog.Layouts.CsvColumn.Layout">
      <summary>
            Gets or sets the layout of the column.
            </summary>
      <docgen category="CSV Column Options" order="10" />
    </member>
    <member name="T:NLog.Layouts.CsvColumnDelimiterMode">
      <summary>
            Specifies allowed column delimiters.
            </summary>
    </member>
    <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Auto">
      <summary>
            Automatically detect from regional settings.
            </summary>
    </member>
    <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Comma">
      <summary>
            Comma (ASCII 44).
            </summary>
    </member>
    <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Semicolon">
      <summary>
            Semicolon (ASCII 59).
            </summary>
    </member>
    <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Tab">
      <summary>
            Tab character (ASCII 9).
            </summary>
    </member>
    <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Pipe">
      <summary>
            Pipe character (ASCII 124).
            </summary>
    </member>
    <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Space">
      <summary>
            Space character (ASCII 32).
            </summary>
    </member>
    <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Custom">
      <summary>
            Custom string, specified by the CustomDelimiter.
            </summary>
    </member>
    <member name="T:NLog.Layouts.Layout">
      <summary>
            Abstract interface that layouts must implement.
            </summary>
    </member>
    <member name="M:NLog.Layouts.Layout.op_Implicit(System.String)~NLog.Layouts.Layout">
      <summary>
            Converts a given text to a <see cref="T:NLog.Layouts.Layout" />.
            </summary>
      <param name="text">Text to be converted.</param>
      <returns>
        <see cref="T:NLog.Layouts.SimpleLayout" /> object represented by the text.</returns>
    </member>
    <member name="M:NLog.Layouts.Layout.FromString(System.String)">
      <summary>
            Implicitly converts the specified string to a <see cref="T:NLog.Layouts.SimpleLayout" />.
            </summary>
      <param name="layoutText">The layout string.</param>
      <returns>Instance of <see cref="T:NLog.Layouts.SimpleLayout" />.</returns>
    </member>
    <member name="M:NLog.Layouts.Layout.FromString(System.String,NLog.Config.ConfigurationItemFactory)">
      <summary>
            Implicitly converts the specified string to a <see cref="T:NLog.Layouts.SimpleLayout" />.
            </summary>
      <param name="layoutText">The layout string.</param>
      <param name="configurationItemFactory">The NLog factories to use when resolving layout renderers.</param>
      <returns>Instance of <see cref="T:NLog.Layouts.SimpleLayout" />.</returns>
    </member>
    <member name="M:NLog.Layouts.Layout.Precalculate(NLog.LogEventInfo)">
      <summary>
            Precalculates the layout for the specified log event and stores the result
            in per-log event cache.
            </summary>
      <param name="logEvent">The log event.</param>
      <remarks>
            Calling this method enables you to store the log event in a buffer
            and/or potentially evaluate it in another thread even though the 
            layout may contain thread-dependent renderer.
            </remarks>
    </member>
    <member name="M:NLog.Layouts.Layout.Render(NLog.LogEventInfo)">
      <summary>
            Renders the event info in layout.
            </summary>
      <param name="logEvent">The event info.</param>
      <returns>String representing log event.</returns>
    </member>
    <member name="M:NLog.Layouts.Layout.Initialize(NLog.Config.LoggingConfiguration)">
      <summary>
            Initializes this instance.
            </summary>
      <param name="configuration">The configuration.</param>
    </member>
    <member name="M:NLog.Layouts.Layout.Close">
      <summary>
            Closes this instance.
            </summary>
    </member>
    <member name="M:NLog.Layouts.Layout.InitializeLayout">
      <summary>
            Initializes the layout.
            </summary>
    </member>
    <member name="M:NLog.Layouts.Layout.CloseLayout">
      <summary>
            Closes the layout.
            </summary>
    </member>
    <member name="M:NLog.Layouts.Layout.GetFormattedMessage(NLog.LogEventInfo)">
      <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
      <param name="logEvent">The logging event.</param>
      <returns>The rendered layout.</returns>
    </member>
    <member name="P:NLog.Layouts.Layout.IsThreadAgnostic">
      <summary>
            Gets a value indicating whether this layout is thread-agnostic (can be rendered on any thread).
            </summary>
      <remarks>
            Layout is thread-agnostic if it has been marked with [ThreadAgnostic] attribute and all its children are
            like that as well.
            Thread-agnostic layouts only use contents of <see cref="T:NLog.LogEventInfo" /> for its output.
            </remarks>
    </member>
    <member name="P:NLog.Layouts.Layout.LoggingConfiguration">
      <summary>
            Gets the logging configuration this target is part of.
            </summary>
    </member>
    <member name="T:NLog.Layouts.LayoutWithHeaderAndFooter">
      <summary>
            A specialized layout that supports header and footer.
            </summary>
    </member>
    <member name="M:NLog.Layouts.LayoutWithHeaderAndFooter.GetFormattedMessage(NLog.LogEventInfo)">
      <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
      <param name="logEvent">The logging event.</param>
      <returns>The rendered layout.</returns>
    </member>
    <member name="P:NLog.Layouts.LayoutWithHeaderAndFooter.Layout">
      <summary>
            Gets or sets the body layout (can be repeated multiple times).
            </summary>
      <docgen category="Layout Options" order="10" />
    </member>
    <member name="P:NLog.Layouts.LayoutWithHeaderAndFooter.Header">
      <summary>
            Gets or sets the header layout.
            </summary>
      <docgen category="Layout Options" order="10" />
    </member>
    <member name="P:NLog.Layouts.LayoutWithHeaderAndFooter.Footer">
      <summary>
            Gets or sets the footer layout.
            </summary>
      <docgen category="Layout Options" order="10" />
    </member>
    <member name="T:NLog.Layouts.CsvLayout">
      <summary>
            A specialized layout that renders CSV-formatted events.
            </summary>
    </member>
    <member name="T:NLog.Layouts.CsvLayout.CsvHeaderLayout">
      <summary>
            Header for CSV layout.
            </summary>
    </member>
    <member name="M:NLog.Layouts.CsvLayout.CsvHeaderLayout.#ctor(NLog.Layouts.CsvLayout)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.CsvLayout.CsvHeaderLayout" /> class.
            </summary>
      <param name="parent">The parent.</param>
    </member>
    <member name="M:NLog.Layouts.CsvLayout.CsvHeaderLayout.GetFormattedMessage(NLog.LogEventInfo)">
      <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
      <param name="logEvent">The logging event.</param>
      <returns>The rendered layout.</returns>
    </member>
    <member name="M:NLog.Layouts.CsvLayout.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.CsvLayout" /> class.
            </summary>
    </member>
    <member name="M:NLog.Layouts.CsvLayout.InitializeLayout">
      <summary>
            Initializes the layout.
            </summary>
    </member>
    <member name="M:NLog.Layouts.CsvLayout.GetFormattedMessage(NLog.LogEventInfo)">
      <summary>
            Formats the log event for write.
            </summary>
      <param name="logEvent">The log event to be formatted.</param>
      <returns>A string representation of the log event.</returns>
    </member>
    <member name="P:NLog.Layouts.CsvLayout.Columns">
      <summary>
            Gets the array of parameters to be passed.
            </summary>
      <docgen category="CSV Options" order="10" />
    </member>
    <member name="P:NLog.Layouts.CsvLayout.WithHeader">
      <summary>
            Gets or sets a value indicating whether CVS should include header.
            </summary>
      <value>A value of <c>true</c> if CVS should include header; otherwise, <c>false</c>.</value>
      <docgen category="CSV Options" order="10" />
    </member>
    <member name="P:NLog.Layouts.CsvLayout.Delimiter">
      <summary>
            Gets or sets the column delimiter.
            </summary>
      <docgen category="CSV Options" order="10" />
    </member>
    <member name="P:NLog.Layouts.CsvLayout.Quoting">
      <summary>
            Gets or sets the quoting mode.
            </summary>
      <docgen category="CSV Options" order="10" />
    </member>
    <member name="P:NLog.Layouts.CsvLayout.QuoteChar">
      <summary>
            Gets or sets the quote Character.
            </summary>
      <docgen category="CSV Options" order="10" />
    </member>
    <member name="P:NLog.Layouts.CsvLayout.CustomColumnDelimiter">
      <summary>
            Gets or sets the custom column delimiter value (valid when ColumnDelimiter is set to 'Custom').
            </summary>
      <docgen category="CSV Options" order="10" />
    </member>
    <member name="T:NLog.Layouts.CsvQuotingMode">
      <summary>
            Specifies allowes CSV quoting modes.
            </summary>
    </member>
    <member name="F:NLog.Layouts.CsvQuotingMode.All">
      <summary>
            Quote all column.
            </summary>
    </member>
    <member name="F:NLog.Layouts.CsvQuotingMode.Nothing">
      <summary>
            Quote nothing.
            </summary>
    </member>
    <member name="F:NLog.Layouts.CsvQuotingMode.Auto">
      <summary>
            Quote only whose values contain the quote symbol or
            the separator.
            </summary>
    </member>
    <member name="T:NLog.Layouts.LayoutAttribute">
      <summary>
            Marks class as a layout renderer and assigns a format string to it.
            </summary>
    </member>
    <member name="M:NLog.Layouts.LayoutAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.LayoutAttribute" /> class.
            </summary>
      <param name="name">Layout name.</param>
    </member>
    <member name="T:NLog.Layouts.LayoutParser">
      <summary>
            Parses layout strings.
            </summary>
    </member>
    <member name="T:NLog.Layouts.Log4JXmlEventLayout">
      <summary>
            A specialized layout that renders Log4j-compatible XML events.
            </summary>
      <remarks>
            This layout is not meant to be used explicitly. Instead you can use ${log4jxmlevent} layout renderer.
            </remarks>
    </member>
    <member name="M:NLog.Layouts.Log4JXmlEventLayout.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.Log4JXmlEventLayout" /> class.
            </summary>
    </member>
    <member name="M:NLog.Layouts.Log4JXmlEventLayout.GetFormattedMessage(NLog.LogEventInfo)">
      <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
      <param name="logEvent">The logging event.</param>
      <returns>The rendered layout.</returns>
    </member>
    <member name="P:NLog.Layouts.Log4JXmlEventLayout.Renderer">
      <summary>
            Gets the <see cref="T:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer" /> instance that renders log events.
            </summary>
    </member>
    <member name="T:NLog.Layouts.SimpleLayout">
      <summary>
            Represents a string with embedded placeholders that can render contextual information.
            </summary>
      <remarks>
            This layout is not meant to be used explicitly. Instead you can just use a string containing layout 
            renderers everywhere the layout is required.
            </remarks>
    </member>
    <member name="M:NLog.Layouts.SimpleLayout.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.SimpleLayout" /> class.
            </summary>
    </member>
    <member name="M:NLog.Layouts.SimpleLayout.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.SimpleLayout" /> class.
            </summary>
      <param name="txt">The layout string to parse.</param>
    </member>
    <member name="M:NLog.Layouts.SimpleLayout.#ctor(System.String,NLog.Config.ConfigurationItemFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.SimpleLayout" /> class.
            </summary>
      <param name="txt">The layout string to parse.</param>
      <param name="configurationItemFactory">The NLog factories to use when creating references to layout renderers.</param>
    </member>
    <member name="M:NLog.Layouts.SimpleLayout.op_Implicit(System.String)~NLog.Layouts.SimpleLayout">
      <summary>
            Converts a text to a simple layout.
            </summary>
      <param name="text">Text to be converted.</param>
      <returns>A <see cref="T:NLog.Layouts.SimpleLayout" /> object.</returns>
    </member>
    <member name="M:NLog.Layouts.SimpleLayout.Escape(System.String)">
      <summary>
            Escapes the passed text so that it can
            be used literally in all places where
            layout is normally expected without being
            treated as layout.
            </summary>
      <param name="text">The text to be escaped.</param>
      <returns>The escaped text.</returns>
      <remarks>
            Escaping is done by replacing all occurences of
            '${' with '${literal:text=${}'
            </remarks>
    </member>
    <member name="M:NLog.Layouts.SimpleLayout.Evaluate(System.String,NLog.LogEventInfo)">
      <summary>
            Evaluates the specified text by expadinging all layout renderers.
            </summary>
      <param name="text">The text to be evaluated.</param>
      <param name="logEvent">Log event to be used for evaluation.</param>
      <returns>The input text with all occurences of ${} replaced with
            values provided by the appropriate layout renderers.</returns>
    </member>
    <member name="M:NLog.Layouts.SimpleLayout.Evaluate(System.String)">
      <summary>
            Evaluates the specified text by expadinging all layout renderers
            in new <see cref="T:NLog.LogEventInfo" /> context.
            </summary>
      <param name="text">The text to be evaluated.</param>
      <returns>The input text with all occurences of ${} replaced with
            values provided by the appropriate layout renderers.</returns>
    </member>
    <member name="M:NLog.Layouts.SimpleLayout.ToString">
      <summary>
            Returns a <see cref="T:System.String"></see> that represents the current object.
            </summary>
      <returns>
            A <see cref="T:System.String"></see> that represents the current object.
            </returns>
    </member>
    <member name="M:NLog.Layouts.SimpleLayout.GetFormattedMessage(NLog.LogEventInfo)">
      <summary>
            Renders the layout for the specified logging event by invoking layout renderers
            that make up the event.
            </summary>
      <param name="logEvent">The logging event.</param>
      <returns>The rendered layout.</returns>
    </member>
    <member name="P:NLog.Layouts.SimpleLayout.Text">
      <summary>
            Gets or sets the layout text.
            </summary>
      <docgen category="Layout Options" order="10" />
    </member>
    <member name="P:NLog.Layouts.SimpleLayout.Renderers">
      <summary>
            Gets a collection of <see cref="T:NLog.LayoutRenderers.LayoutRenderer" /> objects that make up this layout.
            </summary>
    </member>
    <member name="T:NLog.LogEventInfo">
      <summary>
            Represents the logging event.
            </summary>
    </member>
    <member name="F:NLog.LogEventInfo.ZeroDate">
      <summary>
            Gets the date of the first log event created.
            </summary>
    </member>
    <member name="M:NLog.LogEventInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogEventInfo" /> class.
            </summary>
    </member>
    <member name="M:NLog.LogEventInfo.#ctor(NLog.LogLevel,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogEventInfo" /> class.
            </summary>
      <param name="level">Log level.</param>
      <param name="loggerName">Logger name.</param>
      <param name="message">Log message including parameter placeholders.</param>
    </member>
    <member name="M:NLog.LogEventInfo.#ctor(NLog.LogLevel,System.String,System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogEventInfo" /> class.
            </summary>
      <param name="level">Log level.</param>
      <param name="loggerName">Logger name.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">Log message including parameter placeholders.</param>
      <param name="parameters">Parameter array.</param>
    </member>
    <member name="M:NLog.LogEventInfo.#ctor(NLog.LogLevel,System.String,System.IFormatProvider,System.String,System.Object[],System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogEventInfo" /> class.
            </summary>
      <param name="level">Log level.</param>
      <param name="loggerName">Logger name.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">Log message including parameter placeholders.</param>
      <param name="parameters">Parameter array.</param>
      <param name="exception">Exception information.</param>
    </member>
    <member name="M:NLog.LogEventInfo.CreateNullEvent">
      <summary>
            Creates the null event.
            </summary>
      <returns>Null log event.</returns>
    </member>
    <member name="M:NLog.LogEventInfo.Create(NLog.LogLevel,System.String,System.String)">
      <summary>
            Creates the log event.
            </summary>
      <param name="logLevel">The log level.</param>
      <param name="loggerName">Name of the logger.</param>
      <param name="message">The message.</param>
      <returns>Instance of <see cref="T:NLog.LogEventInfo" />.</returns>
    </member>
    <member name="M:NLog.LogEventInfo.Create(NLog.LogLevel,System.String,System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Creates the log event.
            </summary>
      <param name="logLevel">The log level.</param>
      <param name="loggerName">Name of the logger.</param>
      <param name="formatProvider">The format provider.</param>
      <param name="message">The message.</param>
      <param name="parameters">The parameters.</param>
      <returns>Instance of <see cref="T:NLog.LogEventInfo" />.</returns>
    </member>
    <member name="M:NLog.LogEventInfo.Create(NLog.LogLevel,System.String,System.IFormatProvider,System.Object)">
      <summary>
            Creates the log event.
            </summary>
      <param name="logLevel">The log level.</param>
      <param name="loggerName">Name of the logger.</param>
      <param name="formatProvider">The format provider.</param>
      <param name="message">The message.</param>
      <returns>Instance of <see cref="T:NLog.LogEventInfo" />.</returns>
    </member>
    <member name="M:NLog.LogEventInfo.Create(NLog.LogLevel,System.String,System.String,System.Exception)">
      <summary>
            Creates the log event.
            </summary>
      <param name="logLevel">The log level.</param>
      <param name="loggerName">Name of the logger.</param>
      <param name="message">The message.</param>
      <param name="exception">The exception.</param>
      <returns>Instance of <see cref="T:NLog.LogEventInfo" />.</returns>
    </member>
    <member name="M:NLog.LogEventInfo.WithContinuation(NLog.Common.AsyncContinuation)">
      <summary>
            Creates <see cref="T:NLog.Common.AsyncLogEventInfo" /> from this <see cref="T:NLog.LogEventInfo" /> by attaching the specified asynchronous continuation.
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
      <returns>Instance of <see cref="T:NLog.Common.AsyncLogEventInfo" /> with attached continuation.</returns>
    </member>
    <member name="M:NLog.LogEventInfo.ToString">
      <summary>
            Returns a string representation of this log event.
            </summary>
      <returns>String representation of the log event.</returns>
    </member>
    <member name="M:NLog.LogEventInfo.SetStackTrace(System.Diagnostics.StackTrace,System.Int32)">
      <summary>
            Sets the stack trace for the event info.
            </summary>
      <param name="stackTrace">The stack trace.</param>
      <param name="userStackFrame">Index of the first user stack frame within the stack trace.</param>
    </member>
    <member name="P:NLog.LogEventInfo.SequenceID">
      <summary>
            Gets the unique identifier of log event which is automatically generated
            and monotonously increasing.
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.TimeStamp">
      <summary>
            Gets or sets the timestamp of the logging event.
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.Level">
      <summary>
            Gets or sets the level of the logging event.
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.HasStackTrace">
      <summary>
            Gets a value indicating whether stack trace has been set for this event.
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.UserStackFrame">
      <summary>
            Gets the stack frame of the method that did the logging.
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.UserStackFrameNumber">
      <summary>
            Gets the number index of the stack frame that represents the user
            code (not the NLog code).
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.StackTrace">
      <summary>
            Gets the entire stack trace.
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.Exception">
      <summary>
            Gets or sets the exception information.
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.LoggerName">
      <summary>
            Gets or sets the logger name.
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.LoggerShortName">
      <summary>
            Gets the logger short name.
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.Message">
      <summary>
            Gets or sets the log message including any parameter placeholders.
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.Parameters">
      <summary>
            Gets or sets the parameter values or null if no parameters have been specified.
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.FormatProvider">
      <summary>
            Gets or sets the format provider that was provided while logging or <see langword="null" />
            when no formatProvider was specified.
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.FormattedMessage">
      <summary>
            Gets the formatted message.
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.Properties">
      <summary>
            Gets the dictionary of per-event context properties.
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.Context">
      <summary>
            Gets the dictionary of per-event context properties.
            </summary>
    </member>
    <member name="T:NLog.LogFactory">
      <summary>
            Creates and manages instances of <see cref="T:NLog.Logger" /> objects.
            </summary>
    </member>
    <member name="T:NLog.LogFactory.LoggerCacheKey">
      <summary>
            Logger cache key.
            </summary>
    </member>
    <member name="M:NLog.LogFactory.LoggerCacheKey.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:NLog.LogFactory.LoggerCacheKey.Equals(System.Object)">
      <summary>
            Determines if two objects are equal in value.
            </summary>
      <param name="o">Other object to compare to.</param>
      <returns>True if objects are equal, false otherwise.</returns>
    </member>
    <member name="T:NLog.LogFactory.LogEnabler">
      <summary>
            Enables logging in <see cref="M:System.IDisposable.Dispose" /> implementation.
            </summary>
    </member>
    <member name="M:NLog.LogFactory.LogEnabler.#ctor(NLog.LogFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogFactory.LogEnabler" /> class.
            </summary>
      <param name="factory">The factory.</param>
    </member>
    <member name="M:NLog.LogFactory.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogFactory" /> class.
            </summary>
    </member>
    <member name="M:NLog.LogFactory.#ctor(NLog.Config.LoggingConfiguration)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogFactory" /> class.
            </summary>
      <param name="config">The config.</param>
    </member>
    <member name="M:NLog.LogFactory.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:NLog.LogFactory.CreateNullLogger">
      <summary>
            Creates a logger that discards all log messages.
            </summary>
      <returns>Null logger instance.</returns>
    </member>
    <member name="M:NLog.LogFactory.GetCurrentClassLogger">
      <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
      <returns>The logger.</returns>
      <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
    </member>
    <member name="M:NLog.LogFactory.GetCurrentClassLogger(System.Type)">
      <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
      <param name="loggerType">The type of the logger to create. The type must inherit from NLog.Logger.</param>
      <returns>The logger.</returns>
      <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
    </member>
    <member name="M:NLog.LogFactory.GetLogger(System.String)">
      <summary>
            Gets the specified named logger.
            </summary>
      <param name="name">Name of the logger.</param>
      <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the same argument aren't guaranteed to return the same logger reference.</returns>
    </member>
    <member name="M:NLog.LogFactory.GetLogger(System.String,System.Type)">
      <summary>
            Gets the specified named logger.
            </summary>
      <param name="name">Name of the logger.</param>
      <param name="loggerType">The type of the logger to create. The type must inherit from NLog.Logger.</param>
      <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the 
            same argument aren't guaranteed to return the same logger reference.</returns>
    </member>
    <member name="M:NLog.LogFactory.ReconfigExistingLoggers">
      <summary>
            Loops through all loggers previously returned by GetLogger
            and recalculates their target and filter list. Useful after modifying the configuration programmatically
            to ensure that all loggers have been properly configured.
            </summary>
    </member>
    <member name="M:NLog.LogFactory.Flush">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
    </member>
    <member name="M:NLog.LogFactory.Flush(System.TimeSpan)">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
      <param name="timeout">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
    </member>
    <member name="M:NLog.LogFactory.Flush(System.Int32)">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
      <param name="timeoutMilliseconds">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
    </member>
    <member name="M:NLog.LogFactory.Flush(NLog.Common.AsyncContinuation)">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
    </member>
    <member name="M:NLog.LogFactory.Flush(NLog.Common.AsyncContinuation,System.Int32)">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
      <param name="timeoutMilliseconds">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
    </member>
    <member name="M:NLog.LogFactory.Flush(NLog.Common.AsyncContinuation,System.TimeSpan)">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
      <param name="timeout">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
    </member>
    <member name="M:NLog.LogFactory.DisableLogging">
      <summary>Decreases the log enable counter and if it reaches -1 
            the logs are disabled.</summary>
      <remarks>Logging is enabled if the number of <see cref="M:NLog.LogFactory.EnableLogging" /> calls is greater 
            than or equal to <see cref="M:NLog.LogFactory.DisableLogging" /> calls.</remarks>
      <returns>An object that iplements IDisposable whose Dispose() method
            reenables logging. To be used with C# <c>using ()</c> statement.</returns>
    </member>
    <member name="M:NLog.LogFactory.EnableLogging">
      <summary>Increases the log enable counter and if it reaches 0 the logs are disabled.</summary>
      <remarks>Logging is enabled if the number of <see cref="M:NLog.LogFactory.EnableLogging" /> calls is greater 
            than or equal to <see cref="M:NLog.LogFactory.DisableLogging" /> calls.</remarks>
    </member>
    <member name="M:NLog.LogFactory.IsLoggingEnabled">
      <summary>
            Returns <see langword="true" /> if logging is currently enabled.
            </summary>
      <returns>A value of <see langword="true" /> if logging is currently enabled, 
            <see langword="false" /> otherwise.</returns>
      <remarks>Logging is enabled if the number of <see cref="M:NLog.LogFactory.EnableLogging" /> calls is greater 
            than or equal to <see cref="M:NLog.LogFactory.DisableLogging" /> calls.</remarks>
    </member>
    <member name="M:NLog.LogFactory.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
      <param name="disposing">True to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:NLog.LogFactory.CurrentAppDomain">
      <summary>
            Gets the current <see cref="T:NLog.Internal.Fakeables.IAppDomain" />.
            </summary>
    </member>
    <member name="P:NLog.LogFactory.ThrowExceptions">
      <summary>
            Gets or sets a value indicating whether exceptions should be thrown.
            </summary>
      <value>A value of <c>true</c> if exceptiosn should be thrown; otherwise, <c>false</c>.</value>
      <remarks>By default exceptions
            are not thrown under any circumstances.
            </remarks>
    </member>
    <member name="P:NLog.LogFactory.Configuration">
      <summary>
            Gets or sets the current logging configuration.
            </summary>
    </member>
    <member name="P:NLog.LogFactory.GlobalThreshold">
      <summary>
            Gets or sets the global log threshold. Log events below this threshold are not logged.
            </summary>
    </member>
    <member name="E:NLog.LogFactory.ConfigurationChanged">
      <summary>
            Occurs when logging <see cref="P:NLog.LogFactory.Configuration" /> changes.
            </summary>
    </member>
    <member name="E:NLog.LogFactory.ConfigurationReloaded">
      <summary>
            Occurs when logging <see cref="P:NLog.LogFactory.Configuration" /> gets reloaded.
            </summary>
    </member>
    <member name="T:NLog.LogFactory`1">
      <summary>
            Specialized LogFactory that can return instances of custom logger types.
            </summary>
      <typeparam name="T">The type of the logger to be returned. Must inherit from <see cref="T:NLog.Logger" />.</typeparam>
    </member>
    <member name="M:NLog.LogFactory`1.GetLogger(System.String)">
      <summary>
            Gets the logger.
            </summary>
      <param name="name">The logger name.</param>
      <returns>An instance of <typeparamref name="T" />.</returns>
    </member>
    <member name="M:NLog.LogFactory`1.GetCurrentClassLogger">
      <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
      <returns>The logger.</returns>
      <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
    </member>
    <member name="T:NLog.Logger">
      <summary>
            Provides logging interface and utility functions.
            </summary>
      <content>
            Auto-generated Logger members for binary compatibility with NLog 1.0.
            </content>
    </member>
    <member name="M:NLog.Logger.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Logger" /> class.
            </summary>
    </member>
    <member name="M:NLog.Logger.IsEnabled(NLog.LogLevel)">
      <summary>
            Gets a value indicating whether logging is enabled for the specified level.
            </summary>
      <param name="level">Log level to be checked.</param>
      <returns>A value of <see langword="true" /> if logging is enabled for the specified level, otherwise it returns <see langword="false" />.</returns>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogEventInfo)">
      <summary>
            Writes the specified diagnostic message.
            </summary>
      <param name="logEvent">Log event.</param>
    </member>
    <member name="M:NLog.Logger.Log(System.Type,NLog.LogEventInfo)">
      <summary>
            Writes the specified diagnostic message.
            </summary>
      <param name="wrapperType">The name of the type that wraps Logger.</param>
      <param name="logEvent">Log event.</param>
    </member>
    <member name="M:NLog.Logger.Log``1(NLog.LogLevel,``0)">
      <overloads>
            Writes the diagnostic message at the specified level using the specified format provider and format parameters.
            </overloads>
      <summary>
            Writes the diagnostic message at the specified level.
            </summary>
      <typeparam name="T">Type of the value.</typeparam>
      <param name="level">The log level.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:NLog.Logger.Log``1(NLog.LogLevel,System.IFormatProvider,``0)">
      <summary>
            Writes the diagnostic message at the specified level.
            </summary>
      <typeparam name="T">Type of the value.</typeparam>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,NLog.LogMessageGenerator)">
      <summary>
            Writes the diagnostic message at the specified level.
            </summary>
      <param name="level">The log level.</param>
      <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
    </member>
    <member name="M:NLog.Logger.LogException(NLog.LogLevel,System.String,System.Exception)">
      <summary>
            Writes the diagnostic message and exception at the specified level.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> to be written.</param>
      <param name="exception">An exception to be logged.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Writes the diagnostic message at the specified level using the specified parameters and formatting them with the supplied format provider.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="args">Arguments to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String)">
      <summary>
            Writes the diagnostic message at the specified level.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">Log message.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object[])">
      <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="args">Arguments to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Exception)">
      <summary>
            Writes the diagnostic message and exception at the specified level.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> to be written.</param>
      <param name="exception">An exception to be logged.</param>
    </member>
    <member name="M:NLog.Logger.Log``1(NLog.LogLevel,System.IFormatProvider,System.String,``0)">
      <summary>
            Writes the diagnostic message at the specified level using the specified parameter and formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log``1(NLog.LogLevel,System.String,``0)">
      <summary>
            Writes the diagnostic message at the specified level using the specified parameter.
            </summary>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log``2(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1)">
      <summary>
            Writes the diagnostic message at the specified level using the specified arguments formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log``2(NLog.LogLevel,System.String,``0,``1)">
      <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log``3(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1,``2)">
      <summary>
            Writes the diagnostic message at the specified level using the specified arguments formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <typeparam name="TArgument3">The type of the third argument.</typeparam>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
      <param name="argument3">The third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log``3(NLog.LogLevel,System.String,``0,``1,``2)">
      <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <typeparam name="TArgument3">The type of the third argument.</typeparam>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
      <param name="argument3">The third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace``1(``0)">
      <overloads>
            Writes the diagnostic message at the <c>Trace</c> level using the specified format provider and format parameters.
            </overloads>
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
      <typeparam name="T">Type of the value.</typeparam>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:NLog.Logger.Trace``1(System.IFormatProvider,``0)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
      <typeparam name="T">Type of the value.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:NLog.Logger.Trace(NLog.LogMessageGenerator)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
      <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
    </member>
    <member name="M:NLog.Logger.TraceException(System.String,System.Exception)">
      <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
      <param name="exception">An exception to be logged.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="args">Arguments to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
      <param name="message">Log message.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.Object[])">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="args">Arguments to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.Exception)">
      <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
      <param name="exception">An exception to be logged.</param>
    </member>
    <member name="M:NLog.Logger.Trace``1(System.IFormatProvider,System.String,``0)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace``1(System.String,``0)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameter.
            </summary>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace``2(System.IFormatProvider,System.String,``0,``1)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace``2(System.String,``0,``1)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace``3(System.IFormatProvider,System.String,``0,``1,``2)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <typeparam name="TArgument3">The type of the third argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
      <param name="argument3">The third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace``3(System.String,``0,``1,``2)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <typeparam name="TArgument3">The type of the third argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
      <param name="argument3">The third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug``1(``0)">
      <overloads>
            Writes the diagnostic message at the <c>Debug</c> level using the specified format provider and format parameters.
            </overloads>
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
      <typeparam name="T">Type of the value.</typeparam>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:NLog.Logger.Debug``1(System.IFormatProvider,``0)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
      <typeparam name="T">Type of the value.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:NLog.Logger.Debug(NLog.LogMessageGenerator)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
      <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
    </member>
    <member name="M:NLog.Logger.DebugException(System.String,System.Exception)">
      <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
      <param name="exception">An exception to be logged.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="args">Arguments to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
      <param name="message">Log message.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.Object[])">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="args">Arguments to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.Exception)">
      <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
      <param name="exception">An exception to be logged.</param>
    </member>
    <member name="M:NLog.Logger.Debug``1(System.IFormatProvider,System.String,``0)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug``1(System.String,``0)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameter.
            </summary>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug``2(System.IFormatProvider,System.String,``0,``1)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug``2(System.String,``0,``1)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug``3(System.IFormatProvider,System.String,``0,``1,``2)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <typeparam name="TArgument3">The type of the third argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
      <param name="argument3">The third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug``3(System.String,``0,``1,``2)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <typeparam name="TArgument3">The type of the third argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
      <param name="argument3">The third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info``1(``0)">
      <overloads>
            Writes the diagnostic message at the <c>Info</c> level using the specified format provider and format parameters.
            </overloads>
      <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
      <typeparam name="T">Type of the value.</typeparam>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:NLog.Logger.Info``1(System.IFormatProvider,``0)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
      <typeparam name="T">Type of the value.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:NLog.Logger.Info(NLog.LogMessageGenerator)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
      <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
    </member>
    <member name="M:NLog.Logger.InfoException(System.String,System.Exception)">
      <summary>
            Writes the diagnostic message and exception at the <c>Info</c> level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
      <param name="exception">An exception to be logged.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="args">Arguments to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
      <param name="message">Log message.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.Object[])">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="args">Arguments to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.Exception)">
      <summary>
            Writes the diagnostic message and exception at the <c>Info</c> level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
      <param name="exception">An exception to be logged.</param>
    </member>
    <member name="M:NLog.Logger.Info``1(System.IFormatProvider,System.String,``0)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info``1(System.String,``0)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameter.
            </summary>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info``2(System.IFormatProvider,System.String,``0,``1)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info``2(System.String,``0,``1)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info``3(System.IFormatProvider,System.String,``0,``1,``2)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <typeparam name="TArgument3">The type of the third argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
      <param name="argument3">The third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info``3(System.String,``0,``1,``2)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <typeparam name="TArgument3">The type of the third argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
      <param name="argument3">The third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn``1(``0)">
      <overloads>
            Writes the diagnostic message at the <c>Warn</c> level using the specified format provider and format parameters.
            </overloads>
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
      <typeparam name="T">Type of the value.</typeparam>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:NLog.Logger.Warn``1(System.IFormatProvider,``0)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
      <typeparam name="T">Type of the value.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:NLog.Logger.Warn(NLog.LogMessageGenerator)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
      <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
    </member>
    <member name="M:NLog.Logger.WarnException(System.String,System.Exception)">
      <summary>
            Writes the diagnostic message and exception at the <c>Warn</c> level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
      <param name="exception">An exception to be logged.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="args">Arguments to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
      <param name="message">Log message.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.Object[])">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="args">Arguments to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.Exception)">
      <summary>
            Writes the diagnostic message and exception at the <c>Warn</c> level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
      <param name="exception">An exception to be logged.</param>
    </member>
    <member name="M:NLog.Logger.Warn``1(System.IFormatProvider,System.String,``0)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn``1(System.String,``0)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameter.
            </summary>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn``2(System.IFormatProvider,System.String,``0,``1)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn``2(System.String,``0,``1)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn``3(System.IFormatProvider,System.String,``0,``1,``2)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <typeparam name="TArgument3">The type of the third argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
      <param name="argument3">The third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn``3(System.String,``0,``1,``2)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <typeparam name="TArgument3">The type of the third argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
      <param name="argument3">The third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error``1(``0)">
      <overloads>
            Writes the diagnostic message at the <c>Error</c> level using the specified format provider and format parameters.
            </overloads>
      <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
      <typeparam name="T">Type of the value.</typeparam>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:NLog.Logger.Error``1(System.IFormatProvider,``0)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
      <typeparam name="T">Type of the value.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:NLog.Logger.Error(NLog.LogMessageGenerator)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
      <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
    </member>
    <member name="M:NLog.Logger.ErrorException(System.String,System.Exception)">
      <summary>
            Writes the diagnostic message and exception at the <c>Error</c> level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
      <param name="exception">An exception to be logged.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="args">Arguments to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
      <param name="message">Log message.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.Object[])">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="args">Arguments to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.Exception)">
      <summary>
            Writes the diagnostic message and exception at the <c>Error</c> level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
      <param name="exception">An exception to be logged.</param>
    </member>
    <member name="M:NLog.Logger.Error``1(System.IFormatProvider,System.String,``0)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error``1(System.String,``0)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameter.
            </summary>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error``2(System.IFormatProvider,System.String,``0,``1)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error``2(System.String,``0,``1)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error``3(System.IFormatProvider,System.String,``0,``1,``2)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <typeparam name="TArgument3">The type of the third argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
      <param name="argument3">The third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error``3(System.String,``0,``1,``2)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <typeparam name="TArgument3">The type of the third argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
      <param name="argument3">The third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal``1(``0)">
      <overloads>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified format provider and format parameters.
            </overloads>
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
      <typeparam name="T">Type of the value.</typeparam>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:NLog.Logger.Fatal``1(System.IFormatProvider,``0)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
      <typeparam name="T">Type of the value.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(NLog.LogMessageGenerator)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
      <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
    </member>
    <member name="M:NLog.Logger.FatalException(System.String,System.Exception)">
      <summary>
            Writes the diagnostic message and exception at the <c>Fatal</c> level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
      <param name="exception">An exception to be logged.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="args">Arguments to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
      <param name="message">Log message.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.Object[])">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="args">Arguments to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.Exception)">
      <summary>
            Writes the diagnostic message and exception at the <c>Fatal</c> level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
      <param name="exception">An exception to be logged.</param>
    </member>
    <member name="M:NLog.Logger.Fatal``1(System.IFormatProvider,System.String,``0)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal``1(System.String,``0)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameter.
            </summary>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal``2(System.IFormatProvider,System.String,``0,``1)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal``2(System.String,``0,``1)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal``3(System.IFormatProvider,System.String,``0,``1,``2)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <typeparam name="TArgument3">The type of the third argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
      <param name="argument3">The third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal``3(System.String,``0,``1,``2)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <typeparam name="TArgument3">The type of the third argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
      <param name="argument3">The third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Swallow(System.Action)">
      <summary>
            Runs action. If the action throws, the exception is logged at <c>Error</c> level. Exception is not propagated outside of this method.
            </summary>
      <param name="action">Action to execute.</param>
    </member>
    <member name="M:NLog.Logger.Swallow``1(System.Func{``0})">
      <summary>
            Runs the provided function and returns its result. If exception is thrown, it is logged at <c>Error</c> level.
            Exception is not propagated outside of this method. Fallback value is returned instead.
            </summary>
      <typeparam name="T">Return type of the provided function.</typeparam>
      <param name="func">Function to run.</param>
      <returns>Result returned by the provided function or fallback value in case of exception.</returns>
    </member>
    <member name="M:NLog.Logger.Swallow``1(System.Func{``0},``0)">
      <summary>
            Runs the provided function and returns its result. If exception is thrown, it is logged at <c>Error</c> level.
            Exception is not propagated outside of this method. Fallback value is returned instead.
            </summary>
      <typeparam name="T">Return type of the provided function.</typeparam>
      <param name="func">Function to run.</param>
      <param name="fallback">Fallback value to return in case of exception. Defaults to default value of type T.</param>
      <returns>Result returned by the provided function or fallback value in case of exception.</returns>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.Object)">
      <summary>
            Writes the diagnostic message at the specified level.
            </summary>
      <param name="level">The log level.</param>
      <param name="value">A <see langword="object" /> to be written.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.Object)">
      <summary>
            Writes the diagnostic message at the specified level.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="value">A <see langword="object" /> to be written.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object,System.Object)">
      <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="arg1">First argument to format.</param>
      <param name="arg2">Second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object,System.Object,System.Object)">
      <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="arg1">First argument to format.</param>
      <param name="arg2">Second argument to format.</param>
      <param name="arg3">Third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Boolean)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Boolean)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Char)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Char)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Byte)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Byte)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.String)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.String)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int32)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Int32)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int64)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Int64)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Single)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Single)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Double)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Double)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Decimal)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Decimal)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.SByte)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.SByte)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt32)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.UInt32)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt64)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.UInt64)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
      <param name="value">A <see langword="object" /> to be written.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="value">A <see langword="object" /> to be written.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.Object,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="arg1">First argument to format.</param>
      <param name="arg2">Second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="arg1">First argument to format.</param>
      <param name="arg2">Second argument to format.</param>
      <param name="arg3">Third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Boolean)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.Boolean)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Char)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.Char)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Byte)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.Byte)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.String)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.String)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Int32)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.Int32)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Int64)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.Int64)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Single)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.Single)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Double)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.Double)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Decimal)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.Decimal)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.SByte)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.SByte)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.UInt32)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.UInt32)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.UInt64)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.UInt64)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
      <param name="value">A <see langword="object" /> to be written.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="value">A <see langword="object" /> to be written.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.Object,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="arg1">First argument to format.</param>
      <param name="arg2">Second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="arg1">First argument to format.</param>
      <param name="arg2">Second argument to format.</param>
      <param name="arg3">Third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Boolean)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.Boolean)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Char)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.Char)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Byte)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.Byte)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.String)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.String)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Int32)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.Int32)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Int64)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.Int64)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Single)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.Single)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Double)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.Double)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Decimal)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.Decimal)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.SByte)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.SByte)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.UInt32)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.UInt32)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.UInt64)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.UInt64)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
      <param name="value">A <see langword="object" /> to be written.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="value">A <see langword="object" /> to be written.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.Object,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="arg1">First argument to format.</param>
      <param name="arg2">Second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="arg1">First argument to format.</param>
      <param name="arg2">Second argument to format.</param>
      <param name="arg3">Third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Boolean)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.Boolean)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Char)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.Char)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Byte)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.Byte)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.String)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.String)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Int32)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.Int32)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Int64)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.Int64)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Single)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.Single)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Double)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.Double)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Decimal)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.Decimal)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.SByte)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.SByte)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.UInt32)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.UInt32)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.UInt64)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.UInt64)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
      <param name="value">A <see langword="object" /> to be written.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="value">A <see langword="object" /> to be written.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.Object,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="arg1">First argument to format.</param>
      <param name="arg2">Second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="arg1">First argument to format.</param>
      <param name="arg2">Second argument to format.</param>
      <param name="arg3">Third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Boolean)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.Boolean)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Char)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.Char)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Byte)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.Byte)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.String)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.String)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Int32)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.Int32)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Int64)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.Int64)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Single)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.Single)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Double)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.Double)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Decimal)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.Decimal)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.SByte)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.SByte)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.UInt32)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.UInt32)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.UInt64)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.UInt64)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
      <param name="value">A <see langword="object" /> to be written.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="value">A <see langword="object" /> to be written.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.Object,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="arg1">First argument to format.</param>
      <param name="arg2">Second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="arg1">First argument to format.</param>
      <param name="arg2">Second argument to format.</param>
      <param name="arg3">Third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Boolean)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.Boolean)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Char)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.Char)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Byte)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.Byte)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.String)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.String)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Int32)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.Int32)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Int64)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.Int64)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Single)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.Single)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Double)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.Double)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Decimal)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.Decimal)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.SByte)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.SByte)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.UInt32)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.UInt32)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.UInt64)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.UInt64)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
      <param name="value">A <see langword="object" /> to be written.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="value">A <see langword="object" /> to be written.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.Object,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="arg1">First argument to format.</param>
      <param name="arg2">Second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="arg1">First argument to format.</param>
      <param name="arg2">Second argument to format.</param>
      <param name="arg3">Third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Boolean)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.Boolean)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Char)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.Char)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Byte)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.Byte)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.String)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.String)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Int32)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.Int32)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Int64)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.Int64)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Single)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.Single)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Double)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.Double)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Decimal)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.Decimal)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.SByte)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.SByte)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.UInt32)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.UInt32)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.UInt64)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.UInt64)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="P:NLog.Logger.Name">
      <summary>
            Gets the name of the logger.
            </summary>
    </member>
    <member name="P:NLog.Logger.Factory">
      <summary>
            Gets the factory that created this logger.
            </summary>
    </member>
    <member name="P:NLog.Logger.IsTraceEnabled">
      <summary>
            Gets a value indicating whether logging is enabled for the <c>Trace</c> level.
            </summary>
      <returns>A value of <see langword="true" /> if logging is enabled for the <c>Trace</c> level, otherwise it returns <see langword="false" />.</returns>
    </member>
    <member name="P:NLog.Logger.IsDebugEnabled">
      <summary>
            Gets a value indicating whether logging is enabled for the <c>Debug</c> level.
            </summary>
      <returns>A value of <see langword="true" /> if logging is enabled for the <c>Debug</c> level, otherwise it returns <see langword="false" />.</returns>
    </member>
    <member name="P:NLog.Logger.IsInfoEnabled">
      <summary>
            Gets a value indicating whether logging is enabled for the <c>Info</c> level.
            </summary>
      <returns>A value of <see langword="true" /> if logging is enabled for the <c>Info</c> level, otherwise it returns <see langword="false" />.</returns>
    </member>
    <member name="P:NLog.Logger.IsWarnEnabled">
      <summary>
            Gets a value indicating whether logging is enabled for the <c>Warn</c> level.
            </summary>
      <returns>A value of <see langword="true" /> if logging is enabled for the <c>Warn</c> level, otherwise it returns <see langword="false" />.</returns>
    </member>
    <member name="P:NLog.Logger.IsErrorEnabled">
      <summary>
            Gets a value indicating whether logging is enabled for the <c>Error</c> level.
            </summary>
      <returns>A value of <see langword="true" /> if logging is enabled for the <c>Error</c> level, otherwise it returns <see langword="false" />.</returns>
    </member>
    <member name="P:NLog.Logger.IsFatalEnabled">
      <summary>
            Gets a value indicating whether logging is enabled for the <c>Fatal</c> level.
            </summary>
      <returns>A value of <see langword="true" /> if logging is enabled for the <c>Fatal</c> level, otherwise it returns <see langword="false" />.</returns>
    </member>
    <member name="E:NLog.Logger.LoggerReconfigured">
      <summary>
            Occurs when logger configuration changes.
            </summary>
    </member>
    <member name="T:NLog.LoggerImpl">
      <summary>
            Implementation of logging engine.
            </summary>
    </member>
    <member name="M:NLog.LoggerImpl.FindCallingMethodOnStackTrace(System.Diagnostics.StackTrace,System.Type)">
      <summary>
             Finds first user stack frame in a stack trace
            </summary>
      <param name="stackTrace">The stack trace of the logging method invocation</param>
      <param name="loggerType">Type of the logger or logger wrapper</param>
      <returns>Index of the first user stack frame or 0 if all stack frames are non-user</returns>
      <seealso cref="M:NLog.LoggerImpl.IsNonUserStackFrame(System.Reflection.MethodBase,System.Type)" />
    </member>
    <member name="M:NLog.LoggerImpl.IsNonUserStackFrame(System.Reflection.MethodBase,System.Type)">
      <summary>
             Defines whether a stack frame belongs to non-user code
            </summary>
      <param name="method">Method of the stack frame</param>
      <param name="loggerType">Type of the logger or logger wrapper</param>
      <returns>
        <see langword="true" />, if the method is from non-user code and should be skipped</returns>
      <remarks>
             The method is classified as non-user if its declaring assembly is from hidden assemblies list
             or its declaring type is <paramref name="loggerType" /> or one of its subtypes.
            </remarks>
    </member>
    <member name="M:NLog.LoggerImpl.GetFilterResult(System.Collections.Generic.IEnumerable{NLog.Filters.Filter},NLog.LogEventInfo)">
      <summary>
            Gets the filter result.
            </summary>
      <param name="filterChain">The filter chain.</param>
      <param name="logEvent">The log event.</param>
      <returns>The result of the filter.</returns>
    </member>
    <member name="T:NLog.LogLevel">
      <summary>
            Defines available log levels.
            </summary>
    </member>
    <member name="F:NLog.LogLevel.Trace">
      <summary>
            Trace log level.
            </summary>
    </member>
    <member name="F:NLog.LogLevel.Debug">
      <summary>
            Debug log level.
            </summary>
    </member>
    <member name="F:NLog.LogLevel.Info">
      <summary>
            Info log level.
            </summary>
    </member>
    <member name="F:NLog.LogLevel.Warn">
      <summary>
            Warn log level.
            </summary>
    </member>
    <member name="F:NLog.LogLevel.Error">
      <summary>
            Error log level.
            </summary>
    </member>
    <member name="F:NLog.LogLevel.Fatal">
      <summary>
            Fatal log level.
            </summary>
    </member>
    <member name="F:NLog.LogLevel.Off">
      <summary>
            Off log level.
            </summary>
    </member>
    <member name="M:NLog.LogLevel.#ctor(System.String,System.Int32)">
      <summary>
            Initializes a new instance of <see cref="T:NLog.LogLevel" />.
            </summary>
      <param name="name">The log level name.</param>
      <param name="ordinal">The log level ordinal number.</param>
    </member>
    <member name="M:NLog.LogLevel.op_Equality(NLog.LogLevel,NLog.LogLevel)">
      <summary>
            Compares two <see cref="T:NLog.LogLevel" /> objects 
            and returns a value indicating whether 
            the first one is equal to the second one.
            </summary>
      <param name="level1">The first level.</param>
      <param name="level2">The second level.</param>
      <returns>The value of <c>level1.Ordinal == level2.Ordinal</c>.</returns>
    </member>
    <member name="M:NLog.LogLevel.op_Inequality(NLog.LogLevel,NLog.LogLevel)">
      <summary>
            Compares two <see cref="T:NLog.LogLevel" /> objects 
            and returns a value indicating whether 
            the first one is not equal to the second one.
            </summary>
      <param name="level1">The first level.</param>
      <param name="level2">The second level.</param>
      <returns>The value of <c>level1.Ordinal != level2.Ordinal</c>.</returns>
    </member>
    <member name="M:NLog.LogLevel.op_GreaterThan(NLog.LogLevel,NLog.LogLevel)">
      <summary>
            Compares two <see cref="T:NLog.LogLevel" /> objects 
            and returns a value indicating whether 
            the first one is greater than the second one.
            </summary>
      <param name="level1">The first level.</param>
      <param name="level2">The second level.</param>
      <returns>The value of <c>level1.Ordinal &gt; level2.Ordinal</c>.</returns>
    </member>
    <member name="M:NLog.LogLevel.op_GreaterThanOrEqual(NLog.LogLevel,NLog.LogLevel)">
      <summary>
            Compares two <see cref="T:NLog.LogLevel" /> objects 
            and returns a value indicating whether 
            the first one is greater than or equal to the second one.
            </summary>
      <param name="level1">The first level.</param>
      <param name="level2">The second level.</param>
      <returns>The value of <c>level1.Ordinal &gt;= level2.Ordinal</c>.</returns>
    </member>
    <member name="M:NLog.LogLevel.op_LessThan(NLog.LogLevel,NLog.LogLevel)">
      <summary>
            Compares two <see cref="T:NLog.LogLevel" /> objects 
            and returns a value indicating whether 
            the first one is less than the second one.
            </summary>
      <param name="level1">The first level.</param>
      <param name="level2">The second level.</param>
      <returns>The value of <c>level1.Ordinal &lt; level2.Ordinal</c>.</returns>
    </member>
    <member name="M:NLog.LogLevel.op_LessThanOrEqual(NLog.LogLevel,NLog.LogLevel)">
      <summary>
            Compares two <see cref="T:NLog.LogLevel" /> objects 
            and returns a value indicating whether 
            the first one is less than or equal to the second one.
            </summary>
      <param name="level1">The first level.</param>
      <param name="level2">The second level.</param>
      <returns>The value of <c>level1.Ordinal &lt;= level2.Ordinal</c>.</returns>
    </member>
    <member name="M:NLog.LogLevel.FromOrdinal(System.Int32)">
      <summary>
            Gets the <see cref="T:NLog.LogLevel" /> that corresponds to the specified ordinal.
            </summary>
      <param name="ordinal">The ordinal.</param>
      <returns>The <see cref="T:NLog.LogLevel" /> instance. For 0 it returns <see cref="F:NLog.LogLevel.Trace" />, 1 gives <see cref="F:NLog.LogLevel.Debug" /> and so on.</returns>
    </member>
    <member name="M:NLog.LogLevel.FromString(System.String)">
      <summary>
            Returns the <see cref="T:NLog.LogLevel" /> that corresponds to the supplied <see langword="string" />.
            </summary>
      <param name="levelName">The texual representation of the log level.</param>
      <returns>The enumeration value.</returns>
    </member>
    <member name="M:NLog.LogLevel.ToString">
      <summary>
            Returns a string representation of the log level.
            </summary>
      <returns>Log level name.</returns>
    </member>
    <member name="M:NLog.LogLevel.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="M:NLog.LogLevel.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
            Value of <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
    </member>
    <member name="M:NLog.LogLevel.CompareTo(System.Object)">
      <summary>
            Compares the level to the other <see cref="T:NLog.LogLevel" /> object.
            </summary>
      <param name="obj">
            The object object.
            </param>
      <returns>
            A value less than zero when this logger's <see cref="P:NLog.LogLevel.Ordinal" /> is 
            less than the other logger's ordinal, 0 when they are equal and 
            greater than zero when this ordinal is greater than the
            other ordinal.
            </returns>
    </member>
    <member name="P:NLog.LogLevel.Name">
      <summary>
            Gets the name of the log level.
            </summary>
    </member>
    <member name="P:NLog.LogLevel.Ordinal">
      <summary>
            Gets the ordinal of the log level.
            </summary>
    </member>
    <member name="T:NLog.LogManager">
      <summary>
            Creates and manages instances of <see cref="T:NLog.Logger" /> objects.
            </summary>
    </member>
    <member name="T:NLog.LogManager.GetCultureInfo">
      <summary>
            Delegate used to the the culture to use.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NLog.LogManager.#ctor">
      <summary>
            Prevents a default instance of the LogManager class from being created.
            </summary>
    </member>
    <member name="M:NLog.LogManager.AddHiddenAssembly(System.Reflection.Assembly)">
      <summary>
            Adds the given assembly which will be skipped 
            when NLog is trying to find the calling method on stack trace.
            </summary>
      <param name="assembly">The assembly to skip.</param>
    </member>
    <member name="M:NLog.LogManager.GetCurrentClassLogger">
      <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
      <returns>The logger.</returns>
      <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
    </member>
    <member name="M:NLog.LogManager.GetCurrentClassLogger(System.Type)">
      <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
      <param name="loggerType">The logger class. The class must inherit from <see cref="T:NLog.Logger" />.</param>
      <returns>The logger.</returns>
      <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
    </member>
    <member name="M:NLog.LogManager.CreateNullLogger">
      <summary>
            Creates a logger that discards all log messages.
            </summary>
      <returns>Null logger which discards all log messages.</returns>
    </member>
    <member name="M:NLog.LogManager.GetLogger(System.String)">
      <summary>
            Gets the specified named logger.
            </summary>
      <param name="name">Name of the logger.</param>
      <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the same argument aren't guaranteed to return the same logger reference.</returns>
    </member>
    <member name="M:NLog.LogManager.GetLogger(System.String,System.Type)">
      <summary>
            Gets the specified named logger.
            </summary>
      <param name="name">Name of the logger.</param>
      <param name="loggerType">The logger class. The class must inherit from <see cref="T:NLog.Logger" />.</param>
      <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the same argument aren't guaranteed to return the same logger reference.</returns>
    </member>
    <member name="M:NLog.LogManager.ReconfigExistingLoggers">
      <summary>
            Loops through all loggers previously returned by GetLogger.
            and recalculates their target and filter list. Useful after modifying the configuration programmatically
            to ensure that all loggers have been properly configured.
            </summary>
    </member>
    <member name="M:NLog.LogManager.Flush">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
    </member>
    <member name="M:NLog.LogManager.Flush(System.TimeSpan)">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
      <param name="timeout">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
    </member>
    <member name="M:NLog.LogManager.Flush(System.Int32)">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
      <param name="timeoutMilliseconds">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
    </member>
    <member name="M:NLog.LogManager.Flush(NLog.Common.AsyncContinuation)">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
    </member>
    <member name="M:NLog.LogManager.Flush(NLog.Common.AsyncContinuation,System.TimeSpan)">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
      <param name="timeout">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
    </member>
    <member name="M:NLog.LogManager.Flush(NLog.Common.AsyncContinuation,System.Int32)">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
      <param name="timeoutMilliseconds">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
    </member>
    <member name="M:NLog.LogManager.DisableLogging">
      <summary>Decreases the log enable counter and if it reaches -1 
            the logs are disabled.</summary>
      <remarks>Logging is enabled if the number of <see cref="M:NLog.LogManager.EnableLogging" /> calls is greater 
            than or equal to <see cref="M:NLog.LogManager.DisableLogging" /> calls.</remarks>
      <returns>An object that iplements IDisposable whose Dispose() method
            reenables logging. To be used with C# <c>using ()</c> statement.</returns>
    </member>
    <member name="M:NLog.LogManager.EnableLogging">
      <summary>Increases the log enable counter and if it reaches 0 the logs are disabled.</summary>
      <remarks>Logging is enabled if the number of <see cref="M:NLog.LogManager.EnableLogging" /> calls is greater 
            than or equal to <see cref="M:NLog.LogManager.DisableLogging" /> calls.</remarks>
    </member>
    <member name="M:NLog.LogManager.IsLoggingEnabled">
      <summary>
            Returns <see langword="true" /> if logging is currently enabled.
            </summary>
      <returns>A value of <see langword="true" /> if logging is currently enabled, 
            <see langword="false" /> otherwise.</returns>
      <remarks>Logging is enabled if the number of <see cref="M:NLog.LogManager.EnableLogging" /> calls is greater 
            than or equal to <see cref="M:NLog.LogManager.DisableLogging" /> calls.</remarks>
    </member>
    <member name="M:NLog.LogManager.Shutdown">
      <summary>
            Dispose all targets, and shutdown logging.
            </summary>
    </member>
    <member name="P:NLog.LogManager.ThrowExceptions">
      <summary>
            Gets or sets a value indicating whether NLog should throw exceptions. 
            By default exceptions are not thrown under any circumstances.
            </summary>
    </member>
    <member name="P:NLog.LogManager.Configuration">
      <summary>
            Gets or sets the current logging configuration.
            </summary>
    </member>
    <member name="P:NLog.LogManager.GlobalThreshold">
      <summary>
            Gets or sets the global log threshold. Log events below this threshold are not logged.
            </summary>
    </member>
    <member name="P:NLog.LogManager.DefaultCultureInfo">
      <summary>
            Gets or sets the default culture to use.
            </summary>
    </member>
    <member name="E:NLog.LogManager.ConfigurationChanged">
      <summary>
            Occurs when logging <see cref="P:NLog.LogManager.Configuration" /> changes.
            </summary>
    </member>
    <member name="E:NLog.LogManager.ConfigurationReloaded">
      <summary>
            Occurs when logging <see cref="P:NLog.LogManager.Configuration" /> gets reloaded.
            </summary>
    </member>
    <member name="T:NLog.LogMessageGenerator">
      <summary>
            Returns a log message. Used to defer calculation of 
            the log message until it's actually needed.
            </summary>
      <returns>Log message.</returns>
    </member>
    <member name="T:NLog.LogReceiverService.ILogReceiverClient">
      <summary>
            Service contract for Log Receiver client.
            </summary>
    </member>
    <member name="M:NLog.LogReceiverService.ILogReceiverClient.BeginProcessLogMessages(NLog.LogReceiverService.NLogEvents,System.AsyncCallback,System.Object)">
      <summary>
            Begins processing of log messages.
            </summary>
      <param name="events">The events.</param>
      <param name="callback">The callback.</param>
      <param name="asyncState">Asynchronous state.</param>
      <returns>
            IAsyncResult value which can be passed to <see cref="M:NLog.LogReceiverService.ILogReceiverClient.EndProcessLogMessages(System.IAsyncResult)" />.
            </returns>
    </member>
    <member name="M:NLog.LogReceiverService.ILogReceiverClient.EndProcessLogMessages(System.IAsyncResult)">
      <summary>
            Ends asynchronous processing of log messages.
            </summary>
      <param name="result">The result.</param>
    </member>
    <member name="T:NLog.LogReceiverService.ILogReceiverServer">
      <summary>
            Service contract for Log Receiver server.
            </summary>
    </member>
    <member name="M:NLog.LogReceiverService.ILogReceiverServer.ProcessLogMessages(NLog.LogReceiverService.NLogEvents)">
      <summary>
            Processes the log messages.
            </summary>
      <param name="events">The events.</param>
    </member>
    <member name="T:NLog.LogReceiverService.LogReceiverForwardingService">
      <summary>
            Implementation of <see cref="T:NLog.LogReceiverService.ILogReceiverServer" /> which forwards received logs through <see cref="T:NLog.LogManager" /> or a given <see cref="T:NLog.LogFactory" />.
            </summary>
    </member>
    <member name="M:NLog.LogReceiverService.LogReceiverForwardingService.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.LogReceiverForwardingService" /> class.
            </summary>
    </member>
    <member name="M:NLog.LogReceiverService.LogReceiverForwardingService.#ctor(NLog.LogFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.LogReceiverForwardingService" /> class.
            </summary>
      <param name="logFactory">The log factory.</param>
    </member>
    <member name="M:NLog.LogReceiverService.LogReceiverForwardingService.ProcessLogMessages(NLog.LogReceiverService.NLogEvents)">
      <summary>
            Processes the log messages.
            </summary>
      <param name="events">The events to process.</param>
    </member>
    <member name="M:NLog.LogReceiverService.LogReceiverForwardingService.ProcessLogMessages(NLog.LogEventInfo[])">
      <summary>
            Processes the log messages.
            </summary>
      <param name="logEvents">The log events.</param>
    </member>
    <member name="T:NLog.LogReceiverService.LogReceiverServiceConfig">
      <summary>
            Internal configuration of Log Receiver Service contracts.
            </summary>
    </member>
    <member name="T:NLog.LogReceiverService.NLogEvent">
      <summary>
            Wire format for NLog Event.
            </summary>
    </member>
    <member name="M:NLog.LogReceiverService.NLogEvent.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.NLogEvent" /> class.
            </summary>
    </member>
    <member name="M:NLog.LogReceiverService.NLogEvent.ToEventInfo(NLog.LogReceiverService.NLogEvents,System.String)">
      <summary>
            Converts the <see cref="T:NLog.LogReceiverService.NLogEvent" /> to <see cref="T:NLog.LogEventInfo" />.
            </summary>
      <param name="context">The <see cref="T:NLog.LogReceiverService.NLogEvent" /> object this <see cref="T:NLog.LogReceiverService.NLogEvent" /> is part of..</param>
      <param name="loggerNamePrefix">The logger name prefix to prepend in front of the logger name.</param>
      <returns>Converted <see cref="T:NLog.LogEventInfo" />.</returns>
    </member>
    <member name="P:NLog.LogReceiverService.NLogEvent.Id">
      <summary>
            Gets or sets the client-generated identifier of the event.
            </summary>
    </member>
    <member name="P:NLog.LogReceiverService.NLogEvent.LevelOrdinal">
      <summary>
            Gets or sets the ordinal of the log level.
            </summary>
    </member>
    <member name="P:NLog.LogReceiverService.NLogEvent.LoggerOrdinal">
      <summary>
            Gets or sets the logger ordinal (index into <see cref="P:NLog.LogReceiverService.NLogEvents.Strings" />.
            </summary>
      <value>The logger ordinal.</value>
    </member>
    <member name="P:NLog.LogReceiverService.NLogEvent.TimeDelta">
      <summary>
            Gets or sets the time delta (in ticks) between the time of the event and base time.
            </summary>
    </member>
    <member name="P:NLog.LogReceiverService.NLogEvent.MessageOrdinal">
      <summary>
            Gets or sets the message string index.
            </summary>
    </member>
    <member name="P:NLog.LogReceiverService.NLogEvent.Values">
      <summary>
            Gets or sets the collection of layout values.
            </summary>
    </member>
    <member name="P:NLog.LogReceiverService.NLogEvent.ValueIndexes">
      <summary>
            Gets the collection of indexes into <see cref="P:NLog.LogReceiverService.NLogEvents.Strings" /> array for each layout value.
            </summary>
    </member>
    <member name="T:NLog.LogReceiverService.NLogEvents">
      <summary>
            Wire format for NLog event package.
            </summary>
    </member>
    <member name="M:NLog.LogReceiverService.NLogEvents.ToEventInfo(System.String)">
      <summary>
            Converts the events to sequence of <see cref="T:NLog.LogEventInfo" /> objects suitable for routing through NLog.
            </summary>
      <param name="loggerNamePrefix">The logger name prefix to prepend in front of each logger name.</param>
      <returns>
            Sequence of <see cref="T:NLog.LogEventInfo" /> objects.
            </returns>
    </member>
    <member name="M:NLog.LogReceiverService.NLogEvents.ToEventInfo">
      <summary>
            Converts the events to sequence of <see cref="T:NLog.LogEventInfo" /> objects suitable for routing through NLog.
            </summary>
      <returns>
            Sequence of <see cref="T:NLog.LogEventInfo" /> objects.
            </returns>
    </member>
    <member name="P:NLog.LogReceiverService.NLogEvents.ClientName">
      <summary>
            Gets or sets the name of the client.
            </summary>
      <value>The name of the client.</value>
    </member>
    <member name="P:NLog.LogReceiverService.NLogEvents.BaseTimeUtc">
      <summary>
            Gets or sets the base time (UTC ticks) for all events in the package.
            </summary>
      <value>The base time UTC.</value>
    </member>
    <member name="P:NLog.LogReceiverService.NLogEvents.LayoutNames">
      <summary>
            Gets or sets the collection of layout names which are shared among all events.
            </summary>
      <value>The layout names.</value>
    </member>
    <member name="P:NLog.LogReceiverService.NLogEvents.Strings">
      <summary>
            Gets or sets the collection of logger names.
            </summary>
      <value>The logger names.</value>
    </member>
    <member name="P:NLog.LogReceiverService.NLogEvents.Events">
      <summary>
            Gets or sets the list of events.
            </summary>
      <value>The events.</value>
    </member>
    <member name="T:NLog.LogReceiverService.StringCollection">
      <summary>
            List of strings annotated for more terse serialization.
            </summary>
    </member>
    <member name="M:NLog.LogReceiverService.StringCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.StringCollection" /> class.
            </summary>
    </member>
    <member name="T:NLog.LogReceiverService.WcfLogReceiverClient">
      <summary>
            Log Receiver Client using WCF.
            </summary>
    </member>
    <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.WcfLogReceiverClient" /> class.
            </summary>
    </member>
    <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.WcfLogReceiverClient" /> class.
            </summary>
      <param name="endpointConfigurationName">Name of the endpoint configuration.</param>
    </member>
    <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.WcfLogReceiverClient" /> class.
            </summary>
      <param name="endpointConfigurationName">Name of the endpoint configuration.</param>
      <param name="remoteAddress">The remote address.</param>
    </member>
    <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.#ctor(System.String,System.ServiceModel.EndpointAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.WcfLogReceiverClient" /> class.
            </summary>
      <param name="endpointConfigurationName">Name of the endpoint configuration.</param>
      <param name="remoteAddress">The remote address.</param>
    </member>
    <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.WcfLogReceiverClient" /> class.
            </summary>
      <param name="binding">The binding.</param>
      <param name="remoteAddress">The remote address.</param>
    </member>
    <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.OpenAsync">
      <summary>
            Opens the client asynchronously.
            </summary>
    </member>
    <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.OpenAsync(System.Object)">
      <summary>
            Opens the client asynchronously.
            </summary>
      <param name="userState">User-specific state.</param>
    </member>
    <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.CloseAsync">
      <summary>
            Closes the client asynchronously.
            </summary>
    </member>
    <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.CloseAsync(System.Object)">
      <summary>
            Closes the client asynchronously.
            </summary>
      <param name="userState">User-specific state.</param>
    </member>
    <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.ProcessLogMessagesAsync(NLog.LogReceiverService.NLogEvents)">
      <summary>
            Processes the log messages asynchronously.
            </summary>
      <param name="events">The events to send.</param>
    </member>
    <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.ProcessLogMessagesAsync(NLog.LogReceiverService.NLogEvents,System.Object)">
      <summary>
            Processes the log messages asynchronously.
            </summary>
      <param name="events">The events to send.</param>
      <param name="userState">User-specific state.</param>
    </member>
    <member name="E:NLog.LogReceiverService.WcfLogReceiverClient.ProcessLogMessagesCompleted">
      <summary>
            Occurs when the log message processing has completed.
            </summary>
    </member>
    <member name="E:NLog.LogReceiverService.WcfLogReceiverClient.OpenCompleted">
      <summary>
            Occurs when Open operation has completed.
            </summary>
    </member>
    <member name="E:NLog.LogReceiverService.WcfLogReceiverClient.CloseCompleted">
      <summary>
            Occurs when Close operation has completed.
            </summary>
    </member>
    <member name="T:NLog.MappedDiagnosticsContext">
      <summary>
            Mapped Diagnostics Context - a thread-local structure that keeps a dictionary
            of strings and provides methods to output them in layouts. 
            Mostly for compatibility with log4net.
            </summary>
    </member>
    <member name="M:NLog.MappedDiagnosticsContext.Set(System.String,System.String)">
      <summary>
            Sets the current thread MDC item to the specified value.
            </summary>
      <param name="item">Item name.</param>
      <param name="value">Item value.</param>
    </member>
    <member name="M:NLog.MappedDiagnosticsContext.Get(System.String)">
      <summary>
            Gets the current thread MDC named item.
            </summary>
      <param name="item">Item name.</param>
      <returns>The item value of string.Empty if the value is not present.</returns>
    </member>
    <member name="M:NLog.MappedDiagnosticsContext.Contains(System.String)">
      <summary>
            Checks whether the specified item exists in current thread MDC.
            </summary>
      <param name="item">Item name.</param>
      <returns>A boolean indicating whether the specified item exists in current thread MDC.</returns>
    </member>
    <member name="M:NLog.MappedDiagnosticsContext.Remove(System.String)">
      <summary>
            Removes the specified item from current thread MDC.
            </summary>
      <param name="item">Item name.</param>
    </member>
    <member name="M:NLog.MappedDiagnosticsContext.Clear">
      <summary>
            Clears the content of current thread MDC.
            </summary>
    </member>
    <member name="T:NLog.MDC">
      <summary>
            Mapped Diagnostics Context - used for log4net compatibility.
            </summary>
    </member>
    <member name="M:NLog.MDC.Set(System.String,System.String)">
      <summary>
            Sets the current thread MDC item to the specified value.
            </summary>
      <param name="item">Item name.</param>
      <param name="value">Item value.</param>
    </member>
    <member name="M:NLog.MDC.Get(System.String)">
      <summary>
            Gets the current thread MDC named item.
            </summary>
      <param name="item">Item name.</param>
      <returns>The item value of string.Empty if the value is not present.</returns>
    </member>
    <member name="M:NLog.MDC.Contains(System.String)">
      <summary>
            Checks whether the specified item exists in current thread MDC.
            </summary>
      <param name="item">Item name.</param>
      <returns>A boolean indicating whether the specified item exists in current thread MDC.</returns>
    </member>
    <member name="M:NLog.MDC.Remove(System.String)">
      <summary>
            Removes the specified item from current thread MDC.
            </summary>
      <param name="item">Item name.</param>
    </member>
    <member name="M:NLog.MDC.Clear">
      <summary>
            Clears the content of current thread MDC.
            </summary>
    </member>
    <member name="T:NLog.NDC">
      <summary>
            Nested Diagnostics Context - for log4net compatibility.
            </summary>
    </member>
    <member name="M:NLog.NDC.Push(System.String)">
      <summary>
            Pushes the specified text on current thread NDC.
            </summary>
      <param name="text">The text to be pushed.</param>
      <returns>An instance of the object that implements IDisposable that returns the stack to the previous level when IDisposable.Dispose() is called. To be used with C# using() statement.</returns>
    </member>
    <member name="M:NLog.NDC.Pop">
      <summary>
            Pops the top message off the NDC stack.
            </summary>
      <returns>The top message which is no longer on the stack.</returns>
    </member>
    <member name="M:NLog.NDC.Clear">
      <summary>
            Clears current thread NDC stack.
            </summary>
    </member>
    <member name="M:NLog.NDC.GetAllMessages">
      <summary>
            Gets all messages on the stack.
            </summary>
      <returns>Array of strings on the stack.</returns>
    </member>
    <member name="P:NLog.NDC.TopMessage">
      <summary>
            Gets the top NDC message but doesn't remove it.
            </summary>
      <returns>The top message. .</returns>
    </member>
    <member name="T:NLog.NestedDiagnosticsContext">
      <summary>
            Nested Diagnostics Context - a thread-local structure that keeps a stack
            of strings and provides methods to output them in layouts
            Mostly for compatibility with log4net.
            </summary>
    </member>
    <member name="T:NLog.NestedDiagnosticsContext.StackPopper">
      <summary>
            Resets the stack to the original count during <see cref="M:System.IDisposable.Dispose" />.
            </summary>
    </member>
    <member name="M:NLog.NestedDiagnosticsContext.StackPopper.#ctor(System.Collections.Generic.Stack{System.String},System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.NestedDiagnosticsContext.StackPopper" /> class.
            </summary>
      <param name="stack">The stack.</param>
      <param name="previousCount">The previous count.</param>
    </member>
    <member name="M:NLog.NestedDiagnosticsContext.Push(System.String)">
      <summary>
            Pushes the specified text on current thread NDC.
            </summary>
      <param name="text">The text to be pushed.</param>
      <returns>An instance of the object that implements IDisposable that returns the stack to the previous level when IDisposable.Dispose() is called. To be used with C# using() statement.</returns>
    </member>
    <member name="M:NLog.NestedDiagnosticsContext.Pop">
      <summary>
            Pops the top message off the NDC stack.
            </summary>
      <returns>The top message which is no longer on the stack.</returns>
    </member>
    <member name="M:NLog.NestedDiagnosticsContext.Clear">
      <summary>
            Clears current thread NDC stack.
            </summary>
    </member>
    <member name="M:NLog.NestedDiagnosticsContext.GetAllMessages">
      <summary>
            Gets all messages on the stack.
            </summary>
      <returns>Array of strings on the stack.</returns>
    </member>
    <member name="P:NLog.NestedDiagnosticsContext.TopMessage">
      <summary>
            Gets the top NDC message but doesn't remove it.
            </summary>
      <returns>The top message. .</returns>
    </member>
    <member name="T:NLog.NLogConfigurationException">
      <summary>
            Exception thrown during NLog configuration.
            </summary>
    </member>
    <member name="M:NLog.NLogConfigurationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogConfigurationException" /> class.
            </summary>
    </member>
    <member name="M:NLog.NLogConfigurationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogConfigurationException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:NLog.NLogConfigurationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogConfigurationException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:NLog.NLogConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogConfigurationException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="T:NLog.NLogRuntimeException">
      <summary>
            Exception thrown during log event processing.
            </summary>
    </member>
    <member name="M:NLog.NLogRuntimeException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogRuntimeException" /> class.
            </summary>
    </member>
    <member name="M:NLog.NLogRuntimeException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogRuntimeException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:NLog.NLogRuntimeException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogRuntimeException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:NLog.NLogRuntimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogRuntimeException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="T:NLog.NLogTraceListener">
      <summary>
            TraceListener which routes all messages through NLog.
            </summary>
    </member>
    <member name="M:NLog.NLogTraceListener.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogTraceListener" /> class.
            </summary>
    </member>
    <member name="M:NLog.NLogTraceListener.Write(System.String)">
      <summary>
            When overridden in a derived class, writes the specified message to the listener you create in the derived class.
            </summary>
      <param name="message">A message to write.</param>
    </member>
    <member name="M:NLog.NLogTraceListener.WriteLine(System.String)">
      <summary>
            When overridden in a derived class, writes a message to the listener you create in the derived class, followed by a line terminator.
            </summary>
      <param name="message">A message to write.</param>
    </member>
    <member name="M:NLog.NLogTraceListener.Close">
      <summary>
            When overridden in a derived class, closes the output stream so it no longer receives tracing or debugging output.
            </summary>
    </member>
    <member name="M:NLog.NLogTraceListener.Fail(System.String)">
      <summary>
            Emits an error message.
            </summary>
      <param name="message">A message to emit.</param>
    </member>
    <member name="M:NLog.NLogTraceListener.Fail(System.String,System.String)">
      <summary>
            Emits an error message and a detailed error message.
            </summary>
      <param name="message">A message to emit.</param>
      <param name="detailMessage">A detailed message to emit.</param>
    </member>
    <member name="M:NLog.NLogTraceListener.Flush">
      <summary>
            Flushes the output buffer.
            </summary>
    </member>
    <member name="M:NLog.NLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <summary>
            Writes trace information, a data object and event information to the listener specific output.
            </summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> object that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType" /> values specifying the type of event that has caused the trace.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="data">The trace data to emit.</param>
    </member>
    <member name="M:NLog.NLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <summary>
            Writes trace information, an array of data objects and event information to the listener specific output.
            </summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> object that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType" /> values specifying the type of event that has caused the trace.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="data">An array of objects to emit as data.</param>
    </member>
    <member name="M:NLog.NLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)">
      <summary>
            Writes trace and event information to the listener specific output.
            </summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> object that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType" /> values specifying the type of event that has caused the trace.</param>
      <param name="id">A numeric identifier for the event.</param>
    </member>
    <member name="M:NLog.NLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <summary>
            Writes trace information, a formatted array of objects and event information to the listener specific output.
            </summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> object that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType" /> values specifying the type of event that has caused the trace.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="format">A format string that contains zero or more format items, which correspond to objects in the <paramref name="args" /> array.</param>
      <param name="args">An object array containing zero or more objects to format.</param>
    </member>
    <member name="M:NLog.NLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <summary>
            Writes trace information, a message, and event information to the listener specific output.
            </summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> object that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType" /> values specifying the type of event that has caused the trace.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="message">A message to write.</param>
    </member>
    <member name="M:NLog.NLogTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
      <summary>
            Writes trace information, a message, a related activity identity and event information to the listener specific output.
            </summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> object that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="message">A message to write.</param>
      <param name="relatedActivityId">A <see cref="T:System.Guid" />  object identifying a related activity.</param>
    </member>
    <member name="M:NLog.NLogTraceListener.GetSupportedAttributes">
      <summary>
            Gets the custom attributes supported by the trace listener.
            </summary>
      <returns>
            A string array naming the custom attributes supported by the trace listener, or null if there are no custom attributes.
            </returns>
    </member>
    <member name="M:NLog.NLogTraceListener.TranslateLogLevel(System.Diagnostics.TraceEventType)">
      <summary>
            Translates the event type to level from <see cref="T:System.Diagnostics.TraceEventType" />.
            </summary>
      <param name="eventType">Type of the event.</param>
      <returns>Translated log level.</returns>
    </member>
    <member name="M:NLog.NLogTraceListener.ProcessLogEventInfo(NLog.LogLevel,System.String,System.String,System.Object[],System.Nullable{System.Int32},System.Nullable{System.Diagnostics.TraceEventType},System.Nullable{System.Guid})">
      <summary>
            Process the log event
            <param name="logLevel">The log level.</param><param name="loggerName">The name of the logger.</param><param name="message">The log message.</param><param name="arguments">The log parameters.</param><param name="eventId">The event id.</param><param name="eventType">The event type.</param><param name="relatedActiviyId">The releated activity id.</param></summary>
    </member>
    <member name="P:NLog.NLogTraceListener.LogFactory">
      <summary>
            Gets or sets the log factory to use when outputting messages (null - use LogManager).
            </summary>
    </member>
    <member name="P:NLog.NLogTraceListener.DefaultLogLevel">
      <summary>
            Gets or sets the default log level.
            </summary>
    </member>
    <member name="P:NLog.NLogTraceListener.ForceLogLevel">
      <summary>
            Gets or sets the log which should be always used regardless of source level.
            </summary>
    </member>
    <member name="P:NLog.NLogTraceListener.DisableFlush">
      <summary>
            Gets or sets a value indicating whether flush calls from trace sources should be ignored.
            </summary>
    </member>
    <member name="P:NLog.NLogTraceListener.IsThreadSafe">
      <summary>
            Gets a value indicating whether the trace listener is thread safe.
            </summary>
      <value>
      </value>
      <returns>true if the trace listener is thread safe; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:NLog.NLogTraceListener.AutoLoggerName">
      <summary>
            Gets or sets a value indicating whether to use auto logger name detected from the stack trace.
            </summary>
    </member>
    <member name="T:NLog.Targets.ArchiveNumberingMode">
      <summary>
            Specifies the way archive numbering is performed.
            </summary>
    </member>
    <member name="F:NLog.Targets.ArchiveNumberingMode.Sequence">
      <summary>
            Sequence style numbering. The most recent archive has the highest number.
            </summary>
    </member>
    <member name="F:NLog.Targets.ArchiveNumberingMode.Rolling">
      <summary>
            Rolling style numbering (the most recent is always #0 then #1, ..., #N.
            </summary>
    </member>
    <member name="F:NLog.Targets.ArchiveNumberingMode.Date">
      <summary>
            Date style numbering.  Archives will be stamped with the prior period (Year, Month, Day, Hour, Minute) datetime.
            </summary>
    </member>
    <member name="F:NLog.Targets.ArchiveNumberingMode.DateAndSequence">
      <summary>
            Date and sequence style numbering.
            Archives will be stamped with the prior period (Year, Month, Day) datetime.
            The most recent archive has the highest number (in combination with the date).
            </summary>
    </member>
    <member name="T:NLog.Targets.Target">
      <summary>
            Represents logging target.
            </summary>
    </member>
    <member name="M:NLog.Targets.Target.Dispose">
      <summary>
            Closes the target.
            </summary>
    </member>
    <member name="M:NLog.Targets.Target.Flush(NLog.Common.AsyncContinuation)">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
    </member>
    <member name="M:NLog.Targets.Target.PrecalculateVolatileLayouts(NLog.LogEventInfo)">
      <summary>
            Calls the <see cref="M:NLog.Layouts.Layout.Precalculate(NLog.LogEventInfo)" /> on each volatile layout
            used by this target.
            </summary>
      <param name="logEvent">
            The log event.
            </param>
    </member>
    <member name="M:NLog.Targets.Target.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:NLog.Targets.Target.WriteAsyncLogEvent(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Writes the log to the target.
            </summary>
      <param name="logEvent">Log event to write.</param>
    </member>
    <member name="M:NLog.Targets.Target.WriteAsyncLogEvents(NLog.Common.AsyncLogEventInfo[])">
      <summary>
            Writes the array of log events.
            </summary>
      <param name="logEvents">The log events.</param>
    </member>
    <member name="M:NLog.Targets.Target.Initialize(NLog.Config.LoggingConfiguration)">
      <summary>
            Initializes this instance.
            </summary>
      <param name="configuration">The configuration.</param>
    </member>
    <member name="M:NLog.Targets.Target.Close">
      <summary>
            Closes this instance.
            </summary>
    </member>
    <member name="M:NLog.Targets.Target.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
      <param name="disposing">True to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:NLog.Targets.Target.InitializeTarget">
      <summary>
            Initializes the target. Can be used by inheriting classes
            to initialize logging.
            </summary>
    </member>
    <member name="M:NLog.Targets.Target.CloseTarget">
      <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
    </member>
    <member name="M:NLog.Targets.Target.FlushAsync(NLog.Common.AsyncContinuation)">
      <summary>
            Flush any pending log messages asynchronously (in case of asynchronous targets).
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
    </member>
    <member name="M:NLog.Targets.Target.Write(NLog.LogEventInfo)">
      <summary>
            Writes logging event to the log target.
            classes.
            </summary>
      <param name="logEvent">
            Logging event to be written out.
            </param>
    </member>
    <member name="M:NLog.Targets.Target.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Writes log event to the log target. Must be overridden in inheriting
            classes.
            </summary>
      <param name="logEvent">Log event to be written out.</param>
    </member>
    <member name="M:NLog.Targets.Target.Write(NLog.Common.AsyncLogEventInfo[])">
      <summary>
            Writes an array of logging events to the log target. By default it iterates on all
            events and passes them to "Write" method. Inheriting classes can use this method to
            optimize batch writes.
            </summary>
      <param name="logEvents">Logging events to be written out.</param>
    </member>
    <member name="M:NLog.Targets.Target.MergeEventProperties(NLog.LogEventInfo)">
      <summary>
            Merges (copies) the event context properties from any event info object stored in
            parameters of the given event info object.
            </summary>
      <param name="logEvent">The event info object to perform the merge to.</param>
    </member>
    <member name="P:NLog.Targets.Target.Name">
      <summary>
            Gets or sets the name of the target.
            </summary>
      <docgen category="General Options" order="10" />
    </member>
    <member name="P:NLog.Targets.Target.SyncRoot">
      <summary>
            Gets the object which can be used to synchronize asynchronous operations that must rely on the .
            </summary>
    </member>
    <member name="P:NLog.Targets.Target.LoggingConfiguration">
      <summary>
            Gets the logging configuration this target is part of.
            </summary>
    </member>
    <member name="P:NLog.Targets.Target.IsInitialized">
      <summary>
            Gets a value indicating whether the target has been initialized.
            </summary>
    </member>
    <member name="T:NLog.Targets.TargetWithLayout">
      <summary>
            Represents target that supports string formatting using layouts.
            </summary>
    </member>
    <member name="M:NLog.Targets.TargetWithLayout.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.TargetWithLayout" /> class.
            </summary>
      <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
    </member>
    <member name="P:NLog.Targets.TargetWithLayout.Layout">
      <summary>
            Gets or sets the layout used to format log messages.
            </summary>
      <docgen category="Layout Options" order="1" />
    </member>
    <member name="T:NLog.Targets.AspResponseTarget">
      <summary>
            Outputs log messages through the ASP Response object.
            </summary>
      <seealso href="http://nlog-project.org/wiki/AspResponse_target">Documentation on NLog Wiki</seealso>
    </member>
    <member name="M:NLog.Targets.AspResponseTarget.Write(NLog.LogEventInfo)">
      <summary>
            Outputs the rendered logging event through the <c>OutputDebugString()</c> Win32 API.
            </summary>
      <param name="logEvent">The logging event.</param>
    </member>
    <member name="P:NLog.Targets.AspResponseTarget.AddComments">
      <summary>
            Gets or sets a value indicating whether to add &lt;!-- --&gt; comments around all written texts.
            </summary>
      <docgen category="Layout Options" order="100" />
    </member>
    <member name="T:NLog.Targets.NetworkTarget">
      <summary>
            Sends log messages over the network.
            </summary>
      <seealso href="http://nlog-project.org/wiki/Network_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/Network/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/Network/Simple/Example.cs" />
        <p>
            To print the results, use any application that's able to receive messages over
            TCP or UDP. <a href="http://m.nu/program/util/netcat/netcat.html">NetCat</a> is
            a simple but very powerful command-line tool that can be used for that. This image
            demonstrates the NetCat tool receiving log messages from Network target.
            </p>
        <img src="examples/targets/Screenshots/Network/Output.gif" />
        <p>
            NOTE: If your receiver application is ever likely to be off-line, don't use TCP protocol
            or you'll get TCP timeouts and your application will be very slow. 
            Either switch to UDP transport or use <a href="target.AsyncWrapper.html">AsyncWrapper</a> target
            so that your application threads will not be blocked by the timing-out connection attempts.
            </p>
        <p>
            There are two specialized versions of the Network target: <a href="target.Chainsaw.html">Chainsaw</a>
            and <a href="target.NLogViewer.html">NLogViewer</a> which write to instances of Chainsaw log4j viewer
            or NLogViewer application respectively.
            </p>
      </example>
    </member>
    <member name="M:NLog.Targets.NetworkTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.NetworkTarget" /> class.
            </summary>
      <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
    </member>
    <member name="M:NLog.Targets.NetworkTarget.FlushAsync(NLog.Common.AsyncContinuation)">
      <summary>
            Flush any pending log messages asynchronously (in case of asynchronous targets).
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
    </member>
    <member name="M:NLog.Targets.NetworkTarget.CloseTarget">
      <summary>
            Closes the target.
            </summary>
    </member>
    <member name="M:NLog.Targets.NetworkTarget.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Sends the 
            rendered logging event over the network optionally concatenating it with a newline character.
            </summary>
      <param name="logEvent">The logging event.</param>
    </member>
    <member name="M:NLog.Targets.NetworkTarget.GetBytesToWrite(NLog.LogEventInfo)">
      <summary>
            Gets the bytes to be written.
            </summary>
      <param name="logEvent">Log event.</param>
      <returns>Byte array.</returns>
    </member>
    <member name="P:NLog.Targets.NetworkTarget.Address">
      <summary>
            Gets or sets the network address.
            </summary>
      <remarks>
            The network address can be:
            <ul><li>tcp://host:port - TCP (auto select IPv4/IPv6) (not supported on Windows Phone 7.0)</li><li>tcp4://host:port - force TCP/IPv4 (not supported on Windows Phone 7.0)</li><li>tcp6://host:port - force TCP/IPv6 (not supported on Windows Phone 7.0)</li><li>udp://host:port - UDP (auto select IPv4/IPv6, not supported on Silverlight and on Windows Phone 7.0)</li><li>udp4://host:port - force UDP/IPv4 (not supported on Silverlight and on Windows Phone 7.0)</li><li>udp6://host:port - force UDP/IPv6  (not supported on Silverlight and on Windows Phone 7.0)</li><li>http://host:port/pageName - HTTP using POST verb</li><li>https://host:port/pageName - HTTPS using POST verb</li></ul>
            For SOAP-based webservice support over HTTP use WebService target.
            </remarks>
      <docgen category="Connection Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NetworkTarget.KeepConnection">
      <summary>
            Gets or sets a value indicating whether to keep connection open whenever possible.
            </summary>
      <docgen category="Connection Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NetworkTarget.NewLine">
      <summary>
            Gets or sets a value indicating whether to append newline at the end of log message.
            </summary>
      <docgen category="Layout Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NetworkTarget.MaxMessageSize">
      <summary>
            Gets or sets the maximum message size in bytes.
            </summary>
      <docgen category="Layout Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NetworkTarget.ConnectionCacheSize">
      <summary>
            Gets or sets the size of the connection cache (number of connections which are kept alive).
            </summary>
      <docgen category="Connection Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NetworkTarget.MaxQueueSize">
      <summary>
            Gets or sets the maximum queue size.
            </summary>
    </member>
    <member name="P:NLog.Targets.NetworkTarget.OnOverflow">
      <summary>
            Gets or sets the action that should be taken if the message is larger than
            maxMessageSize.
            </summary>
      <docgen category="Layout Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NetworkTarget.Encoding">
      <summary>
            Gets or sets the encoding to be used.
            </summary>
      <docgen category="Layout Options" order="10" />
    </member>
    <member name="T:NLog.Targets.NLogViewerTarget">
      <summary>
            Sends log messages to the remote instance of NLog Viewer. 
            </summary>
      <seealso href="http://nlog-project.org/wiki/NLogViewer_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/NLogViewer/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/NLogViewer/Simple/Example.cs" />
        <p>
            NOTE: If your receiver application is ever likely to be off-line, don't use TCP protocol
            or you'll get TCP timeouts and your application will crawl. 
            Either switch to UDP transport or use <a href="target.AsyncWrapper.html">AsyncWrapper</a> target
            so that your application threads will not be blocked by the timing-out connection attempts.
            </p>
      </example>
    </member>
    <member name="M:NLog.Targets.NLogViewerTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.NLogViewerTarget" /> class.
            </summary>
      <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
    </member>
    <member name="P:NLog.Targets.NLogViewerTarget.IncludeNLogData">
      <summary>
            Gets or sets a value indicating whether to include NLog-specific extensions to log4j schema.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NLogViewerTarget.AppInfo">
      <summary>
            Gets or sets the AppInfo field. By default it's the friendly name of the current AppDomain.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NLogViewerTarget.IncludeCallSite">
      <summary>
            Gets or sets a value indicating whether to include call site (class and method name) in the information sent over the network.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NLogViewerTarget.IncludeSourceInfo">
      <summary>
            Gets or sets a value indicating whether to include source info (file name and line number) in the information sent over the network.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NLogViewerTarget.IncludeMdc">
      <summary>
            Gets or sets a value indicating whether to include <see cref="T:NLog.MappedDiagnosticsContext" /> dictionary contents.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NLogViewerTarget.IncludeNdc">
      <summary>
            Gets or sets a value indicating whether to include <see cref="T:NLog.NestedDiagnosticsContext" /> stack contents.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NLogViewerTarget.NdcItemSeparator">
      <summary>
            Gets or sets the NDC item separator.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NLogViewerTarget.Parameters">
      <summary>
            Gets the collection of parameters. Each parameter contains a mapping
            between NLog layout and a named parameter.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NLogViewerTarget.Renderer">
      <summary>
            Gets the layout renderer which produces Log4j-compatible XML events.
            </summary>
    </member>
    <member name="P:NLog.Targets.NLogViewerTarget.Layout">
      <summary>
            Gets or sets the instance of <see cref="T:NLog.Layouts.Log4JXmlEventLayout" /> that is used to format log messages.
            </summary>
      <docgen category="Layout Options" order="10" />
    </member>
    <member name="T:NLog.Targets.ChainsawTarget">
      <summary>
            Sends log messages to the remote instance of Chainsaw application from log4j. 
            </summary>
      <seealso href="http://nlog-project.org/wiki/Chainsaw_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/Chainsaw/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/Chainsaw/Simple/Example.cs" />
        <p>
            NOTE: If your receiver application is ever likely to be off-line, don't use TCP protocol
            or you'll get TCP timeouts and your application will crawl. 
            Either switch to UDP transport or use <a href="target.AsyncWrapper.html">AsyncWrapper</a> target
            so that your application threads will not be blocked by the timing-out connection attempts.
            </p>
      </example>
    </member>
    <member name="M:NLog.Targets.ChainsawTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ChainsawTarget" /> class.
            </summary>
    </member>
    <member name="T:NLog.Targets.TargetWithLayoutHeaderAndFooter">
      <summary>
            Represents target that supports string formatting using layouts.
            </summary>
    </member>
    <member name="M:NLog.Targets.TargetWithLayoutHeaderAndFooter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.TargetWithLayoutHeaderAndFooter" /> class.
            </summary>
      <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
    </member>
    <member name="P:NLog.Targets.TargetWithLayoutHeaderAndFooter.Layout">
      <summary>
            Gets or sets the text to be rendered.
            </summary>
      <docgen category="Layout Options" order="1" />
    </member>
    <member name="P:NLog.Targets.TargetWithLayoutHeaderAndFooter.Footer">
      <summary>
            Gets or sets the footer.
            </summary>
      <docgen category="Layout Options" order="3" />
    </member>
    <member name="P:NLog.Targets.TargetWithLayoutHeaderAndFooter.Header">
      <summary>
            Gets or sets the header.
            </summary>
      <docgen category="Layout Options" order="2" />
    </member>
    <member name="P:NLog.Targets.TargetWithLayoutHeaderAndFooter.LHF">
      <summary>
            Gets or sets the layout with header and footer.
            </summary>
      <value>The layout with header and footer.</value>
    </member>
    <member name="T:NLog.Targets.ColoredConsoleTarget">
      <summary>
            Writes log messages to the console with customizable coloring.
            </summary>
      <seealso href="http://nlog-project.org/wiki/ColoredConsole_target">Documentation on NLog Wiki</seealso>
    </member>
    <member name="T:NLog.Targets.ColoredConsoleTarget.ColorPair">
      <summary>
            Color pair (foreground and background).
            </summary>
    </member>
    <member name="M:NLog.Targets.ColoredConsoleTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ColoredConsoleTarget" /> class.
            </summary>
      <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
    </member>
    <member name="M:NLog.Targets.ColoredConsoleTarget.InitializeTarget">
      <summary>
            Initializes the target.
            </summary>
    </member>
    <member name="M:NLog.Targets.ColoredConsoleTarget.CloseTarget">
      <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
    </member>
    <member name="M:NLog.Targets.ColoredConsoleTarget.Write(NLog.LogEventInfo)">
      <summary>
            Writes the specified log event to the console highlighting entries
            and words based on a set of defined rules.
            </summary>
      <param name="logEvent">Log event.</param>
    </member>
    <member name="P:NLog.Targets.ColoredConsoleTarget.ErrorStream">
      <summary>
            Gets or sets a value indicating whether the error stream (stderr) should be used instead of the output stream (stdout).
            </summary>
      <docgen category="Output Options" order="10" />
    </member>
    <member name="P:NLog.Targets.ColoredConsoleTarget.UseDefaultRowHighlightingRules">
      <summary>
            Gets or sets a value indicating whether to use default row highlighting rules.
            </summary>
      <remarks>
            The default rules are:
            <table><tr><th>Condition</th><th>Foreground Color</th><th>Background Color</th></tr><tr><td>level == LogLevel.Fatal</td><td>Red</td><td>NoChange</td></tr><tr><td>level == LogLevel.Error</td><td>Yellow</td><td>NoChange</td></tr><tr><td>level == LogLevel.Warn</td><td>Magenta</td><td>NoChange</td></tr><tr><td>level == LogLevel.Info</td><td>White</td><td>NoChange</td></tr><tr><td>level == LogLevel.Debug</td><td>Gray</td><td>NoChange</td></tr><tr><td>level == LogLevel.Trace</td><td>DarkGray</td><td>NoChange</td></tr></table></remarks>
      <docgen category="Highlighting Rules" order="9" />
    </member>
    <member name="P:NLog.Targets.ColoredConsoleTarget.RowHighlightingRules">
      <summary>
            Gets the row highlighting rules.
            </summary>
      <docgen category="Highlighting Rules" order="10" />
    </member>
    <member name="P:NLog.Targets.ColoredConsoleTarget.WordHighlightingRules">
      <summary>
            Gets the word highlighting rules.
            </summary>
      <docgen category="Highlighting Rules" order="11" />
    </member>
    <member name="T:NLog.Targets.ConsoleOutputColor">
      <summary>
            Colored console output color.
            </summary>
      <remarks>
            Note that this enumeration is defined to be binary compatible with 
            .NET 2.0 System.ConsoleColor + some additions
            </remarks>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.Black">
      <summary>
            Black Color (#000000).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.DarkBlue">
      <summary>
            Dark blue Color (#000080).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.DarkGreen">
      <summary>
            Dark green Color (#008000).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.DarkCyan">
      <summary>
            Dark Cyan Color (#008080).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.DarkRed">
      <summary>
            Dark Red Color (#800000).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.DarkMagenta">
      <summary>
            Dark Magenta Color (#800080).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.DarkYellow">
      <summary>
            Dark Yellow Color (#808000).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.Gray">
      <summary>
            Gray Color (#C0C0C0).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.DarkGray">
      <summary>
            Dark Gray Color (#808080).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.Blue">
      <summary>
            Blue Color (#0000FF).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.Green">
      <summary>
            Green Color (#00FF00).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.Cyan">
      <summary>
            Cyan Color (#00FFFF).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.Red">
      <summary>
            Red Color (#FF0000).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.Magenta">
      <summary>
            Magenta Color (#FF00FF).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.Yellow">
      <summary>
            Yellow Color (#FFFF00).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.White">
      <summary>
            White Color (#FFFFFF).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.NoChange">
      <summary>
            Don't change the color.
            </summary>
    </member>
    <member name="T:NLog.Targets.ConsoleRowHighlightingRule">
      <summary>
            The row-highlighting condition.
            </summary>
    </member>
    <member name="M:NLog.Targets.ConsoleRowHighlightingRule.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ConsoleRowHighlightingRule" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.ConsoleRowHighlightingRule.#ctor(NLog.Conditions.ConditionExpression,NLog.Targets.ConsoleOutputColor,NLog.Targets.ConsoleOutputColor)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ConsoleRowHighlightingRule" /> class.
            </summary>
      <param name="condition">The condition.</param>
      <param name="foregroundColor">Color of the foreground.</param>
      <param name="backgroundColor">Color of the background.</param>
    </member>
    <member name="M:NLog.Targets.ConsoleRowHighlightingRule.CheckCondition(NLog.LogEventInfo)">
      <summary>
            Checks whether the specified log event matches the condition (if any).
            </summary>
      <param name="logEvent">
            Log event.
            </param>
      <returns>
            A value of <see langword="true" /> if the condition is not defined or 
            if it matches, <see langword="false" /> otherwise.
            </returns>
    </member>
    <member name="P:NLog.Targets.ConsoleRowHighlightingRule.Default">
      <summary>
            Gets the default highlighting rule. Doesn't change the color.
            </summary>
    </member>
    <member name="P:NLog.Targets.ConsoleRowHighlightingRule.Condition">
      <summary>
            Gets or sets the condition that must be met in order to set the specified foreground and background color.
            </summary>
      <docgen category="Rule Matching Options" order="10" />
    </member>
    <member name="P:NLog.Targets.ConsoleRowHighlightingRule.ForegroundColor">
      <summary>
            Gets or sets the foreground color.
            </summary>
      <docgen category="Formatting Options" order="10" />
    </member>
    <member name="P:NLog.Targets.ConsoleRowHighlightingRule.BackgroundColor">
      <summary>
            Gets or sets the background color.
            </summary>
      <docgen category="Formatting Options" order="10" />
    </member>
    <member name="T:NLog.Targets.ConsoleTarget">
      <summary>
            Writes log messages to the console.
            </summary>
      <seealso href="http://nlog-project.org/wiki/Console_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/Console/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/Console/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.ConsoleTarget.InitializeTarget">
      <summary>
            Initializes the target.
            </summary>
    </member>
    <member name="M:NLog.Targets.ConsoleTarget.CloseTarget">
      <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
    </member>
    <member name="M:NLog.Targets.ConsoleTarget.Write(NLog.LogEventInfo)">
      <summary>
            Writes the specified logging event to the Console.Out or
            Console.Error depending on the value of the Error flag.
            </summary>
      <param name="logEvent">The logging event.</param>
      <remarks>
            Note that the Error option is not supported on .NET Compact Framework.
            </remarks>
    </member>
    <member name="P:NLog.Targets.ConsoleTarget.Error">
      <summary>
            Gets or sets a value indicating whether to send the log messages to the standard error instead of the standard output.
            </summary>
      <docgen category="Console Options" order="10" />
    </member>
    <member name="T:NLog.Targets.ConsoleWordHighlightingRule">
      <summary>
            Highlighting rule for Win32 colorful console.
            </summary>
    </member>
    <member name="M:NLog.Targets.ConsoleWordHighlightingRule.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ConsoleWordHighlightingRule" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.ConsoleWordHighlightingRule.#ctor(System.String,NLog.Targets.ConsoleOutputColor,NLog.Targets.ConsoleOutputColor)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ConsoleWordHighlightingRule" /> class.
            </summary>
      <param name="text">The text to be matched..</param>
      <param name="foregroundColor">Color of the foreground.</param>
      <param name="backgroundColor">Color of the background.</param>
    </member>
    <member name="P:NLog.Targets.ConsoleWordHighlightingRule.Regex">
      <summary>
            Gets or sets the regular expression to be matched. You must specify either <c>text</c> or <c>regex</c>.
            </summary>
      <docgen category="Rule Matching Options" order="10" />
    </member>
    <member name="P:NLog.Targets.ConsoleWordHighlightingRule.Text">
      <summary>
            Gets or sets the text to be matched. You must specify either <c>text</c> or <c>regex</c>.
            </summary>
      <docgen category="Rule Matching Options" order="10" />
    </member>
    <member name="P:NLog.Targets.ConsoleWordHighlightingRule.WholeWords">
      <summary>
            Gets or sets a value indicating whether to match whole words only.
            </summary>
      <docgen category="Rule Matching Options" order="10" />
    </member>
    <member name="P:NLog.Targets.ConsoleWordHighlightingRule.IgnoreCase">
      <summary>
            Gets or sets a value indicating whether to ignore case when comparing texts.
            </summary>
      <docgen category="Rule Matching Options" order="10" />
    </member>
    <member name="P:NLog.Targets.ConsoleWordHighlightingRule.CompiledRegex">
      <summary>
            Gets the compiled regular expression that matches either Text or Regex property.
            </summary>
    </member>
    <member name="P:NLog.Targets.ConsoleWordHighlightingRule.ForegroundColor">
      <summary>
            Gets or sets the foreground color.
            </summary>
      <docgen category="Formatting Options" order="10" />
    </member>
    <member name="P:NLog.Targets.ConsoleWordHighlightingRule.BackgroundColor">
      <summary>
            Gets or sets the background color.
            </summary>
      <docgen category="Formatting Options" order="10" />
    </member>
    <member name="T:NLog.Targets.DatabaseCommandInfo">
      <summary>
            Information about database command + parameters.
            </summary>
    </member>
    <member name="M:NLog.Targets.DatabaseCommandInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DatabaseCommandInfo" /> class.
            </summary>
    </member>
    <member name="P:NLog.Targets.DatabaseCommandInfo.CommandType">
      <summary>
            Gets or sets the type of the command.
            </summary>
      <value>The type of the command.</value>
      <docgen category="Command Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseCommandInfo.ConnectionString">
      <summary>
            Gets or sets the connection string to run the command against. If not provided, connection string from the target is used.
            </summary>
      <docgen category="Command Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseCommandInfo.Text">
      <summary>
            Gets or sets the command text.
            </summary>
      <docgen category="Command Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseCommandInfo.IgnoreFailures">
      <summary>
            Gets or sets a value indicating whether to ignore failures.
            </summary>
      <docgen category="Command Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseCommandInfo.Parameters">
      <summary>
            Gets the collection of parameters. Each parameter contains a mapping
            between NLog layout and a database named or positional parameter.
            </summary>
      <docgen category="Command Options" order="10" />
    </member>
    <member name="T:NLog.Targets.DatabaseParameterInfo">
      <summary>
            Represents a parameter to a Database target.
            </summary>
    </member>
    <member name="M:NLog.Targets.DatabaseParameterInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DatabaseParameterInfo" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.DatabaseParameterInfo.#ctor(System.String,NLog.Layouts.Layout)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DatabaseParameterInfo" /> class.
            </summary>
      <param name="parameterName">Name of the parameter.</param>
      <param name="parameterLayout">The parameter layout.</param>
    </member>
    <member name="P:NLog.Targets.DatabaseParameterInfo.Name">
      <summary>
            Gets or sets the database parameter name.
            </summary>
      <docgen category="Parameter Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseParameterInfo.Layout">
      <summary>
            Gets or sets the layout that should be use to calcuate the value for the parameter.
            </summary>
      <docgen category="Parameter Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseParameterInfo.Size">
      <summary>
            Gets or sets the database parameter size.
            </summary>
      <docgen category="Parameter Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseParameterInfo.Precision">
      <summary>
            Gets or sets the database parameter precision.
            </summary>
      <docgen category="Parameter Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseParameterInfo.Scale">
      <summary>
            Gets or sets the database parameter scale.
            </summary>
      <docgen category="Parameter Options" order="10" />
    </member>
    <member name="T:NLog.Targets.DatabaseTarget">
      <summary>
            Writes log messages to the database using an ADO.NET provider.
            </summary>
      <seealso href="http://nlog-project.org/wiki/Database_target">Documentation on NLog Wiki</seealso>
      <example>
        <para>
            The configuration is dependent on the database type, because
            there are differnet methods of specifying connection string, SQL
            command and command parameters.
            </para>
        <para>MS SQL Server using System.Data.SqlClient:</para>
        <code lang="XML" source="examples/targets/Configuration File/Database/MSSQL/NLog.config" height="450" />
        <para>Oracle using System.Data.OracleClient:</para>
        <code lang="XML" source="examples/targets/Configuration File/Database/Oracle.Native/NLog.config" height="350" />
        <para>Oracle using System.Data.OleDBClient:</para>
        <code lang="XML" source="examples/targets/Configuration File/Database/Oracle.OleDB/NLog.config" height="350" />
        <para>To set up the log target programmatically use code like this (an equivalent of MSSQL configuration):</para>
        <code lang="C#" source="examples/targets/Configuration API/Database/MSSQL/Example.cs" height="630" />
      </example>
    </member>
    <member name="M:NLog.Targets.DatabaseTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DatabaseTarget" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.DatabaseTarget.Install(NLog.Config.InstallationContext)">
      <summary>
            Performs installation which requires administrative permissions.
            </summary>
      <param name="installationContext">The installation context.</param>
    </member>
    <member name="M:NLog.Targets.DatabaseTarget.Uninstall(NLog.Config.InstallationContext)">
      <summary>
            Performs uninstallation which requires administrative permissions.
            </summary>
      <param name="installationContext">The installation context.</param>
    </member>
    <member name="M:NLog.Targets.DatabaseTarget.IsInstalled(NLog.Config.InstallationContext)">
      <summary>
            Determines whether the item is installed.
            </summary>
      <param name="installationContext">The installation context.</param>
      <returns>
            Value indicating whether the item is installed or null if it is not possible to determine.
            </returns>
    </member>
    <member name="M:NLog.Targets.DatabaseTarget.InitializeTarget">
      <summary>
            Initializes the target. Can be used by inheriting classes
            to initialize logging.
            </summary>
    </member>
    <member name="M:NLog.Targets.DatabaseTarget.CloseTarget">
      <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
    </member>
    <member name="M:NLog.Targets.DatabaseTarget.Write(NLog.LogEventInfo)">
      <summary>
            Writes the specified logging event to the database. It creates
            a new database command, prepares parameters for it by calculating
            layouts and executes the command.
            </summary>
      <param name="logEvent">The logging event.</param>
    </member>
    <member name="M:NLog.Targets.DatabaseTarget.Write(NLog.Common.AsyncLogEventInfo[])">
      <summary>
            Writes an array of logging events to the log target. By default it iterates on all
            events and passes them to "Write" method. Inheriting classes can use this method to
            optimize batch writes.
            </summary>
      <param name="logEvents">Logging events to be written out.</param>
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.DBProvider">
      <summary>
            Gets or sets the name of the database provider.
            </summary>
      <remarks>
        <para>
            The parameter name should be a provider invariant name as registered in machine.config or app.config. Common values are:
            </para>
        <ul>
          <li>
            <c>System.Data.SqlClient</c> - <see href="http://msdn.microsoft.com/en-us/library/system.data.sqlclient.aspx">SQL Sever Client</see></li>
          <li>
            <c>System.Data.SqlServerCe.3.5</c> - <see href="http://www.microsoft.com/sqlserver/2005/en/us/compact.aspx">SQL Sever Compact 3.5</see></li>
          <li>
            <c>System.Data.OracleClient</c> - <see href="http://msdn.microsoft.com/en-us/library/system.data.oracleclient.aspx">Oracle Client from Microsoft</see> (deprecated in .NET Framework 4)</li>
          <li>
            <c>Oracle.DataAccess.Client</c> - <see href="http://www.oracle.com/technology/tech/windows/odpnet/index.html">ODP.NET provider from Oracle</see></li>
          <li>
            <c>System.Data.SQLite</c> - <see href="http://sqlite.phxsoftware.com/">System.Data.SQLite driver for SQLite</see></li>
          <li>
            <c>Npgsql</c> - <see href="http://npgsql.projects.postgresql.org/">Npgsql driver for PostgreSQL</see></li>
          <li>
            <c>MySql.Data.MySqlClient</c> - <see href="http://www.mysql.com/downloads/connector/net/">MySQL Connector/Net</see></li>
        </ul>
        <para>(Note that provider invariant names are not supported on .NET Compact Framework).</para>
        <para>
            Alternatively the parameter value can be be a fully qualified name of the provider 
            connection type (class implementing <see cref="T:System.Data.IDbConnection" />) or one of the following tokens:
            </para>
        <ul>
          <li>
            <c>sqlserver</c>, <c>mssql</c>, <c>microsoft</c> or <c>msde</c> - SQL Server Data Provider</li>
          <li>
            <c>oledb</c> - OLEDB Data Provider</li>
          <li>
            <c>odbc</c> - ODBC Data Provider</li>
        </ul>
      </remarks>
      <docgen category="Connection Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.ConnectionStringName">
      <summary>
            Gets or sets the name of the connection string (as specified in <see href="http://msdn.microsoft.com/en-us/library/bf7sd233.aspx">&lt;connectionStrings&gt; configuration section</see>.
            </summary>
      <docgen category="Connection Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.ConnectionString">
      <summary>
            Gets or sets the connection string. When provided, it overrides the values
            specified in DBHost, DBUserName, DBPassword, DBDatabase.
            </summary>
      <docgen category="Connection Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.InstallConnectionString">
      <summary>
            Gets or sets the connection string using for installation and uninstallation. If not provided, regular ConnectionString is being used.
            </summary>
      <docgen category="Installation Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.InstallDdlCommands">
      <summary>
            Gets the installation DDL commands.
            </summary>
      <docgen category="Installation Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.UninstallDdlCommands">
      <summary>
            Gets the uninstallation DDL commands.
            </summary>
      <docgen category="Installation Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.KeepConnection">
      <summary>
            Gets or sets a value indicating whether to keep the 
            database connection open between the log events.
            </summary>
      <docgen category="Connection Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.UseTransactions">
      <summary>
            Gets or sets a value indicating whether to use database transactions. 
            Some data providers require this.
            </summary>
      <docgen category="Connection Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.DBHost">
      <summary>
            Gets or sets the database host name. If the ConnectionString is not provided
            this value will be used to construct the "Server=" part of the
            connection string.
            </summary>
      <docgen category="Connection Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.DBUserName">
      <summary>
            Gets or sets the database user name. If the ConnectionString is not provided
            this value will be used to construct the "User ID=" part of the
            connection string.
            </summary>
      <docgen category="Connection Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.DBPassword">
      <summary>
            Gets or sets the database password. If the ConnectionString is not provided
            this value will be used to construct the "Password=" part of the
            connection string.
            </summary>
      <docgen category="Connection Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.DBDatabase">
      <summary>
            Gets or sets the database name. If the ConnectionString is not provided
            this value will be used to construct the "Database=" part of the
            connection string.
            </summary>
      <docgen category="Connection Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.CommandText">
      <summary>
            Gets or sets the text of the SQL command to be run on each log level.
            </summary>
      <remarks>
            Typically this is a SQL INSERT statement or a stored procedure call. 
            It should use the database-specific parameters (marked as <c>@parameter</c>
            for SQL server or <c>:parameter</c> for Oracle, other data providers
            have their own notation) and not the layout renderers, 
            because the latter is prone to SQL injection attacks.
            The layout renderers should be specified as &lt;parameter /&gt; elements instead.
            </remarks>
      <docgen category="SQL Statement" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.CommandType">
      <summary>
            Gets or sets the type of the SQL command to be run on each log level.
            </summary>
      <remarks>
            This specifies how the command text is interpreted, as "Text" (default) or as "StoredProcedure".
            When using the value StoredProcedure, the commandText-property would 
            normally be the name of the stored procedure. TableDirect method is not supported in this context.
            </remarks>
      <docgen category="SQL Statement" order="11" />
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.Parameters">
      <summary>
            Gets the collection of parameters. Each parameter contains a mapping
            between NLog layout and a database named or positional parameter.
            </summary>
      <docgen category="SQL Statement" order="12" />
    </member>
    <member name="T:NLog.Targets.DebuggerTarget">
      <summary>
            Writes log messages to the attached managed debugger.
            </summary>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/Debugger/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/Debugger/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.DebuggerTarget.InitializeTarget">
      <summary>
            Initializes the target.
            </summary>
    </member>
    <member name="M:NLog.Targets.DebuggerTarget.CloseTarget">
      <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
    </member>
    <member name="M:NLog.Targets.DebuggerTarget.Write(NLog.LogEventInfo)">
      <summary>
            Writes the specified logging event to the attached debugger.
            </summary>
      <param name="logEvent">The logging event.</param>
    </member>
    <member name="T:NLog.Targets.DebugTarget">
      <summary>
            Mock target - useful for testing.
            </summary>
      <seealso href="http://nlog-project.org/wiki/Debug_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/Debug/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/Debug/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.DebugTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DebugTarget" /> class.
            </summary>
      <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
    </member>
    <member name="M:NLog.Targets.DebugTarget.Write(NLog.LogEventInfo)">
      <summary>
            Increases the number of messages.
            </summary>
      <param name="logEvent">The logging event.</param>
    </member>
    <member name="P:NLog.Targets.DebugTarget.Counter">
      <summary>
            Gets the number of times this target has been called.
            </summary>
      <docgen category="Debugging Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DebugTarget.LastMessage">
      <summary>
            Gets the last message rendered by this target.
            </summary>
      <docgen category="Debugging Options" order="10" />
    </member>
    <member name="T:NLog.Targets.EventLogTarget">
      <summary>
            Writes log message to the Event Log.
            </summary>
      <seealso href="http://nlog-project.org/wiki/EventLog_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/EventLog/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/EventLog/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.EventLogTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.EventLogTarget" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.EventLogTarget.#ctor(NLog.Internal.Fakeables.IAppDomain)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.EventLogTarget" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.EventLogTarget.Install(NLog.Config.InstallationContext)">
      <summary>
            Performs installation which requires administrative permissions.
            </summary>
      <param name="installationContext">The installation context.</param>
    </member>
    <member name="M:NLog.Targets.EventLogTarget.Uninstall(NLog.Config.InstallationContext)">
      <summary>
            Performs uninstallation which requires administrative permissions.
            </summary>
      <param name="installationContext">The installation context.</param>
    </member>
    <member name="M:NLog.Targets.EventLogTarget.IsInstalled(NLog.Config.InstallationContext)">
      <summary>
            Determines whether the item is installed.
            </summary>
      <param name="installationContext">The installation context.</param>
      <returns>
            Value indicating whether the item is installed or null if it is not possible to determine.
            </returns>
    </member>
    <member name="M:NLog.Targets.EventLogTarget.InitializeTarget">
      <summary>
            Initializes the target.
            </summary>
    </member>
    <member name="M:NLog.Targets.EventLogTarget.Write(NLog.LogEventInfo)">
      <summary>
            Writes the specified logging event to the event log. 
            </summary>
      <param name="logEvent">The logging event.</param>
    </member>
    <member name="P:NLog.Targets.EventLogTarget.MachineName">
      <summary>
            Gets or sets the name of the machine on which Event Log service is running.
            </summary>
      <docgen category="Event Log Options" order="10" />
    </member>
    <member name="P:NLog.Targets.EventLogTarget.EventId">
      <summary>
            Gets or sets the layout that renders event ID.
            </summary>
      <docgen category="Event Log Options" order="10" />
    </member>
    <member name="P:NLog.Targets.EventLogTarget.Category">
      <summary>
            Gets or sets the layout that renders event Category.
            </summary>
      <docgen category="Event Log Options" order="10" />
    </member>
    <member name="P:NLog.Targets.EventLogTarget.Source">
      <summary>
            Gets or sets the value to be used as the event Source.
            </summary>
      <remarks>
            By default this is the friendly name of the current AppDomain.
            </remarks>
      <docgen category="Event Log Options" order="10" />
    </member>
    <member name="P:NLog.Targets.EventLogTarget.Log">
      <summary>
            Gets or sets the name of the Event Log to write to. This can be System, Application or 
            any user-defined name.
            </summary>
      <docgen category="Event Log Options" order="10" />
    </member>
    <member name="T:NLog.Targets.FileArchivePeriod">
      <summary>
            Modes of archiving files based on time.
            </summary>
    </member>
    <member name="F:NLog.Targets.FileArchivePeriod.None">
      <summary>
            Don't archive based on time.
            </summary>
    </member>
    <member name="F:NLog.Targets.FileArchivePeriod.Year">
      <summary>
            Archive every year.
            </summary>
    </member>
    <member name="F:NLog.Targets.FileArchivePeriod.Month">
      <summary>
            Archive every month.
            </summary>
    </member>
    <member name="F:NLog.Targets.FileArchivePeriod.Day">
      <summary>
            Archive daily.
            </summary>
    </member>
    <member name="F:NLog.Targets.FileArchivePeriod.Hour">
      <summary>
            Archive every hour.
            </summary>
    </member>
    <member name="F:NLog.Targets.FileArchivePeriod.Minute">
      <summary>
            Archive every minute.
            </summary>
    </member>
    <member name="T:NLog.Targets.FileTarget">
      <summary>
            Writes log messages to one or more files.
            </summary>
      <seealso href="http://nlog-project.org/wiki/File_target">Documentation on NLog Wiki</seealso>
    </member>
    <member name="M:NLog.Targets.FileTarget.DynamicArchiveFileHandlerClass.AddToArchive(System.String,System.String,System.Boolean)">
      <returns>
        <c>true</c> if the file has been moved successfully</returns>
    </member>
    <member name="M:NLog.Targets.FileTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.FileTarget" /> class.
            </summary>
      <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
    </member>
    <member name="M:NLog.Targets.FileTarget.CleanupInitializedFiles">
      <summary>
            Removes records of initialized files that have not been 
            accessed in the last two days.
            </summary>
      <remarks>
            Files are marked 'initialized' for the purpose of writing footers when the logging finishes.
            </remarks>
    </member>
    <member name="M:NLog.Targets.FileTarget.CleanupInitializedFiles(System.DateTime)">
      <summary>
            Removes records of initialized files that have not been
            accessed after the specified date.
            </summary>
      <param name="cleanupThreshold">The cleanup threshold.</param>
      <remarks>
            Files are marked 'initialized' for the purpose of writing footers when the logging finishes.
            </remarks>
    </member>
    <member name="M:NLog.Targets.FileTarget.FlushAsync(NLog.Common.AsyncContinuation)">
      <summary>
            Flushes all pending file operations.
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
      <remarks>
            The timeout parameter is ignored, because file APIs don't provide
            the needed functionality.
            </remarks>
    </member>
    <member name="M:NLog.Targets.FileTarget.InitializeTarget">
      <summary>
            Initializes file logging by creating data structures that
            enable efficient multi-file logging.
            </summary>
    </member>
    <member name="M:NLog.Targets.FileTarget.CloseTarget">
      <summary>
            Closes the file(s) opened for writing.
            </summary>
    </member>
    <member name="M:NLog.Targets.FileTarget.Write(NLog.LogEventInfo)">
      <summary>
            Writes the specified logging event to a file specified in the FileName 
            parameter.
            </summary>
      <param name="logEvent">The logging event.</param>
    </member>
    <member name="M:NLog.Targets.FileTarget.Write(NLog.Common.AsyncLogEventInfo[])">
      <summary>
            Writes the specified array of logging events to a file specified in the FileName
            parameter.
            </summary>
      <param name="logEvents">An array of <see cref="T:NLog.LogEventInfo" /> objects.</param>
      <remarks>
            This function makes use of the fact that the events are batched by sorting
            the requests by filename. This optimizes the number of open/close calls
            and can help improve performance.
            </remarks>
    </member>
    <member name="M:NLog.Targets.FileTarget.GetFormattedMessage(NLog.LogEventInfo)">
      <summary>
            Formats the log event for write.
            </summary>
      <param name="logEvent">The log event to be formatted.</param>
      <returns>A string representation of the log event.</returns>
    </member>
    <member name="M:NLog.Targets.FileTarget.GetBytesToWrite(NLog.LogEventInfo)">
      <summary>
            Gets the bytes to be written to the file.
            </summary>
      <param name="logEvent">Log event.</param>
      <returns>Array of bytes that are ready to be written.</returns>
    </member>
    <member name="M:NLog.Targets.FileTarget.TransformBytes(System.Byte[])">
      <summary>
            Modifies the specified byte array before it gets sent to a file.
            </summary>
      <param name="value">The byte array.</param>
      <returns>The modified byte array. The function can do the modification in-place.</returns>
    </member>
    <member name="P:NLog.Targets.FileTarget.FileName">
      <summary>
            Gets or sets the name of the file to write to.
            </summary>
      <remarks>
            This FileName string is a layout which may include instances of layout renderers.
            This lets you use a single target to write to multiple files.
            </remarks>
      <example>
            The following value makes NLog write logging events to files based on the log level in the directory where
            the application runs.
            <code>${basedir}/${level}.log</code>
            All <c>Debug</c> messages will go to <c>Debug.log</c>, all <c>Info</c> messages will go to <c>Info.log</c> and so on.
            You can combine as many of the layout renderers as you want to produce an arbitrary log file name.
            </example>
      <docgen category="Output Options" order="1" />
    </member>
    <member name="P:NLog.Targets.FileTarget.CreateDirs">
      <summary>
            Gets or sets a value indicating whether to create directories if they don't exist.
            </summary>
      <remarks>
            Setting this to false may improve performance a bit, but you'll receive an error
            when attempting to write to a directory that's not present.
            </remarks>
      <docgen category="Output Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.DeleteOldFileOnStartup">
      <summary>
            Gets or sets a value indicating whether to delete old log file on startup.
            </summary>
      <remarks>
            This option works only when the "FileName" parameter denotes a single file.
            </remarks>
      <docgen category="Output Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.ArchiveOldFileOnStartup">
      <summary>
            Gets or sets a value indicating whether to archive old log file on startup.
            </summary>
      <remarks>
            This option works only when the "FileName" parameter denotes a single file.
            After archiving the old file, the current log file will be empty.
            </remarks>
      <docgen category="Output Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.ReplaceFileContentsOnEachWrite">
      <summary>
            Gets or sets a value indicating whether to replace file contents on each write instead of appending log message at the end.
            </summary>
      <docgen category="Output Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.KeepFileOpen">
      <summary>
            Gets or sets a value indicating whether to keep log file open instead of opening and closing it on each logging event.
            </summary>
      <remarks>
            Setting this property to <c>True</c> helps improve performance.
            </remarks>
      <docgen category="Performance Tuning Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.EnableFileDelete">
      <summary>
            Gets or sets a value indicating whether to enable log file(s) to be deleted.
            </summary>
      <docgen category="Output Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.ArchiveDateFormat">
      <summary>
            Gets or sets a value specifying the date format to use when archving files.
            </summary>
      <remarks>
            This option works only when the "ArchiveNumbering" parameter is set to Date.
            </remarks>
      <docgen category="Output Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.FileAttributes">
      <summary>
            Gets or sets the file attributes (Windows only).
            </summary>
      <docgen category="Output Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.LineEnding">
      <summary>
            Gets or sets the line ending mode.
            </summary>
      <docgen category="Layout Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.AutoFlush">
      <summary>
            Gets or sets a value indicating whether to automatically flush the file buffers after each log message.
            </summary>
      <docgen category="Performance Tuning Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.OpenFileCacheSize">
      <summary>
            Gets or sets the number of files to be kept open. Setting this to a higher value may improve performance
            in a situation where a single File target is writing to many files
            (such as splitting by level or by logger).
            </summary>
      <remarks>
            The files are managed on a LRU (least recently used) basis, which flushes
            the files that have not been used for the longest period of time should the
            cache become full. As a rule of thumb, you shouldn't set this parameter to 
            a very high value. A number like 10-15 shouldn't be exceeded, because you'd
            be keeping a large number of files open which consumes system resources.
            </remarks>
      <docgen category="Performance Tuning Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.OpenFileCacheTimeout">
      <summary>
            Gets or sets the maximum number of seconds that files are kept open. If this number is negative the files are 
            not automatically closed after a period of inactivity.
            </summary>
      <docgen category="Performance Tuning Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.BufferSize">
      <summary>
            Gets or sets the log file buffer size in bytes.
            </summary>
      <docgen category="Performance Tuning Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.Encoding">
      <summary>
            Gets or sets the file encoding.
            </summary>
      <docgen category="Layout Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.ConcurrentWrites">
      <summary>
            Gets or sets a value indicating whether concurrent writes to the log file by multiple processes on the same host.
            </summary>
      <remarks>
            This makes multi-process logging possible. NLog uses a special technique
            that lets it keep the files open for writing.
            </remarks>
      <docgen category="Performance Tuning Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.NetworkWrites">
      <summary>
            Gets or sets a value indicating whether concurrent writes to the log file by multiple processes on different network hosts.
            </summary>
      <remarks>
            This effectively prevents files from being kept open.
            </remarks>
      <docgen category="Performance Tuning Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.ConcurrentWriteAttempts">
      <summary>
            Gets or sets the number of times the write is appended on the file before NLog
            discards the log message.
            </summary>
      <docgen category="Performance Tuning Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.ConcurrentWriteAttemptDelay">
      <summary>
            Gets or sets the delay in milliseconds to wait before attempting to write to the file again.
            </summary>
      <remarks>
            The actual delay is a random value between 0 and the value specified
            in this parameter. On each failed attempt the delay base is doubled
            up to <see cref="P:NLog.Targets.FileTarget.ConcurrentWriteAttempts" /> times.
            </remarks>
      <example>
            Assuming that ConcurrentWriteAttemptDelay is 10 the time to wait will be:<p />
            a random value between 0 and 10 milliseconds - 1st attempt<br />
            a random value between 0 and 20 milliseconds - 2nd attempt<br />
            a random value between 0 and 40 milliseconds - 3rd attempt<br />
            a random value between 0 and 80 milliseconds - 4th attempt<br />
            ...<p />
            and so on.
            </example>
      <docgen category="Performance Tuning Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.ArchiveAboveSize">
      <summary>
            Gets or sets the size in bytes above which log files will be automatically archived.
            </summary>
      <remarks>
            Caution: Enabling this option can considerably slow down your file 
            logging in multi-process scenarios. If only one process is going to
            be writing to the file, consider setting <c>ConcurrentWrites</c>
            to <c>false</c> for maximum performance.
            </remarks>
      <docgen category="Archival Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.ArchiveEvery">
      <summary>
            Gets or sets a value indicating whether to automatically archive log files every time the specified time passes.
            </summary>
      <remarks>
            Files are moved to the archive as part of the write operation if the current period of time changes. For example
            if the current <c>hour</c> changes from 10 to 11, the first write that will occur
            on or after 11:00 will trigger the archiving.
            <p>
            Caution: Enabling this option can considerably slow down your file 
            logging in multi-process scenarios. If only one process is going to
            be writing to the file, consider setting <c>ConcurrentWrites</c>
            to <c>false</c> for maximum performance.
            </p></remarks>
      <docgen category="Archival Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.ArchiveFileName">
      <summary>
            Gets or sets the name of the file to be used for an archive.
            </summary>
      <remarks>
            It may contain a special placeholder {#####}
            that will be replaced with a sequence of numbers depending on 
            the archiving strategy. The number of hash characters used determines
            the number of numerical digits to be used for numbering files.
            </remarks>
      <docgen category="Archival Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.MaxArchiveFiles">
      <summary>
            Gets or sets the maximum number of archive files that should be kept.
            </summary>
      <docgen category="Archival Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.ForceManaged">
      <summary>
            Gets ors set a value indicating whether a managed file stream is forced, instead of used the native implementation.
            </summary>
    </member>
    <member name="P:NLog.Targets.FileTarget.ArchiveNumbering">
      <summary>
            Gets or sets the way file archives are numbered. 
            </summary>
      <docgen category="Archival Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.NewLineChars">
      <summary>
            Gets the characters that are appended after each line.
            </summary>
    </member>
    <member name="T:NLog.Targets.LineEndingMode">
      <summary>
            Line ending mode.
            </summary>
    </member>
    <member name="F:NLog.Targets.LineEndingMode.Default">
      <summary>
            Insert platform-dependent end-of-line sequence after each line.
            </summary>
    </member>
    <member name="F:NLog.Targets.LineEndingMode.CRLF">
      <summary>
            Insert CR LF sequence (ASCII 13, ASCII 10) after each line.
            </summary>
    </member>
    <member name="F:NLog.Targets.LineEndingMode.CR">
      <summary>
            Insert CR character (ASCII 13) after each line.
            </summary>
    </member>
    <member name="F:NLog.Targets.LineEndingMode.LF">
      <summary>
            Insert LF character (ASCII 10) after each line.
            </summary>
    </member>
    <member name="F:NLog.Targets.LineEndingMode.None">
      <summary>
            Don't insert any line ending.
            </summary>
    </member>
    <member name="T:NLog.Targets.LogReceiverWebServiceTarget">
      <summary>
            Sends log messages to a NLog Receiver Service (using WCF or Web Services).
            </summary>
      <seealso href="http://nlog-project.org/wiki/LogReceiverService_target">Documentation on NLog Wiki</seealso>
    </member>
    <member name="M:NLog.Targets.LogReceiverWebServiceTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.LogReceiverWebServiceTarget" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.LogReceiverWebServiceTarget.OnSend(NLog.LogReceiverService.NLogEvents,System.Collections.Generic.IEnumerable{NLog.Common.AsyncLogEventInfo})">
      <summary>
            Called when log events are being sent (test hook).
            </summary>
      <param name="events">The events.</param>
      <param name="asyncContinuations">The async continuations.</param>
      <returns>True if events should be sent, false to stop processing them.</returns>
    </member>
    <member name="M:NLog.Targets.LogReceiverWebServiceTarget.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Writes logging event to the log target. Must be overridden in inheriting
            classes.
            </summary>
      <param name="logEvent">Logging event to be written out.</param>
    </member>
    <member name="M:NLog.Targets.LogReceiverWebServiceTarget.Write(NLog.Common.AsyncLogEventInfo[])">
      <summary>
            Writes an array of logging events to the log target. By default it iterates on all
            events and passes them to "Append" method. Inheriting classes can use this method to
            optimize batch writes.
            </summary>
      <param name="logEvents">Logging events to be written out.</param>
    </member>
    <member name="M:NLog.Targets.LogReceiverWebServiceTarget.FlushAsync(NLog.Common.AsyncContinuation)">
      <summary>
            Flush any pending log messages asynchronously (in case of asynchronous targets).
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
    </member>
    <member name="M:NLog.Targets.LogReceiverWebServiceTarget.CreateWcfLogReceiverClient">
      <summary>
            Creating a new instance of WcfLogReceiverClient
            
            Inheritors can override this method and provide their own 
            service configuration - binding and endpoint address
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NLog.Targets.LogReceiverWebServiceTarget.EndpointAddress">
      <summary>
            Gets or sets the endpoint address.
            </summary>
      <value>The endpoint address.</value>
      <docgen category="Connection Options" order="10" />
    </member>
    <member name="P:NLog.Targets.LogReceiverWebServiceTarget.EndpointConfigurationName">
      <summary>
            Gets or sets the name of the endpoint configuration in WCF configuration file.
            </summary>
      <value>The name of the endpoint configuration.</value>
      <docgen category="Connection Options" order="10" />
    </member>
    <member name="P:NLog.Targets.LogReceiverWebServiceTarget.UseBinaryEncoding">
      <summary>
            Gets or sets a value indicating whether to use binary message encoding.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.Targets.LogReceiverWebServiceTarget.ClientId">
      <summary>
            Gets or sets the client ID.
            </summary>
      <value>The client ID.</value>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.Targets.LogReceiverWebServiceTarget.Parameters">
      <summary>
            Gets the list of parameters.
            </summary>
      <value>The parameters.</value>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.Targets.LogReceiverWebServiceTarget.IncludeEventProperties">
      <summary>
            Gets or sets a value indicating whether to include per-event properties in the payload sent to the server.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="T:NLog.Targets.MailTarget">
      <summary>
            Sends log messages by email using SMTP protocol.
            </summary>
      <seealso href="http://nlog-project.org/wiki/Mail_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/Mail/Simple/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/Mail/Simple/Example.cs" />
        <p>
            Mail target works best when used with BufferingWrapper target
            which lets you send multiple log messages in single mail
            </p>
        <p>
            To set up the buffered mail target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/Mail/Buffered/NLog.config" />
        <p>
            To set up the buffered mail target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/Mail/Buffered/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.MailTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MailTarget" /> class.
            </summary>
      <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
    </member>
    <member name="M:NLog.Targets.MailTarget.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Renders the logging event message and adds it to the internal ArrayList of log messages.
            </summary>
      <param name="logEvent">The logging event.</param>
    </member>
    <member name="M:NLog.Targets.MailTarget.Write(NLog.Common.AsyncLogEventInfo[])">
      <summary>
            Renders an array logging events.
            </summary>
      <param name="logEvents">Array of logging events.</param>
    </member>
    <member name="P:NLog.Targets.MailTarget.From">
      <summary>
            Gets or sets sender's email address (e.g. joe@domain.com).
            </summary>
      <docgen category="Message Options" order="10" />
    </member>
    <member name="P:NLog.Targets.MailTarget.To">
      <summary>
            Gets or sets recipients' email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com).
            </summary>
      <docgen category="Message Options" order="11" />
    </member>
    <member name="P:NLog.Targets.MailTarget.CC">
      <summary>
            Gets or sets CC email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com).
            </summary>
      <docgen category="Message Options" order="12" />
    </member>
    <member name="P:NLog.Targets.MailTarget.Bcc">
      <summary>
            Gets or sets BCC email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com).
            </summary>
      <docgen category="Message Options" order="13" />
    </member>
    <member name="P:NLog.Targets.MailTarget.AddNewLines">
      <summary>
            Gets or sets a value indicating whether to add new lines between log entries.
            </summary>
      <value>A value of <c>true</c> if new lines should be added; otherwise, <c>false</c>.</value>
      <docgen category="Layout Options" order="99" />
    </member>
    <member name="P:NLog.Targets.MailTarget.Subject">
      <summary>
            Gets or sets the mail subject.
            </summary>
      <docgen category="Message Options" order="5" />
    </member>
    <member name="P:NLog.Targets.MailTarget.Body">
      <summary>
            Gets or sets mail message body (repeated for each log message send in one mail).
            </summary>
      <remarks>Alias for the <c>Layout</c> property.</remarks>
      <docgen category="Message Options" order="6" />
    </member>
    <member name="P:NLog.Targets.MailTarget.Encoding">
      <summary>
            Gets or sets encoding to be used for sending e-mail.
            </summary>
      <docgen category="Layout Options" order="20" />
    </member>
    <member name="P:NLog.Targets.MailTarget.Html">
      <summary>
            Gets or sets a value indicating whether to send message as HTML instead of plain text.
            </summary>
      <docgen category="Layout Options" order="11" />
    </member>
    <member name="P:NLog.Targets.MailTarget.SmtpServer">
      <summary>
            Gets or sets SMTP Server to be used for sending.
            </summary>
      <docgen category="SMTP Options" order="10" />
    </member>
    <member name="P:NLog.Targets.MailTarget.SmtpAuthentication">
      <summary>
            Gets or sets SMTP Authentication mode.
            </summary>
      <docgen category="SMTP Options" order="11" />
    </member>
    <member name="P:NLog.Targets.MailTarget.SmtpUserName">
      <summary>
            Gets or sets the username used to connect to SMTP server (used when SmtpAuthentication is set to "basic").
            </summary>
      <docgen category="SMTP Options" order="12" />
    </member>
    <member name="P:NLog.Targets.MailTarget.SmtpPassword">
      <summary>
            Gets or sets the password used to authenticate against SMTP server (used when SmtpAuthentication is set to "basic").
            </summary>
      <docgen category="SMTP Options" order="13" />
    </member>
    <member name="P:NLog.Targets.MailTarget.EnableSsl">
      <summary>
            Gets or sets a value indicating whether SSL (secure sockets layer) should be used when communicating with SMTP server.
            </summary>
      <docgen category="SMTP Options" order="14" />
    </member>
    <member name="P:NLog.Targets.MailTarget.SmtpPort">
      <summary>
            Gets or sets the port number that SMTP Server is listening on.
            </summary>
      <docgen category="SMTP Options" order="15" />
    </member>
    <member name="P:NLog.Targets.MailTarget.UseSystemNetMailSettings">
      <summary>
            Gets or sets a value indicating whether the default Settings from System.Net.MailSettings should be used.
            </summary>
      <docgen category="SMTP Options" order="16" />
    </member>
    <member name="P:NLog.Targets.MailTarget.Priority">
      <summary>
            Gets or sets the priority used for sending mails.
            </summary>
    </member>
    <member name="P:NLog.Targets.MailTarget.ReplaceNewlineWithBrTagInHtml">
      <summary>
            Gets or sets a value indicating whether NewLine characters in the body should be replaced with <br /> tags.
            </summary>
      <remarks>Only happens when <see cref="P:NLog.Targets.MailTarget.Html" /> is set to true.</remarks>
    </member>
    <member name="P:NLog.Targets.MailTarget.Timeout">
      <summary>
            Gets or sets a value indicating the SMTP client timeout.
            </summary>
      <remarks>Warning: zero is not infinit waiting</remarks>
    </member>
    <member name="T:NLog.Targets.MemoryTarget">
      <summary>
            Writes log messages to an ArrayList in memory for programmatic retrieval.
            </summary>
      <seealso href="http://nlog-project.org/wiki/Memory_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/Memory/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/Memory/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.MemoryTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MemoryTarget" /> class.
            </summary>
      <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
    </member>
    <member name="M:NLog.Targets.MemoryTarget.Write(NLog.LogEventInfo)">
      <summary>
            Renders the logging event message and adds it to the internal ArrayList of log messages.
            </summary>
      <param name="logEvent">The logging event.</param>
    </member>
    <member name="P:NLog.Targets.MemoryTarget.Logs">
      <summary>
            Gets the list of logs gathered in the <see cref="T:NLog.Targets.MemoryTarget" />.
            </summary>
    </member>
    <member name="T:NLog.Targets.MethodCallParameter">
      <summary>
            A parameter to MethodCall.
            </summary>
    </member>
    <member name="M:NLog.Targets.MethodCallParameter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallParameter" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.MethodCallParameter.#ctor(NLog.Layouts.Layout)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallParameter" /> class.
            </summary>
      <param name="layout">The layout to use for parameter value.</param>
    </member>
    <member name="M:NLog.Targets.MethodCallParameter.#ctor(System.String,NLog.Layouts.Layout)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallParameter" /> class.
            </summary>
      <param name="parameterName">Name of the parameter.</param>
      <param name="layout">The layout.</param>
    </member>
    <member name="M:NLog.Targets.MethodCallParameter.#ctor(System.String,NLog.Layouts.Layout,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallParameter" /> class.
            </summary>
      <param name="name">The name of the parameter.</param>
      <param name="layout">The layout.</param>
      <param name="type">The type of the parameter.</param>
    </member>
    <member name="P:NLog.Targets.MethodCallParameter.Name">
      <summary>
            Gets or sets the name of the parameter.
            </summary>
      <docgen category="Parameter Options" order="10" />
    </member>
    <member name="P:NLog.Targets.MethodCallParameter.Type">
      <summary>
            Gets or sets the type of the parameter.
            </summary>
      <docgen category="Parameter Options" order="10" />
    </member>
    <member name="P:NLog.Targets.MethodCallParameter.Layout">
      <summary>
            Gets or sets the layout that should be use to calcuate the value for the parameter.
            </summary>
      <docgen category="Parameter Options" order="10" />
    </member>
    <member name="T:NLog.Targets.MethodCallTargetBase">
      <summary>
            The base class for all targets which call methods (local or remote). 
            Manages parameters and type coercion.
            </summary>
    </member>
    <member name="M:NLog.Targets.MethodCallTargetBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallTargetBase" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.MethodCallTargetBase.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Prepares an array of parameters to be passed based on the logging event and calls DoInvoke().
            </summary>
      <param name="logEvent">
            The logging event.
            </param>
    </member>
    <member name="M:NLog.Targets.MethodCallTargetBase.DoInvoke(System.Object[],NLog.Common.AsyncContinuation)">
      <summary>
            Calls the target method. Must be implemented in concrete classes.
            </summary>
      <param name="parameters">Method call parameters.</param>
      <param name="continuation">The continuation.</param>
    </member>
    <member name="M:NLog.Targets.MethodCallTargetBase.DoInvoke(System.Object[])">
      <summary>
            Calls the target method. Must be implemented in concrete classes.
            </summary>
      <param name="parameters">Method call parameters.</param>
    </member>
    <member name="P:NLog.Targets.MethodCallTargetBase.Parameters">
      <summary>
            Gets the array of parameters to be passed.
            </summary>
      <docgen category="Parameter Options" order="10" />
    </member>
    <member name="T:NLog.Targets.MethodCallTarget">
      <summary>
            Calls the specified static method on each log message and passes contextual parameters to it.
            </summary>
      <seealso href="http://nlog-project.org/wiki/MethodCall_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/MethodCall/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/MethodCall/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.MethodCallTarget.InitializeTarget">
      <summary>
            Initializes the target.
            </summary>
    </member>
    <member name="M:NLog.Targets.MethodCallTarget.DoInvoke(System.Object[])">
      <summary>
            Calls the specified Method.
            </summary>
      <param name="parameters">Method parameters.</param>
    </member>
    <member name="P:NLog.Targets.MethodCallTarget.ClassName">
      <summary>
            Gets or sets the class name.
            </summary>
      <docgen category="Invocation Options" order="10" />
    </member>
    <member name="P:NLog.Targets.MethodCallTarget.MethodName">
      <summary>
            Gets or sets the method name. The method must be public and static.
            </summary>
      <docgen category="Invocation Options" order="10" />
    </member>
    <member name="T:NLog.Targets.NetworkTargetOverflowAction">
      <summary>
            Action that should be taken if the message overflows.
            </summary>
    </member>
    <member name="F:NLog.Targets.NetworkTargetOverflowAction.Error">
      <summary>
            Report an error.
            </summary>
    </member>
    <member name="F:NLog.Targets.NetworkTargetOverflowAction.Split">
      <summary>
            Split the message into smaller pieces.
            </summary>
    </member>
    <member name="F:NLog.Targets.NetworkTargetOverflowAction.Discard">
      <summary>
            Discard the entire message.
            </summary>
    </member>
    <member name="T:NLog.Targets.NLogViewerParameterInfo">
      <summary>
            Represents a parameter to a NLogViewer target.
            </summary>
    </member>
    <member name="M:NLog.Targets.NLogViewerParameterInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.NLogViewerParameterInfo" /> class.
            </summary>
    </member>
    <member name="P:NLog.Targets.NLogViewerParameterInfo.Name">
      <summary>
            Gets or sets viewer parameter name.
            </summary>
      <docgen category="Parameter Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NLogViewerParameterInfo.Layout">
      <summary>
            Gets or sets the layout that should be use to calcuate the value for the parameter.
            </summary>
      <docgen category="Parameter Options" order="10" />
    </member>
    <member name="T:NLog.Targets.NullTarget">
      <summary>
            Discards log messages. Used mainly for debugging and benchmarking.
            </summary>
      <seealso href="http://nlog-project.org/wiki/Null_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/Null/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/Null/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.NullTarget.Write(NLog.LogEventInfo)">
      <summary>
            Does nothing. Optionally it calculates the layout text but
            discards the results.
            </summary>
      <param name="logEvent">The logging event.</param>
    </member>
    <member name="P:NLog.Targets.NullTarget.FormatMessage">
      <summary>
            Gets or sets a value indicating whether to perform layout calculation.
            </summary>
      <docgen category="Layout Options" order="10" />
    </member>
    <member name="T:NLog.Targets.OutputDebugStringTarget">
      <summary>
            Outputs log messages through the <c>OutputDebugString()</c> Win32 API.
            </summary>
      <seealso href="http://nlog-project.org/wiki/OutputDebugString_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/OutputDebugString/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/OutputDebugString/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.OutputDebugStringTarget.Write(NLog.LogEventInfo)">
      <summary>
            Outputs the rendered logging event through the <c>OutputDebugString()</c> Win32 API.
            </summary>
      <param name="logEvent">The logging event.</param>
    </member>
    <member name="T:NLog.Targets.PerformanceCounterTarget">
      <summary>
            Increments specified performance counter on each write.
            </summary>
      <seealso href="http://nlog-project.org/wiki/PerformanceCounter_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/PerfCounter/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/PerfCounter/Simple/Example.cs" />
      </example>
      <remarks>
            TODO:
            1. Unable to create a category allowing multiple counter instances (.Net 2.0 API only, probably)
            2. Is there any way of adding new counters without deleting the whole category?
            3. There should be some mechanism of resetting the counter (e.g every day starts from 0), or auto-switching to 
               another counter instance (with dynamic creation of new instance). This could be done with layouts. 
            </remarks>
    </member>
    <member name="M:NLog.Targets.PerformanceCounterTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.PerformanceCounterTarget" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.PerformanceCounterTarget.Install(NLog.Config.InstallationContext)">
      <summary>
            Performs installation which requires administrative permissions.
            </summary>
      <param name="installationContext">The installation context.</param>
    </member>
    <member name="M:NLog.Targets.PerformanceCounterTarget.Uninstall(NLog.Config.InstallationContext)">
      <summary>
            Performs uninstallation which requires administrative permissions.
            </summary>
      <param name="installationContext">The installation context.</param>
    </member>
    <member name="M:NLog.Targets.PerformanceCounterTarget.IsInstalled(NLog.Config.InstallationContext)">
      <summary>
            Determines whether the item is installed.
            </summary>
      <param name="installationContext">The installation context.</param>
      <returns>
            Value indicating whether the item is installed or null if it is not possible to determine.
            </returns>
    </member>
    <member name="M:NLog.Targets.PerformanceCounterTarget.Write(NLog.LogEventInfo)">
      <summary>
            Increments the configured performance counter.
            </summary>
      <param name="logEvent">Log event.</param>
    </member>
    <member name="M:NLog.Targets.PerformanceCounterTarget.CloseTarget">
      <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
    </member>
    <member name="M:NLog.Targets.PerformanceCounterTarget.EnsureInitialized">
      <summary>
            Ensures that the performance counter has been initialized.
            </summary>
      <returns>True if the performance counter is operational, false otherwise.</returns>
    </member>
    <member name="P:NLog.Targets.PerformanceCounterTarget.AutoCreate">
      <summary>
            Gets or sets a value indicating whether performance counter should be automatically created.
            </summary>
      <docgen category="Performance Counter Options" order="10" />
    </member>
    <member name="P:NLog.Targets.PerformanceCounterTarget.CategoryName">
      <summary>
            Gets or sets the name of the performance counter category.
            </summary>
      <docgen category="Performance Counter Options" order="10" />
    </member>
    <member name="P:NLog.Targets.PerformanceCounterTarget.CounterName">
      <summary>
            Gets or sets the name of the performance counter.
            </summary>
      <docgen category="Performance Counter Options" order="10" />
    </member>
    <member name="P:NLog.Targets.PerformanceCounterTarget.InstanceName">
      <summary>
            Gets or sets the performance counter instance name.
            </summary>
      <docgen category="Performance Counter Options" order="10" />
    </member>
    <member name="P:NLog.Targets.PerformanceCounterTarget.CounterHelp">
      <summary>
            Gets or sets the counter help text.
            </summary>
      <docgen category="Performance Counter Options" order="10" />
    </member>
    <member name="P:NLog.Targets.PerformanceCounterTarget.CounterType">
      <summary>
            Gets or sets the performance counter type.
            </summary>
      <docgen category="Performance Counter Options" order="10" />
    </member>
    <member name="T:NLog.Targets.SmtpAuthenticationMode">
      <summary>
            SMTP authentication modes.
            </summary>
    </member>
    <member name="F:NLog.Targets.SmtpAuthenticationMode.None">
      <summary>
            No authentication.
            </summary>
    </member>
    <member name="F:NLog.Targets.SmtpAuthenticationMode.Basic">
      <summary>
            Basic - username and password.
            </summary>
    </member>
    <member name="F:NLog.Targets.SmtpAuthenticationMode.Ntlm">
      <summary>
            NTLM Authentication.
            </summary>
    </member>
    <member name="T:NLog.Targets.TargetAttribute">
      <summary>
            Marks class as a logging target and assigns a name to it.
            </summary>
    </member>
    <member name="M:NLog.Targets.TargetAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.TargetAttribute" /> class.
            </summary>
      <param name="name">Name of the target.</param>
    </member>
    <member name="P:NLog.Targets.TargetAttribute.IsWrapper">
      <summary>
            Gets or sets a value indicating whether to the target is a wrapper target (used to generate the target summary documentation page).
            </summary>
    </member>
    <member name="P:NLog.Targets.TargetAttribute.IsCompound">
      <summary>
            Gets or sets a value indicating whether to the target is a compound target (used to generate the target summary documentation page).
            </summary>
    </member>
    <member name="T:NLog.Targets.TraceTarget">
      <summary>
            Sends log messages through System.Diagnostics.Trace.
            </summary>
      <seealso href="http://nlog-project.org/wiki/Trace_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/Trace/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/Trace/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.TraceTarget.Write(NLog.LogEventInfo)">
      <summary>
            Writes the specified logging event to the <see cref="T:System.Diagnostics.Trace" /> facility.
            If the log level is greater than or equal to <see cref="F:NLog.LogLevel.Error" /> it uses the
            <see cref="M:System.Diagnostics.Trace.Fail(System.String)" /> method, otherwise it uses
            <see cref="M:System.Diagnostics.Trace.Write(System.String)" /> method.
            </summary>
      <param name="logEvent">The logging event.</param>
    </member>
    <member name="T:NLog.Targets.WebServiceProtocol">
      <summary>
            Web service protocol.
            </summary>
    </member>
    <member name="F:NLog.Targets.WebServiceProtocol.Soap11">
      <summary>
            Use SOAP 1.1 Protocol.
            </summary>
    </member>
    <member name="F:NLog.Targets.WebServiceProtocol.Soap12">
      <summary>
            Use SOAP 1.2 Protocol.
            </summary>
    </member>
    <member name="F:NLog.Targets.WebServiceProtocol.HttpPost">
      <summary>
            Use HTTP POST Protocol.
            </summary>
    </member>
    <member name="F:NLog.Targets.WebServiceProtocol.HttpGet">
      <summary>
            Use HTTP GET Protocol.
            </summary>
    </member>
    <member name="T:NLog.Targets.WebServiceTarget">
      <summary>
            Calls the specified web service on each log message.
            </summary>
      <seealso href="http://nlog-project.org/wiki/WebService_target">Documentation on NLog Wiki</seealso>
      <remarks>
            The web service must implement a method that accepts a number of string parameters.
            </remarks>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/WebService/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/WebService/Simple/Example.cs" />
        <p>The example web service that works with this example is shown below</p>
        <code lang="C#" source="examples/targets/Configuration API/WebService/Simple/WebService1/Service1.asmx.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.WebServiceTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.WebServiceTarget" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.WebServiceTarget.DoInvoke(System.Object[])">
      <summary>
            Calls the target method. Must be implemented in concrete classes.
            </summary>
      <param name="parameters">Method call parameters.</param>
    </member>
    <member name="M:NLog.Targets.WebServiceTarget.DoInvoke(System.Object[],NLog.Common.AsyncContinuation)">
      <summary>
            Invokes the web service method.
            </summary>
      <param name="parameters">Parameters to be passed.</param>
      <param name="continuation">The continuation.</param>
    </member>
    <member name="P:NLog.Targets.WebServiceTarget.Url">
      <summary>
            Gets or sets the web service URL.
            </summary>
      <docgen category="Web Service Options" order="10" />
    </member>
    <member name="P:NLog.Targets.WebServiceTarget.MethodName">
      <summary>
            Gets or sets the Web service method name.
            </summary>
      <docgen category="Web Service Options" order="10" />
    </member>
    <member name="P:NLog.Targets.WebServiceTarget.Namespace">
      <summary>
            Gets or sets the Web service namespace.
            </summary>
      <docgen category="Web Service Options" order="10" />
    </member>
    <member name="P:NLog.Targets.WebServiceTarget.Protocol">
      <summary>
            Gets or sets the protocol to be used when calling web service.
            </summary>
      <docgen category="Web Service Options" order="10" />
    </member>
    <member name="P:NLog.Targets.WebServiceTarget.Encoding">
      <summary>
            Gets or sets the encoding.
            </summary>
      <docgen category="Web Service Options" order="10" />
    </member>
    <member name="T:NLog.Targets.Win32FileAttributes">
      <summary>
            Win32 file attributes.
            </summary>
      <remarks>
            For more information see <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/fs/createfile.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/fs/createfile.asp</a>.
            </remarks>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.ReadOnly">
      <summary>
            Read-only file.
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.Hidden">
      <summary>
            Hidden file.
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.System">
      <summary>
            System file.
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.Archive">
      <summary>
            File should be archived.
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.Device">
      <summary>
            Device file.
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.Normal">
      <summary>
            Normal file.
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.Temporary">
      <summary>
            File is temporary (should be kept in cache and not 
            written to disk if possible).
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.SparseFile">
      <summary>
            Sparse file.
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.ReparsePoint">
      <summary>
            Reparse point.
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.Compressed">
      <summary>
            Compress file contents.
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.NotContentIndexed">
      <summary>
            File should not be indexed by the content indexing service. 
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.Encrypted">
      <summary>
            Encrypted file.
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.WriteThrough">
      <summary>
            The system writes through any intermediate cache and goes directly to disk. 
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.NoBuffering">
      <summary>
            The system opens a file with no system caching.
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.DeleteOnClose">
      <summary>
            Delete file after it is closed.
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.PosixSemantics">
      <summary>
            A file is accessed according to POSIX rules.
            </summary>
    </member>
    <member name="T:NLog.Targets.Wrappers.AsyncRequestQueue">
      <summary>
            Asynchronous request queue.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.AsyncRequestQueue.#ctor(System.Int32,NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction)">
      <summary>
            Initializes a new instance of the AsyncRequestQueue class.
            </summary>
      <param name="requestLimit">Request limit.</param>
      <param name="overflowAction">The overflow action.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.AsyncRequestQueue.Enqueue(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Enqueues another item. If the queue is overflown the appropriate
            action is taken as specified by <see cref="P:NLog.Targets.Wrappers.AsyncRequestQueue.OnOverflow" />.
            </summary>
      <param name="logEventInfo">The log event info.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.AsyncRequestQueue.DequeueBatch(System.Int32)">
      <summary>
            Dequeues a maximum of <c>count</c> items from the queue
            and adds returns the list containing them.
            </summary>
      <param name="count">Maximum number of items to be dequeued.</param>
      <returns>The array of log events.</returns>
    </member>
    <member name="M:NLog.Targets.Wrappers.AsyncRequestQueue.Clear">
      <summary>
            Clears the queue.
            </summary>
    </member>
    <member name="P:NLog.Targets.Wrappers.AsyncRequestQueue.RequestLimit">
      <summary>
            Gets or sets the request limit.
            </summary>
    </member>
    <member name="P:NLog.Targets.Wrappers.AsyncRequestQueue.OnOverflow">
      <summary>
            Gets or sets the action to be taken when there's no more room in
            the queue and another request is enqueued.
            </summary>
    </member>
    <member name="P:NLog.Targets.Wrappers.AsyncRequestQueue.RequestCount">
      <summary>
            Gets the number of requests currently in the queue.
            </summary>
    </member>
    <member name="T:NLog.Targets.Wrappers.WrapperTargetBase">
      <summary>
            Base class for targets wrap other (single) targets.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.WrapperTargetBase.ToString">
      <summary>
            Returns the text representation of the object. Used for diagnostics.
            </summary>
      <returns>A string that describes the target.</returns>
    </member>
    <member name="M:NLog.Targets.Wrappers.WrapperTargetBase.FlushAsync(NLog.Common.AsyncContinuation)">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.WrapperTargetBase.Write(NLog.LogEventInfo)">
      <summary>
            Writes logging event to the log target. Must be overridden in inheriting
            classes.
            </summary>
      <param name="logEvent">Logging event to be written out.</param>
    </member>
    <member name="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget">
      <summary>
            Gets or sets the target that is wrapped by this target.
            </summary>
      <docgen category="General Options" order="11" />
    </member>
    <member name="T:NLog.Targets.Wrappers.AsyncTargetWrapper">
      <summary>
            Provides asynchronous, buffered execution of target writes.
            </summary>
      <seealso href="http://nlog-project.org/wiki/AsyncWrapper_target">Documentation on NLog Wiki</seealso>
      <remarks>
        <p>
            Asynchronous target wrapper allows the logger code to execute more quickly, by queueing
            messages and processing them in a separate thread. You should wrap targets
            that spend a non-trivial amount of time in their Write() method with asynchronous
            target to speed up logging.
            </p>
        <p>
            Because asynchronous logging is quite a common scenario, NLog supports a
            shorthand notation for wrapping all targets with AsyncWrapper. Just add async="true" to
            the &lt;targets/&gt; element in the configuration file.
            </p>
        <code lang="XML"><![CDATA[
            <targets async="true">
               ... your targets go here ...
            </targets>
            ]]></code>
      </remarks>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/AsyncWrapper/NLog.config" />
        <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/AsyncWrapper/Wrapping File/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AsyncTargetWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.#ctor(NLog.Targets.Target)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AsyncTargetWrapper" /> class.
            </summary>
      <param name="wrappedTarget">The wrapped target.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.#ctor(NLog.Targets.Target,System.Int32,NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AsyncTargetWrapper" /> class.
            </summary>
      <param name="wrappedTarget">The wrapped target.</param>
      <param name="queueLimit">Maximum number of requests in the queue.</param>
      <param name="overflowAction">The action to be taken when the queue overflows.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.FlushAsync(NLog.Common.AsyncContinuation)">
      <summary>
            Waits for the lazy writer thread to finish writing messages.
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.InitializeTarget">
      <summary>
            Initializes the target by starting the lazy writer timer.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.CloseTarget">
      <summary>
            Shuts down the lazy writer timer.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.StartLazyWriterTimer">
      <summary>
            Starts the lazy writer thread which periodically writes
            queued log messages.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.StopLazyWriterThread">
      <summary>
            Starts the lazy writer thread.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Adds the log event to asynchronous queue to be processed by
            the lazy writer thread.
            </summary>
      <param name="logEvent">The log event.</param>
      <remarks>
            The <see cref="M:NLog.Targets.Target.PrecalculateVolatileLayouts(NLog.LogEventInfo)" /> is called
            to ensure that the log event can be processed in another thread.
            </remarks>
    </member>
    <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.BatchSize">
      <summary>
            Gets or sets the number of log events that should be processed in a batch
            by the lazy writer thread.
            </summary>
      <docgen category="Buffering Options" order="100" />
    </member>
    <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.TimeToSleepBetweenBatches">
      <summary>
            Gets or sets the time in milliseconds to sleep between batches.
            </summary>
      <docgen category="Buffering Options" order="100" />
    </member>
    <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.OverflowAction">
      <summary>
            Gets or sets the action to be taken when the lazy writer thread request queue count
            exceeds the set limit.
            </summary>
      <docgen category="Buffering Options" order="100" />
    </member>
    <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.QueueLimit">
      <summary>
            Gets or sets the limit on the number of requests in the lazy writer thread request queue.
            </summary>
      <docgen category="Buffering Options" order="100" />
    </member>
    <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.RequestQueue">
      <summary>
            Gets the queue of lazy writer thread requests.
            </summary>
    </member>
    <member name="T:NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction">
      <summary>
            The action to be taken when the queue overflows.
            </summary>
    </member>
    <member name="F:NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction.Grow">
      <summary>
            Grow the queue.
            </summary>
    </member>
    <member name="F:NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction.Discard">
      <summary>
            Discard the overflowing item.
            </summary>
    </member>
    <member name="F:NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction.Block">
      <summary>
            Block until there's more room in the queue.
            </summary>
    </member>
    <member name="T:NLog.Targets.Wrappers.AutoFlushTargetWrapper">
      <summary>
            Causes a flush after each write on a wrapped target.
            </summary>
      <seealso href="http://nlog-project.org/wiki/AutoFlushWrapper_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/AutoFlushWrapper/NLog.config" />
        <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/AutoFlushWrapper/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.Wrappers.AutoFlushTargetWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AutoFlushTargetWrapper" /> class.
            </summary>
      <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
    </member>
    <member name="M:NLog.Targets.Wrappers.AutoFlushTargetWrapper.#ctor(NLog.Targets.Target)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AutoFlushTargetWrapper" /> class.
            </summary>
      <param name="wrappedTarget">The wrapped target.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.AutoFlushTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Forwards the call to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget" />.Write()
            and calls <see cref="M:NLog.Targets.Target.Flush(NLog.Common.AsyncContinuation)" /> on it.
            </summary>
      <param name="logEvent">Logging event to be written out.</param>
    </member>
    <member name="T:NLog.Targets.Wrappers.BufferingTargetWrapper">
      <summary>
            A target that buffers log events and sends them in batches to the wrapped target.
            </summary>
      <seealso href="http://nlog-project.org/wiki/BufferingWrapper_target">Documentation on NLog Wiki</seealso>
    </member>
    <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor(NLog.Targets.Target)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper" /> class.
            </summary>
      <param name="wrappedTarget">The wrapped target.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper" /> class.
            </summary>
      <param name="wrappedTarget">The wrapped target.</param>
      <param name="bufferSize">Size of the buffer.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper" /> class.
            </summary>
      <param name="wrappedTarget">The wrapped target.</param>
      <param name="bufferSize">Size of the buffer.</param>
      <param name="flushTimeout">The flush timeout.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.FlushAsync(NLog.Common.AsyncContinuation)">
      <summary>
            Flushes pending events in the buffer (if any).
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.InitializeTarget">
      <summary>
            Initializes the target.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.CloseTarget">
      <summary>
            Closes the target by flushing pending events in the buffer (if any).
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Adds the specified log event to the buffer and flushes
            the buffer in case the buffer gets full.
            </summary>
      <param name="logEvent">The log event.</param>
    </member>
    <member name="P:NLog.Targets.Wrappers.BufferingTargetWrapper.BufferSize">
      <summary>
            Gets or sets the number of log events to be buffered.
            </summary>
      <docgen category="Buffering Options" order="100" />
    </member>
    <member name="P:NLog.Targets.Wrappers.BufferingTargetWrapper.FlushTimeout">
      <summary>
            Gets or sets the timeout (in milliseconds) after which the contents of buffer will be flushed 
            if there's no write in the specified period of time. Use -1 to disable timed flushes.
            </summary>
      <docgen category="Buffering Options" order="100" />
    </member>
    <member name="P:NLog.Targets.Wrappers.BufferingTargetWrapper.SlidingTimeout">
      <summary>
            Gets or sets a value indicating whether to use sliding timeout.
            </summary>
      <remarks>
            This value determines how the inactivity period is determined. If sliding timeout is enabled,
            the inactivity timer is reset after each write, if it is disabled - inactivity timer will 
            count from the first event written to the buffer. 
            </remarks>
      <docgen category="Buffering Options" order="100" />
    </member>
    <member name="T:NLog.Targets.Wrappers.CompoundTargetBase">
      <summary>
            A base class for targets which wrap other (multiple) targets
            and provide various forms of target routing.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.CompoundTargetBase.#ctor(NLog.Targets.Target[])">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.CompoundTargetBase" /> class.
            </summary>
      <param name="targets">The targets.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.CompoundTargetBase.ToString">
      <summary>
            Returns the text representation of the object. Used for diagnostics.
            </summary>
      <returns>A string that describes the target.</returns>
    </member>
    <member name="M:NLog.Targets.Wrappers.CompoundTargetBase.Write(NLog.LogEventInfo)">
      <summary>
            Writes logging event to the log target.
            </summary>
      <param name="logEvent">Logging event to be written out.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.CompoundTargetBase.FlushAsync(NLog.Common.AsyncContinuation)">
      <summary>
            Flush any pending log messages for all wrapped targets.
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
    </member>
    <member name="P:NLog.Targets.Wrappers.CompoundTargetBase.Targets">
      <summary>
            Gets the collection of targets managed by this compound target.
            </summary>
    </member>
    <member name="T:NLog.Targets.Wrappers.FallbackGroupTarget">
      <summary>
            Provides fallback-on-error.
            </summary>
      <seealso href="http://nlog-project.org/wiki/FallbackGroup_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>This example causes the messages to be written to server1, 
            and if it fails, messages go to server2.</p>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/FallbackGroup/NLog.config" />
        <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/FallbackGroup/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.Wrappers.FallbackGroupTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.FallbackGroupTarget" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.FallbackGroupTarget.#ctor(NLog.Targets.Target[])">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.FallbackGroupTarget" /> class.
            </summary>
      <param name="targets">The targets.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.FallbackGroupTarget.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Forwards the log event to the sub-targets until one of them succeeds.
            </summary>
      <param name="logEvent">The log event.</param>
      <remarks>
            The method remembers the last-known-successful target
            and starts the iteration from it.
            If <see cref="P:NLog.Targets.Wrappers.FallbackGroupTarget.ReturnToFirstOnSuccess" /> is set, the method
            resets the target to the first target
            stored in <see cref="N:NLog.Targets" />.
            </remarks>
    </member>
    <member name="P:NLog.Targets.Wrappers.FallbackGroupTarget.ReturnToFirstOnSuccess">
      <summary>
            Gets or sets a value indicating whether to return to the first target after any successful write.
            </summary>
      <docgen category="Fallback Options" order="10" />
    </member>
    <member name="T:NLog.Targets.Wrappers.FilteringRule">
      <summary>
            Filtering rule for <see cref="T:NLog.Targets.Wrappers.PostFilteringTargetWrapper" />.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.FilteringRule.#ctor">
      <summary>
            Initializes a new instance of the FilteringRule class.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.FilteringRule.#ctor(NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionExpression)">
      <summary>
            Initializes a new instance of the FilteringRule class.
            </summary>
      <param name="whenExistsExpression">Condition to be tested against all events.</param>
      <param name="filterToApply">Filter to apply to all log events when the first condition matches any of them.</param>
    </member>
    <member name="P:NLog.Targets.Wrappers.FilteringRule.Exists">
      <summary>
            Gets or sets the condition to be tested.
            </summary>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="P:NLog.Targets.Wrappers.FilteringRule.Filter">
      <summary>
            Gets or sets the resulting filter to be applied when the condition matches.
            </summary>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="T:NLog.Targets.Wrappers.FilteringTargetWrapper">
      <summary>
            Filters log entries based on a condition.
            </summary>
      <seealso href="http://nlog-project.org/wiki/FilteringWrapper_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>This example causes the messages not contains the string '1' to be ignored.</p>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/FilteringWrapper/NLog.config" />
        <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/FilteringWrapper/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.Wrappers.FilteringTargetWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.FilteringTargetWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.FilteringTargetWrapper.#ctor(NLog.Targets.Target,NLog.Conditions.ConditionExpression)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.FilteringTargetWrapper" /> class.
            </summary>
      <param name="wrappedTarget">The wrapped target.</param>
      <param name="condition">The condition.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.FilteringTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Checks the condition against the passed log event.
            If the condition is met, the log event is forwarded to
            the wrapped target.
            </summary>
      <param name="logEvent">Log event.</param>
    </member>
    <member name="P:NLog.Targets.Wrappers.FilteringTargetWrapper.Condition">
      <summary>
            Gets or sets the condition expression. Log events who meet this condition will be forwarded 
            to the wrapped target.
            </summary>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper">
      <summary>
            Impersonates another user for the duration of the write.
            </summary>
      <seealso href="http://nlog-project.org/wiki/ImpersonatingWrapper_target">Documentation on NLog Wiki</seealso>
    </member>
    <member name="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ContextReverter">
      <summary>
            Helper class which reverts the given <see cref="T:System.Security.Principal.WindowsImpersonationContext" /> 
            to its original value as part of <see cref="M:System.IDisposable.Dispose" />.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ContextReverter.#ctor(System.Security.Principal.WindowsImpersonationContext)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ContextReverter" /> class.
            </summary>
      <param name="windowsImpersonationContext">The windows impersonation context.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ContextReverter.Dispose">
      <summary>
            Reverts the impersonation context.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.#ctor(NLog.Targets.Target)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper" /> class.
            </summary>
      <param name="wrappedTarget">The wrapped target.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.InitializeTarget">
      <summary>
            Initializes the impersonation context.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.CloseTarget">
      <summary>
            Closes the impersonation context.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Changes the security context, forwards the call to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget" />.Write()
            and switches the context back to original.
            </summary>
      <param name="logEvent">The log event.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo[])">
      <summary>
            Changes the security context, forwards the call to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget" />.Write()
            and switches the context back to original.
            </summary>
      <param name="logEvents">Log events.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.FlushAsync(NLog.Common.AsyncContinuation)">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
    </member>
    <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.UserName">
      <summary>
            Gets or sets username to change context to.
            </summary>
      <docgen category="Impersonation Options" order="10" />
    </member>
    <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Password">
      <summary>
            Gets or sets the user account password.
            </summary>
      <docgen category="Impersonation Options" order="10" />
    </member>
    <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Domain">
      <summary>
            Gets or sets Windows domain name to change context to.
            </summary>
      <docgen category="Impersonation Options" order="10" />
    </member>
    <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.LogOnType">
      <summary>
            Gets or sets the Logon Type.
            </summary>
      <docgen category="Impersonation Options" order="10" />
    </member>
    <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.LogOnProvider">
      <summary>
            Gets or sets the type of the logon provider.
            </summary>
      <docgen category="Impersonation Options" order="10" />
    </member>
    <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ImpersonationLevel">
      <summary>
            Gets or sets the required impersonation level.
            </summary>
      <docgen category="Impersonation Options" order="10" />
    </member>
    <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.RevertToSelf">
      <summary>
            Gets or sets a value indicating whether to revert to the credentials of the process instead of impersonating another user.
            </summary>
      <docgen category="Impersonation Options" order="10" />
    </member>
    <member name="T:NLog.Targets.Wrappers.LogOnProviderType">
      <summary>
            Logon provider.
            </summary>
    </member>
    <member name="F:NLog.Targets.Wrappers.LogOnProviderType.Default">
      <summary>
            Use the standard logon provider for the system.
            </summary>
      <remarks>
            The default security provider is negotiate, unless you pass NULL for the domain name and the user name
            is not in UPN format. In this case, the default provider is NTLM.
            NOTE: Windows 2000/NT:   The default security provider is NTLM.
            </remarks>
    </member>
    <member name="T:NLog.Targets.Wrappers.PostFilteringTargetWrapper">
      <summary>
            Filters buffered log entries based on a set of conditions that are evaluated on a group of events.
            </summary>
      <seealso href="http://nlog-project.org/wiki/PostFilteringWrapper_target">Documentation on NLog Wiki</seealso>
      <remarks>
            PostFilteringWrapper must be used with some type of buffering target or wrapper, such as
            AsyncTargetWrapper, BufferingWrapper or ASPNetBufferingWrapper.
            </remarks>
      <example>
        <p>
            This example works like this. If there are no Warn,Error or Fatal messages in the buffer
            only Info messages are written to the file, but if there are any warnings or errors, 
            the output includes detailed trace (levels &gt;= Debug). You can plug in a different type
            of buffering wrapper (such as ASPNetBufferingWrapper) to achieve different
            functionality.
            </p>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/PostFilteringWrapper/NLog.config" />
        <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/PostFilteringWrapper/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.Wrappers.PostFilteringTargetWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.PostFilteringTargetWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.PostFilteringTargetWrapper.Write(NLog.Common.AsyncLogEventInfo[])">
      <summary>
            Evaluates all filtering rules to find the first one that matches.
            The matching rule determines the filtering condition to be applied
            to all items in a buffer. If no condition matches, default filter
            is applied to the array of log events.
            </summary>
      <param name="logEvents">Array of log events to be post-filtered.</param>
    </member>
    <member name="P:NLog.Targets.Wrappers.PostFilteringTargetWrapper.DefaultFilter">
      <summary>
            Gets or sets the default filter to be applied when no specific rule matches.
            </summary>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="P:NLog.Targets.Wrappers.PostFilteringTargetWrapper.Rules">
      <summary>
            Gets the collection of filtering rules. The rules are processed top-down
            and the first rule that matches determines the filtering condition to
            be applied to log events.
            </summary>
      <docgen category="Filtering Rules" order="10" />
    </member>
    <member name="T:NLog.Targets.Wrappers.RandomizeGroupTarget">
      <summary>
            Sends log messages to a randomly selected target.
            </summary>
      <seealso href="http://nlog-project.org/wiki/RandomizeGroup_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>This example causes the messages to be written to either file1.txt or file2.txt 
            chosen randomly on a per-message basis.
            </p>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/RandomizeGroup/NLog.config" />
        <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/RandomizeGroup/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.Wrappers.RandomizeGroupTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RandomizeGroupTarget" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.RandomizeGroupTarget.#ctor(NLog.Targets.Target[])">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RandomizeGroupTarget" /> class.
            </summary>
      <param name="targets">The targets.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.RandomizeGroupTarget.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Forwards the log event to one of the sub-targets.
            The sub-target is randomly chosen.
            </summary>
      <param name="logEvent">The log event.</param>
    </member>
    <member name="T:NLog.Targets.Wrappers.RepeatingTargetWrapper">
      <summary>
            Repeats each log event the specified number of times.
            </summary>
      <seealso href="http://nlog-project.org/wiki/RepeatingWrapper_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>This example causes each log message to be repeated 3 times.</p>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/RepeatingWrapper/NLog.config" />
        <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/RepeatingWrapper/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.Wrappers.RepeatingTargetWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RepeatingTargetWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.RepeatingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RepeatingTargetWrapper" /> class.
            </summary>
      <param name="wrappedTarget">The wrapped target.</param>
      <param name="repeatCount">The repeat count.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.RepeatingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Forwards the log message to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget" /> by calling the <see cref="M:NLog.Targets.Target.Write(NLog.LogEventInfo)" /> method <see cref="P:NLog.Targets.Wrappers.RepeatingTargetWrapper.RepeatCount" /> times.
            </summary>
      <param name="logEvent">The log event.</param>
    </member>
    <member name="P:NLog.Targets.Wrappers.RepeatingTargetWrapper.RepeatCount">
      <summary>
            Gets or sets the number of times to repeat each log message.
            </summary>
      <docgen category="Repeating Options" order="10" />
    </member>
    <member name="T:NLog.Targets.Wrappers.RetryingTargetWrapper">
      <summary>
            Retries in case of write error.
            </summary>
      <seealso href="http://nlog-project.org/wiki/RetryingWrapper_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>This example causes each write attempt to be repeated 3 times, 
            sleeping 1 second between attempts if first one fails.</p>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/RetryingWrapper/NLog.config" />
        <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/RetryingWrapper/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.Wrappers.RetryingTargetWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RetryingTargetWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.RetryingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RetryingTargetWrapper" /> class.
            </summary>
      <param name="wrappedTarget">The wrapped target.</param>
      <param name="retryCount">The retry count.</param>
      <param name="retryDelayMilliseconds">The retry delay milliseconds.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.RetryingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Writes the specified log event to the wrapped target, retrying and pausing in case of an error.
            </summary>
      <param name="logEvent">The log event.</param>
    </member>
    <member name="P:NLog.Targets.Wrappers.RetryingTargetWrapper.RetryCount">
      <summary>
            Gets or sets the number of retries that should be attempted on the wrapped target in case of a failure.
            </summary>
      <docgen category="Retrying Options" order="10" />
    </member>
    <member name="P:NLog.Targets.Wrappers.RetryingTargetWrapper.RetryDelayMilliseconds">
      <summary>
            Gets or sets the time to wait between retries in milliseconds.
            </summary>
      <docgen category="Retrying Options" order="10" />
    </member>
    <member name="T:NLog.Targets.Wrappers.RoundRobinGroupTarget">
      <summary>
            Distributes log events to targets in a round-robin fashion.
            </summary>
      <seealso href="http://nlog-project.org/wiki/RoundRobinGroup_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>This example causes the messages to be written to either file1.txt or file2.txt.
            Each odd message is written to file2.txt, each even message goes to file1.txt.
            </p>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/RoundRobinGroup/NLog.config" />
        <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/RoundRobinGroup/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.Wrappers.RoundRobinGroupTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RoundRobinGroupTarget" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.RoundRobinGroupTarget.#ctor(NLog.Targets.Target[])">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RoundRobinGroupTarget" /> class.
            </summary>
      <param name="targets">The targets.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.RoundRobinGroupTarget.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Forwards the write to one of the targets from
            the <see cref="N:NLog.Targets" /> collection.
            </summary>
      <param name="logEvent">The log event.</param>
      <remarks>
            The writes are routed in a round-robin fashion.
            The first log event goes to the first target, the second
            one goes to the second target and so on looping to the
            first target when there are no more targets available.
            In general request N goes to Targets[N % Targets.Count].
            </remarks>
    </member>
    <member name="T:NLog.Targets.Wrappers.SecurityImpersonationLevel">
      <summary>
            Impersonation level.
            </summary>
    </member>
    <member name="F:NLog.Targets.Wrappers.SecurityImpersonationLevel.Anonymous">
      <summary>
            Anonymous Level.
            </summary>
    </member>
    <member name="F:NLog.Targets.Wrappers.SecurityImpersonationLevel.Identification">
      <summary>
            Identification Level.
            </summary>
    </member>
    <member name="F:NLog.Targets.Wrappers.SecurityImpersonationLevel.Impersonation">
      <summary>
            Impersonation Level.
            </summary>
    </member>
    <member name="F:NLog.Targets.Wrappers.SecurityImpersonationLevel.Delegation">
      <summary>
            Delegation Level.
            </summary>
    </member>
    <member name="T:NLog.Targets.Wrappers.SecurityLogOnType">
      <summary>
            Logon type.
            </summary>
    </member>
    <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.Interactive">
      <summary>
            Interactive Logon.
            </summary>
      <remarks>
            This logon type is intended for users who will be interactively using the computer, such as a user being logged on  
            by a terminal server, remote shell, or similar process.
            This logon type has the additional expense of caching logon information for disconnected operations;
            therefore, it is inappropriate for some client/server applications,
            such as a mail server.
            </remarks>
    </member>
    <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.Network">
      <summary>
            Network Logon.
            </summary>
      <remarks>
            This logon type is intended for high performance servers to authenticate plaintext passwords.
            The LogonUser function does not cache credentials for this logon type.
            </remarks>
    </member>
    <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.Batch">
      <summary>
            Batch Logon.
            </summary>
      <remarks>
            This logon type is intended for batch servers, where processes may be executing on behalf of a user without
            their direct intervention. This type is also for higher performance servers that process many plaintext
            authentication attempts at a time, such as mail or Web servers.
            The LogonUser function does not cache credentials for this logon type.
            </remarks>
    </member>
    <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.Service">
      <summary>
            Logon as a Service.
            </summary>
      <remarks>
            Indicates a service-type logon. The account provided must have the service privilege enabled.
            </remarks>
    </member>
    <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.NetworkClearText">
      <summary>
            Network Clear Text Logon.
            </summary>
      <remarks>
            This logon type preserves the name and password in the authentication package, which allows the server to make
            connections to other network servers while impersonating the client. A server can accept plaintext credentials
            from a client, call LogonUser, verify that the user can access the system across the network, and still
            communicate with other servers.
            NOTE: Windows NT:  This value is not supported.
            </remarks>
    </member>
    <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.NewCredentials">
      <summary>
            New Network Credentials.
            </summary>
      <remarks>
            This logon type allows the caller to clone its current token and specify new credentials for outbound connections.
            The new logon session has the same local identifier but uses different credentials for other network connections.
            NOTE: This logon type is supported only by the LOGON32_PROVIDER_WINNT50 logon provider.
            NOTE: Windows NT:  This value is not supported.
            </remarks>
    </member>
    <member name="T:NLog.Targets.Wrappers.SplitGroupTarget">
      <summary>
            Writes log events to all targets.
            </summary>
      <seealso href="http://nlog-project.org/wiki/SplitGroup_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>This example causes the messages to be written to both file1.txt or file2.txt 
            </p>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/SplitGroup/NLog.config" />
        <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/SplitGroup/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.Wrappers.SplitGroupTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.SplitGroupTarget" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.SplitGroupTarget.#ctor(NLog.Targets.Target[])">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.SplitGroupTarget" /> class.
            </summary>
      <param name="targets">The targets.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.SplitGroupTarget.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Forwards the specified log event to all sub-targets.
            </summary>
      <param name="logEvent">The log event.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.SplitGroupTarget.Write(NLog.Common.AsyncLogEventInfo[])">
      <summary>
            Writes an array of logging events to the log target. By default it iterates on all
            events and passes them to "Write" method. Inheriting classes can use this method to
            optimize batch writes.
            </summary>
      <param name="logEvents">Logging events to be written out.</param>
    </member>
    <member name="T:NLog.Time.TimeSource">
      <summary>
            Defines source of current time.
            </summary>
    </member>
    <member name="M:NLog.Time.TimeSource.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:NLog.Time.TimeSource.Time">
      <summary>
            Gets current time.
            </summary>
    </member>
    <member name="P:NLog.Time.TimeSource.Current">
      <summary>
            Gets or sets current global time source used in all log events.
            </summary>
      <remarks>
            Default time source is <see cref="T:NLog.Time.FastLocalTimeSource" />.
            </remarks>
    </member>
    <member name="T:NLog.Time.AccurateLocalTimeSource">
      <summary>
            Current local time retrieved directly from DateTime.Now.
            </summary>
    </member>
    <member name="P:NLog.Time.AccurateLocalTimeSource.Time">
      <summary>
            Gets current local time directly from DateTime.Now.
            </summary>
    </member>
    <member name="T:NLog.Time.AccurateUtcTimeSource">
      <summary>
            Current UTC time retrieved directly from DateTime.UtcNow.
            </summary>
    </member>
    <member name="P:NLog.Time.AccurateUtcTimeSource.Time">
      <summary>
            Gets current UTC time directly from DateTime.UtcNow.
            </summary>
    </member>
    <member name="T:NLog.Time.CachedTimeSource">
      <summary>
            Fast time source that updates current time only once per tick (15.6 milliseconds).
            </summary>
    </member>
    <member name="P:NLog.Time.CachedTimeSource.FreshTime">
      <summary>
            Gets raw uncached time from derived time source.
            </summary>
    </member>
    <member name="P:NLog.Time.CachedTimeSource.Time">
      <summary>
            Gets current time cached for one system tick (15.6 milliseconds).
            </summary>
    </member>
    <member name="T:NLog.Time.FastLocalTimeSource">
      <summary>
            Fast local time source that is updated once per tick (15.6 milliseconds).
            </summary>
    </member>
    <member name="P:NLog.Time.FastLocalTimeSource.FreshTime">
      <summary>
            Gets uncached local time directly from DateTime.Now.
            </summary>
    </member>
    <member name="T:NLog.Time.FastUtcTimeSource">
      <summary>
            Fast UTC time source that is updated once per tick (15.6 milliseconds).
            </summary>
    </member>
    <member name="P:NLog.Time.FastUtcTimeSource.FreshTime">
      <summary>
            Gets uncached UTC time directly from DateTime.UtcNow.
            </summary>
    </member>
    <member name="T:NLog.Time.TimeSourceAttribute">
      <summary>
            Marks class as a time source and assigns a name to it.
            </summary>
    </member>
    <member name="M:NLog.Time.TimeSourceAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Time.TimeSourceAttribute" /> class.
            </summary>
      <param name="name">Name of the time source.</param>
    </member>
    <member name="T:ProtoBuf.BclHelpers">
      <summary>
            Provides support for common .NET types that do not have a direct representation
            in protobuf, using the definitions from bcl.proto
            </summary>
    </member>
    <member name="T:ProtoBuf.BclHelpers.NetObjectOptions">
      <summary>
            Optional behaviours that introduce .NET-specific functionality
            </summary>
    </member>
    <member name="M:ProtoBuf.BclHelpers.GetUninitializedObject(System.Type)">
      <summary>
            Creates a new instance of the specified type, bypassing the constructor.
            </summary>
      <param name="type">The type to create</param>
      <returns>The new instance</returns>
      <exception cref="T:System.NotSupportedException">If the platform does not support constructor-skipping</exception>
    </member>
    <member name="M:ProtoBuf.BclHelpers.WriteTimeSpan(System.TimeSpan,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a TimeSpan to a protobuf stream
            </summary>
    </member>
    <member name="M:ProtoBuf.BclHelpers.ReadTimeSpan(ProtoBuf.ProtoReader)">
      <summary>
            Parses a TimeSpan from a protobuf stream
            </summary>
    </member>
    <member name="M:ProtoBuf.BclHelpers.ReadDateTime(ProtoBuf.ProtoReader)">
      <summary>
            Parses a DateTime from a protobuf stream
            </summary>
    </member>
    <member name="M:ProtoBuf.BclHelpers.WriteDateTime(System.DateTime,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a DateTime to a protobuf stream
            </summary>
    </member>
    <member name="M:ProtoBuf.BclHelpers.ReadDecimal(ProtoBuf.ProtoReader)">
      <summary>
            Parses a decimal from a protobuf stream
            </summary>
    </member>
    <member name="M:ProtoBuf.BclHelpers.WriteDecimal(System.Decimal,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a decimal to a protobuf stream
            </summary>
    </member>
    <member name="M:ProtoBuf.BclHelpers.WriteGuid(System.Guid,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a Guid to a protobuf stream
            </summary>
    </member>
    <member name="M:ProtoBuf.BclHelpers.ReadGuid(ProtoBuf.ProtoReader)">
      <summary>
            Parses a Guid from a protobuf stream
            </summary>
    </member>
    <member name="M:ProtoBuf.BclHelpers.ReadNetObject(System.Object,ProtoBuf.ProtoReader,System.Int32,System.Type,ProtoBuf.BclHelpers.NetObjectOptions)">
      <summary>
            Reads an *implementation specific* bundled .NET object, including (as options) type-metadata, identity/re-use, etc.
            </summary>
    </member>
    <member name="M:ProtoBuf.BclHelpers.WriteNetObject(System.Object,ProtoBuf.ProtoWriter,System.Int32,ProtoBuf.BclHelpers.NetObjectOptions)">
      <summary>
            Writes an *implementation specific* bundled .NET object, including (as options) type-metadata, identity/re-use, etc.
            </summary>
    </member>
    <member name="T:ProtoBuf.IExtension">
      <summary>
            Provides addition capability for supporting unexpected fields during
            protocol-buffer serialization/deserialization. This allows for loss-less
            round-trip/merge, even when the data is not fully understood.
            </summary>
    </member>
    <member name="M:ProtoBuf.IExtension.BeginAppend">
      <summary>
            Requests a stream into which any unexpected fields can be persisted.
            </summary>
      <returns>A new stream suitable for storing data.</returns>
    </member>
    <member name="M:ProtoBuf.IExtension.EndAppend(System.IO.Stream,System.Boolean)">
      <summary>
            Indicates that all unexpected fields have now been stored. The
            implementing class is responsible for closing the stream. If
            "commit" is not true the data may be discarded.
            </summary>
      <param name="stream">The stream originally obtained by BeginAppend.</param>
      <param name="commit">True if the append operation completed successfully.</param>
    </member>
    <member name="M:ProtoBuf.IExtension.BeginQuery">
      <summary>
            Requests a stream of the unexpected fields previously stored.
            </summary>
      <returns>A prepared stream of the unexpected fields.</returns>
    </member>
    <member name="M:ProtoBuf.IExtension.EndQuery(System.IO.Stream)">
      <summary>
            Indicates that all unexpected fields have now been read. The
            implementing class is responsible for closing the stream.
            </summary>
      <param name="stream">The stream originally obtained by BeginQuery.</param>
    </member>
    <member name="M:ProtoBuf.IExtension.GetLength">
      <summary>
            Requests the length of the raw binary stream; this is used
            when serializing sub-entities to indicate the expected size.
            </summary>
      <returns>The length of the binary stream representing unexpected data.</returns>
    </member>
    <member name="T:ProtoBuf.BufferExtension">
      <summary>
            Provides a simple buffer-based implementation of an <see cref="T:ProtoBuf.IExtension">extension</see> object.
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoBeforeSerializationAttribute">
      <summary>Specifies a method on the root-contract in an hierarchy to be invoked before serialization.</summary>
    </member>
    <member name="T:ProtoBuf.ProtoAfterSerializationAttribute">
      <summary>Specifies a method on the root-contract in an hierarchy to be invoked after serialization.</summary>
    </member>
    <member name="T:ProtoBuf.ProtoBeforeDeserializationAttribute">
      <summary>Specifies a method on the root-contract in an hierarchy to be invoked before deserialization.</summary>
    </member>
    <member name="T:ProtoBuf.ProtoAfterDeserializationAttribute">
      <summary>Specifies a method on the root-contract in an hierarchy to be invoked after deserialization.</summary>
    </member>
    <member name="M:ProtoBuf.Compiler.CompilerContext.UsingBlock.#ctor(ProtoBuf.Compiler.CompilerContext,ProtoBuf.Compiler.Local)">
      <summary>
            Creates a new "using" block (equivalent) around a variable;
            the variable must exist, and note that (unlike in C#) it is
            the variables *final* value that gets disposed. If you need
            *original* disposal, copy your variable first.
            
            It is the callers responsibility to ensure that the variable's
            scope fully-encapsulates the "using"; if not, the variable
            may be re-used (and thus re-assigned) unexpectedly.
            </summary>
    </member>
    <member name="M:ProtoBuf.Compiler.CompilerContext.LoadNullRef">
      <summary>
            Pushes a null reference onto the stack. Note that this should only
            be used to return a null (or set a variable to null); for null-tests
            use BranchIfTrue / BranchIfFalse.
            </summary>
    </member>
    <member name="T:ProtoBuf.DataFormat">
      <summary>
            Sub-format to use when serializing/deserializing data
            </summary>
    </member>
    <member name="F:ProtoBuf.DataFormat.Default">
      <summary>
            Uses the default encoding for the data-type.
            </summary>
    </member>
    <member name="F:ProtoBuf.DataFormat.ZigZag">
      <summary>
            When applied to signed integer-based data (including Decimal), this
            indicates that zigzag variant encoding will be used. This means that values
            with small magnitude (regardless of sign) take a small amount
            of space to encode.
            </summary>
    </member>
    <member name="F:ProtoBuf.DataFormat.TwosComplement">
      <summary>
            When applied to signed integer-based data (including Decimal), this
            indicates that two's-complement variant encoding will be used.
            This means that any -ve number will take 10 bytes (even for 32-bit),
            so should only be used for compatibility.
            </summary>
    </member>
    <member name="F:ProtoBuf.DataFormat.FixedSize">
      <summary>
            When applied to signed integer-based data (including Decimal), this
            indicates that a fixed amount of space will be used.
            </summary>
    </member>
    <member name="F:ProtoBuf.DataFormat.Group">
      <summary>
            When applied to a sub-message, indicates that the value should be treated
            as group-delimited.
            </summary>
    </member>
    <member name="T:ProtoBuf.IExtensible">
      <summary>
            Indicates that the implementing type has support for protocol-buffer
            <see cref="T:ProtoBuf.IExtension">extensions</see>.
            </summary>
      <remarks>Can be implemented by deriving from Extensible.</remarks>
    </member>
    <member name="M:ProtoBuf.IExtensible.GetExtensionObject(System.Boolean)">
      <summary>
            Retrieves the <see cref="T:ProtoBuf.IExtension">extension</see> object for the current
            instance, optionally creating it if it does not already exist.
            </summary>
      <param name="createIfMissing">Should a new extension object be
            created if it does not already exist?</param>
      <returns>The extension object if it exists (or was created), or null
            if the extension object does not exist or is not available.</returns>
      <remarks>The <c>createIfMissing</c> argument is false during serialization,
            and true during deserialization upon encountering unexpected fields.</remarks>
    </member>
    <member name="T:ProtoBuf.Extensible">
      <summary>
            Simple base class for supporting unexpected fields allowing
            for loss-less round-tips/merge, even if the data is not understod.
            The additional fields are (by default) stored in-memory in a buffer.
            </summary>
      <remarks>As an example of an alternative implementation, you might
            choose to use the file system (temporary files) as the back-end, tracking
            only the paths [such an object would ideally be IDisposable and use
            a finalizer to ensure that the files are removed].</remarks>
      <seealso cref="T:ProtoBuf.IExtensible" />
    </member>
    <member name="M:ProtoBuf.Extensible.GetExtensionObject(System.Boolean)">
      <summary>
            Retrieves the <see cref="T:ProtoBuf.IExtension">extension</see> object for the current
            instance, optionally creating it if it does not already exist.
            </summary>
      <param name="createIfMissing">Should a new extension object be
            created if it does not already exist?</param>
      <returns>The extension object if it exists (or was created), or null
            if the extension object does not exist or is not available.</returns>
      <remarks>The <c>createIfMissing</c> argument is false during serialization,
            and true during deserialization upon encountering unexpected fields.</remarks>
    </member>
    <member name="M:ProtoBuf.Extensible.GetExtensionObject(ProtoBuf.IExtension@,System.Boolean)">
      <summary>
            Provides a simple, default implementation for <see cref="T:ProtoBuf.IExtension">extension</see> support,
            optionally creating it if it does not already exist. Designed to be called by
            classes implementing <see cref="T:ProtoBuf.IExtensible" />.
            </summary>
      <param name="createIfMissing">Should a new extension object be
            created if it does not already exist?</param>
      <param name="extensionObject">The extension field to check (and possibly update).</param>
      <returns>The extension object if it exists (or was created), or null
            if the extension object does not exist or is not available.</returns>
      <remarks>The <c>createIfMissing</c> argument is false during serialization,
            and true during deserialization upon encountering unexpected fields.</remarks>
    </member>
    <member name="M:ProtoBuf.Extensible.AppendValue``1(ProtoBuf.IExtensible,System.Int32,``0)">
      <summary>
            Appends the value as an additional (unexpected) data-field for the instance.
            Note that for non-repeated sub-objects, this equates to a merge operation;
            for repeated sub-objects this adds a new instance to the set; for simple
            values the new value supercedes the old value.
            </summary>
      <remarks>Note that appending a value does not remove the old value from
            the stream; avoid repeatedly appending values for the same field.</remarks>
      <typeparam name="TValue">The type of the value to append.</typeparam>
      <param name="instance">The extensible object to append the value to.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <param name="value">The value to append.</param>
    </member>
    <member name="M:ProtoBuf.Extensible.AppendValue``1(ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,``0)">
      <summary>
            Appends the value as an additional (unexpected) data-field for the instance.
            Note that for non-repeated sub-objects, this equates to a merge operation;
            for repeated sub-objects this adds a new instance to the set; for simple
            values the new value supercedes the old value.
            </summary>
      <remarks>Note that appending a value does not remove the old value from
            the stream; avoid repeatedly appending values for the same field.</remarks>
      <typeparam name="TValue">The data-type of the field.</typeparam>
      <param name="format">The data-format to use when encoding the value.</param>
      <param name="instance">The extensible object to append the value to.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <param name="value">The value to append.</param>
    </member>
    <member name="M:ProtoBuf.Extensible.GetValue``1(ProtoBuf.IExtensible,System.Int32)">
      <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            The value returned is the composed value after merging any duplicated content; if the
            value is "repeated" (a list), then use GetValues instead.
            </summary>
      <typeparam name="TValue">The data-type of the field.</typeparam>
      <param name="instance">The extensible object to obtain the value from.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <returns>The effective value of the field, or the default value if not found.</returns>
    </member>
    <member name="M:ProtoBuf.Extensible.GetValue``1(ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat)">
      <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            The value returned is the composed value after merging any duplicated content; if the
            value is "repeated" (a list), then use GetValues instead.
            </summary>
      <typeparam name="TValue">The data-type of the field.</typeparam>
      <param name="instance">The extensible object to obtain the value from.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <param name="format">The data-format to use when decoding the value.</param>
      <returns>The effective value of the field, or the default value if not found.</returns>
    </member>
    <member name="M:ProtoBuf.Extensible.TryGetValue``1(ProtoBuf.IExtensible,System.Int32,``0@)">
      <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            The value returned (in "value") is the composed value after merging any duplicated content;
            if the value is "repeated" (a list), then use GetValues instead.
            </summary>
      <typeparam name="TValue">The data-type of the field.</typeparam>
      <param name="value">The effective value of the field, or the default value if not found.</param>
      <param name="instance">The extensible object to obtain the value from.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <returns>True if data for the field was present, false otherwise.</returns>
    </member>
    <member name="M:ProtoBuf.Extensible.TryGetValue``1(ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,``0@)">
      <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            The value returned (in "value") is the composed value after merging any duplicated content;
            if the value is "repeated" (a list), then use GetValues instead.
            </summary>
      <typeparam name="TValue">The data-type of the field.</typeparam>
      <param name="value">The effective value of the field, or the default value if not found.</param>
      <param name="instance">The extensible object to obtain the value from.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <param name="format">The data-format to use when decoding the value.</param>
      <returns>True if data for the field was present, false otherwise.</returns>
    </member>
    <member name="M:ProtoBuf.Extensible.TryGetValue``1(ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,System.Boolean,``0@)">
      <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            The value returned (in "value") is the composed value after merging any duplicated content;
            if the value is "repeated" (a list), then use GetValues instead.
            </summary>
      <typeparam name="TValue">The data-type of the field.</typeparam>
      <param name="value">The effective value of the field, or the default value if not found.</param>
      <param name="instance">The extensible object to obtain the value from.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <param name="format">The data-format to use when decoding the value.</param>
      <param name="allowDefinedTag">Allow tags that are present as part of the definition; for example, to query unknown enum values.</param>
      <returns>True if data for the field was present, false otherwise.</returns>
    </member>
    <member name="M:ProtoBuf.Extensible.GetValues``1(ProtoBuf.IExtensible,System.Int32)">
      <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            Each occurrence of the field is yielded separately, making this usage suitable for "repeated"
            (list) fields.
            </summary>
      <remarks>The extended data is processed lazily as the enumerator is iterated.</remarks>
      <typeparam name="TValue">The data-type of the field.</typeparam>
      <param name="instance">The extensible object to obtain the value from.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <returns>An enumerator that yields each occurrence of the field.</returns>
    </member>
    <member name="M:ProtoBuf.Extensible.GetValues``1(ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat)">
      <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            Each occurrence of the field is yielded separately, making this usage suitable for "repeated"
            (list) fields.
            </summary>
      <remarks>The extended data is processed lazily as the enumerator is iterated.</remarks>
      <typeparam name="TValue">The data-type of the field.</typeparam>
      <param name="instance">The extensible object to obtain the value from.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <param name="format">The data-format to use when decoding the value.</param>
      <returns>An enumerator that yields each occurrence of the field.</returns>
    </member>
    <member name="M:ProtoBuf.Extensible.TryGetValue(ProtoBuf.Meta.TypeModel,System.Type,ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,System.Boolean,System.Object@)">
      <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            The value returned (in "value") is the composed value after merging any duplicated content;
            if the value is "repeated" (a list), then use GetValues instead.
            </summary>
      <param name="type">The data-type of the field.</param>
      <param name="model">The model to use for configuration.</param>
      <param name="value">The effective value of the field, or the default value if not found.</param>
      <param name="instance">The extensible object to obtain the value from.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <param name="format">The data-format to use when decoding the value.</param>
      <param name="allowDefinedTag">Allow tags that are present as part of the definition; for example, to query unknown enum values.</param>
      <returns>True if data for the field was present, false otherwise.</returns>
    </member>
    <member name="M:ProtoBuf.Extensible.GetValues(ProtoBuf.Meta.TypeModel,System.Type,ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat)">
      <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            Each occurrence of the field is yielded separately, making this usage suitable for "repeated"
            (list) fields.
            </summary>
      <remarks>The extended data is processed lazily as the enumerator is iterated.</remarks>
      <param name="model">The model to use for configuration.</param>
      <param name="type">The data-type of the field.</param>
      <param name="instance">The extensible object to obtain the value from.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <param name="format">The data-format to use when decoding the value.</param>
      <returns>An enumerator that yields each occurrence of the field.</returns>
    </member>
    <member name="M:ProtoBuf.Extensible.AppendValue(ProtoBuf.Meta.TypeModel,ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,System.Object)">
      <summary>
            Appends the value as an additional (unexpected) data-field for the instance.
            Note that for non-repeated sub-objects, this equates to a merge operation;
            for repeated sub-objects this adds a new instance to the set; for simple
            values the new value supercedes the old value.
            </summary>
      <remarks>Note that appending a value does not remove the old value from
            the stream; avoid repeatedly appending values for the same field.</remarks>
      <param name="model">The model to use for configuration.</param>
      <param name="format">The data-format to use when encoding the value.</param>
      <param name="instance">The extensible object to append the value to.</param>
      <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
      <param name="value">The value to append.</param>
    </member>
    <member name="T:ProtoBuf.ExtensibleUtil">
      <summary>
            This class acts as an internal wrapper allowing us to do a dynamic
            methodinfo invoke; an't put into Serializer as don't want on public
            API; can't put into Serializer&lt;T&gt; since we need to invoke
            accross classes, which isn't allowed in Silverlight)
            </summary>
    </member>
    <member name="M:ProtoBuf.ExtensibleUtil.GetExtendedValues``1(ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,System.Boolean,System.Boolean)">
      <summary>
            All this does is call GetExtendedValuesTyped with the correct type for "instance";
            this ensures that we don't get issues with subclasses declaring conflicting types -
            the caller must respect the fields defined for the type they pass in.
            </summary>
    </member>
    <member name="M:ProtoBuf.ExtensibleUtil.GetExtendedValues(ProtoBuf.Meta.TypeModel,System.Type,ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,System.Boolean,System.Boolean)">
      <summary>
            All this does is call GetExtendedValuesTyped with the correct type for "instance";
            this ensures that we don't get issues with subclasses declaring conflicting types -
            the caller must respect the fields defined for the type they pass in.
            </summary>
    </member>
    <member name="M:ProtoBuf.ExtensibleUtil.AppendExtendValueTyped``2(ProtoBuf.Meta.TypeModel,``0,System.Int32,ProtoBuf.DataFormat,``1)">
      <summary>
            Stores the given value into the instance's stream; the serializer
            is inferred from TValue and format.
            </summary>
      <remarks>Needs to be public to be callable thru reflection in Silverlight</remarks>
    </member>
    <member name="T:ProtoBuf.Helpers">
      <summary>
            Not all frameworks are created equal (fx1.1 vs fx2.0,
            micro-framework, compact-framework,
            silverlight, etc). This class simply wraps up a few things that would
            otherwise make the real code unnecessarily messy, providing fallback
            implementations if necessary.
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoTypeCode">
      <summary>
            Intended to be a direct map to regular TypeCode, but:
            - with missing types
            - existing on WinRT
            </summary>
    </member>
    <member name="T:ProtoBuf.ImplicitFields">
      <summary>
            Specifies the method used to infer field tags for members of the type
            under consideration. Tags are deduced using the invariant alphabetic
            sequence of the members' names; this makes implicit field tags very brittle,
            and susceptible to changes such as field names (normally an isolated
            change).
            </summary>
    </member>
    <member name="F:ProtoBuf.ImplicitFields.None">
      <summary>
            No members are serialized implicitly; all members require a suitable
            attribute such as [ProtoMember]. This is the recmomended mode for
            most scenarios.
            </summary>
    </member>
    <member name="F:ProtoBuf.ImplicitFields.AllPublic">
      <summary>
            Public properties and fields are eligible for implicit serialization;
            this treats the public API as a contract. Ordering beings from ImplicitFirstTag.
            </summary>
    </member>
    <member name="F:ProtoBuf.ImplicitFields.AllFields">
      <summary>
            Public and non-public fields are eligible for implicit serialization;
            this acts as a state/implementation serializer. Ordering beings from ImplicitFirstTag.
            </summary>
    </member>
    <member name="T:ProtoBuf.Meta.CallbackSet">
      <summary>
            Represents the set of serialization callbacks to be used when serializing/deserializing a type.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.CallbackSet.BeforeSerialize">
      <summary>Called before serializing an instance</summary>
    </member>
    <member name="P:ProtoBuf.Meta.CallbackSet.BeforeDeserialize">
      <summary>Called before deserializing an instance</summary>
    </member>
    <member name="P:ProtoBuf.Meta.CallbackSet.AfterSerialize">
      <summary>Called after serializing an instance</summary>
    </member>
    <member name="P:ProtoBuf.Meta.CallbackSet.AfterDeserialize">
      <summary>Called after deserializing an instance</summary>
    </member>
    <member name="P:ProtoBuf.Meta.CallbackSet.NonTrivial">
      <summary>
            True if any callback is set, else False
            </summary>
    </member>
    <member name="T:ProtoBuf.Meta.MetaType">
      <summary>
            Represents a type at runtime for use with protobuf, allowing the field mappings (etc) to be defined
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.ToString">
      <summary>
            Get the name of the type being represented
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.AddSubType(System.Int32,System.Type)">
      <summary>
            Adds a known sub-type to the inheritance model
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.AddSubType(System.Int32,System.Type,ProtoBuf.DataFormat)">
      <summary>
            Adds a known sub-type to the inheritance model
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.SetCallbacks(System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
      <summary>
            Assigns the callbacks to use during serialiation/deserialization.
            </summary>
      <param name="beforeSerialize">The method (or null) called before serialization begins.</param>
      <param name="afterSerialize">The method (or null) called when serialization is complete.</param>
      <param name="beforeDeserialize">The method (or null) called before deserialization begins (or when a new instance is created during deserialization).</param>
      <param name="afterDeserialize">The method (or null) called when deserialization is complete.</param>
      <returns>The set of callbacks.</returns>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.SetCallbacks(System.String,System.String,System.String,System.String)">
      <summary>
            Assigns the callbacks to use during serialiation/deserialization.
            </summary>
      <param name="beforeSerialize">The name of the method (or null) called before serialization begins.</param>
      <param name="afterSerialize">The name of the method (or null) called when serialization is complete.</param>
      <param name="beforeDeserialize">The name of the method (or null) called before deserialization begins (or when a new instance is created during deserialization).</param>
      <param name="afterDeserialize">The name of the method (or null) called when deserialization is complete.</param>
      <returns>The set of callbacks.</returns>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.SetFactory(System.Reflection.MethodInfo)">
      <summary>
            Designate a factory-method to use to create instances of this type
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.SetFactory(System.String)">
      <summary>
            Designate a factory-method to use to create instances of this type
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.ThrowIfFrozen">
      <summary>
            Throws an exception if the type has been made immutable
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.Add(System.Int32,System.String)">
      <summary>
            Adds a member (by name) to the MetaType
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.AddField(System.Int32,System.String)">
      <summary>
            Adds a member (by name) to the MetaType, returning the ValueMember rather than the fluent API.
            This is otherwise identical to Add.
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.Add(System.String)">
      <summary>
            Adds a member (by name) to the MetaType
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.SetSurrogate(System.Type)">
      <summary>
            Performs serialization of this type via a surrogate; all
            other serialization options are ignored and handled
            by the surrogate's configuration.
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.Add(System.String[])">
      <summary>
            Adds a set of members (by name) to the MetaType
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.Add(System.Int32,System.String,System.Object)">
      <summary>
            Adds a member (by name) to the MetaType
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.Add(System.Int32,System.String,System.Type,System.Type)">
      <summary>
            Adds a member (by name) to the MetaType, including an itemType and defaultType for representing lists
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.AddField(System.Int32,System.String,System.Type,System.Type)">
      <summary>
            Adds a member (by name) to the MetaType, including an itemType and defaultType for representing lists, returning the ValueMember rather than the fluent API.
            This is otherwise identical to Add.
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.GetFields">
      <summary>
            Returns the ValueMember instances associated with this type
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.GetSubtypes">
      <summary>
            Returns the SubType instances associated with this type
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.MetaType.CompileInPlace">
      <summary>
            Compiles the serializer for this type; this is *not* a full
            standalone compile, but can significantly boost performance
            while allowing additional types to be added.
            </summary>
      <remarks>An in-place compile can access non-public types / members</remarks>
    </member>
    <member name="P:ProtoBuf.Meta.MetaType.BaseType">
      <summary>
            Gets the base-type for this type
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.MetaType.IncludeSerializerMethod">
      <summary>
            When used to compile a model, should public serialization/deserialzation methods
            be included for this type?
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.MetaType.AsReferenceDefault">
      <summary>
            Should this type be treated as a reference by default?
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.MetaType.HasCallbacks">
      <summary>
            Indicates whether the current type has defined callbacks 
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.MetaType.HasSubtypes">
      <summary>
            Indicates whether the current type has defined subtypes
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.MetaType.Callbacks">
      <summary>
            Returns the set of callbacks defined for this type
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.MetaType.Name">
      <summary>
            Gets or sets the name of this contract.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.MetaType.Type">
      <summary>
            The runtime type that the meta-type represents
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.MetaType.UseConstructor">
      <summary>
            Gets or sets whether the type should use a parameterless constructor (the default),
            or whether the type should skip the constructor completely. This option is not supported
            on compact-framework.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.MetaType.ConstructType">
      <summary>
            The concrete type to create when a new instance of this type is needed; this may be useful when dealing
            with dynamic proxies, or with interface-based APIs
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.MetaType.Item(System.Int32)">
      <summary>
            Returns the ValueMember that matchs a given field number, or null if not found
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.MetaType.Item(System.Reflection.MemberInfo)">
      <summary>
            Returns the ValueMember that matchs a given member (property/field), or null if not found
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.MetaType.EnumPassthru">
      <summary>
            Gets or sets a value indicating that an enum should be treated directly as an int/short/etc, rather
            than enforcing .proto enum rules. This is useful *in particul* for [Flags] enums.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.MetaType.IgnoreListHandling">
      <summary>
            Gets or sets a value indicating that this type should NOT be treated as a list, even if it has
            familiar list-like characteristics (enumerable, add, etc)
            </summary>
    </member>
    <member name="T:ProtoBuf.Meta.TypeModel">
      <summary>
            Provides protobuf serialization support for a number of types
            </summary>
    </member>
    <member name="T:ProtoBuf.Meta.TypeModel.CallbackType">
      <summary>
            Indicates the type of callback to be used
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.MapType(System.Type)">
      <summary>
            Resolve a System.Type to the compiler-specific type
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.MapType(System.Type,System.Boolean)">
      <summary>
            Resolve a System.Type to the compiler-specific type
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.TrySerializeAuxiliaryType(ProtoBuf.ProtoWriter,System.Type,ProtoBuf.DataFormat,System.Int32,System.Object,System.Boolean)">
      <summary>
            This is the more "complete" version of Serialize, which handles single instances of mapped types.
            The value is written as a complete field, including field-header and (for sub-objects) a
            length-prefix
            In addition to that, this provides support for:
             - basic values; individual int / string / Guid / etc
             - IEnumerable sequences of any type handled by TrySerializeAuxiliaryType
             
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.Serialize(System.IO.Stream,System.Object)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream.
            </summary>
      <param name="value">The existing instance to be serialized (cannot be null).</param>
      <param name="dest">The destination stream to write to.</param>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.Serialize(System.IO.Stream,System.Object,ProtoBuf.SerializationContext)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream.
            </summary>
      <param name="value">The existing instance to be serialized (cannot be null).</param>
      <param name="dest">The destination stream to write to.</param>
      <param name="context">Additional information about this serialization operation.</param>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.Serialize(ProtoBuf.ProtoWriter,System.Object)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied writer.
            </summary>
      <param name="value">The existing instance to be serialized (cannot be null).</param>
      <param name="dest">The destination writer to write to.</param>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.DeserializeWithLengthPrefix(System.IO.Stream,System.Object,System.Type,ProtoBuf.PrefixStyle,System.Int32)">
      <summary>
            Applies a protocol-buffer stream to an existing instance (or null), using length-prefixed
            data - useful with network IO.
            </summary>
      <param name="type">The type being merged.</param>
      <param name="value">The existing instance to be modified (can be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <param name="fieldNumber">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.DeserializeWithLengthPrefix(System.IO.Stream,System.Object,System.Type,ProtoBuf.PrefixStyle,System.Int32,ProtoBuf.Serializer.TypeResolver)">
      <summary>
            Applies a protocol-buffer stream to an existing instance (or null), using length-prefixed
            data - useful with network IO.
            </summary>
      <param name="type">The type being merged.</param>
      <param name="value">The existing instance to be modified (can be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <param name="expectedField">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
      <param name="resolver">Used to resolve types on a per-field basis.</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.DeserializeWithLengthPrefix(System.IO.Stream,System.Object,System.Type,ProtoBuf.PrefixStyle,System.Int32,ProtoBuf.Serializer.TypeResolver,System.Int32@)">
      <summary>
            Applies a protocol-buffer stream to an existing instance (or null), using length-prefixed
            data - useful with network IO.
            </summary>
      <param name="type">The type being merged.</param>
      <param name="value">The existing instance to be modified (can be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <param name="expectedField">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
      <param name="resolver">Used to resolve types on a per-field basis.</param>
      <param name="bytesRead">Returns the number of bytes consumed by this operation (includes length-prefix overheads and any skipped data).</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.DeserializeItems(System.IO.Stream,System.Type,ProtoBuf.PrefixStyle,System.Int32,ProtoBuf.Serializer.TypeResolver)">
      <summary>
            Reads a sequence of consecutive length-prefixed items from a stream, using
            either base-128 or fixed-length prefixes. Base-128 prefixes with a tag
            are directly comparable to serializing multiple items in succession
            (use the <see cref="F:ProtoBuf.Serializer.ListItemTag" /> tag to emulate the implicit behavior
            when serializing a list/array). When a tag is
            specified, any records with different tags are silently omitted. The
            tag is ignored. The tag is ignores for fixed-length prefixes.
            </summary>
      <param name="source">The binary stream containing the serialized records.</param>
      <param name="style">The prefix style used in the data.</param>
      <param name="expectedField">The tag of records to return (if non-positive, then no tag is
            expected and all records are returned).</param>
      <param name="resolver">On a field-by-field basis, the type of object to deserialize (can be null if "type" is specified). </param>
      <param name="type">The type of object to deserialize (can be null if "resolver" is specified).</param>
      <returns>The sequence of deserialized objects.</returns>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.DeserializeItems(System.IO.Stream,System.Type,ProtoBuf.PrefixStyle,System.Int32,ProtoBuf.Serializer.TypeResolver,ProtoBuf.SerializationContext)">
      <summary>
            Reads a sequence of consecutive length-prefixed items from a stream, using
            either base-128 or fixed-length prefixes. Base-128 prefixes with a tag
            are directly comparable to serializing multiple items in succession
            (use the <see cref="F:ProtoBuf.Serializer.ListItemTag" /> tag to emulate the implicit behavior
            when serializing a list/array). When a tag is
            specified, any records with different tags are silently omitted. The
            tag is ignored. The tag is ignores for fixed-length prefixes.
            </summary>
      <param name="source">The binary stream containing the serialized records.</param>
      <param name="style">The prefix style used in the data.</param>
      <param name="expectedField">The tag of records to return (if non-positive, then no tag is
            expected and all records are returned).</param>
      <param name="resolver">On a field-by-field basis, the type of object to deserialize (can be null if "type" is specified). </param>
      <param name="type">The type of object to deserialize (can be null if "resolver" is specified).</param>
      <returns>The sequence of deserialized objects.</returns>
      <param name="context">Additional information about this serialization operation.</param>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.DeserializeItems``1(System.IO.Stream,ProtoBuf.PrefixStyle,System.Int32)">
      <summary>
            Reads a sequence of consecutive length-prefixed items from a stream, using
            either base-128 or fixed-length prefixes. Base-128 prefixes with a tag
            are directly comparable to serializing multiple items in succession
            (use the <see cref="F:ProtoBuf.Serializer.ListItemTag" /> tag to emulate the implicit behavior
            when serializing a list/array). When a tag is
            specified, any records with different tags are silently omitted. The
            tag is ignored. The tag is ignores for fixed-length prefixes.
            </summary>
      <typeparam name="T">The type of object to deserialize.</typeparam>
      <param name="source">The binary stream containing the serialized records.</param>
      <param name="style">The prefix style used in the data.</param>
      <param name="expectedField">The tag of records to return (if non-positive, then no tag is
            expected and all records are returned).</param>
      <returns>The sequence of deserialized objects.</returns>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.DeserializeItems``1(System.IO.Stream,ProtoBuf.PrefixStyle,System.Int32,ProtoBuf.SerializationContext)">
      <summary>
            Reads a sequence of consecutive length-prefixed items from a stream, using
            either base-128 or fixed-length prefixes. Base-128 prefixes with a tag
            are directly comparable to serializing multiple items in succession
            (use the <see cref="F:ProtoBuf.Serializer.ListItemTag" /> tag to emulate the implicit behavior
            when serializing a list/array). When a tag is
            specified, any records with different tags are silently omitted. The
            tag is ignored. The tag is ignores for fixed-length prefixes.
            </summary>
      <typeparam name="T">The type of object to deserialize.</typeparam>
      <param name="source">The binary stream containing the serialized records.</param>
      <param name="style">The prefix style used in the data.</param>
      <param name="expectedField">The tag of records to return (if non-positive, then no tag is
            expected and all records are returned).</param>
      <returns>The sequence of deserialized objects.</returns>
      <param name="context">Additional information about this serialization operation.</param>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.SerializeWithLengthPrefix(System.IO.Stream,System.Object,System.Type,ProtoBuf.PrefixStyle,System.Int32)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream,
            with a length-prefix. This is useful for socket programming,
            as DeserializeWithLengthPrefix can be used to read the single object back
            from an ongoing stream.
            </summary>
      <param name="type">The type being serialized.</param>
      <param name="value">The existing instance to be serialized (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <param name="dest">The destination stream to write to.</param>
      <param name="fieldNumber">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.SerializeWithLengthPrefix(System.IO.Stream,System.Object,System.Type,ProtoBuf.PrefixStyle,System.Int32,ProtoBuf.SerializationContext)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream,
            with a length-prefix. This is useful for socket programming,
            as DeserializeWithLengthPrefix can be used to read the single object back
            from an ongoing stream.
            </summary>
      <param name="type">The type being serialized.</param>
      <param name="value">The existing instance to be serialized (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <param name="dest">The destination stream to write to.</param>
      <param name="fieldNumber">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
      <param name="context">Additional information about this serialization operation.</param>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.Deserialize(System.IO.Stream,System.Object,System.Type)">
      <summary>
            Applies a protocol-buffer stream to an existing instance (which may be null).
            </summary>
      <param name="type">The type (including inheritance) to consider.</param>
      <param name="value">The existing instance to be modified (can be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.Deserialize(System.IO.Stream,System.Object,System.Type,ProtoBuf.SerializationContext)">
      <summary>
            Applies a protocol-buffer stream to an existing instance (which may be null).
            </summary>
      <param name="type">The type (including inheritance) to consider.</param>
      <param name="value">The existing instance to be modified (can be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
      <param name="context">Additional information about this serialization operation.</param>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.Deserialize(System.IO.Stream,System.Object,System.Type,System.Int32)">
      <summary>
            Applies a protocol-buffer stream to an existing instance (which may be null).
            </summary>
      <param name="type">The type (including inheritance) to consider.</param>
      <param name="value">The existing instance to be modified (can be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <param name="length">The number of bytes to consume.</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.Deserialize(System.IO.Stream,System.Object,System.Type,System.Int32,ProtoBuf.SerializationContext)">
      <summary>
            Applies a protocol-buffer stream to an existing instance (which may be null).
            </summary>
      <param name="type">The type (including inheritance) to consider.</param>
      <param name="value">The existing instance to be modified (can be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <param name="length">The number of bytes to consume (or -1 to read to the end of the stream).</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
      <param name="context">Additional information about this serialization operation.</param>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.Deserialize(ProtoBuf.ProtoReader,System.Object,System.Type)">
      <summary>
            Applies a protocol-buffer reader to an existing instance (which may be null).
            </summary>
      <param name="type">The type (including inheritance) to consider.</param>
      <param name="value">The existing instance to be modified (can be null).</param>
      <param name="source">The reader to apply to the instance (cannot be null).</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.TryDeserializeAuxiliaryType(ProtoBuf.ProtoReader,ProtoBuf.DataFormat,System.Int32,System.Type,System.Object@,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            This is the more "complete" version of Deserialize, which handles single instances of mapped types.
            The value is read as a complete field, including field-header and (for sub-objects) a
            length-prefix..kmc  
            
            In addition to that, this provides support for:
             - basic values; individual int / string / Guid / etc
             - IList sets of any type handled by TryDeserializeAuxiliaryType
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.Create">
      <summary>
            Creates a new runtime model, to which the caller
            can add support for a range of types. A model
            can be used "as is", or can be compiled for
            optimal performance.
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.ResolveProxies(System.Type)">
      <summary>
            Applies common proxy scenarios, resolving the actual type to consider
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.IsDefined(System.Type)">
      <summary>
            Indicates whether the supplied type is explicitly modelled by the model
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.GetKey(System.Type@)">
      <summary>
            Provides the key that represents a given type in the current model.
            The type is also normalized for proxies at the same time.
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.GetKeyImpl(System.Type)">
      <summary>
            Provides the key that represents a given type in the current model.
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.Serialize(System.Int32,System.Object,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream.
            </summary>
      <param name="key">Represents the type (including inheritance) to consider.</param>
      <param name="value">The existing instance to be serialized (cannot be null).</param>
      <param name="dest">The destination stream to write to.</param>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.Deserialize(System.Int32,System.Object,ProtoBuf.ProtoReader)">
      <summary>
            Applies a protocol-buffer stream to an existing instance (which may be null).
            </summary>
      <param name="key">Represents the type (including inheritance) to consider.</param>
      <param name="value">The existing instance to be modified (can be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.DeepClone(System.Object)">
      <summary>
            Create a deep clone of the supplied instance; any sub-items are also cloned.
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.ThrowUnexpectedSubtype(System.Type,System.Type)">
      <summary>
            Indicates that while an inheritance tree exists, the exact type encountered was not
            specified in that hierarchy and cannot be processed.
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.ThrowUnexpectedType(System.Type)">
      <summary>
            Indicates that the given type was not expected, and cannot be processed.
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.ThrowCannotCreateInstance(System.Type)">
      <summary>
            Indicates that the given type cannot be constructed; it may still be possible to 
            deserialize into existing instances.
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.CanSerializeContractType(System.Type)">
      <summary>
            Returns true if the type supplied is either a recognised contract type,
            or a *list* of a recognised contract type. 
            </summary>
      <remarks>Note that primitives always return false, even though the engine
            will, if forced, try to serialize such</remarks>
      <returns>True if this type is recognised as a serializable entity, else false</returns>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.CanSerialize(System.Type)">
      <summary>
            Returns true if the type supplied is a basic type with inbuilt handling,
            a recognised contract type, or a *list* of a basic / contract type. 
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.CanSerializeBasicType(System.Type)">
      <summary>
            Returns true if the type supplied is a basic type with inbuilt handling,
            or a *list* of a basic type with inbuilt handling
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.GetSchema(System.Type)">
      <summary>
            Suggest a .proto definition for the given type
            </summary>
      <param name="type">The type to generate a .proto definition for, or <c>null</c> to generate a .proto that represents the entire model</param>
      <returns>The .proto definition as a string</returns>
    </member>
    <member name="M:ProtoBuf.Meta.TypeModel.CreateFormatter(System.Type)">
      <summary>
            Creates a new IFormatter that uses protocol-buffer [de]serialization.
            </summary>
      <returns>A new IFormatter to be used during [de]serialization.</returns>
      <param name="type">The type of object to be [de]deserialized by the formatter.</param>
    </member>
    <member name="E:ProtoBuf.Meta.TypeModel.DynamicTypeFormatting">
      <summary>
            Used to provide custom services for writing and parsing type names when using dynamic types. Both parsing and formatting
            are provided on a single API as it is essential that both are mapped identically at all times.
            </summary>
    </member>
    <member name="T:ProtoBuf.Meta.RuntimeTypeModel">
      <summary>
            Provides protobuf serialization support for a number of types that can be defined at runtime
            </summary>
    </member>
    <member name="T:ProtoBuf.Meta.RuntimeTypeModel.CompilerOptions">
      <summary>
            Represents configuration options for compiling a model to 
            a standalone assembly.
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.RuntimeTypeModel.CompilerOptions.SetFrameworkOptions(ProtoBuf.Meta.MetaType)">
      <summary>
            Import framework options from an existing type
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.CompilerOptions.TargetFrameworkName">
      <summary>
            The TargetFrameworkAttribute FrameworkName value to burn into the generated assembly
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.CompilerOptions.TargetFrameworkDisplayName">
      <summary>
            The TargetFrameworkAttribute FrameworkDisplayName value to burn into the generated assembly
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.CompilerOptions.TypeName">
      <summary>
            The name of the TypeModel class to create
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.CompilerOptions.OutputPath">
      <summary>
            The path for the new dll
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.CompilerOptions.ImageRuntimeVersion">
      <summary>
            The runtime version for the generated assembly
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.CompilerOptions.MetaDataVersion">
      <summary>
            The runtime version for the generated assembly
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.RuntimeTypeModel.GetTypes">
      <summary>
            Returns a sequence of the Type instances that can be
            processed by this model.
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.RuntimeTypeModel.GetSchema(System.Type)">
      <summary>
            Suggest a .proto definition for the given type
            </summary>
      <param name="type">The type to generate a .proto definition for, or <c>null</c> to generate a .proto that represents the entire model</param>
      <returns>The .proto definition as a string</returns>
    </member>
    <member name="M:ProtoBuf.Meta.RuntimeTypeModel.Add(System.Type,System.Boolean)">
      <summary>
            Adds support for an additional type in this model, optionally
            appplying inbuilt patterns. If the type is already known to the
            model, the existing type is returned **without** applying
            any additional behaviour.
            </summary>
      <remarks>Inbuilt patterns include:
            [ProtoContract]/[ProtoMember(n)]
            [DataContract]/[DataMember(Order=n)]
            [XmlType]/[XmlElement(Order=n)]
            [On{Des|S}erializ{ing|ed}]
            ShouldSerialize*/*Specified
            </remarks>
      <param name="type">The type to be supported</param>
      <param name="applyDefaultBehaviour">Whether to apply the inbuilt configuration patterns (via attributes etc), or
            just add the type with no additional configuration (the type must then be manually configured).</param>
      <returns>The MetaType representing this type, allowing
            further configuration.</returns>
    </member>
    <member name="M:ProtoBuf.Meta.RuntimeTypeModel.ThrowIfFrozen">
      <summary>
            Verifies that the model is still open to changes; if not, an exception is thrown
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.RuntimeTypeModel.Freeze">
      <summary>
            Prevents further changes to this model
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.RuntimeTypeModel.GetKeyImpl(System.Type)">
      <summary>
            Provides the key that represents a given type in the current model.
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.RuntimeTypeModel.Serialize(System.Int32,System.Object,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream.
            </summary>
      <param name="key">Represents the type (including inheritance) to consider.</param>
      <param name="value">The existing instance to be serialized (cannot be null).</param>
      <param name="dest">The destination stream to write to.</param>
    </member>
    <member name="M:ProtoBuf.Meta.RuntimeTypeModel.Deserialize(System.Int32,System.Object,ProtoBuf.ProtoReader)">
      <summary>
            Applies a protocol-buffer stream to an existing instance (which may be null).
            </summary>
      <param name="key">Represents the type (including inheritance) to consider.</param>
      <param name="value">The existing instance to be modified (can be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
    </member>
    <member name="M:ProtoBuf.Meta.RuntimeTypeModel.CompileInPlace">
      <summary>
            Compiles the serializers individually; this is *not* a full
            standalone compile, but can significantly boost performance
            while allowing additional types to be added.
            </summary>
      <remarks>An in-place compile can access non-public types / members</remarks>
    </member>
    <member name="M:ProtoBuf.Meta.RuntimeTypeModel.Compile">
      <summary>
            Fully compiles the current model into a static-compiled model instance
            </summary>
      <remarks>A full compilation is restricted to accessing public types / members</remarks>
      <returns>An instance of the newly created compiled type-model</returns>
    </member>
    <member name="M:ProtoBuf.Meta.RuntimeTypeModel.Compile(System.String,System.String)">
      <summary>
            Fully compiles the current model into a static-compiled serialization dll
            (the serialization dll still requires protobuf-net for support services).
            </summary>
      <remarks>A full compilation is restricted to accessing public types / members</remarks>
      <param name="name">The name of the TypeModel class to create</param>
      <param name="path">The path for the new dll</param>
      <returns>An instance of the newly created compiled type-model</returns>
    </member>
    <member name="M:ProtoBuf.Meta.RuntimeTypeModel.Compile(ProtoBuf.Meta.RuntimeTypeModel.CompilerOptions)">
      <summary>
            Fully compiles the current model into a static-compiled serialization dll
            (the serialization dll still requires protobuf-net for support services).
            </summary>
      <remarks>A full compilation is restricted to accessing public types / members</remarks>
      <returns>An instance of the newly created compiled type-model</returns>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.InferTagFromNameDefault">
      <summary>
            Global default that
            enables/disables automatic tag generation based on the existing name / order
            of the defined members. See <seealso cref="P:ProtoBuf.ProtoContractAttribute.InferTagFromName" />
            for usage and <b>important warning</b> / explanation.
            You must set the global default before attempting to serialize/deserialize any
            impacted type.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.AutoAddProtoContractTypesOnly">
      <summary>
            Global default that determines whether types are considered serializable
            if they have [DataContract] / [XmlType]. With this enabled, <b>ONLY</b>
            types marked as [ProtoContract] are added automatically.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.UseImplicitZeroDefaults">
      <summary>
            Global switch that enables or disables the implicit
            handling of "zero defaults"; meanning: if no other default is specified,
            it assumes bools always default to false, integers to zero, etc.
            
            If this is disabled, no such assumptions are made and only *explicit*
            default values are processed. This is enabled by default to 
            preserve similar logic to v1.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.AllowParseableTypes">
      <summary>
            Global switch that determines whether types with a <c>.ToString()</c> and a <c>Parse(string)</c>
            should be serialized as strings.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.Default">
      <summary>
            The default model, used to support ProtoBuf.Serializer
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.Item(System.Type)">
      <summary>
            Obtains the MetaType associated with a given Type for the current model,
            allowing additional configuration.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.AutoCompile">
      <summary>
            Should serializers be compiled on demand? It may be useful
            to disable this for debugging purposes.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.AutoAddMissingTypes">
      <summary>
            Should support for unexpected types be added automatically?
            If false, an exception is thrown when unexpected types
            are encountered.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.RuntimeTypeModel.MetadataTimeoutMilliseconds">
      <summary>
            The amount of time to wait if there are concurrent metadata access operations
            </summary>
    </member>
    <member name="E:ProtoBuf.Meta.RuntimeTypeModel.LockContended">
      <summary>
            If a lock-contention is detected, this event signals the *owner* of the lock responsible for the blockage, indicating
            what caused the problem; this is only raised if the lock-owning code successfully completes.
            </summary>
    </member>
    <member name="T:ProtoBuf.Meta.LockContentedEventArgs">
      <summary>
            Contains the stack-trace of the owning code when a lock-contention scenario is detected
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.LockContentedEventArgs.OwnerStackTrace">
      <summary>
            The stack-trace of the code that owned the lock when a lock-contention scenario occurred
            </summary>
    </member>
    <member name="T:ProtoBuf.Meta.LockContentedEventHandler">
      <summary>
            Event-type that is raised when a lock-contention scenario is detected
            </summary>
    </member>
    <member name="T:ProtoBuf.Meta.SubType">
      <summary>
            Represents an inherited type in a type hierarchy.
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.SubType.#ctor(System.Int32,ProtoBuf.Meta.MetaType,ProtoBuf.DataFormat)">
      <summary>
            Creates a new SubType instance.
            </summary>
      <param name="fieldNumber">The field-number that is used to encapsulate the data (as a nested
            message) for the derived dype.</param>
      <param name="derivedType">The sub-type to be considered.</param>
      <param name="format">Specific encoding style to use; in particular, Grouped can be used to avoid buffering, but is not the default.</param>
    </member>
    <member name="P:ProtoBuf.Meta.SubType.FieldNumber">
      <summary>
            The field-number that is used to encapsulate the data (as a nested
            message) for the derived dype.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.SubType.DerivedType">
      <summary>
            The sub-type to be considered.
            </summary>
    </member>
    <member name="T:ProtoBuf.Meta.TypeFormatEventArgs">
      <summary>
            Event arguments needed to perform type-formatting functions; this could be resolving a Type to a string suitable for serialization, or could
            be requesting a Type from a string. If no changes are made, a default implementation will be used (from the assembly-qualified names).
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.TypeFormatEventArgs.Type">
      <summary>
            The type involved in this map; if this is initially null, a Type is expected to be provided for the string in FormattedName.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.TypeFormatEventArgs.FormattedName">
      <summary>
            The formatted-name involved in this map; if this is initially null, a formatted-name is expected from the type in Type.
            </summary>
    </member>
    <member name="T:ProtoBuf.Meta.TypeFormatEventHandler">
      <summary>
            Delegate type used to perform type-formatting functions; the sender originates as the type-model.
            </summary>
    </member>
    <member name="T:ProtoBuf.Meta.ValueMember">
      <summary>
            Represents a member (property/field) that is mapped to a protobuf field
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.ValueMember.#ctor(ProtoBuf.Meta.RuntimeTypeModel,System.Type,System.Int32,System.Reflection.MemberInfo,System.Type,System.Type,System.Type,ProtoBuf.DataFormat,System.Object)">
      <summary>
            Creates a new ValueMember instance
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.ValueMember.#ctor(ProtoBuf.Meta.RuntimeTypeModel,System.Int32,System.Type,System.Type,System.Type,ProtoBuf.DataFormat)">
      <summary>
            Creates a new ValueMember instance
            </summary>
    </member>
    <member name="M:ProtoBuf.Meta.ValueMember.SetSpecified(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
      <summary>
            Specifies methods for working with optional data members.
            </summary>
      <param name="getSpecified">Provides a method (null for none) to query whether this member should
            be serialized; it must be of the form "bool {Method}()". The member is only serialized if the
            method returns true.</param>
      <param name="setSpecified">Provides a method (null for none) to indicate that a member was
            deserialized; it must be of the form "void {Method}(bool)", and will be called with "true"
            when data is found.</param>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.FieldNumber">
      <summary>
            The number that identifies this member in a protobuf stream
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.Member">
      <summary>
            Gets the member (field/property) which this member relates to.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.ItemType">
      <summary>
            Within a list / array / etc, the type of object for each item in the list (especially useful with ArrayList)
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.MemberType">
      <summary>
            The underlying type of the member
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.DefaultType">
      <summary>
            For abstract types (IList etc), the type of concrete object to create (if required)
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.ParentType">
      <summary>
            The type the defines the member
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.DefaultValue">
      <summary>
            The default value of the item (members with this value will not be serialized)
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.DataFormat">
      <summary>
            Specifies the rules used to process the field; this is used to determine the most appropriate
            wite-type, but also to describe subtypes <i>within</i> that wire-type (such as SignedVariant)
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.IsStrict">
      <summary>
            Indicates whether this field should follow strict encoding rules; this means (for example) that if a "fixed32"
            is encountered when "variant" is defined, then it will fail (throw an exception) when parsing. Note that
            when serializing the defined type is always used.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.IsPacked">
      <summary>
            Indicates whether this field should use packed encoding (which can save lots of space for repeated primitive values).
            This option only applies to list/array data of primitive types (int, double, etc).
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.OverwriteList">
      <summary>
            Indicates whether this field should *repace* existing values (the default is false, meaning *append*).
            This option only applies to list/array data.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.IsRequired">
      <summary>
            Indicates whether this field is mandatory.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.AsReference">
      <summary>
            Enables full object-tracking/full-graph support.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.DynamicType">
      <summary>
            Embeds the type information into the stream, allowing usage with types not known in advance.
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.Name">
      <summary>
            Gets the logical name for this member in the schema (this is not critical for binary serialization, but may be used
            when inferring a schema).
            </summary>
    </member>
    <member name="P:ProtoBuf.Meta.ValueMember.SupportNull">
      <summary>
            Should lists have extended support for null values? Note this makes the serialization less efficient.
            </summary>
    </member>
    <member name="T:ProtoBuf.PrefixStyle">
      <summary>
            Specifies the type of prefix that should be applied to messages.
            </summary>
    </member>
    <member name="F:ProtoBuf.PrefixStyle.None">
      <summary>
            No length prefix is applied to the data; the data is terminated only be the end of the stream.
            </summary>
    </member>
    <member name="F:ProtoBuf.PrefixStyle.Base128">
      <summary>
            A base-128 length prefix is applied to the data (efficient for short messages).
            </summary>
    </member>
    <member name="F:ProtoBuf.PrefixStyle.Fixed32">
      <summary>
            A fixed-length (little-endian) length prefix is applied to the data (useful for compatibility).
            </summary>
    </member>
    <member name="F:ProtoBuf.PrefixStyle.Fixed32BigEndian">
      <summary>
            A fixed-length (big-endian) length prefix is applied to the data (useful for compatibility).
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoContractAttribute">
      <summary>
            Indicates that a type is defined for protocol-buffer serialization.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoContractAttribute.Name">
      <summary>
            Gets or sets the defined name of the type.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoContractAttribute.ImplicitFirstTag">
      <summary>
            Gets or sets the fist offset to use with implicit field tags;
            only uesd if ImplicitFields is set.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoContractAttribute.UseProtoMembersOnly">
      <summary>
            If specified, alternative contract markers (such as markers for XmlSerailizer or DataContractSerializer) are ignored.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoContractAttribute.IgnoreListHandling">
      <summary>
            If specified, do NOT treat this type as a list, even if it looks like one.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoContractAttribute.ImplicitFields">
      <summary>
            Gets or sets the mechanism used to automatically infer field tags
            for members. This option should be used in advanced scenarios only.
            Please review the important notes against the ImplicitFields enumeration.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoContractAttribute.InferTagFromName">
      <summary>
            Enables/disables automatic tag generation based on the existing name / order
            of the defined members. This option is not used for members marked
            with ProtoMemberAttribute, as intended to provide compatibility with
            WCF serialization. WARNING: when adding new fields you must take
            care to increase the Order for new elements, otherwise data corruption
            may occur.
            </summary>
      <remarks>If not explicitly specified, the default is assumed from Serializer.GlobalOptions.InferTagFromName.</remarks>
    </member>
    <member name="P:ProtoBuf.ProtoContractAttribute.InferTagFromNameHasValue">
      <summary>
            Has a InferTagFromName value been explicitly set? if not, the default from the type-model is assumed.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoContractAttribute.DataMemberOffset">
      <summary>
            Specifies an offset to apply to [DataMember(Order=...)] markers;
            this is useful when working with mex-generated classes that have
            a different origin (usually 1 vs 0) than the original data-contract.
            
            This value is added to the Order of each member.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoContractAttribute.SkipConstructor">
      <summary>
            If true, the constructor for the type is bypassed during deserialization, meaning any field initializers
            or other initialization code is skipped.
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoEnumAttribute">
      <summary>
            Used to define protocol-buffer specific behavior for
            enumerated values.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoEnumAttribute.HasValue">
      <summary>
            Indicates whether this instance has a customised value mapping
            </summary>
      <returns>true if a specific value is set</returns>
    </member>
    <member name="P:ProtoBuf.ProtoEnumAttribute.Value">
      <summary>
            Gets or sets the specific value to use for this enum during serialization.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoEnumAttribute.Name">
      <summary>
            Gets or sets the defined name of the enum, as used in .proto
            (this name is not used during serialization).
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoException">
      <summary>
            Indicates an error during serialization/deserialization of a proto stream.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoException.#ctor">
      <summary>Creates a new ProtoException instance.</summary>
    </member>
    <member name="M:ProtoBuf.ProtoException.#ctor(System.String)">
      <summary>Creates a new ProtoException instance.</summary>
    </member>
    <member name="M:ProtoBuf.ProtoException.#ctor(System.String,System.Exception)">
      <summary>Creates a new ProtoException instance.</summary>
    </member>
    <member name="T:ProtoBuf.ProtoIgnoreAttribute">
      <summary>
            Indicates that a member should be excluded from serialization; this
            is only normally used when using implict fields.
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoPartialIgnoreAttribute">
      <summary>
            Indicates that a member should be excluded from serialization; this
            is only normally used when using implict fields. This allows
            ProtoIgnoreAttribute usage
            even for partial classes where the individual members are not
            under direct control.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoPartialIgnoreAttribute.#ctor(System.String)">
      <summary>
            Creates a new ProtoPartialIgnoreAttribute instance.
            </summary>
      <param name="memberName">Specifies the member to be ignored.</param>
    </member>
    <member name="P:ProtoBuf.ProtoPartialIgnoreAttribute.MemberName">
      <summary>
            The name of the member to be ignored.
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoIncludeAttribute">
      <summary>
            Indicates the known-types to support for an individual
            message. This serializes each level in the hierarchy as
            a nested message to retain wire-compatibility with
            other protocol-buffer implementations.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoIncludeAttribute.#ctor(System.Int32,System.Type)">
      <summary>
             Creates a new instance of the ProtoIncludeAttribute.
             </summary>
      <param name="tag">The unique index (within the type) that will identify this data.</param>
      <param name="knownType">The additional type to serialize/deserialize.</param>
    </member>
    <member name="M:ProtoBuf.ProtoIncludeAttribute.#ctor(System.Int32,System.String)">
      <summary>
            Creates a new instance of the ProtoIncludeAttribute.
            </summary>
      <param name="tag">The unique index (within the type) that will identify this data.</param>
      <param name="knownTypeName">The additional type to serialize/deserialize.</param>
    </member>
    <member name="P:ProtoBuf.ProtoIncludeAttribute.Tag">
      <summary>
            Gets the unique index (within the type) that will identify this data.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoIncludeAttribute.KnownTypeName">
      <summary>
            Gets the additional type to serialize/deserialize.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoIncludeAttribute.KnownType">
      <summary>
            Gets the additional type to serialize/deserialize.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoIncludeAttribute.DataFormat">
      <summary>
            Specifies whether the inherited sype's sub-message should be
            written with a length-prefix (default), or with group markers.
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoMemberAttribute">
      <summary>
            Declares a member to be used in protocol-buffer serialization, using
            the given Tag. A DataFormat may be used to optimise the serialization
            format (for instance, using zigzag encoding for negative numbers, or 
            fixed-length encoding for large values.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoMemberAttribute.CompareTo(System.Object)">
      <summary>
            Compare with another ProtoMemberAttribute for sorting purposes
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoMemberAttribute.CompareTo(ProtoBuf.ProtoMemberAttribute)">
      <summary>
            Compare with another ProtoMemberAttribute for sorting purposes
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoMemberAttribute.#ctor(System.Int32)">
      <summary>
            Creates a new ProtoMemberAttribute instance.
            </summary>
      <param name="tag">Specifies the unique tag used to identify this member within the type.</param>
    </member>
    <member name="P:ProtoBuf.ProtoMemberAttribute.Name">
      <summary>
            Gets or sets the original name defined in the .proto; not used
            during serialization.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoMemberAttribute.DataFormat">
      <summary>
            Gets or sets the data-format to be used when encoding this value.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoMemberAttribute.Tag">
      <summary>
            Gets the unique tag used to identify this member within the type.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoMemberAttribute.IsRequired">
      <summary>
            Gets or sets a value indicating whether this member is mandatory.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoMemberAttribute.IsPacked">
      <summary>
            Gets a value indicating whether this member is packed.
            This option only applies to list/array data of primitive types (int, double, etc).
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoMemberAttribute.OverwriteList">
      <summary>
            Indicates whether this field should *repace* existing values (the default is false, meaning *append*).
            This option only applies to list/array data.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoMemberAttribute.AsReference">
      <summary>
            Enables full object-tracking/full-graph support.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoMemberAttribute.DynamicType">
      <summary>
            Embeds the type information into the stream, allowing usage with types not known in advance.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoMemberAttribute.Options">
      <summary>
            Gets or sets a value indicating whether this member is packed (lists/arrays).
            </summary>
    </member>
    <member name="T:ProtoBuf.MemberSerializationOptions">
      <summary>
            Additional (optional) settings that control serialization of members
            </summary>
    </member>
    <member name="F:ProtoBuf.MemberSerializationOptions.None">
      <summary>
            Default; no additional options
            </summary>
    </member>
    <member name="F:ProtoBuf.MemberSerializationOptions.Packed">
      <summary>
            Indicates that repeated elements should use packed (length-prefixed) encoding
            </summary>
    </member>
    <member name="F:ProtoBuf.MemberSerializationOptions.Required">
      <summary>
            Indicates that the given item is required
            </summary>
    </member>
    <member name="F:ProtoBuf.MemberSerializationOptions.AsReference">
      <summary>
            Enables full object-tracking/full-graph support
            </summary>
    </member>
    <member name="F:ProtoBuf.MemberSerializationOptions.DynamicType">
      <summary>
            Embeds the type information into the stream, allowing usage with types not known in advance
            </summary>
    </member>
    <member name="F:ProtoBuf.MemberSerializationOptions.OverwriteList">
      <summary>
            Indicates whether this field should *repace* existing values (the default is false, meaning *append*).
            This option only applies to list/array data.
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoPartialMemberAttribute">
      <summary>
            Declares a member to be used in protocol-buffer serialization, using
            the given Tag and MemberName. This allows ProtoMemberAttribute usage
            even for partial classes where the individual members are not
            under direct control.
            A DataFormat may be used to optimise the serialization
            format (for instance, using zigzag encoding for negative numbers, or 
            fixed-length encoding for large values.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoPartialMemberAttribute.#ctor(System.Int32,System.String)">
      <summary>
            Creates a new ProtoMemberAttribute instance.
            </summary>
      <param name="tag">Specifies the unique tag used to identify this member within the type.</param>
      <param name="memberName">Specifies the member to be serialized.</param>
    </member>
    <member name="P:ProtoBuf.ProtoPartialMemberAttribute.MemberName">
      <summary>
            The name of the member to be serialized.
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoReader">
      <summary>
            A stateful reader, used to read a protobuf stream. Typical usage would be (sequentially) to call
            ReadFieldHeader and (after matching the field) an appropriate Read* method.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.#ctor(System.IO.Stream,ProtoBuf.Meta.TypeModel,ProtoBuf.SerializationContext)">
      <summary>
            Creates a new reader against a stream
            </summary>
      <param name="source">The source stream</param>
      <param name="model">The model to use for serialization; this can be null, but this will impair the ability to deserialize sub-objects</param>
      <param name="context">Additional context about this serialization operation</param>
    </member>
    <member name="M:ProtoBuf.ProtoReader.#ctor(System.IO.Stream,ProtoBuf.Meta.TypeModel,ProtoBuf.SerializationContext,System.Int32)">
      <summary>
            Creates a new reader against a stream
            </summary>
      <param name="source">The source stream</param>
      <param name="model">The model to use for serialization; this can be null, but this will impair the ability to deserialize sub-objects</param>
      <param name="context">Additional context about this serialization operation</param>
      <param name="length">The number of bytes to read, or -1 to read until the end of the stream</param>
    </member>
    <member name="M:ProtoBuf.ProtoReader.Dispose">
      <summary>
            Releases resources used by the reader, but importantly <b>does not</b> Dispose the 
            underlying stream; in many typical use-cases the stream is used for different
            processes, so it is assumed that the consumer will Dispose their stream separately.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadUInt32">
      <summary>
            Reads an unsigned 32-bit integer from the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadInt16">
      <summary>
            Reads a signed 16-bit integer from the stream: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadUInt16">
      <summary>
            Reads an unsigned 16-bit integer from the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadByte">
      <summary>
            Reads an unsigned 8-bit integer from the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadSByte">
      <summary>
            Reads a signed 8-bit integer from the stream; supported wire-types: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadInt32">
      <summary>
            Reads a signed 32-bit integer from the stream; supported wire-types: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadInt64">
      <summary>
            Reads a signed 64-bit integer from the stream; supported wire-types: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadString">
      <summary>
            Reads a string from the stream (using UTF8); supported wire-types: String
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ThrowEnumException(System.Type,System.Int32)">
      <summary>
            Throws an exception indication that the given value cannot be mapped to an enum.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadDouble">
      <summary>
            Reads a double-precision number from the stream; supported wire-types: Fixed32, Fixed64
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadObject(System.Object,System.Int32,ProtoBuf.ProtoReader)">
      <summary>
            Reads (merges) a sub-message from the stream, internally calling StartSubItem and EndSubItem, and (in between)
            parsing the message in accordance with the model associated with the reader
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.EndSubItem(ProtoBuf.SubItemToken,ProtoBuf.ProtoReader)">
      <summary>
            Makes the end of consuming a nested message in the stream; the stream must be either at the correct EndGroup
            marker, or all fields of the sub-message must have been consumed (in either case, this means ReadFieldHeader
            should return zero)
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.StartSubItem(ProtoBuf.ProtoReader)">
      <summary>
            Begins consuming a nested message in the stream; supported wire-types: StartGroup, String
            </summary>
      <remarks>The token returned must be help and used when callining EndSubItem</remarks>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadFieldHeader">
      <summary>
            Reads a field header from the stream, setting the wire-type and retuning the field number. If no
            more fields are available, then 0 is returned. This methods respects sub-messages.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.TryReadFieldHeader(System.Int32)">
      <summary>
            Looks ahead to see whether the next field in the stream is what we expect
            (typically; what we've just finished reading - for example ot read successive list items)
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.Hint(ProtoBuf.WireType)">
      <summary>
            Compares the streams current wire-type to the hinted wire-type, updating the reader if necessary; for example,
            a Variant may be updated to SignedVariant. If the hinted wire-type is unrelated then no change is made.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.Assert(ProtoBuf.WireType)">
      <summary>
            Verifies that the stream's current wire-type is as expected, or a specialized sub-type (for example,
            SignedVariant) - in which case the current wire-type is updated. Otherwise an exception is thrown.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.SkipField">
      <summary>
            Discards the data for the current field.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadUInt64">
      <summary>
            Reads an unsigned 64-bit integer from the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadSingle">
      <summary>
            Reads a single-precision number from the stream; supported wire-types: Fixed32, Fixed64
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadBoolean">
      <summary>
            Reads a boolean value from the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:ProtoBuf.ProtoReader.AppendBytes(System.Byte[],ProtoBuf.ProtoReader)">
      <summary>
            Reads a byte-sequence from the stream, appending them to an existing byte-sequence (which can be null); supported wire-types: String
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadLengthPrefix(System.IO.Stream,System.Boolean,ProtoBuf.PrefixStyle,System.Int32@)">
      <summary>
            Reads the length-prefix of a message from a stream without buffering additional data, allowing a fixed-length
            reader to be created.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.DirectReadLittleEndianInt32(System.IO.Stream)">
      <summary>
            Reads a little-endian encoded integer. An exception is thrown if the data is not all available.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.DirectReadBigEndianInt32(System.IO.Stream)">
      <summary>
            Reads a big-endian encoded integer. An exception is thrown if the data is not all available.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.DirectReadVarintInt32(System.IO.Stream)">
      <summary>
            Reads a varint encoded integer. An exception is thrown if the data is not all available.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.DirectReadBytes(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Reads a string (of a given lenth, in bytes) directly from the source into a pre-existing buffer. An exception is thrown if the data is not all available.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.DirectReadBytes(System.IO.Stream,System.Int32)">
      <summary>
            Reads a given number of bytes directly from the source. An exception is thrown if the data is not all available.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.DirectReadString(System.IO.Stream,System.Int32)">
      <summary>
            Reads a string (of a given lenth, in bytes) directly from the source. An exception is thrown if the data is not all available.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadLengthPrefix(System.IO.Stream,System.Boolean,ProtoBuf.PrefixStyle,System.Int32@,System.Int32@)">
      <summary>
            Reads the length-prefix of a message from a stream without buffering additional data, allowing a fixed-length
            reader to be created.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.TryReadUInt32Variant(System.IO.Stream,System.UInt32@)">
      <returns>The number of bytes consumed; 0 if no data available</returns>
    </member>
    <member name="M:ProtoBuf.ProtoReader.AppendExtensionData(ProtoBuf.IExtensible)">
      <summary>
            Copies the current field into the instance as extension data
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.HasSubValue(ProtoBuf.WireType,ProtoBuf.ProtoReader)">
      <summary>
            Indicates whether the reader still has data remaining in the current sub-item,
            additionally setting the wire-type for the next field if there is more data.
            This is used when decoding packed data.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.NoteObject(System.Object,ProtoBuf.ProtoReader)">
      <summary>
            Utility method, not intended for public use; this helps maintain the root object is complex scenarios
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoReader.ReadType">
      <summary>
            Reads a Type from the stream, using the model's DynamicTypeFormatting if appropriate; supported wire-types: String
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoReader.FieldNumber">
      <summary>
            Gets the number of the field being processed.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoReader.WireType">
      <summary>
            Indicates the underlying proto serialization format on the wire.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoReader.InternStrings">
      <summary>
            Gets / sets a flag indicating whether strings should be checked for repetition; if
            true, any repeated UTF-8 byte sequence will result in the same String instance, rather
            than a second instance of the same string. Enabled by default. Note that this uses
            a <i>custom</i> interner - the system-wide string interner is not used.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoReader.Context">
      <summary>
            Addition information about this deserialization operation.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoReader.Position">
      <summary>
            Returns the position of the current reader (note that this is not necessarily the same as the position
            in the underlying stream, if multiple readers are used on the same stream)
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoReader.Model">
      <summary>
            Get the TypeModel associated with this reader
            </summary>
    </member>
    <member name="T:ProtoBuf.ProtoWriter">
      <summary>
            Represents an output stream for writing protobuf data.
            
            Why is the API backwards (static methods with writer arguments)?
            See: http://marcgravell.blogspot.com/2010/03/last-will-be-first-and-first-will-be.html
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteObject(System.Object,System.Int32,ProtoBuf.ProtoWriter)">
      <summary>
            Write an encapsulated sub-object, using the supplied unique key (reprasenting a type).
            </summary>
      <param name="value">The object to write.</param>
      <param name="key">The key that uniquely identifies the type within the model.</param>
      <param name="writer">The destination.</param>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteRecursionSafeObject(System.Object,System.Int32,ProtoBuf.ProtoWriter)">
      <summary>
            Write an encapsulated sub-object, using the supplied unique key (reprasenting a type) - but the
            caller is asserting that this relationship is non-recursive; no recursion check will be
            performed.
            </summary>
      <param name="value">The object to write.</param>
      <param name="key">The key that uniquely identifies the type within the model.</param>
      <param name="writer">The destination.</param>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteFieldHeader(System.Int32,ProtoBuf.WireType,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a field-header, indicating the format of the next data we plan to write.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteBytes(System.Byte[],ProtoBuf.ProtoWriter)">
      <summary>
            Writes a byte-array to the stream; supported wire-types: String
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteBytes(System.Byte[],System.Int32,System.Int32,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a byte-array to the stream; supported wire-types: String
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.StartSubItem(System.Object,ProtoBuf.ProtoWriter)">
      <summary>
            Indicates the start of a nested record.
            </summary>
      <param name="instance">The instance to write.</param>
      <param name="writer">The destination.</param>
      <returns>A token representing the state of the stream; this token is given to EndSubItem.</returns>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.EndSubItem(ProtoBuf.SubItemToken,ProtoBuf.ProtoWriter)">
      <summary>
            Indicates the end of a nested record.
            </summary>
      <param name="token">The token obtained from StartubItem.</param>
      <param name="writer">The destination.</param>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.#ctor(System.IO.Stream,ProtoBuf.Meta.TypeModel,ProtoBuf.SerializationContext)">
      <summary>
            Creates a new writer against a stream
            </summary>
      <param name="dest">The destination stream</param>
      <param name="model">The model to use for serialization; this can be null, but this will impair the ability to serialize sub-objects</param>
      <param name="context">Additional context about this serialization operation</param>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.Close">
      <summary>
            Flushes data to the underlying stream, and releases any resources. The underlying stream is *not* disposed
            by this operation.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.Flush(ProtoBuf.ProtoWriter)">
      <summary>
            Writes any buffered data (if possible) to the underlying stream.
            </summary>
      <param name="writer">The writer to flush</param>
      <remarks>It is not always possible to fully flush, since some sequences
            may require values to be back-filled into the byte-stream.</remarks>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteUInt32Variant(System.UInt32,ProtoBuf.ProtoWriter)">
      <summary>
            Writes an unsigned 32-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteString(System.String,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a string to the stream; supported wire-types: String
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteUInt64(System.UInt64,ProtoBuf.ProtoWriter)">
      <summary>
            Writes an unsigned 64-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteInt64(System.Int64,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a signed 64-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteUInt32(System.UInt32,ProtoBuf.ProtoWriter)">
      <summary>
            Writes an unsigned 16-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteInt16(System.Int16,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a signed 16-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteUInt16(System.UInt16,ProtoBuf.ProtoWriter)">
      <summary>
            Writes an unsigned 16-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteByte(System.Byte,ProtoBuf.ProtoWriter)">
      <summary>
            Writes an unsigned 8-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteSByte(System.SByte,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a signed 8-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteInt32(System.Int32,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a signed 32-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteDouble(System.Double,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a double-precision number to the stream; supported wire-types: Fixed32, Fixed64
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteSingle(System.Single,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a single-precision number to the stream; supported wire-types: Fixed32, Fixed64
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.ThrowEnumException(ProtoBuf.ProtoWriter,System.Object)">
      <summary>
            Throws an exception indicating that the given enum cannot be mapped to a serialized value.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteBoolean(System.Boolean,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a boolean to the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.AppendExtensionData(ProtoBuf.IExtensible,ProtoBuf.ProtoWriter)">
      <summary>
            Copies any extension data stored for the instance to the underlying stream
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.SetPackedField(System.Int32,ProtoBuf.ProtoWriter)">
      <summary>
            Used for packed encoding; indicates that the next field should be skipped rather than
            a field header written. Note that the field number must match, else an exception is thrown
            when the attempt is made to write the (incorrect) field. The wire-type is taken from the
            subsequent call to WriteFieldHeader. Only primitive types can be packed.
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.SetRootObject(System.Object)">
      <summary>
            Specifies a known root object to use during reference-tracked serialization
            </summary>
    </member>
    <member name="M:ProtoBuf.ProtoWriter.WriteType(System.Type,ProtoBuf.ProtoWriter)">
      <summary>
            Writes a Type to the stream, using the model's DynamicTypeFormatting if appropriate; supported wire-types: String
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoWriter.Context">
      <summary>
            Addition information about this serialization operation.
            </summary>
    </member>
    <member name="P:ProtoBuf.ProtoWriter.Model">
      <summary>
            Get the TypeModel associated with this writer
            </summary>
    </member>
    <member name="T:ProtoBuf.SerializationContext">
      <summary>
            Additional information about a serialization operation
            </summary>
    </member>
    <member name="M:ProtoBuf.SerializationContext.op_Implicit(ProtoBuf.SerializationContext)~System.Runtime.Serialization.StreamingContext">
      <summary>
            Convert a SerializationContext to a StreamingContext
            </summary>
    </member>
    <member name="M:ProtoBuf.SerializationContext.op_Implicit(System.Runtime.Serialization.StreamingContext)~ProtoBuf.SerializationContext">
      <summary>
            Convert a StreamingContext to a SerializationContext
            </summary>
    </member>
    <member name="P:ProtoBuf.SerializationContext.Context">
      <summary>
            Gets or sets a user-defined object containing additional information about this serialization/deserialization operation.
            </summary>
    </member>
    <member name="P:ProtoBuf.SerializationContext.Default">
      <summary>
            A default SerializationContext, with minimal information.
            </summary>
    </member>
    <member name="P:ProtoBuf.SerializationContext.State">
      <summary>
            Gets or sets the source or destination of the transmitted data.
            </summary>
    </member>
    <member name="T:ProtoBuf.Serializer">
      <summary>
            Provides protocol-buffer serialization capability for concrete, attributed types. This
            is a *default* model, but custom serializer models are also supported.
            </summary>
      <remarks>
            Protocol-buffer serialization is a compact binary format, designed to take
            advantage of sparse data and knowledge of specific data types; it is also
            extensible, allowing a type to be deserialized / merged even if some data is
            not recognised.
            </remarks>
    </member>
    <member name="T:ProtoBuf.Serializer.NonGeneric">
      <summary>
            Provides non-generic access to the default serializer.
            </summary>
    </member>
    <member name="M:ProtoBuf.Serializer.NonGeneric.DeepClone(System.Object)">
      <summary>
            Create a deep clone of the supplied instance; any sub-items are also cloned.
            </summary>
    </member>
    <member name="M:ProtoBuf.Serializer.NonGeneric.Serialize(System.IO.Stream,System.Object)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream.
            </summary>
      <param name="instance">The existing instance to be serialized (cannot be null).</param>
      <param name="dest">The destination stream to write to.</param>
    </member>
    <member name="M:ProtoBuf.Serializer.NonGeneric.Deserialize(System.Type,System.IO.Stream)">
      <summary>
            Creates a new instance from a protocol-buffer stream
            </summary>
      <param name="type">The type to be created.</param>
      <param name="source">The binary stream to apply to the new instance (cannot be null).</param>
      <returns>A new, initialized instance.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.NonGeneric.Merge(System.IO.Stream,System.Object)">
      <summary>Applies a protocol-buffer stream to an existing instance.</summary>
      <param name="instance">The existing instance to be modified (cannot be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <returns>The updated instance</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.NonGeneric.SerializeWithLengthPrefix(System.IO.Stream,System.Object,ProtoBuf.PrefixStyle,System.Int32)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream,
            with a length-prefix. This is useful for socket programming,
            as DeserializeWithLengthPrefix/MergeWithLengthPrefix can be used to read the single object back
            from an ongoing stream.
            </summary>
      <param name="instance">The existing instance to be serialized (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <param name="destination">The destination stream to write to.</param>
      <param name="fieldNumber">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
    </member>
    <member name="M:ProtoBuf.Serializer.NonGeneric.TryDeserializeWithLengthPrefix(System.IO.Stream,ProtoBuf.PrefixStyle,ProtoBuf.Serializer.TypeResolver,System.Object@)">
      <summary>
            Applies a protocol-buffer stream to an existing instance (or null), using length-prefixed
            data - useful with network IO.
            </summary>
      <param name="value">The existing instance to be modified (can be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <param name="resolver">Used to resolve types on a per-field basis.</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.NonGeneric.CanSerialize(System.Type)">
      <summary>
            Indicates whether the supplied type is explicitly modelled by the model
            </summary>
    </member>
    <member name="T:ProtoBuf.Serializer.GlobalOptions">
      <summary>
            Global switches that change the behavior of protobuf-net
            </summary>
    </member>
    <member name="P:ProtoBuf.Serializer.GlobalOptions.InferTagFromName">
      <summary>
        <see cref="P:ProtoBuf.Meta.RuntimeTypeModel.InferTagFromNameDefault" />
      </summary>
    </member>
    <member name="T:ProtoBuf.Serializer.TypeResolver">
      <summary>
            Maps a field-number to a type
            </summary>
    </member>
    <member name="F:ProtoBuf.Serializer.ListItemTag">
      <summary>
            The field number that is used as a default when serializing/deserializing a list of objects.
            The data is treated as repeated message with field number 1.
            </summary>
    </member>
    <member name="M:ProtoBuf.Serializer.GetProto``1">
      <summary>
            Suggest a .proto definition for the given type
            </summary>
      <typeparam name="T">The type to generate a .proto definition for</typeparam>
      <returns>The .proto definition as a string</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.DeepClone``1(``0)">
      <summary>
            Create a deep clone of the supplied instance; any sub-items are also cloned.
            </summary>
    </member>
    <member name="M:ProtoBuf.Serializer.Merge``1(System.IO.Stream,``0)">
      <summary>
            Applies a protocol-buffer stream to an existing instance.
            </summary>
      <typeparam name="T">The type being merged.</typeparam>
      <param name="instance">The existing instance to be modified (can be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.Deserialize``1(System.IO.Stream)">
      <summary>
            Creates a new instance from a protocol-buffer stream
            </summary>
      <typeparam name="T">The type to be created.</typeparam>
      <param name="source">The binary stream to apply to the new instance (cannot be null).</param>
      <returns>A new, initialized instance.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.Serialize``1(System.IO.Stream,``0)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream.
            </summary>
      <param name="instance">The existing instance to be serialized (cannot be null).</param>
      <param name="destination">The destination stream to write to.</param>
    </member>
    <member name="M:ProtoBuf.Serializer.ChangeType``2(``0)">
      <summary>
            Serializes a given instance and deserializes it as a different type;
            this can be used to translate between wire-compatible objects (where
            two .NET types represent the same data), or to promote/demote a type
            through an inheritance hierarchy.
            </summary>
      <remarks>No assumption of compatibility is made between the types.</remarks>
      <typeparam name="TFrom">The type of the object being copied.</typeparam>
      <typeparam name="TTo">The type of the new object to be created.</typeparam>
      <param name="instance">The existing instance to use as a template.</param>
      <returns>A new instane of type TNewType, with the data from TOldType.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.Serialize``1(System.Runtime.Serialization.SerializationInfo,``0)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied SerializationInfo.
            </summary>
      <typeparam name="T">The type being serialized.</typeparam>
      <param name="instance">The existing instance to be serialized (cannot be null).</param>
      <param name="info">The destination SerializationInfo to write to.</param>
    </member>
    <member name="M:ProtoBuf.Serializer.Serialize``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,``0)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied SerializationInfo.
            </summary>
      <typeparam name="T">The type being serialized.</typeparam>
      <param name="instance">The existing instance to be serialized (cannot be null).</param>
      <param name="info">The destination SerializationInfo to write to.</param>
      <param name="context">Additional information about this serialization operation.</param>
    </member>
    <member name="M:ProtoBuf.Serializer.Serialize``1(System.Xml.XmlWriter,``0)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied XmlWriter.
            </summary>
      <typeparam name="T">The type being serialized.</typeparam>
      <param name="instance">The existing instance to be serialized (cannot be null).</param>
      <param name="writer">The destination XmlWriter to write to.</param>
    </member>
    <member name="M:ProtoBuf.Serializer.Merge``1(System.Xml.XmlReader,``0)">
      <summary>
            Applies a protocol-buffer from an XmlReader to an existing instance.
            </summary>
      <typeparam name="T">The type being merged.</typeparam>
      <param name="instance">The existing instance to be modified (cannot be null).</param>
      <param name="reader">The XmlReader containing the data to apply to the instance (cannot be null).</param>
    </member>
    <member name="M:ProtoBuf.Serializer.Merge``1(System.Runtime.Serialization.SerializationInfo,``0)">
      <summary>
            Applies a protocol-buffer from a SerializationInfo to an existing instance.
            </summary>
      <typeparam name="T">The type being merged.</typeparam>
      <param name="instance">The existing instance to be modified (cannot be null).</param>
      <param name="info">The SerializationInfo containing the data to apply to the instance (cannot be null).</param>
    </member>
    <member name="M:ProtoBuf.Serializer.Merge``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,``0)">
      <summary>
            Applies a protocol-buffer from a SerializationInfo to an existing instance.
            </summary>
      <typeparam name="T">The type being merged.</typeparam>
      <param name="instance">The existing instance to be modified (cannot be null).</param>
      <param name="info">The SerializationInfo containing the data to apply to the instance (cannot be null).</param>
      <param name="context">Additional information about this serialization operation.</param>
    </member>
    <member name="M:ProtoBuf.Serializer.PrepareSerializer``1">
      <summary>
            Precompiles the serializer for a given type.
            </summary>
    </member>
    <member name="M:ProtoBuf.Serializer.CreateFormatter``1">
      <summary>
            Creates a new IFormatter that uses protocol-buffer [de]serialization.
            </summary>
      <typeparam name="T">The type of object to be [de]deserialized by the formatter.</typeparam>
      <returns>A new IFormatter to be used during [de]serialization.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.DeserializeItems``1(System.IO.Stream,ProtoBuf.PrefixStyle,System.Int32)">
      <summary>
            Reads a sequence of consecutive length-prefixed items from a stream, using
            either base-128 or fixed-length prefixes. Base-128 prefixes with a tag
            are directly comparable to serializing multiple items in succession
            (use the <see cref="F:ProtoBuf.Serializer.ListItemTag" /> tag to emulate the implicit behavior
            when serializing a list/array). When a tag is
            specified, any records with different tags are silently omitted. The
            tag is ignored. The tag is ignores for fixed-length prefixes.
            </summary>
      <typeparam name="T">The type of object to deserialize.</typeparam>
      <param name="source">The binary stream containing the serialized records.</param>
      <param name="style">The prefix style used in the data.</param>
      <param name="fieldNumber">The tag of records to return (if non-positive, then no tag is
            expected and all records are returned).</param>
      <returns>The sequence of deserialized objects.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.DeserializeWithLengthPrefix``1(System.IO.Stream,ProtoBuf.PrefixStyle)">
      <summary>
            Creates a new instance from a protocol-buffer stream that has a length-prefix
            on data (to assist with network IO).
            </summary>
      <typeparam name="T">The type to be created.</typeparam>
      <param name="source">The binary stream to apply to the new instance (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <returns>A new, initialized instance.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.DeserializeWithLengthPrefix``1(System.IO.Stream,ProtoBuf.PrefixStyle,System.Int32)">
      <summary>
            Creates a new instance from a protocol-buffer stream that has a length-prefix
            on data (to assist with network IO).
            </summary>
      <typeparam name="T">The type to be created.</typeparam>
      <param name="source">The binary stream to apply to the new instance (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <param name="fieldNumber">The expected tag of the item (only used with base-128 prefix style).</param>
      <returns>A new, initialized instance.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.MergeWithLengthPrefix``1(System.IO.Stream,``0,ProtoBuf.PrefixStyle)">
      <summary>
            Applies a protocol-buffer stream to an existing instance, using length-prefixed
            data - useful with network IO.
            </summary>
      <typeparam name="T">The type being merged.</typeparam>
      <param name="instance">The existing instance to be modified (can be null).</param>
      <param name="source">The binary stream to apply to the instance (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.SerializeWithLengthPrefix``1(System.IO.Stream,``0,ProtoBuf.PrefixStyle)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream,
            with a length-prefix. This is useful for socket programming,
            as DeserializeWithLengthPrefix/MergeWithLengthPrefix can be used to read the single object back
            from an ongoing stream.
            </summary>
      <typeparam name="T">The type being serialized.</typeparam>
      <param name="instance">The existing instance to be serialized (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <param name="destination">The destination stream to write to.</param>
    </member>
    <member name="M:ProtoBuf.Serializer.SerializeWithLengthPrefix``1(System.IO.Stream,``0,ProtoBuf.PrefixStyle,System.Int32)">
      <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream,
            with a length-prefix. This is useful for socket programming,
            as DeserializeWithLengthPrefix/MergeWithLengthPrefix can be used to read the single object back
            from an ongoing stream.
            </summary>
      <typeparam name="T">The type being serialized.</typeparam>
      <param name="instance">The existing instance to be serialized (cannot be null).</param>
      <param name="style">How to encode the length prefix.</param>
      <param name="destination">The destination stream to write to.</param>
      <param name="fieldNumber">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
    </member>
    <member name="M:ProtoBuf.Serializer.TryReadLengthPrefix(System.IO.Stream,ProtoBuf.PrefixStyle,System.Int32@)">
      <summary>Indicates the number of bytes expected for the next message.</summary>
      <param name="source">The stream containing the data to investigate for a length.</param>
      <param name="style">The algorithm used to encode the length.</param>
      <param name="length">The length of the message, if it could be identified.</param>
      <returns>True if a length could be obtained, false otherwise.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.TryReadLengthPrefix(System.Byte[],System.Int32,System.Int32,ProtoBuf.PrefixStyle,System.Int32@)">
      <summary>Indicates the number of bytes expected for the next message.</summary>
      <param name="buffer">The buffer containing the data to investigate for a length.</param>
      <param name="index">The offset of the first byte to read from the buffer.</param>
      <param name="count">The number of bytes to read from the buffer.</param>
      <param name="style">The algorithm used to encode the length.</param>
      <param name="length">The length of the message, if it could be identified.</param>
      <returns>True if a length could be obtained, false otherwise.</returns>
    </member>
    <member name="M:ProtoBuf.Serializer.FlushPool">
      <summary>
            Releases any internal buffers that have been reserved for efficiency; this does not affect any serialization
            operations; simply: it can be used (optionally) to release the buffers for garbage collection (at the expense
            of having to re-allocate a new buffer for the next operation, rather than re-use prior buffers).
            </summary>
    </member>
    <member name="M:ProtoBuf.Serializers.IProtoSerializer.Write(System.Object,ProtoBuf.ProtoWriter)">
      <summary>
            Perform the steps necessary to serialize this data.
            </summary>
      <param name="value">The value to be serialized.</param>
      <param name="dest">The writer entity that is accumulating the output data.</param>
    </member>
    <member name="M:ProtoBuf.Serializers.IProtoSerializer.Read(System.Object,ProtoBuf.ProtoReader)">
      <summary>
            Perform the steps necessary to deserialize this data.
            </summary>
      <param name="value">The current value, if appropriate.</param>
      <param name="source">The reader providing the input data.</param>
      <returns>The updated / replacement value.</returns>
    </member>
    <member name="M:ProtoBuf.Serializers.IProtoSerializer.EmitWrite(ProtoBuf.Compiler.CompilerContext,ProtoBuf.Compiler.Local)">
      <summary>Emit the IL necessary to perform the given actions
            to serialize this data.
            </summary>
      <param name="ctx">Details and utilities for the method being generated.</param>
      <param name="valueFrom">The source of the data to work against;
            If the value is only needed once, then LoadValue is sufficient. If
            the value is needed multiple times, then note that a "null"
            means "the top of the stack", in which case you should create your
            own copy - GetLocalWithValue.</param>
    </member>
    <member name="M:ProtoBuf.Serializers.IProtoSerializer.EmitRead(ProtoBuf.Compiler.CompilerContext,ProtoBuf.Compiler.Local)">
      <summary>
            Emit the IL necessary to perform the given actions to deserialize this data.
            </summary>
      <param name="ctx">Details and utilities for the method being generated.</param>
      <param name="entity">For nested values, the instance holding the values; note
            that this is not always provided - a null means not supplied. Since this is always
            a variable or argument, it is not necessary to consume this value.</param>
    </member>
    <member name="P:ProtoBuf.Serializers.IProtoSerializer.ExpectedType">
      <summary>
            The type that this serializer is intended to work for.
            </summary>
    </member>
    <member name="P:ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue">
      <summary>
            Indicates whether a Read operation <em>replaces</em> the existing value, or
            <em>extends</em> the value. If false, the "value" parameter to Read is
            discarded, and should be passed in as null.
            </summary>
    </member>
    <member name="P:ProtoBuf.Serializers.IProtoSerializer.ReturnsValue">
      <summary>
            Now all Read operations return a value (although most do); if false no
            value should be expected.
            </summary>
    </member>
    <member name="T:ProtoBuf.ServiceModel.ProtoBehaviorAttribute">
      <summary>
            Uses protocol buffer serialization on the specified operation; note that this
            must be enabled on both the client and server.
            </summary>
    </member>
    <member name="T:ProtoBuf.ServiceModel.ProtoBehaviorExtension">
      <summary>
            Configuration element to swap out DatatContractSerilaizer with the XmlProtoSerializer for a given endpoint.
            </summary>
      <seealso cref="T:ProtoBuf.ServiceModel.ProtoEndpointBehavior" />
    </member>
    <member name="M:ProtoBuf.ServiceModel.ProtoBehaviorExtension.#ctor">
      <summary>
            Creates a new ProtoBehaviorExtension instance.
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.ProtoBehaviorExtension.CreateBehavior">
      <summary>
            Creates a behavior extension based on the current configuration settings.
            </summary>
      <returns>The behavior extension.</returns>
    </member>
    <member name="P:ProtoBuf.ServiceModel.ProtoBehaviorExtension.BehaviorType">
      <summary>
            Gets the type of behavior.
            </summary>
    </member>
    <member name="T:ProtoBuf.ServiceModel.ProtoEndpointBehavior">
      <summary>
            Behavior to swap out DatatContractSerilaizer with the XmlProtoSerializer for a given endpoint.
             <example>
            Add the following to the server and client app.config in the system.serviceModel section:
             <behaviors><endpointBehaviors><behavior name="ProtoBufBehaviorConfig"><ProtoBufSerialization /></behavior></endpointBehaviors></behaviors><extensions><behaviorExtensions><add name="ProtoBufSerialization" type="ProtoBuf.ServiceModel.ProtoBehaviorExtension, protobuf-net, Version=1.0.0.255, Culture=neutral, PublicKeyToken=257b51d87d2e4d67" /></behaviorExtensions></extensions>
            
            Configure your endpoints to have a behaviorConfiguration as follows:
            
             <service name="TK.Framework.Samples.ServiceModel.Contract.SampleService"><endpoint address="http://myhost:9003/SampleService" binding="basicHttpBinding" behaviorConfiguration="ProtoBufBehaviorConfig" bindingConfiguration="basicHttpBindingConfig" name="basicHttpProtoBuf" contract="ISampleServiceContract" /></service><client><endpoint address="http://myhost:9003/SampleService" binding="basicHttpBinding" bindingConfiguration="basicHttpBindingConfig" contract="ISampleServiceContract" name="BasicHttpProtoBufEndpoint" behaviorConfiguration="ProtoBufBehaviorConfig" /></client></example></summary>
    </member>
    <member name="T:ProtoBuf.ServiceModel.ProtoOperationBehavior">
      <summary>
            Describes a WCF operation behaviour that can perform protobuf serialization
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.ProtoOperationBehavior.#ctor(System.ServiceModel.Description.OperationDescription)">
      <summary>
            Create a new ProtoOperationBehavior instance
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.ProtoOperationBehavior.CreateSerializer(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Collections.Generic.IList{System.Type})">
      <summary>
            Creates a protobuf serializer if possible (falling back to the default WCF serializer)
            </summary>
    </member>
    <member name="P:ProtoBuf.ServiceModel.ProtoOperationBehavior.Model">
      <summary>
            The type-model that should be used with this behaviour
            </summary>
    </member>
    <member name="T:ProtoBuf.ServiceModel.XmlProtoSerializer">
      <summary>
            An xml object serializer that can embed protobuf data in a base-64 hunk (looking like a byte[])
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.XmlProtoSerializer.TryCreate(ProtoBuf.Meta.TypeModel,System.Type)">
      <summary>
            Attempt to create a new serializer for the given model and type
            </summary>
      <returns>A new serializer instance if the type is recognised by the model; null otherwise</returns>
    </member>
    <member name="M:ProtoBuf.ServiceModel.XmlProtoSerializer.#ctor(ProtoBuf.Meta.TypeModel,System.Type)">
      <summary>
            Creates a new serializer for the given model and type
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.XmlProtoSerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)">
      <summary>
            Ends an object in the output
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.XmlProtoSerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>
            Begins an object in the output
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.XmlProtoSerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>
            Writes the body of an object in the output
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.XmlProtoSerializer.IsStartObject(System.Xml.XmlDictionaryReader)">
      <summary>
            Indicates whether this is the start of an object we are prepared to handle
            </summary>
    </member>
    <member name="M:ProtoBuf.ServiceModel.XmlProtoSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary>
            Reads the body of an object
            </summary>
    </member>
    <member name="T:ProtoBuf.SubItemToken">
      <summary>
            Used to hold particulars relating to nested objects. This is opaque to the caller - simply
            give back the token you are given at the end of an object.
            </summary>
    </member>
    <member name="T:ProtoBuf.WireType">
      <summary>
            Indicates the encoding used to represent an individual value in a protobuf stream
            </summary>
    </member>
    <member name="F:ProtoBuf.WireType.None">
      <summary>
            Represents an error condition
            </summary>
    </member>
    <member name="F:ProtoBuf.WireType.Variant">
      <summary>
            Base-128 variant-length encoding
            </summary>
    </member>
    <member name="F:ProtoBuf.WireType.Fixed64">
      <summary>
            Fixed-length 8-byte encoding
            </summary>
    </member>
    <member name="F:ProtoBuf.WireType.String">
      <summary>
            Length-variant-prefixed encoding
            </summary>
    </member>
    <member name="F:ProtoBuf.WireType.StartGroup">
      <summary>
            Indicates the start of a group
            </summary>
    </member>
    <member name="F:ProtoBuf.WireType.EndGroup">
      <summary>
            Indicates the end of a group
            </summary>
    </member>
    <member name="F:ProtoBuf.WireType.Fixed32">
      <summary>
            Fixed-length 4-byte encoding
            </summary>10
        </member>
    <member name="F:ProtoBuf.WireType.SignedVariant">
      <summary>
            This is not a formal wire-type in the "protocol buffers" spec, but
            denotes a variant integer that should be interpreted using
            zig-zag semantics (so -ve numbers aren't a significant overhead)
            </summary>
    </member>
  </members>
</doc>