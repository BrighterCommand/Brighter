// <auto-generated/>
#pragma warning disable
using GreetingsEntities;
using Marten.Internal;
using Marten.Internal.Storage;
using Marten.Schema;
using Marten.Schema.Arguments;
using Npgsql;
using System;
using System.Collections.Generic;
using Weasel.Core;
using Weasel.Postgresql;

namespace Marten.Generated.DocumentStorage
{
    // START: UpsertPersonOperation890595856
    public class UpsertPersonOperation890595856 : Marten.Internal.Operations.StorageOperation<GreetingsEntities.Person, int>
    {
        private readonly GreetingsEntities.Person _document;
        private readonly int _id;
        private readonly System.Collections.Generic.Dictionary<int, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpsertPersonOperation890595856(GreetingsEntities.Person document, int id, System.Collections.Generic.Dictionary<int, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select public.mt_upsert_person(?, ?, ?, ?)";


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Integer;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, GreetingsEntities.Person document, Marten.Internal.IMartenSession session)
        {
            parameters[0].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[0].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[1].Value = _document.GetType().FullName;
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Integer;
            parameters[2].Value = document.Id;
            setVersionParameter(parameters[3]);
        }


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            // Nothing
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Upsert;
        }

    }

    // END: UpsertPersonOperation890595856
    
    
    // START: InsertPersonOperation890595856
    public class InsertPersonOperation890595856 : Marten.Internal.Operations.StorageOperation<GreetingsEntities.Person, int>
    {
        private readonly GreetingsEntities.Person _document;
        private readonly int _id;
        private readonly System.Collections.Generic.Dictionary<int, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public InsertPersonOperation890595856(GreetingsEntities.Person document, int id, System.Collections.Generic.Dictionary<int, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select public.mt_insert_person(?, ?, ?, ?)";


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Integer;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, GreetingsEntities.Person document, Marten.Internal.IMartenSession session)
        {
            parameters[0].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[0].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[1].Value = _document.GetType().FullName;
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Integer;
            parameters[2].Value = document.Id;
            setVersionParameter(parameters[3]);
        }


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            // Nothing
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Insert;
        }

    }

    // END: InsertPersonOperation890595856
    
    
    // START: UpdatePersonOperation890595856
    public class UpdatePersonOperation890595856 : Marten.Internal.Operations.StorageOperation<GreetingsEntities.Person, int>
    {
        private readonly GreetingsEntities.Person _document;
        private readonly int _id;
        private readonly System.Collections.Generic.Dictionary<int, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpdatePersonOperation890595856(GreetingsEntities.Person document, int id, System.Collections.Generic.Dictionary<int, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select public.mt_update_person(?, ?, ?, ?)";


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Integer;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, GreetingsEntities.Person document, Marten.Internal.IMartenSession session)
        {
            parameters[0].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[0].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[1].Value = _document.GetType().FullName;
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Integer;
            parameters[2].Value = document.Id;
            setVersionParameter(parameters[3]);
        }


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
            postprocessUpdate(reader, exceptions);
        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            await postprocessUpdateAsync(reader, exceptions, token);
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Update;
        }

    }

    // END: UpdatePersonOperation890595856
    
    
    // START: QueryOnlyPersonSelector890595856
    public class QueryOnlyPersonSelector890595856 : Marten.Internal.CodeGeneration.DocumentSelectorWithOnlySerializer, Marten.Linq.Selectors.ISelector<GreetingsEntities.Person>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public QueryOnlyPersonSelector890595856(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public GreetingsEntities.Person Resolve(System.Data.Common.DbDataReader reader)
        {

            GreetingsEntities.Person document;
            document = _serializer.FromJson<GreetingsEntities.Person>(reader, 0);
            return document;
        }


        public async System.Threading.Tasks.Task<GreetingsEntities.Person> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {

            GreetingsEntities.Person document;
            document = await _serializer.FromJsonAsync<GreetingsEntities.Person>(reader, 0, token).ConfigureAwait(false);
            return document;
        }

    }

    // END: QueryOnlyPersonSelector890595856
    
    
    // START: LightweightPersonSelector890595856
    public class LightweightPersonSelector890595856 : Marten.Internal.CodeGeneration.DocumentSelectorWithVersions<GreetingsEntities.Person, int>, Marten.Linq.Selectors.ISelector<GreetingsEntities.Person>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public LightweightPersonSelector890595856(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public GreetingsEntities.Person Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<int>(0);

            GreetingsEntities.Person document;
            document = _serializer.FromJson<GreetingsEntities.Person>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }


        public async System.Threading.Tasks.Task<GreetingsEntities.Person> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<int>(0, token);

            GreetingsEntities.Person document;
            document = await _serializer.FromJsonAsync<GreetingsEntities.Person>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }

    }

    // END: LightweightPersonSelector890595856
    
    
    // START: IdentityMapPersonSelector890595856
    public class IdentityMapPersonSelector890595856 : Marten.Internal.CodeGeneration.DocumentSelectorWithIdentityMap<GreetingsEntities.Person, int>, Marten.Linq.Selectors.ISelector<GreetingsEntities.Person>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public IdentityMapPersonSelector890595856(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public GreetingsEntities.Person Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<int>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            GreetingsEntities.Person document;
            document = _serializer.FromJson<GreetingsEntities.Person>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }


        public async System.Threading.Tasks.Task<GreetingsEntities.Person> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<int>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            GreetingsEntities.Person document;
            document = await _serializer.FromJsonAsync<GreetingsEntities.Person>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }

    }

    // END: IdentityMapPersonSelector890595856
    
    
    // START: DirtyTrackingPersonSelector890595856
    public class DirtyTrackingPersonSelector890595856 : Marten.Internal.CodeGeneration.DocumentSelectorWithDirtyChecking<GreetingsEntities.Person, int>, Marten.Linq.Selectors.ISelector<GreetingsEntities.Person>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public DirtyTrackingPersonSelector890595856(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public GreetingsEntities.Person Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<int>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            GreetingsEntities.Person document;
            document = _serializer.FromJson<GreetingsEntities.Person>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }


        public async System.Threading.Tasks.Task<GreetingsEntities.Person> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<int>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            GreetingsEntities.Person document;
            document = await _serializer.FromJsonAsync<GreetingsEntities.Person>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }

    }

    // END: DirtyTrackingPersonSelector890595856
    
    
    // START: QueryOnlyPersonDocumentStorage890595856
    public class QueryOnlyPersonDocumentStorage890595856 : Marten.Internal.Storage.QueryOnlyDocumentStorage<GreetingsEntities.Person, int>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public QueryOnlyPersonDocumentStorage890595856(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override int AssignIdentity(GreetingsEntities.Person document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id <= 0) _setter(document, database.Sequences.SequenceFor(typeof(GreetingsEntities.Person)).NextInt());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(GreetingsEntities.Person document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdatePersonOperation890595856
            (
                document, Identity(document),
                session.Versions.ForType<GreetingsEntities.Person, int>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(GreetingsEntities.Person document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertPersonOperation890595856
            (
                document, Identity(document),
                session.Versions.ForType<GreetingsEntities.Person, int>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(GreetingsEntities.Person document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertPersonOperation890595856
            (
                document, Identity(document),
                session.Versions.ForType<GreetingsEntities.Person, int>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(GreetingsEntities.Person document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override int Identity(GreetingsEntities.Person document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.QueryOnlyPersonSelector890595856(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(int id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.Int32[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids);
        }

    }

    // END: QueryOnlyPersonDocumentStorage890595856
    
    
    // START: LightweightPersonDocumentStorage890595856
    public class LightweightPersonDocumentStorage890595856 : Marten.Internal.Storage.LightweightDocumentStorage<GreetingsEntities.Person, int>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public LightweightPersonDocumentStorage890595856(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override int AssignIdentity(GreetingsEntities.Person document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id <= 0) _setter(document, database.Sequences.SequenceFor(typeof(GreetingsEntities.Person)).NextInt());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(GreetingsEntities.Person document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdatePersonOperation890595856
            (
                document, Identity(document),
                session.Versions.ForType<GreetingsEntities.Person, int>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(GreetingsEntities.Person document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertPersonOperation890595856
            (
                document, Identity(document),
                session.Versions.ForType<GreetingsEntities.Person, int>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(GreetingsEntities.Person document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertPersonOperation890595856
            (
                document, Identity(document),
                session.Versions.ForType<GreetingsEntities.Person, int>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(GreetingsEntities.Person document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override int Identity(GreetingsEntities.Person document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.LightweightPersonSelector890595856(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(int id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.Int32[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids);
        }

    }

    // END: LightweightPersonDocumentStorage890595856
    
    
    // START: IdentityMapPersonDocumentStorage890595856
    public class IdentityMapPersonDocumentStorage890595856 : Marten.Internal.Storage.IdentityMapDocumentStorage<GreetingsEntities.Person, int>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public IdentityMapPersonDocumentStorage890595856(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override int AssignIdentity(GreetingsEntities.Person document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id <= 0) _setter(document, database.Sequences.SequenceFor(typeof(GreetingsEntities.Person)).NextInt());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(GreetingsEntities.Person document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdatePersonOperation890595856
            (
                document, Identity(document),
                session.Versions.ForType<GreetingsEntities.Person, int>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(GreetingsEntities.Person document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertPersonOperation890595856
            (
                document, Identity(document),
                session.Versions.ForType<GreetingsEntities.Person, int>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(GreetingsEntities.Person document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertPersonOperation890595856
            (
                document, Identity(document),
                session.Versions.ForType<GreetingsEntities.Person, int>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(GreetingsEntities.Person document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override int Identity(GreetingsEntities.Person document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.IdentityMapPersonSelector890595856(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(int id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.Int32[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids);
        }

    }

    // END: IdentityMapPersonDocumentStorage890595856
    
    
    // START: DirtyTrackingPersonDocumentStorage890595856
    public class DirtyTrackingPersonDocumentStorage890595856 : Marten.Internal.Storage.DirtyCheckedDocumentStorage<GreetingsEntities.Person, int>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public DirtyTrackingPersonDocumentStorage890595856(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override int AssignIdentity(GreetingsEntities.Person document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id <= 0) _setter(document, database.Sequences.SequenceFor(typeof(GreetingsEntities.Person)).NextInt());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(GreetingsEntities.Person document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdatePersonOperation890595856
            (
                document, Identity(document),
                session.Versions.ForType<GreetingsEntities.Person, int>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(GreetingsEntities.Person document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertPersonOperation890595856
            (
                document, Identity(document),
                session.Versions.ForType<GreetingsEntities.Person, int>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(GreetingsEntities.Person document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertPersonOperation890595856
            (
                document, Identity(document),
                session.Versions.ForType<GreetingsEntities.Person, int>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(GreetingsEntities.Person document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override int Identity(GreetingsEntities.Person document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.DirtyTrackingPersonSelector890595856(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(int id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.Int32[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids);
        }

    }

    // END: DirtyTrackingPersonDocumentStorage890595856
    
    
    // START: PersonBulkLoader890595856
    public class PersonBulkLoader890595856 : Marten.Internal.CodeGeneration.BulkLoader<GreetingsEntities.Person, int>
    {
        private readonly Marten.Internal.Storage.IDocumentStorage<GreetingsEntities.Person, int> _storage;

        public PersonBulkLoader890595856(Marten.Internal.Storage.IDocumentStorage<GreetingsEntities.Person, int> storage) : base(storage)
        {
            _storage = storage;
        }


        public const string MAIN_LOADER_SQL = "COPY public.mt_doc_person(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string TEMP_LOADER_SQL = "COPY mt_doc_person_temp(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string COPY_NEW_DOCUMENTS_SQL = "insert into public.mt_doc_person (\"id\", \"data\", \"mt_version\", \"mt_dotnet_type\", \"mt_deleted\", \"mt_deleted_at\", mt_last_modified) (select mt_doc_person_temp.\"id\", mt_doc_person_temp.\"data\", mt_doc_person_temp.\"mt_version\", mt_doc_person_temp.\"mt_dotnet_type\", mt_doc_person_temp.\"mt_deleted\", mt_doc_person_temp.\"mt_deleted_at\", transaction_timestamp() from mt_doc_person_temp left join public.mt_doc_person on mt_doc_person_temp.id = public.mt_doc_person.id where public.mt_doc_person.id is null)";

        public const string OVERWRITE_SQL = "update public.mt_doc_person target SET data = source.data, mt_version = source.mt_version, mt_dotnet_type = source.mt_dotnet_type, mt_deleted = source.mt_deleted, mt_deleted_at = source.mt_deleted_at, mt_last_modified = transaction_timestamp() FROM mt_doc_person_temp source WHERE source.id = target.id";

        public const string CREATE_TEMP_TABLE_FOR_COPYING_SQL = "create temporary table mt_doc_person_temp as select * from public.mt_doc_person limit 0";


        public override void LoadRow(Npgsql.NpgsqlBinaryImporter writer, GreetingsEntities.Person document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer)
        {
            writer.Write(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar);
            writer.Write(document.Id, NpgsqlTypes.NpgsqlDbType.Integer);
            writer.Write(Marten.Schema.Identity.CombGuidIdGeneration.NewGuid(), NpgsqlTypes.NpgsqlDbType.Uuid);
            writer.Write(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb);
        }


        public override async System.Threading.Tasks.Task LoadRowAsync(Npgsql.NpgsqlBinaryImporter writer, GreetingsEntities.Person document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer, System.Threading.CancellationToken cancellation)
        {
            await writer.WriteAsync(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar, cancellation);
            await writer.WriteAsync(document.Id, NpgsqlTypes.NpgsqlDbType.Integer, cancellation);
            await writer.WriteAsync(Marten.Schema.Identity.CombGuidIdGeneration.NewGuid(), NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            await writer.WriteAsync(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb, cancellation);
        }


        public override string MainLoaderSql()
        {
            return MAIN_LOADER_SQL;
        }


        public override string TempLoaderSql()
        {
            return TEMP_LOADER_SQL;
        }


        public override string CreateTempTableForCopying()
        {
            return CREATE_TEMP_TABLE_FOR_COPYING_SQL;
        }


        public override string CopyNewDocumentsFromTempTable()
        {
            return COPY_NEW_DOCUMENTS_SQL;
        }


        public override string OverwriteDuplicatesFromTempTable()
        {
            return OVERWRITE_SQL;
        }

    }

    // END: PersonBulkLoader890595856
    
    
    // START: PersonProvider890595856
    public class PersonProvider890595856 : Marten.Internal.Storage.DocumentProvider<GreetingsEntities.Person>
    {
        private readonly Marten.Schema.DocumentMapping _mapping;

        public PersonProvider890595856(Marten.Schema.DocumentMapping mapping) : base(new PersonBulkLoader890595856(new QueryOnlyPersonDocumentStorage890595856(mapping)), new QueryOnlyPersonDocumentStorage890595856(mapping), new LightweightPersonDocumentStorage890595856(mapping), new IdentityMapPersonDocumentStorage890595856(mapping), new DirtyTrackingPersonDocumentStorage890595856(mapping))
        {
            _mapping = mapping;
        }


    }

    // END: PersonProvider890595856
    
    
}

