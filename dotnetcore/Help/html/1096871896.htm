<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"[]>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta name="save" content="history" />
    <title>paramore.brighter.commandprocessor Namespace</title>
    <link rel="stylesheet" type="text/css" href="../styles/lightweight.css" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt" />
    <link rel="stylesheet" type="text/css" href="../styles/lw-code.css" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt" />
    <script type="text/javascript" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt" src="../scripts/languageSelector.js"> </script>
    <meta name="container" content="paramore.brighter.commandprocessor" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt" />
    <meta name="file" content="1096871896" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt" />
    <meta name="guid" content="1096871896" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt" />
    <xml xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt">
      <MSHelp:Attr Name="AssetID" Value="N:paramore.brighter.commandprocessor" />
      <MSHelp:TOCTitle Title="paramore.brighter.commandprocessor Namespace" />
      <MSHelp:RLTitle Title="paramore.brighter.commandprocessor Namespace ()" />
      <MSHelp:Keyword Index="A" Term="N:paramore.brighter.commandprocessor" />
      <MSHelp:Keyword Index="A" Term="frlrfparamorebrightercommandprocessor" />
      <MSHelp:Keyword Index="K" Term="paramore.brighter.commandprocessor namespace" />
      <MSHelp:Keyword Index="F" Term="paramore.brighter.commandprocessor" />
      <MSHelp:Attr Name="HelpPriority" Value="1" />
      <MSHelp:Attr Name="DevLang" Value="CSharp" />
      <MSHelp:Attr Name="DevLang" Value="VB" />
      <MSHelp:Attr Name="Locale" Value="en-us" />
      <MSHelp:Attr Name="TopicType" Value="kbSyntax" />
      <MSHelp:Attr Name="TopicType" Value="apiref" />
    </xml>
    <link type="text/css" rel="stylesheet" href="../styles/highlight.css" />
  </head>
  <body>
    <div class="contentPlaceHolder" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt">
      <div class="content">
        <div class="topicContainer">
          <div class="topic">
            <p class="majorTitle" />
            <h1 class="title">paramore.brighter.commandprocessor Namespace</h1>
            <div id="mainSection">
              <div id="mainBody">
                <div class="LW_CollapsibleArea_Container">
                  <div class="LW_CollapsibleArea_TitleDiv">
                    <h2 class="LW_CollapsibleArea_Title">Classes</h2>
                    <div class="LW_CollapsibleArea_HrDiv">
                      <hr class="LW_CollapsibleArea_Hr" />
                    </div>
                  </div>
                  <a id="classSection">
                    <!---->
                  </a>
                  <table id="typeList" class="members">
                    <tr>
                      <th class="iconColumn">
           
       </th>
                      <th class="nameColumn">Class</th>
                      <th class="descriptionColumn">Description</th>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                      </td>
                      <td>
                        <a href="400767434.htm">ChannelFailureException</a>
                      </td>
                      <td>
                        <div class="summary">
   We raise a ChannelFailureException when we are unable to communicate with the work queue channel.
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                      </td>
                      <td>
                        <a href="373543693.htm">ChannelName</a>
                      </td>
                      <td>
                        <div class="summary">
   The name of a channel used to wrap communication with a Broker
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                      </td>
                      <td>
                        <a href="1650404514.htm">Command</a>
                      </td>
                      <td>
                        <div class="summary">
   A command is an imperative instruction to do something. We expect only one receiver of a command because it is point-to-point
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                      </td>
                      <td>
                        <a href="1551909888.htm">CommandProcessor</a>
                      </td>
                      <td>
                        <div class="summary">
   Class CommandProcessor.
   Implements both the <a href="http://www.hillside.net/plop/plop2001/accepted_submissions/PLoP2001/bdupireandebfernandez0/PLoP2001_bdupireandebfernandez0_1.pdf">Command Dispatcher</a>
   and <a href="http://wiki.hsr.ch/APF/files/CommandProcessor.pdf">Command Processor</a> Design Patterns
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                      </td>
                      <td>
                        <a href="1998769638.htm">CommandProcessorBuilder</a>
                      </td>
                      <td>
                        <div class="summary">
   Class CommandProcessorBuilder.
   Provides a fluent interface to construct a <a href="1551909888.htm">CommandProcessor</a>. We need to identify the following dependencies in order to create a <a href="1551909888.htm">CommandProcessor</a><ul><li>
               A <a href="1511288919.htm">HandlerConfiguration</a> containing a <a href="5116153.htm">IAmASubscriberRegistry</a> and a <a href="38136503.htm">IAmAHandlerFactory</a>. You can use <a href="51813318.htm">SubscriberRegistry</a>
               to provide the <a href="5116153.htm">IAmASubscriberRegistry</a> but you need to implement your own  <a href="38136503.htm">IAmAHandlerFactory</a>, for example using your preferred Inversion of Control
               (IoC) container
           </li><li>
               A <a href="560753741.htm">IAmAPolicyRegistry</a> containing a list of policies that you want to be accessible to the <a href="1551909888.htm">CommandProcessor</a>. You can use
               <a href="1110601651.htm">PolicyRegistry</a> to provide the <a href="560753741.htm">IAmAPolicyRegistry</a>. Policies are expected to be Polly <span class="nolink">[!:https://github.com/michael-wolfenden/Polly]</span><span class="nolink">Policy</span> references.
               If you do not need any policies around quality of service (QoS) concerns - you do not have Work Queues and/or do not intend to use Polly Policies for
               QoS concerns - you can use <span class="nolink">[NoPolicy]</span> to indicate you do not need them.
           </li><li>
               A <a href="1611365628.htm">ILog</a> that is the logger to use for diagnostic feedback. <a href="1611365628.htm">ILog</a> is defined by
               LibLog <span class="nolink">[!:hhttps://github.com/damianh/LibLog]</span> as an abstraction over logging frameworks and allows us to support your
               preferred logging framework
           </li><li>
               A <a href="1221912875.htm">MessagingConfiguration</a> describing how you want to configure Task Queues for the <a href="1551909888.htm">CommandProcessor</a>. We store messages in a <span class="nolink">[IAmAMessageStore]</span>
               for later replay (in case we need to compensate by trying a message again). We send messages to a Task Queue via a <a href="1740782637.htm">IAmAMessageProducer</a> and we  want to know how
               to map the <a href="1129012828.htm">IRequest</a> (<a href="1650404514.htm">Command</a> or <a href="987625519.htm">Event</a>) to a <a href="1521002829.htm">Message</a> using a <a href="1546792997.htm">IAmAMessageMapper</a> using
               an <a href="343614780.htm">IAmAMessageMapperRegistry</a>. You can use the default <a href="1700995936.htm">MessageMapperRegistry</a> to register the association. You need to
               provide a <a href="1091437229.htm">IAmAMessageMapperFactory</a> so that we can create instances of your  <a href="1546792997.htm">IAmAMessageMapper</a>. You need to provide a <a href="1091437229.htm">IAmAMessageMapperFactory</a>
               when using <a href="1700995936.htm">MessageMapperRegistry</a> so that we can create instances of your mapper.
               If you don't want to use Task Queues i.e. you are just using a synchronous Command Dispatcher approach, then use the <span class="nolink">[NoTaskQueues]</span> method to indicate your intent
           </li><li>
               Finally we need to provide a <a href="2110624453.htm">IRequestContext</a> to provide context to requests handlers in the pipeline that can be used to pass information without using the message
               that initiated the pipeline. We instantiate this via a user-provided <a href="519316750.htm">IAmARequestContextFactory</a>. The default approach is use <a href="2114541437.htm">InMemoryRequestContextFactory</a>
               to provide a <a href="1883414501.htm">RequestContext</a> unless you have a requirement to replace this, such as in testing.
           </li></ul></div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                      </td>
                      <td>
                        <a href="372376132.htm">ConfigurationException</a>
                      </td>
                      <td>
                        <div class="summary">
   A ConfigurationException, thrown when we cannot configure the CommandProcessor.
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                      </td>
                      <td>
                        <a href="987625519.htm">Event</a>
                      </td>
                      <td>
                        <div class="summary">
   Class Event
   An event is an indicator to interested parties that 'something has happened'. We expect zero to many receivers as it is one-to-many communication i.e. publish-subscribe
   An event is usually fire-and-forget, because we do not know it is received.
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                      </td>
                      <td>
                        <a href="1511288919.htm">HandlerConfiguration</a>
                      </td>
                      <td>
                        <div class="summary">
   Class HandlerConfiguration
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                      </td>
                      <td>
                        <a href="562476479.htm">HandlerName</a>
                      </td>
                      <td>
                        <div class="summary">
   Strongly typed class for the name of a handler
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                      </td>
                      <td>
                        <a href="2114541437.htm">InMemoryRequestContextFactory</a>
                      </td>
                      <td>
                        <div class="summary">
   Class InMemoryRequestContextFactory
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                      </td>
                      <td>
                        <a href="1793738522.htm">InputChannel</a>
                      </td>
                      <td>
                        <div class="summary">
   Class InputChannel.
   An <a href="516061677.htm">IAmAChannel</a> for reading messages from a <a href="http://parlab.eecs.berkeley.edu/wiki/_media/patterns/taskqueue.pdf">Task Queue</a>
   and acknowledging receipt of those messages
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                      </td>
                      <td>
                        <a href="1521002829.htm">Message</a>
                      </td>
                      <td>
                        <div class="summary">
   A message sent over <a href="http://parlab.eecs.berkeley.edu/wiki/_media/patterns/taskqueue.pdf">Task Queue</a> for asynchronous processing of a <a href="1650404514.htm">Command</a>
   or <a href="987625519.htm">Event</a></div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                      </td>
                      <td>
                        <a href="1054027623.htm">MessageBody</a>
                      </td>
                      <td>
                        <div class="summary">
   Class MessageBody
   The body of a <a href="1521002829.htm">Message</a></div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                      </td>
                      <td>
                        <a href="2129759038.htm">MessageFactory</a>
                      </td>
                      <td>
                        <div class="summary">
   Used to create off-the-shelf messages: empty, and quit, used to control processing.
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                      </td>
                      <td>
                        <a href="110155181.htm">MessageHeader</a>
                      </td>
                      <td>
                        <div class="summary">
   Class MessageHeader
   The header for a <a href="1521002829.htm">Message</a></div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                      </td>
                      <td>
                        <a href="1700995936.htm">MessageMapperRegistry</a>
                      </td>
                      <td>
                        <div class="summary">
   Class MessageMapperRegistry
   In order to use a <a href="http://parlab.eecs.berkeley.edu/wiki/_media/patterns/taskqueue.pdf">Task Queue</a> approach we require you to provide
   a <a href="1546792997.htm">IAmAMessageMapper</a> to map between <a href="1650404514.htm">Command</a> or <a href="987625519.htm">Event</a> and a <a href="1521002829.htm">Message</a>
   registered via <a href="343614780.htm">IAmAMessageMapperRegistry</a>
   This is a default implementation of<a href="343614780.htm">IAmAMessageMapperRegistry</a> which is suitable for most usages, the interface is provided mainly for testing
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                      </td>
                      <td>
                        <a href="1221912875.htm">MessagingConfiguration</a>
                      </td>
                      <td>
                        <div class="summary">
   Class MessagingConfiguration.
   Used to set the components of a work queue solution
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                      </td>
                      <td>
                        <a href="1110601651.htm">PolicyRegistry</a>
                      </td>
                      <td>
                        <div class="summary">
   Class PolicyRegistry
   We use <a href="">Polly</a> policies to provide Quality of Service.
   By default we provide them for a <a href="http://parlab.eecs.berkeley.edu/wiki/_media/patterns/taskqueue.pdf">Task Queue</a> and require you to register policies with
   the policy names of:
   <ul><li>CommandProcessor.RETRYPOLICY</li><li>CommandProcessor.CIRCUTIBREAKER</li></ul>
   to respectively determine retry attempts for putting onto and popping off the queue and for breaking the circuit if we cannot
   You can register additional policies (or reuse these) to provide QoS for individual handlers. The <span class="nolink">[UsePolicyAttribute]</span> and <span class="nolink">[ExceptionPolicyandler]</span>
   provide an easy way to do this using the policies that you add to this registry
   This is a default implementation of <a href="560753741.htm">IAmAPolicyRegistry</a> and is suitable for most purposes excluding testing
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                      </td>
                      <td>
                        <a href="1883414501.htm">RequestContext</a>
                      </td>
                      <td>
                        <div class="summary">
   Class RequestContext
   Any pipeline has a request context that allows you to flow information between instances of <a href="820491368.htm">IHandleRequests</a>
   The default in-memory <a href="1883414501.htm">RequestContext</a> created by an <a href="2114541437.htm">InMemoryRequestContextFactory</a> is suitable for most purposes
   and this interface is mainly provided for testing
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                      </td>
                      <td>
                        <a href="827179800.htm">RequestHandler<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span><span class="fs">&lt;'</span></span>TRequest<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span><span class="fs">&gt;</span></span></a>
                      </td>
                      <td>
                        <div class="summary">
   Class RequestHandler.
   A target of the <a href="1551909888.htm">CommandProcessor</a> either as the target of the Command Dispatcher to provide the domain logic required to handle the <a href="1650404514.htm">Command</a>
   or <a href="987625519.htm">Event</a> or as an orthogonal handler used as part of the Command Processor pipeline.
   We recommend deriving your concrete handler from <a href="827179800.htm">RequestHandler<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span><span class="fs">&lt;'</span></span>TRequest<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span><span class="fs">&gt;</span></span></a> instead of implementing the interface as it provides boilerplate
   code for calling the next handler in sequence in the pipeline and describing the path
   By default the <span class="nolink">[Name]</span> is based of the Type name, and the <span class="nolink">[DescribePath]</span> adds that <span class="nolink">[Name]</span> into the <a href="857022689.htm">IAmAPipelineTracer</a> list.
   By default the <span class="nolink">[Handle]</span> method will log the calls and forward the call to the handler's <span class="nolink">[Successor]</span>. You should call
   <span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" tabindex="0"></span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">base</span>.Handle(command);</pre></div></span>
   within your derived class handler to forward the call to the next handler in the chain.
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                      </td>
                      <td>
                        <a href="778523496.htm">RequestHandlerAttribute</a>
                      </td>
                      <td>
                        <div class="summary">
   Class RequestHandlerAttribute.
   To satisfy orthogonal concerns it is possible to create a pipeline of <a href="820491368.htm">IHandleRequests</a> handlers. The 'target' handler should handle the domain
   logic, the other handlers in the pipeline should handle Quality of Service concerns or similar orthogonal concerns. We use an approach of attributing the <span class="nolink">[IHandleRequests{T}.Handle]</span>
   method to indicate the other handlers in the pipeline that handle orthogonal concerns. This approach is preferred over fluent-pipeline configuration
   because it allows you to easily see orthogonal concerns within the context of the target handler. In this sense Brighter is 'opinionated' about approach.
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                      </td>
                      <td>
                        <a href="1422908553.htm">RequestLoggingAttribute</a>
                      </td>
                      <td>
                        <div class="summary">
   Class RequestLoggingAttribute.
   Provides logging of a request using the <a href="1395923284.htm">RequestLoggingHandler<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span><span class="fs">&lt;'</span></span>TRequest<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span><span class="fs">&gt;</span></span></a></div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                      </td>
                      <td>
                        <a href="1395923284.htm">RequestLoggingHandler<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span><span class="fs">&lt;'</span></span>TRequest<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span><span class="fs">&gt;</span></span></a>
                      </td>
                      <td>
                        <div class="summary">
   Class RequestLoggingHandler.
   Logs a request to a <a href="820491368.htm">IHandleRequests</a> handler using the Common.Logging logger registered with the <a href="1551909888.htm">CommandProcessor</a>
   The log shows the original <a href="1129012828.htm">IRequest</a> properties as well as the timer handling.
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                      </td>
                      <td>
                        <a href="51813318.htm">SubscriberRegistry</a>
                      </td>
                      <td>
                        <div class="summary">
   Class SubscriberRegistry.
   In order to map an <a href="820491368.htm">IHandleRequests</a> to a <a href="1650404514.htm">Command</a> or an <a href="987625519.htm">Event</a> we need you to register the association
   via the <a href="51813318.htm">SubscriberRegistry</a>
   The default implementation of <a href="51813318.htm">SubscriberRegistry</a> is usable in most instances and this is provided for testing
   </div>
                      </td>
                    </tr>
                  </table>
                </div>
                <div class="LW_CollapsibleArea_Container">
                  <div class="LW_CollapsibleArea_TitleDiv">
                    <h2 class="LW_CollapsibleArea_Title">Interfaces</h2>
                    <div class="LW_CollapsibleArea_HrDiv">
                      <hr class="LW_CollapsibleArea_Hr" />
                    </div>
                  </div>
                  <a id="interfaceSection">
                    <!---->
                  </a>
                  <table id="typeList" class="members">
                    <tr>
                      <th class="iconColumn">
           
       </th>
                      <th class="nameColumn">Interface</th>
                      <th class="descriptionColumn">Description</th>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="516061677.htm">IAmAChannel</a>
                      </td>
                      <td>
                        <div class="summary">
   Interface IAmAChannel
   A channel is an abstraction for an <a href="http://en.wikipedia.org/wiki/OSI_model">OSI model</a> Application Layer used to provide support for a
   <a href="http://parlab.eecs.berkeley.edu/wiki/_media/patterns/taskqueue.pdf">Task Queue</a> pattern of dispatch and processing
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="1243010384.htm">IAmAChannelFactory</a>
                      </td>
                      <td>
                        <div class="summary">
   Interface IAmAChannelFactory
   Creates instances of <a href="516061677.htm">IAmAChannel</a>channels. We provide support for some Application Layer channels, and provide factories for those:
   <ul><li>AMQP</li><li>RestML</li></ul>
   If you need to support other Application Layer protocols, please consider issuing a Pull request for your implementation
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="1824396890.htm">IAmACommandProcessor</a>
                      </td>
                      <td>
                        <div class="summary">
   Interface IAmACommandProcessor
   Paramore.Brighter.CommandProcessor provides the default implementation of this interface <a href="1551909888.htm">CommandProcessor</a> and it is unlikely you need
   to override this for anything other than testing purposes. The usual need is that in a <a href="827179800.htm">RequestHandler<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span><span class="fs">&lt;'</span></span>TRequest<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span><span class="fs">&gt;</span></span></a> you intend to publish an
   <a href="987625519.htm">Event</a> to indicate the handler has completed to other components. In this case your tests should only verify that the correct
   event was raised by listening to <span class="nolink">[Publish{T}]</span> calls on this interface, using a mocking framework of your choice or bespoke
   Test Double.
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="1354315642.htm">IAmACommandProcessorBuilder</a>
                      </td>
                      <td>
                        <div class="summary">
   Interface IAmACommandProcessorBuilder{CC2D43FA-BBC4-448A-9D0B-7B57ADF2655C}
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="38136503.htm">IAmAHandlerFactory</a>
                      </td>
                      <td>
                        <div class="summary">
   Interface IAmAHandlerFactory
   We do not know how to create instances of <a href="820491368.htm">IHandleRequests</a> implemented by your application, but need to create instances to instantiate a pipeline.
   To achieve this we require clients of the Paramore.Brighter.CommandProcessor library need to implement <a href="38136503.htm">IAmAHandlerFactory</a> to provide
   instances of their <a href="820491368.htm">IHandleRequests</a> types. You need to provide a Handler Factory to support all <a href="820491368.htm">IHandleRequests</a> registered
   with <a href="5116153.htm">IAmASubscriberRegistry</a>. Typically you would use an IoC container to implement the Handler Factory.
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="368215074.htm">IAmALifetime</a>
                      </td>
                      <td>
                        <div class="summary">
   Interface IAmALifetime
   Used to manage the lifetime of objects created for the request handling pipeline
   <span class="nolink">LifetimeScope</span> for default implementation.
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="784626765.htm">IAmAMessageConsumer</a>
                      </td>
                      <td>
                        <div class="summary">
   Interface IAmAReceiveMessageGateway
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="1141514342.htm">IAmAMessageConsumerFactory</a>
                      </td>
                      <td>
                        <div class="summary">
   Interface IAmAMessageConsumerFactory
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="1546792997.htm">IAmAMessageMapper</a>
                      </td>
                      <td>
                        <div class="summary">
   Interface IAmAMessageMapper
   Map between a <a href="1650404514.htm">Command</a> or an <a href="987625519.htm">Event</a> and a <a href="1521002829.htm">Message</a>. You must implement this for each Command or Message you intend to send over
   a <a href="http://parlab.eecs.berkeley.edu/wiki/_media/patterns/taskqueue.pdf">Task Queue</a></div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="776411452.htm">IAmAMessageMapper<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span><span class="fs">&lt;'</span></span>TRequest<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span><span class="fs">&gt;</span></span></a>
                      </td>
                      <td>
                        <div class="summary">
   Interface IAmAMessageMapper
   Map between a <a href="1650404514.htm">Command</a> or an <a href="987625519.htm">Event</a> and a <a href="1521002829.htm">Message</a>. You must implement this for each Command or Message you intend to send over
   a <a href="http://parlab.eecs.berkeley.edu/wiki/_media/patterns/taskqueue.pdf">Task Queue</a></div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="1091437229.htm">IAmAMessageMapperFactory</a>
                      </td>
                      <td>
                        <div class="summary">
   Interface IAmAMessageMapperFactory
   In order to use a <a href="http://parlab.eecs.berkeley.edu/wiki/_media/patterns/taskqueue.pdf">Task Queue</a> approach we require you to provide
   a <a href="1546792997.htm">IAmAMessageMapper</a> to map between <a href="1650404514.htm">Command</a> or <a href="987625519.htm">Event</a> and a <a href="1521002829.htm">Message</a> registered via <a href="343614780.htm">IAmAMessageMapperRegistry</a>
   We then call the instance of the factory which the client provides to create instances of that <a href="1546792997.htm">IAmAMessageMapper</a>. You will need to implement the
   <a href="1091437229.htm">IAmAMessageMapperFactory</a> to use the Task Queue approach, and provide the instance of your mapper on request. Typically you might use an IoC container
   to implement this.
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="343614780.htm">IAmAMessageMapperRegistry</a>
                      </td>
                      <td>
                        <div class="summary">
   Interface IAmAMessageMapperRegistry
   In order to use a <a href="http://parlab.eecs.berkeley.edu/wiki/_media/patterns/taskqueue.pdf">Task Queue</a> approach we require you to provide
   a <a href="1546792997.htm">IAmAMessageMapper</a> to map between <a href="1650404514.htm">Command</a> or <a href="987625519.htm">Event</a> and a <a href="1521002829.htm">Message</a>
   registered via <a href="343614780.htm">IAmAMessageMapperRegistry</a>
   The default implementation<a href="1700995936.htm">MessageMapperRegistry</a> is suitable for most purposes and the interface is provided for testing
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="1740782637.htm">IAmAMessageProducer</a>
                      </td>
                      <td>
                        <div class="summary">
   Interface IAmASendMessageGateway
   Abstracts away the Application Layer used to push messages onto a <a href="http://parlab.eecs.berkeley.edu/wiki/_media/patterns/taskqueue.pdf">Task Queue</a>
   Usually clients do not need to instantiate as access is via an <a href="516061677.htm">IAmAChannel</a> derived class.
   We provide the following default gateway applications
   <ul><li>AMQP</li><li>RESTML</li></ul></div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="1658401338.htm">IAmAMessageStore<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span><span class="fs">&lt;'</span></span>T<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span><span class="fs">&gt;</span></span></a>
                      </td>
                      <td>
                        <div class="summary">
   Interface IAmAMessageStore
   In order to provide reliability for messages sent over a <a href="http://parlab.eecs.berkeley.edu/wiki/_media/patterns/taskqueue.pdf">Task Queue</a> we
   store the message into a Message Store to allow later replay of those messages in the event of failure. We automatically copy any posted message into the store
   We provide an implementation of <a href="1658401338.htm">IAmAMessageStore<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span><span class="fs">&lt;'</span></span>T<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span><span class="fs">&gt;</span></span></a> for Raven <span class="nolink">[RavenMessageStore]</span>. Clients using other message stores should consider a Pull
   request
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="1186711029.htm">IAmAnInputChannel</a>
                      </td>
                      <td>
                        <div class="summary">
   Interface IAmAnInputChannel
   An <a href="516061677.htm">IAmAChannel</a> for reading messages from a <a href="http://parlab.eecs.berkeley.edu/wiki/_media/patterns/taskqueue.pdf">Task Queue</a>
   and acknowledging receipt of those messages
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="1532929562.htm">IAmAnOutputChannel</a>
                      </td>
                      <td>
                        <div class="summary">
   Interface IAmAnOutputChannel
   An <a href="516061677.htm">IAmAChannel</a> for pushing messages onto a <a href="http://parlab.eecs.berkeley.edu/wiki/_media/patterns/taskqueue.pdf">Task Queue</a></div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="857022689.htm">IAmAPipelineTracer</a>
                      </td>
                      <td>
                        <div class="summary">
   Interface IAmAPipelineTracer
   It can be useful to understand what <a href="820491368.htm">IHandleRequests</a> will be called to satisfy a request and their order
   The default implementation of <span class="nolink">PipelineTracer</span> can be used in most instances
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="560753741.htm">IAmAPolicyRegistry</a>
                      </td>
                      <td>
                        <div class="summary">
   Interface IAmAPolicyRegistry
   We use <a href="">Polly</a> policies to provide Quality of Service.
   By default we provide them for a <a href="http://parlab.eecs.berkeley.edu/wiki/_media/patterns/taskqueue.pdf">Task Queue</a> and require you to register policies with
   the policy names of:
   <ul><li>CommandProcessor.RETRYPOLICY</li><li>CommandProcessor.CIRCUTIBREAKER</li></ul>
   to respectively determine retry attempts for putting onto and popping off the queue and for breaking the circuit if we cannot
   You can register additional policies (or reuse these) to provide QoS for individual handlers. The <span class="nolink">[UsePolicyAttribute]</span> and <span class="nolink">[ExceptionPolicyandler]</span>
   provide an easy way to do this using the policies that you add to this registry
   The default implementation of <a href="1110601651.htm">PolicyRegistry</a> is suitable for most purposes and the interface is provided for testing.0vjy
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="519316750.htm">IAmARequestContextFactory</a>
                      </td>
                      <td>
                        <div class="summary">
   Interface IAmARequestContextFactory
   Any pipeline has a request context that allows you to flow information between instances of <a href="820491368.htm">IHandleRequests</a>
   The default <a href="2114541437.htm">InMemoryRequestContextFactory</a> is usable for most cases, and this interface mainly supports testing
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="5116153.htm">IAmASubscriberRegistry</a>
                      </td>
                      <td>
                        <div class="summary">
   Interface IAmASubscriberRegistry
   In order to map an <a href="820491368.htm">IHandleRequests</a> to a <a href="1650404514.htm">Command</a> or an <a href="987625519.htm">Event</a> we need you to register the association
   via the <a href="51813318.htm">SubscriberRegistry</a>
   The default implementation of <a href="51813318.htm">SubscriberRegistry</a> is usable in most instances and this is provided for testing
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="776136811.htm">ICommand</a>
                      </td>
                      <td>
                        <div class="summary">
   Interface ICommand
   A command is an imperative instruction to do something. We expect only one receiver of a command because it is point-to-point
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="820491368.htm">IHandleRequests</a>
                      </td>
                      <td>
                        <div class="summary">
   Interface IHandleRequests
   A target of the <a href="1551909888.htm">CommandProcessor</a> either as the target of the Command Dispatcher to provide the domain logic required to handle the <a href="1650404514.htm">Command</a>
   or <a href="987625519.htm">Event</a> or as an orthogonal handler used as part of the Command Processor pipeline.
   We recommend deriving your concrete handler from <a href="827179800.htm">RequestHandler<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span><span class="fs">&lt;'</span></span>TRequest<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span><span class="fs">&gt;</span></span></a> instead of implementing the interface as it provides boilerplate
   code for calling the next handler in sequence in the pipeline and describing the path
   The <a href="820491368.htm">IHandleRequests</a> interface contains a contract not dependant on the <a href="1129012828.htm">IRequest</a> and is useful when you need to deal with a handler
   without knowing the specific <a href="1129012828.htm">IRequest</a> type, but most implementations should use <a href="1582137372.htm">IHandleRequests<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span><span class="fs">&lt;'</span></span>TRequest<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span><span class="fs">&gt;</span></span></a> directly
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="1582137372.htm">IHandleRequests<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span><span class="fs">&lt;'</span></span>TRequest<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span><span class="fs">&gt;</span></span></a>
                      </td>
                      <td>
                        <div class="summary">
   Interface IHandleRequests
   A target of the <a href="1551909888.htm">CommandProcessor</a> either as the target of the Command Dispatcher to provide the domain logic required to handle the <a href="1650404514.htm">Command</a>
   or <a href="987625519.htm">Event</a> or as an orthogonal handler used as part of the Command Processor pipeline.
   We recommend deriving your concrete handler from <a href="827179800.htm">RequestHandler<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span><span class="fs">&lt;'</span></span>TRequest<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span><span class="fs">&gt;</span></span></a> instead of implementing the interface as it provides boilerplate
   code for calling the next handler in sequence in the pipeline and describing the path.
   It derives from <a href="820491368.htm">IHandleRequests</a> which provides functionality that is not dependant on <a href="1129012828.htm">IRequest</a>. This simplifies some tasks that do not know
   the specific type of the <a href="1129012828.htm">IRequest</a>
   Implementors should use on class to implement both <a href="1582137372.htm">IHandleRequests<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span><span class="fs">&lt;'</span></span>TRequest<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span><span class="fs">&gt;</span></span></a> and <a href="820491368.htm">IHandleRequests</a> as per <a href="827179800.htm">RequestHandler<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span><span class="fs">&lt;'</span></span>TRequest<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span><span class="fs">&gt;</span></span></a></div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="1278473238.htm">INeedAHandlers</a>
                      </td>
                      <td>
                        <div class="summary">
   Interface INeedAHandlers
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="2062042881.htm">INeedARequestContext</a>
                      </td>
                      <td>
                        <div class="summary">
   Interface INeedARequestContext{CC2D43FA-BBC4-448A-9D0B-7B57ADF2655C}
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="1061556090.htm">INeedLogging</a>
                      </td>
                      <td>
                        <div class="summary">
   Interface INeedLogging{CC2D43FA-BBC4-448A-9D0B-7B57ADF2655C}
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="967223715.htm">INeedMessaging</a>
                      </td>
                      <td>
                        <div class="summary">
   Interface INeedMessaging{CC2D43FA-BBC4-448A-9D0B-7B57ADF2655C}
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="844070412.htm">INeedPolicy</a>
                      </td>
                      <td>
                        <div class="summary">
   Interface INeedPolicy{CC2D43FA-BBC4-448A-9D0B-7B57ADF2655C}
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="1129012828.htm">IRequest</a>
                      </td>
                      <td>
                        <div class="summary">
   Interface IRequest
   Base class of <a href="1650404514.htm">Command</a> and <a href="987625519.htm">Event</a>. A request that can be handled by the Command Processor/Dispatcher
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                      </td>
                      <td>
                        <a href="2110624453.htm">IRequestContext</a>
                      </td>
                      <td>
                        <div class="summary">
   Any pipeline has a request context that allows you to flow information between instances of <a href="820491368.htm">IHandleRequests</a>
   The default in-memory <a href="1883414501.htm">RequestContext</a> created by an <a href="2114541437.htm">InMemoryRequestContextFactory</a> is suitable for most purposes
   and this interface is mainly provided for testing
   </div>
                      </td>
                    </tr>
                  </table>
                </div>
                <div class="LW_CollapsibleArea_Container">
                  <div class="LW_CollapsibleArea_TitleDiv">
                    <h2 class="LW_CollapsibleArea_Title">Enumerations</h2>
                    <div class="LW_CollapsibleArea_HrDiv">
                      <hr class="LW_CollapsibleArea_Hr" />
                    </div>
                  </div>
                  <a id="enumerationSection">
                    <!---->
                  </a>
                  <table id="typeList" class="members">
                    <tr>
                      <th class="iconColumn">
           
       </th>
                      <th class="nameColumn">Enumeration</th>
                      <th class="descriptionColumn">Description</th>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubenumeration.gif" alt="Public enumeration" title="Public enumeration" />
                      </td>
                      <td>
                        <a href="373712668.htm">HandlerTiming</a>
                      </td>
                      <td>
                        <div class="summary">
   Enum HandlerTiming
   The Subscriber Registry registers 'target' handlers for commands or events.
   A <a href="778523496.htm">RequestHandlerAttribute</a> identifies handlers to run in the pipeline with the target handler, to deal with 'orthogonal' concerns
   Those handlers can run either before or after the target handler, and the timing value indicates where they should run
   Note that handlers explicitly call the next handler in sequence, so 'child' handlers always run in the scope of their 'parent' handlers, which means
   that you can choose to only execute code in a 'parent' only after a 'child' handler has executed. So you can control order of operation by that approach
   and do not need to use an After handler for that.
   </div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <img src="../icons/pubenumeration.gif" alt="Public enumeration" title="Public enumeration" />
                      </td>
                      <td>
                        <a href="308548437.htm">MessageType</a>
                      </td>
                      <td>
                        <div class="summary">
   Enum MessageType
   The type of a message, used on the receiving side of a Task Queue to handle the message appropriately
   </div>
                      </td>
                    </tr>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="footer">
        <div id="footer" class="footerContainer">
          <div class="footerLogoContainer">
            <div style="margin-top:5px">
              <span class="customCopyrightFooter" />
            </div>
            <div style="margin-top:5px" class="copyrightFooter">Help File generated with GhostDoc</div>
            <div> </div>
          </div>
        </div>
      </div>
    </div>
  </body>
</html>